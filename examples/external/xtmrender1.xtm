;;; xtmrender1.xtm -- using the Extempore 3D rendering pipeline

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libGL, libglfw3, libassimp, libsoil

;;; Commentary:

;; the peppino model (and other Extempore "assets") are available from
;; https://github.com/extemporelang/extempore-assets

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(sys:load "libs/core/scheduler.xtm")

(run_main_event_loop)

(bind-val width i32 1024)
(bind-val height i32 768)

(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/assimp.xtm")

(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (rotate_matrix m (* .1 (i64tof frame)) 0.0 1.0 0.0)
    (translate_matrix m 0.0 -2.0 0.0)
    (xtm_draw_model (convert data XTMModel*) shader m v p)
    void))

(bind-func gl_render
  (lambda (model:XTMModel*)
    (if (null? model)
        (println "gl_render recieved null pointer for model - did you load the model successfully?")
        (begin (xtm_render null render:XTMRENDERCB null null (convert model i8*))
               void))))

(bind-val peppino XTMModel*
  (assimp_load_model (cstring (cat2 (String (sys_sharedir)) (String "/assets/models/")))
                     "peppino.dae" aiProcess_Triangulate))

(xtm_render_init
 (call-as-xtlang (glfw_get_framebuffer_width window))
 (call-as-xtlang (glfw_get_framebuffer_height window)))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (gl_render peppino)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...
(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
