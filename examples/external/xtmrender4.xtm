;; xtmrender.xtm
;;
;; using the default xtm OpenGL pipeline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; NOTES for BLENDER MODELS
;;
;; you can download the blender models from:
;;
;; http://extempore.moso.com.au/extras/peppino.blend
;; http://extempore.moso.com.au/extras/scene.blend
;; http://extempore.moso.com.au/extras/dome_cut.blend
;;
;; or use your own models ;)
;;
;; smooth shading ONLY so ...
;;
;; 1) Blender 2.6 models not supported yet
;; use Blender 2.5.
;;
;; 2) make sure model is smooth shaded in blender
;; then apply modifier (edge split) for any
;; meshes that you want flat shaded.
;;
;; 3) If your meshes have a strange black grainy
;; look then you'll need reverse the GL_FRONT/GL_BACK
;; face culling in the FIRST PASS of the render
;;
;; 4) You will probably need to do a rotation
;; of the model around the X axis.  It might be
;; easier to set this up in blender before export
;; (i.e. Y should be up not Z)
;;

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val FULLSCREEN i1 #f)

(bind-val width i32 1024)
(bind-val height i32 768)

;; (bind-val width i32 1920)
;; (bind-val height i32 1080)

(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (if FULLSCREEN
        (glfw_init_and_create_fullscreen_window 1)
        (glfw_init_and_create_interaction_window width height))))

(sys:load "libs/external/assimp.xtm")


(bind-func build_pyramid
  (lambda (size:float)
    (let ((dat:float* (salloc (* 3 12)))
          (height (sqrt (- (* size size) (* (* .5 size) (* .5 size)))))
          (hp (* height .5)) (hn (* height -.5))
          (n (* -0.5 size)) (p (* 0.5 size)))
      ;; 0  0. hp 0.
      ;; 1  p  hn p
      ;; 2  n  hn p
      ;; 3  0. hn n
      (pfill! dat
              p hn p n hn p 0. hp 0.  ;; 1 2 0
              0. hn n 0. hp 0. n hn p ;; 3 0 2
              n hn p p hn p 0. hn n   ;; 2 1 3
              p hn p 0. hp 0. 0. hn n ;; 1 0 3
              )
      (xtm_make_model (Str "pyramid") dat 12 1.0 0.0 1.0))))


;; for lights and cameras
(bind-func prerender:XTMRENDERCB
  (lambda (frame shader m v p data)
    (xtm_light_pos 1 0.0 5.0 25.0)
    (xtm_light_tgt 1 0.0 0.0 0.0) ;; was 2
    (xtm_light_up 1 0.0 1.0 0.0)
    (xtm_light_diffuse 1 1.0 0.9 0.7 1.0)
    (xtm_light_ambient 1 0.0 0.0 0.0 1.0)
    (xtm_light_specular 1 1.0 1.0 1.0 1.0)
    (xtm_light_power 1 30.0)
    (xtm_light_angle 1 60.0)

    (xtm_light_pos 2 10.0 30.0 25.0)
    (xtm_light_tgt 2 1.0 0.0 0.0) ;; was 2
    (xtm_light_up 2 0.0 1.0 0.0)
    (xtm_light_diffuse 2 1.0 0.3 0.6 1.0)
    (xtm_light_ambient 2 0.0 0.0 0.0 1.0)
    (xtm_light_specular 2 1.0 1.0 1.0 1.0)
    (xtm_light_power 2 90.0)
    (xtm_light_angle 2 60.0)

    (xtm_light_pos 3 -30.0 10.0 30.0)
    (xtm_light_tgt 3 0.0 0.0 -5.0)
    (xtm_light_up 3 0.0 1.0 0.0)
    (xtm_light_diffuse 3 0.3 1.0 0.6 1.0)
    (xtm_light_specular 3 1.0 1.0 1.0 1.0)
    (xtm_light_ambient 3 0.0 0.0 0.0 1.0)
    (xtm_light_power 3 100.0)
    (xtm_light_angle 3 60.0)

    (xtm_camera_pos 0.0 2.0 20.0)
    (xtm_camera_tgt 3.0 1.0 0.0)
    (xtm_camera_up 0.0 1.0 0.0)
    void
    ))

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (let ((nodes:XTMModel** (cast data XTMModel**)))
      (rotate_matrix m (* .00005 (i64tof (now))) 0.0 1.0 0.0)
      (scale_matrix m 1.5 1.5 1.5)
      (translate_matrix m 2.0 -2.9 0.0)
      ;; (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 0) shader m v p)
      (fill_identity_matrix m)
      ;; (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 1) shader m v p)
      (xtm_draw_model (pref nodes 2) shader m v p)
      (rotate_matrix m (* .00001 (i64tof (now))) 1.0 1.0 1.0)
      (translate_matrix m 1.0 5.5 -5.0)
      ;; (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 3) shader m v p)
      void)))

(bind-val StarTex Texture* (Texture (Str "assets/images/star_trans.png")))

(bind-val testVAO VAO* (VAO))

(bind-val ASPOINTS i1 #t)

;; trans is like render but generates no shadows
(bind-func trans:XTMRENDERCB
  (lambda (frame shader m v p data)

    (set! ASPOINTS #t)
    (fill_identity_matrix m)
    (rotate_matrix m (* .00002 (i64tof (now))) 1.0 1.0 1.0)
    (scale_matrix m 12.0 8.0 8.0)

    (shader_update_material:[void,ShaderProgram*,|4,float|,|4,float|,|4,float|,|4,float|,float]*
     shader
     (array 0.0 0.0 0.0 1.0)
     (array 1.0 1.0 1.0 0.5)
     (array 0.0 0.0 0.0 1.0)
     (array 0.0 0.0 0.0 1.0)
     1.0)
    (if ASPOINTS
        (begin
          (glDisable GL_DEPTH_TEST)
          (xtm_draw_vao testVAO shader m v p GL_POINTS #f 50.0 StarTex 1:i1)
          (glEnable GL_DEPTH_TEST))
        (begin
          (xtm_draw_vao testVAO shader m v p GL_TRIANGLES #f 1.0 StarTex 1:i1)))
    void))

(bind-func gl_render
  (let ((models:XTMModel** (alloc 4)))
    (lambda (model1:XTMModel* model2:XTMModel* model3:XTMModel* model4:XTMModel*)
      (cond ((null? model1)
             (println "gl_render recieved null pointer for model1 - did you load the model successfully?"))
            ((null? model2)
             (println "gl_render recieved null pointer for model2 - did you load the model successfully?"))
            ((null? model3)
             (println "gl_render recieved null pointer for model3 - did you load the model successfully?"))
            ((null? model4)
             (println "gl_render recieved null pointer for model4 - did you load the model successfully?"))
            (else
             (pfill! models model1 model2 model3 model4)
             (xtm_render prerender:XTMRENDERCB render:XTMRENDERCB trans:XTMRENDERCB null (cast models i8*))
             void)))))

(bind-val model_path i8*
  (cstring (cat2 (String (sys_sharedir)) (String "/assets/models/"))))
(bind-val peppino XTMModel*
  (assimp_load_model model_path "peppino.dae" aiProcess_Triangulate))
(bind-val scene XTMModel*
  (assimp_load_model model_path "scene.dae" aiProcess_Triangulate))
(bind-val dome XTMModel*
  (assimp_load_model model_path "dome_cut.dae" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder)))
(bind-val pyramid XTMModel* (build_pyramid 3.0))

;; this assumes tris (triangles)
;; note that this does not account for winding order!
(bind-func generate_tri_normals
  (lambda (verts:float* vsize:i64 normals:float* nsize:i64)
    (if (<> (/ vsize 4) (/ nsize 3))
        (println "Error: verts must be vec4 4, and normals must be vec3")
        (let ((elts (/ vsize 4))
              (tris (/ elts 3))
              (i 0) (j 0) (k 0) (l 0)
              (p1:float* null) (p2:float* null)
              (p3:float* (alloc 4)) (p4:float* (alloc 4)))
          (dotimes (i tris)
            (set! k (* i 4 3)) ;; start of vert tri
            (set! j (* i 3 3)) ;; start of normal tri
            (set! p1 (pref-ptr verts k))  ;; vert 1
            (set! p2 (pref-ptr verts (+ k 4))) ;; vert 2
            (vvcross p1 p2 p3)
            (vnormalise p3 3 p4)
            (vcopy p4 3 (pref-ptr normals j))
            (vcopy p4 3 (pref-ptr normals (+ j 3)))
            (vcopy p4 3 (pref-ptr normals (+ j 6))))
          void))))

(bind-func generate_tri_uvws
  (lambda (uvws:float* size:i64)
    (let ((i 0) (k 0) (num (/ size 3)))
      (dotimes (i num)
        (set! k (* i 3))
        (pset! uvws (+ k 0) (if (= 1 (% i 3)) 1.0 0.0))
        (pset! uvws (+ k 1) (if (= 2 (% i 3)) 1.0 0.0))
        (pset! uvws (+ k 2) 1.0))
      void)))

(bind-func generate_random_vao
  (lambda (tris)
    (let ((num (* 3 tris))
          (verts:float* (alloc (* 4 num)))
          (normals:float* (alloc (* 3 num)))
          (uvws:float* (alloc (* 3 num)))
          (colours:float* (alloc (* 4 num)))
          (vbo_verts (VBO verts (* 4 num)))
          (vbo_normals (VBO normals (* 3 num)))
          (vbo_uvws (VBO uvws (* 3 num)))
          (vbo_colours (VBO colours (* 4 num)))
          (i 0) (j 0) (k 0))
      ;; random verts
      (dotimes (i num)
        (set! j (* i 4))
        (set! k (* i 3))
        (pset! verts (+ j 0) (- (* (random) 4.0) 2.0))
        (pset! verts (+ j 1) (- (* (random) 4.0) 2.0))
        (pset! verts (+ j 2) (- (* (random) 2.0) 1.0))
        (pset! verts (+ j 3) 1.0))
      ;; generate normals
      (generate_tri_normals verts (* 4 num) normals (* 3 num))
      ;; generate uvws
      (generate_tri_uvws uvws (* 3 num))
      ;; white colour
      (dotimes (i (* 4 num)) (pset! colours i 1.0))
      (set_attribute testVAO vbo_verts 0 4)
      (set_attribute testVAO vbo_normals 1 3)
      (set_attribute testVAO vbo_uvws 2 3)
      (set_attribute testVAO vbo_colours 3 4)
      (update vbo_verts)
      (update vbo_normals)
      (update vbo_uvws)
      (update vbo_colours)
      void)))

(generate_random_vao 1000)

(xtm_render_init
 (call-as-xtlang (glfw_get_framebuffer_width window))
 (call-as-xtlang (glfw_get_framebuffer_height window)))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (gl_render peppino scene dome pyramid)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...
(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
