;;; framebuffer.xtm -- OpenGL framebuffer and render-to-texture example
;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL, libglfw3

;;; Commentary:

;;

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

;; set up the FBO & backing textures

(bind-val fbo FBO*)
(bind-val ss_quad_vao VAO*)

;; and here's the triangle we eventually want to draw (taken from triangle.xtm)

(bind-val triangle_verts |15,float|)
(bind-val vbo VBO*)
(bind-val vao VAO*)
(bind-val sp ShaderProgram)

;; init data
(call-as-xtlang
 (afill! triangle_verts
         ;; pos     colour
           0.  .5   1.0 0.0 0.0
          .5  -.5   0.0 1.0 0.0
         -.5  -.5   0.0 0.0 1.0)
 (set! vbo (VBO_create (aref-ptr triangle_verts 0) 15))
 (set! vao (VAO_create))
 (VAO_bind_attribute vao vbo 0 2 5 0) ;; position
 (VAO_bind_attribute vao vbo 1 3 5 2) ;; tex_coord
 void)

(bind-func create_triangle_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(create_triangle_shader (sys:slurp-file "examples/external/shader-tutorials/framebuffer-triangle.vert")
                        (sys:slurp-file "examples/external/shader-tutorials/framebuffer-triangle.frag"))

;; here's our post-processing shader

(bind-val post_process_sp ShaderProgram)

(bind-func create_post_process_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! post_process_sp (ShaderProgram_create vsource fsource))))

(create_post_process_shader
 (sys:slurp-file "examples/external/shader-tutorials/framebuffer-post-process.vert")
 (sys:slurp-file "examples/external/shader-tutorials/framebuffer-post-process.frag"))

;; now, to put it all together

(call-as-xtlang
 (let ((fbw_ptr:i32* (salloc))
       (fbh_ptr:i32* (salloc)))
   (glfwGetFramebufferSize window fbw_ptr fbh_ptr)
   (println (set! fbo (FBO_create_with_textures (pref fbw_ptr 0) (pref fbh_ptr 0) #t)))
   (set! ss_quad_vao (VAO_create_ss_quad))))

(bind-func gl_draw
  (let ((drawbufs_ptr:GLenum* (zalloc)))
    (pset! drawbufs_ptr 0 GL_COLOR_ATTACHMENT0)
    (lambda ()
      ;; bind the second (render-to-texture) framebuffer
      (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
      (glDrawBuffers 1 drawbufs_ptr)
      ;; clear the framebuffer's colour and depth buffers
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; render the triangle as normal
      (glUseProgram sp)
      (glBindVertexArray (VAO_id vao))
      (glDrawArrays GL_TRIANGLES 0 3)
      ;; bind default framebuffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; clear the framebuffer's colour and depth buffers
      (glClear (bor GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; our post-processing shader for the screen-space quad
      (glUseProgram post_process_sp)
      ;; bind the quad's VAO
      (glBindVertexArray (VAO_id ss_quad_vao))
      ;; activate the first texture slot and put texture from previous pass in it
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D (FBO_color_texture fbo))
      ;; draw the quad
      (glDrawArrays GL_TRIANGLE_STRIP 0 4))))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (gl_draw)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...

(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
