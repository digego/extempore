(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

(bind-val vao VAO* (VAO_create_ss_quad))
(bind-val sp ShaderProgram)

(bind-func gl_draw
  (lambda ()
    (glClear GL_COLOR_BUFFER_BIT)
    (let ((resloc (glGetUniformLocation sp "iResolution"))
          (timeloc (glGetUniformLocation sp "iGlobalTime"))
          (rateloc (glGetUniformLocation sp "iSampleRate")))
      (glUseProgram sp)
      (glUniform3f resloc (convert width) (convert height) 1.0)
      (glUniform1f timeloc (convert (% (clock_clock) 441000.)))
      (glUniform1f rateloc 44100.0))
    (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
    (glfwSwapBuffers window)
    void))

(bind-func create_shadertoy_shader
  (lambda (vsource:i8* fsource:i8*)
    (let ((res (ShaderProgram_create vsource fsource)))
      (if (not (< res 0))
          (begin (set! sp res) res)
          res))))

(create_shadertoy_shader (sys:slurp-file "examples/external/shader-tutorials/shadertoy.vert")
                         (sys:slurp-file "examples/external/shader-tutorials/shadertoy.frag"))

(define shadertoy-loop
  (lambda (time delta-t)
    (gl_draw)
    (let ((next-time (max (+ time (* *second* delta-t)) (now))))
      (callback next-time
                'shadertoy-loop
                next-time
                delta-t))))

(shadertoy-loop (now) 1/30)

;; now we can swap in a different shader

(create_shadertoy_shader (sys:slurp-file "examples/external/shader-tutorials/shadertoy.vert")
                         (sys:slurp-file "examples/external/shader-tutorials/shadertoy-flame.frag"))
