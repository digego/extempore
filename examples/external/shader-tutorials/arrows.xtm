(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

(bind-val grid_size_x i64 20)
(bind-val grid_size_y i64 10)
(bind-val num_arrows i64 200)

;; this will be 'vec2's, in pairs - arrow base, arrow head. so the
;; streaming update only needs to update the `head' vert (assuming the
;; grid stays the same)
(bind-val arrows_verts float* 800) ;; num_arrows * 4

;; set base verts (i.e. every second vec2) to regular grid
(call-as-xtlang
 (let ((idx 0))
   (doloop (i grid_size_x)
     (doloop (j grid_size_y)
       (set! idx (* (+ (* i grid_size_y) j) 4))
       (pset! arrows_verts
              idx
              (- (* (/ (convert i float) (convert grid_size_x float)) 2.0) 1.0))
       (pset! arrows_verts
              (+ idx 1)
              (- (* (/ (convert j float) (convert grid_size_y float)) 2.0) 1.0))))))

(bind-func arrows_set_head_vert
  (lambda (x y headxval headyval)
    (let ((idx (* (+ (* x grid_size_y) y) 4)))
      (pset! arrows_verts
             (+ idx 2)
             (+ (pref arrows_verts idx) headxval))
      (pset! arrows_verts
             (+ idx 3)
             (+ (pref arrows_verts (+ idx 1)) headyval)))))

(bind-func arrows_clockspin_heads
  (lambda (mag off)
    (doloop (i grid_size_x)
      (doloop (j grid_size_y)
        (arrows_set_head_vert i j
                              (* mag (sin off))
                              (* mag (cos off)))))))

(bind-val arrows_vbo VBO*)
(bind-val arrows_vao VAO*)
(bind-val sp ShaderProgram)

;; init
(call-as-xtlang
 (set! arrows_vbo (VBO_create arrows_verts (convert (* 4 num_arrows))))
 (set! arrows_vao (VAO_create))
 (VAO_bind_attribute arrows_vao arrows_vbo 0 2)
 (glEnable GL_LINE_SMOOTH)
 void)

(bind-func create_arrows_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(create_arrows_shader (sys:slurp-file "examples/external/shader-tutorials/arrows.vert")
                      (sys:slurp-file "examples/external/shader-tutorials/arrows.frag"))

(bind-func gl_draw_arrows
  (lambda ()
    (glClear GL_COLOR_BUFFER_BIT)
    (VBO_update_data arrows_vbo)
    (glUseProgram sp)
    (VAO_bind_and_draw_arrays arrows_vao GL_LINES 0 (* 4 (convert num_arrows)))
    (glfwSwapBuffers window)
    void))

(define gl-loop
  (lambda (time delta-t)
    (arrows_clockspin_heads (* (cos (* .0000053 time)) .3) (* time 0.0000074))
    (gl_draw_arrows)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t))
              delta-t)))

;; begin the draw loop
(gl-loop (now) 1/30)
