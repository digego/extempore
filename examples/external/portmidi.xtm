;;; portmidi.xtm:examples -- portmidi example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libportmidi

;;; Commentary:

;; this example shows how to send and recieve MIDI in Extempore. If
;; all you want to do is send MIDI out to an external device (e.g. a
;; hard/soft synth) then have a look at portmidi-output.xtm in this
;; directory

;;; Code:

(sys:load "libs/external/portmidi.xtm")

(pm_initialize)
(pm_print_devices)

;; we'll just create one input and one output device (midi_in and
;; midi_out), but by passing the appropriate device index arguments to
;; pm_create_input_stream and pm_create_output_stream you can create
;; as many as you like
(define *min* (pm_create_input_stream (pm_default_in)))
(define *mout* (pm_create_output_stream (pm_default_out)))

(bind-func midi_read_loop
  "a callback loop to call Pm_Read on a midi input stream

This will pick up any incoming MIDI messages - handle them however you
like."
  (let ((input_buffer:PmEvent* (zalloc PM_MIDI_BUFFER_SIZE))
        (read_count 0)
        (i:i32 0))
    (lambda (input_stream:PmStream* time:i64 delta_t:double)
      (set! read_count (Pm_Read input_stream input_buffer PM_MIDI_BUFFER_SIZE))
      ;; (println "read_count:" read_count)
      (if (> read_count 0)
          (dotimes (i read_count)
            (cond ((PmEvent_note_on_p (pref-ptr input_buffer i))
                   (println "note: ON pitch:"
                            (Pm_Message_Data1 (Pm_Event_Message (pref-ptr input_buffer i)))
                            "velocity:"
                            (Pm_Message_Data2 (Pm_Event_Message (pref-ptr input_buffer i)))
                            "channel:"
                            (Pm_Event_Channel (pref-ptr input_buffer i))))
                  ((PmEvent_note_off_p (pref-ptr input_buffer i))
                   (println "note: OFF pitch:"
                            (Pm_Message_Data1 (Pm_Event_Message (pref-ptr input_buffer i)))
                            "velocity:"
                            (Pm_Message_Data2 (Pm_Event_Message (pref-ptr input_buffer i)))
                            "channel:"
                            (Pm_Event_Channel (pref-ptr input_buffer i))))
                  (else
                   (println i (pref-ptr input_buffer i))))))
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (callback next_time midi_read_loop input_stream next_time delta_t)))))

;; start the read loop
(midi_read_loop *min* (now) 0.01) ;; 100Hz

;; Scheme MIDI I/O

(play-midi-note (now) *mout* (random 60 72) (random 60 90) 44100 0)

(define midi-loop
  (lambda (beat dur)
    (mplay *mout* (random (list 60 60 60 67 70 74 75)) (random 60 80) dur 0)
    (callback (*metro* (+ beat (* .5 dur))) 'midi-loop (+ beat dur) dur)))

(midi-loop (*metro* 'get-beat 4) 1/4)
