;;; openvg.xtm -- OpenVG-ish drawing example

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libglfw3, libnanovg

;;; Commentary:

;; This example used to be powered by ShivaVG, an OpenVG
;; implementation which has now been unmaintained for several years.

;; Recently, it has been updated to use the nanovg
;; (https://github.com/memononen/nanovg) 2D hardware-accelerated
;; drawing library. nanovg is *not* conformant with the OpenVG spec,
;; but it's pretty close, and it's actively maintained, so is probably
;; a good option going forward unless you need strict OpenVG
;; compatibility.

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width float 1024.)
(bind-val height float 768.)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window (convert width) (convert height))))

(sys:load "libs/external/nanovg.xtm")

(nvg_init) ;; init nanovg
(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

;; background image
(bind-val bg_paint NVGpaint*
  (nvgImagePattern vg
                   0. 0.
                   width height
                   0.
                   (nvgCreateImage vg
                                   (cstring
                                    (cat
                                     (String (sys_sharedir))
                                     (String
                                      "/assets/images/image.png")))
                                   0)
                   1.))

(bind-func draw_frame
  (let ((fill (NVGcolor 1.0 0.0 0.0 0.5))
        (stroke (NVGcolor 0.0 0.0 1.0 0.5))
        (i 0.:f)
        (frame 0))
    (lambda ()
      (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
      (nvgResetTransform vg)
      (if (not (null? bg_paint))
          ;; draw background image
          (begin
            (nvgFillPaint vg bg_paint)
            (nvgBeginPath vg)
            (nvgRect vg 0. 0. width height)
            (nvgFill vg)))
      ;; loop and draw the circles
      (dotimes (i 200.0)
        (nvgResetTransform vg)
        (nvgTranslate vg
                      (+ (/ width 2.0) (* 200. (cos (* i 0.00025 (convert frame)))))
                      (+ (/ height 2.0) (* 100. (tan (* 0.0001 i (convert frame))))))
        (nvgBeginPath vg)
        (nvgCircle vg 0. 0. 20.)
        (tfill! fill (/ i 200.0) 0.0 (- 1.0 (/ i 200.0)) 0.5)
        (nvgFillColor vg fill)
        (nvgFill vg)
        (nvgStrokeWidth vg 10.)
        (nvgStrokeColor vg stroke)
        (nvgStroke vg))
      (set! frame (+ frame 1))
      (nvgEndFrame vg))))

(bind-func nvg_draw_loop
  (lambda (time:i64 delta_t:double)
    (nvg_clear)
    (draw_frame)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time nvg_draw_loop next_time delta_t))))

(nvg_draw_loop (now) (/ 1. 30.))

;; to stop the draw loop, eval this version of nvg_draw_loop
;; (bind-func nvg_draw_loop
;;   (lambda (time:i64 delta_t:double)
;;     (println "nvg_draw_loop callback stopped")
;;     #f))
