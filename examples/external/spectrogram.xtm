;;; openvg.xtm -- OpenVG drawing example

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libOpenVG

;;; Commentary:

;;

;;; Code:

;; (sys:load "libs/external/graphics-pipeline.xtm")
(sys:load "libs/external/glfw3.xtm")

(define fullscreen #f)
(define width 1024.0)
(define height 768.0)
(bind-val width float 1024.0)
(bind-val height float 768.0)

(bind-val window GLFWwindow*
  ;; create a window
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    ;; some of the shaders in the graphics pipeline use older glsl
    ;; versions, so we need a "compatibility" graphics context
    ;;(glfw_init_and_create_interaction_compatibility_window (convert width) (convert height))))
    (glfw_init_and_create_interaction_window (convert width) (convert height))))

(sys:load "libs/external/nanovg.xtm")
(sys:load "libs/core/instruments.xtm")
(sys:load "libs/core/pc_ivl.xtm")
(sys:load "libs/external/audio_dsp_ext.xtm")

(bind-val fmsynth INSTRUMENT (make_instrument (fmsynth_note) (fmsynth_fx)))
(define fmsynth ($$ fmsynth))

(bind-func dsp:DSP
  (let ((F (stft_st_c 64 512 512))
        (left:SComplex* (F.left))
        (right:SComplex* (F.right)))
    (lambda (in time chan dat)
      (cond ((< chan 2)
             (F chan
                (+ (* 1.0 (fmsynth in time chan dat))
                   0.0)))
            (else 0.0)))))

(dsp:set! dsp)

(nvg_init)
(bind-val vg NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))


(bind-func post ;;:XTMRENDERCB
  (let ((redfill (NVGcolor 1.0 0.0 0.0 0.5))
        (greenfill (NVGcolor 0.0 1.0 0.0 0.5))
        (bgfill (NVGcolor 0.0 0.0 0.0 1.0))
        (stroke (NVGcolor 0.0 0.0 1.0 0.5))
        (colour:|4,float|* (alloc))
        (dl:Complexf* (dsp.left))
        (dr:Complexf* (dsp.left))
        (t 0))
;        (clear_color:xtm_color* (alloc)))
;    (vguRect path 0. 0. 3.0 1.0)
    (lambda () ;;frame shader m v p data)
      (let ((i:float 0.0)
            (incr (/ width 200.)))
        (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
        (nvgResetTransform vg)
        (nvgFillColor vg bgfill)
        (nvgBeginPath vg)
        (nvgRect vg 0. 0. width height)
        (nvgFill vg)
        (dotimes (i 200.0)
          (nvgResetTransform vg)
          (nvgBeginPath vg)
          (nvgFillColor vg redfill)
          (nvgRect vg (convert (* incr i)) 0.0 3.0 (* 30. (Complex_mag (pref dl (ftoi64 i)))))
          (nvgFill vg)
          (nvgBeginPath vg)
          (nvgFillColor vg greenfill)
          (nvgRect vg (convert (* incr i)) height 3.0 (* -30. (Complex_mag (pref dr (ftoi64 i)))))
          (nvgFill vg))
        (nvgEndFrame vg)
        ;; (xtm_vg_print_error)
        void))))

(bind-func gl_render
  (lambda ()
    (post)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; (xtm_render null null null post null)
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((late-by (- (now) time))
          (next-frame-time (+ time (* *second* delta-t))))
      (if (> late-by 0)
          (print "Late by " (* 1.0 (/ late-by *second*)) "seconds\n")
          (begin
            (gl_render)))
      (callback (* 0.9 next-frame-time)
                'gl-loop
                next-frame-time
                delta-t))))

;; start gl loop
(gl-loop (now) 1/30)

;; now sound stuff

(define root 0)

(define l2
  (lambda (beat pitch dur)
    (if (> pitch 100) (set! dur 4.))
    (play fmsynth pitch 100 .2 .5 10.)
    (callback (*metro* (+ beat (* .5 dur))) 'l2 (+ beat dur)
              (if (> pitch 100) 60 (pc:relative pitch 1 (pc:scale root 'aeolian)))
              1/6)))

;; start audio loop
(l2 (*metro* 'get-beat 4) 60 1/6)
