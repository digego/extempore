;;; going-native.xtm -- an example that demonstrate 'pure' native xtlang

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: nanovg, opengl

;;; Commentary:

;;; Code:

;; need some libs
(sys:load "libs/core/music.xtm")
(sys:load "libs/core/scheduler.xtm")
(sys:load "libs/external/glfw3.xtm")
(sys:load "libs/core/instruments.xtm")
(sys:load "libs/core/adt.xtm")

;; first off create a native 'beat' scheduler (for music)
;; 120.0 bpm and 200hz update rate
(bind-val bs1 [void]* (beat_scheduler 120.0 200.0))

;; next setup audio signal processing !
(make-instrument fmsynth fmsynth)

(bind-func dsp:DSP
  (lambda (in time chan dat)
    (fmsynth in time chan dat)))

(dsp:set! dsp)

;; now for the graphics stuff

(bind-val width float 1024.)
(bind-val height float 768.)

(bind-val window GLFWwindow*)

;; make sure this is called by the scheduler!
(bind-func init_gl
  (lambda ()
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (set! window (glfw_init_and_create_interaction_window (convert width) (convert height)))
    (println "initiazlied gl!")
    void))

;; must call init_gl from schedulers thread
($ (let ((beat:Rational (bs1.beat)))
     (sched bs1 beat init_gl)
     (thread_sleep 2 0))) ;; sleep to ensure scheduled call before loading nanovg

;; can only load nanovg AFTER creating opengl window
(sys:load "libs/external/nanovg.xtm")

;; The Context for NanoVG must be created
;; on the thread which will be doing
;; the drawing.  In this example, that
;; thread is *owned* by the scheduler.
;;
;; Don't instantiate anything here yet!
;; Instead call init_vg from the scheduler
;; which happens at the bottom of the file
(bind-val vg NVGcontext*)
(bind-val pixel_ratio float)

;; make sure to call this from the scheduler!
(bind-func init_vg
  (lambda (beat:float)
    ;; set THIS thread as opengl thread
    ;;(glfwMakeContextCurrent	null)
    ;;(glfwMakeContextCurrent	window)
    (glfwSwapInterval 1)
    (nvg_init)
    (set! vg (nvg_create_context))
    (set! pixel_ratio (glfw_get_pixel_ratio window))
    (println "initialized vg")
    void))

;; must call init_vg from schedulers thread
($ (let ((beat:Rational (bs1.beat)))
     (sched bs1 beat init_vg)
     (thread_sleep 2 0)))

(bind-func draw_frame
  (let ((fill (NVGcolor 1.0 1.0 1.0 0.3))
        (stroke (NVGcolor 1.0 1.0 1.0 0.5))
        (i 0) (x 0.0) (y 0.0)
        (frame 0))
    (lambda (beat:Rational)
      (nvgBeginFrame vg (convert width) (convert height) pixel_ratio)
      (nvgResetTransform vg)
      ;; loop and draw the circles
      (dotimes (i 2000)
        (nvgResetTransform vg)
        (set! x (+ (/ width 2.0) (* 400.0 (cos (* 0.000005 (i64tof i) (convert frame))))))
        (set! y (+ 400.0 (* 200.0 (cos (* 0.000005 (rtof (+ beat 100000:i64)) (i64tof i))))))
        (nvgBeginPath vg)
        (nvgCircle vg x y 15.0)
        (if (= 0 ( % i 2))
            (tfill! fill 1.0 0.0 0.0 0.1)
            (tfill! fill 1.0 1.0 1.0 0.1))
        (nvgFillColor vg fill)
        (nvgFill vg)
        (nvgStrokeWidth vg 1.0)
        (nvgStrokeColor vg stroke)
        (nvgStroke vg))
      (set! frame (+ frame 1))
      (nvgEndFrame vg))))

;; setup the 'music' loop
(bind-func beat_loop
  (lambda (beat:Rational)
    (beginz
     (bs1.bpm (trir 150.0 3000.0 1/350))
     (nvg_clear)
     (draw_frame beat)
     (glfwSwapBuffers window)
     (play bs1 fmsynth
           (random (list 36 45 55 60 70 75 80 72 63 67))
           60 1/1
           0.1 (floor (rampr 0.0 5.0 1/291)))
     (sched bs1 (+ 1/1 beat) beat_loop:[void,Rational]*)
     void)
    void))

;; glfw poll events must be called in primary thread
(bind-func event_poll
  (lambda (time:i64 delta_t:double)
    ;; (println "HIT" time)
    (glfwPollEvents)
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time event_poll next_time delta_t))))

;; glfw poll events must be called on primary
(event_poll (now) (/ 1.0 30.0))

;; helper function
(bind-func floor_rat
  (lambda (a:Rational)
    (- a (% a 1/1))))

;; start music loop on beat thread (i.e. bs1)
($ (let ((beat (+ 2/1 (floor_rat (bs1.beat)))))
     (sched bs1 beat beat_loop)))
