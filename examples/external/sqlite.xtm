;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A trivial SQL example
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(sys:load "libs/external/sqlite.xtm")

(bind-val DB sqlite3*)

(bind-func db_load
  (lambda (filename)
    (let ((db:sqlite3** (salloc))
          (result (sqlite3_open filename db)))
      (if (<> result SQLITE_OK)
          (begin (println "Error opening DB:" (Str (sqlite3_errstr result))) 1)
          (begin (set! DB (pref db 0)) 1))
      void)))

(bind-func db_print_column
  (lambda (stmt col)
    (let ((type (sqlite3_column_type stmt col)))
      (cond ((= type SQLITE_INTEGER)
             (printout (sqlite3_column_int stmt col)))
            ((= type SQLITE_FLOAT)
             (printout (sqlite3_column_double stmt col)))
            ((= type SQLITE_BLOB)
             (printout "'BLOB'"))
            ((= type SQLITE3_TEXT)
             (printout (Str (sqlite3_column_text stmt col))))
            ((= type SQLITE_NULL)
             (printout "'NULL'"))
            (else
             (println "ERROR: bad sqlite type!"))))))

;; lining everything up neatly is left as an excercise for the reader :)
(bind-func db_cmd
  (lambda (sql_cmd)
    (let ((tail:i8** (salloc))
          (stmt_:sqlite3_stmt** (salloc))
          (stmt:sqlite3_stmt* null)
          (res (sqlite3_prepare_v2 DB sql_cmd -1 stmt_ tail)))
      (set! stmt (pref stmt_ 0))
      (beginz
       (if (<> SQLITE_OK res)
           (println "SQLITE Err:" (Str (sqlite3_errstr res)))
           (let ((columns (sqlite3_column_count stmt)) (i 0))
             (printout "\n | ")
             (dotimes (i columns)
               (printout (Str (sqlite3_column_name stmt i)) " | "))
             (println "\n------------------------")
             (while (= SQLITE_ROW (sqlite3_step stmt))
               (printout " | ")
               (dotimes (i columns)
                 (db_print_column stmt i)
                 (printout " | "))
               (println))))
       void)
      (set! res (sqlite3_finalize stmt))
      void)))

(bind-func db_close
  (lambda ()
    (sqlite3_close_v2 DB)))

;; load up a database
(db_load "new.db")
;; create new table 'Hackers'
;; note that if your new.db is NOT empty (i.e. already has Hackers)
;; then you will 'correctly' get an SQL error here!
(db_cmd "create table Hackers (id integer primary key autoincrement, name text);")
;; show new table! (sqlite_master is sqlite's meta table)
(db_cmd "select * from sqlite_master;")
;; insert two hackers!
(db_cmd "insert into Hackers (name) values ('Andrew Sorensen'), ('Ben Swift'), ('Ali Kerr');")
;; select everything in table Hackers
(db_cmd "select * from Hackers;")
;; select Ali from hackers
(db_cmd "select * from Hackers where name like '%Kerr';")
;; close the DB
(db_close)
