;;; raymarcher.xtm -- Rendering with Distance fields on the GPU

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; Most of these ideas are stolen from Inigo Quilez
;; http://www.iquilezles.org/

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 800)
(bind-val height i32 600)

(bind-val window GLFWwindow*
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/gl/gl-objects.xtm")

(bind-val vao VAO* (VAO_create_ss_quad))
(bind-val sp ShaderProgram)

(bind-func create_raymarcher_shader
  (lambda (vsource:i8* fsource:i8*)
    (set! sp (ShaderProgram_create vsource fsource))))

(bind-func gl_draw
  (lambda (degree:float)
    (glUseProgram sp)
    (glUniform1f (glGetUniformLocation sp "time") (* .025 degree))
    (glUniform2f (glGetUniformLocation sp "resolution") (convert width) (convert height))
    (VAO_bind_and_draw_arrays vao GL_TRIANGLE_STRIP 0 4)
    void))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double degree)
    (glClear GL_COLOR_BUFFER_BIT)
    (gl_draw degree)
    (glfwPollEvents)
    (glfwSwapBuffers window)
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t (+ degree 1.)))))

;; The shaders - where all the work in this example happens

;; vert shader does nothing, just draws a full-screen quad
(define vertshader
"#version 400

layout(location = 0) in vec2 vertexPosition;

void main () {
  gl_Position = vec4(vertexPosition,1.0,1.0);
}")


;; Frag shader does EVERYTHING
(define fragshader
  "#version 400

uniform vec2 resolution;
uniform float time;

out vec4 fragColor;

/**
 useful with domain repetition.
 shapes are only rendered between min and max limits
 using abs makes this symmetric (left/right and front/ back)
**/
vec3 clamp_abs_xz( vec3 p, vec3 min, vec3 max ) {
    vec3 q = p;
    q.x = clamp( abs(q.x), min.x, max.x);
    q.z = clamp( abs(q.z), min.z, max.z);
    return q;
}

float hash(float n) {
   return fract( sin(n) * 43758.5453 );
}

float noise(in vec3 x) {
   vec3 p = floor(x);
   vec3 k = fract(x);

   k = k*k*(3.0-2.0*k);
   float n = p.x + p.y*57.0 + p.z*113.0;

   float a = hash(n);
   float b = hash(n+1.0);
   float c = hash(n+57.0);
   float d = hash(n+58.0);
   float e = hash(n+113.0);
   float f = hash(n+114.0);
   float g = hash(n+170.0);
   float h = hash(n+171.0);

   float res = mix ( mix( mix(a,b,k.x), mix(c,d,k.x), k.y),
                     mix( mix(e,f,k.x), mix(g,h,k.x), k.y),
                     k.z);

   return res;
}

float fbm(in vec3 p) {
   float f = 0.0;
   f += 0.5000*noise(p);
   p *= 2.02;
   f += 0.2500*noise(p);
   p *= 2.03;
   f += 0.1250*noise(p);
   p *= 2.01;
   f += 0.0625*noise(p);
   return f/0.9375;
}

float torusShape( in vec3 p, in vec2 t, in mat4 trans) {
   vec3 p2 = vec3(trans*vec4(p,1.0));
   vec2 q = vec2( length(p2.xz)-t.x, p2.y);
   return length(q) - t.y;
}

float torusShape2( in vec3 p, in vec2 t, in vec3 pos) {
   vec2 q = vec2( length(p.xz+pos.xz)-t.x, p.y+pos.y);
   return length(q) - t.y;
}

vec3 torusMaterial(in vec3 pos, in vec3 nor) {
   return vec3(0.0,1.0,0.0);
}

float circleShape( in vec3 p, in vec3 pos, float size) {
   return length(p+pos) - size;
}

vec3 circleMaterial(in vec3 pos, in vec3 nor) {
   float f = smoothstep(0.0,1.0,fbm(pos));
   return mix(vec3(0.0,0.0,1.0),vec3(1.0,0.0,0.0),f);
}

float floorShape( in vec3 p) {
   return (p.y + 1.0*noise(p*vec3(1.0,cos(time),1.0))); // * noise(p);;
}

vec3 floorMaterial(in vec3 pos, in vec3 nor) {
   return vec3(1.0);
}

vec2 map( in vec3 p) {
   vec3 circlePos = vec3(0.0,(cos(time*0.5)*0.5)-0.2,1.0);
   vec2 d1 = vec2( circleShape(p,circlePos,0.5), 1.0);
   mat4 trans_a = mat4(1.0,0.0,0.0,0.0,
                     0.0,1.0,0.0,0.0,
                     0.0,0.0,1.0,0.0,
                     0.0,0.0,0.0,1.0);
   vec2 d3 = vec2( floorShape(p), 2.0);
   float scale = 0.5;
   mat4 trans = mat4(cos(time*2.),0.0,-sin(time*2.),0.0,
                    0.0,1.0,0.0,0.0,
                    sin(time*2.),3.0,cos(time*2.0),0.0,
                    1.0,1.0,1.0,1.0);
   vec3 tpos = vec3(0.0, 5.0, 0.0);
   vec2 d4 = vec2( torusShape2(p, vec2(0.3,0.1), vec3(cos(time),-1.0,sin(time)+1.0)), 3.0);
   if( d3.x < d1.x ) d1=d3;
   if( d4.x < d1.x ) d1=d4;
   return d1;
}

vec2 intersect (in vec3 ro, in vec3 rd) {
   for(float t=0.0; t<4.0; ) {
      vec2 h = map( ro + t*rd );
      if( h.x < 0.0001) return vec2(t,h.y);
      t += h.x;
   }
   return vec2(0.0);
}

float softShadow( in vec3 ro, in vec3 rd ) {
   float res = 1.0;
   for( float t=0.1; t<6.0; ) {
       float h = map( ro + t*rd ).x;
       if( h<0.001 ) return 0.0;
       res = min( res, 8.0*h/t );
       t += h;
   }
   return res;
}

vec3 calcNormal( in vec3 p) {
   vec3 e = vec3(0.0001,0.0,0.0);
   vec3 n;
   n.x = map(p+e.xyy).x - map(p-e.xyy).x;
   n.y = map(p+e.yxy).x - map(p-e.yxy).x;
   n.z = map(p+e.yyx).x - map(p-e.yyx).x;
   return normalize( n );
}

void main() {
   // uv are the pixel coordinates from 0 to 1
   vec2 uv = (gl_FragCoord.xy/resolution);

   // we generate a ray with origin ro and direction rd
   vec3 ro = vec3(0.0,0.0,-3.5);
   vec3 rd = normalize( vec3( (-1.0+2.0*uv)*vec2(1.5,1.0), 1.0));

   // we interect the ray with the 3d scene
   vec2 t = intersect(ro, rd);

   // we draw a white to black gradient by default
   vec3 col = vec3(0.0,0.0,1.0-uv.y);

   // otherwise overide black with colour!!
   if(t.y > 0.5) {
     vec3 pos = ro + t.x*rd;
     vec3 nor = calcNormal( pos );
     vec3 ref = reflect(rd,nor);

     vec3 lig1 = normalize( vec3(cos(time),0.8,sin(time)) );
     vec3 blig1 = vec3(-lig1.x, lig1.y, -lig1.z);
     vec3 spe1 = vec3(pow(clamp(dot(lig1,ref),0.0,1.0),16.0));
     vec3 color1 = normalize(vec3(0.4,0.3,0.2));

     vec3 lig2 = normalize( vec3(.3,0.8,-0.3) );
     vec3 blig2 = vec3(-lig2.x, lig2.y, -lig2.z);
     vec3 spe2 = vec3(pow(clamp(dot(lig2,ref),0.0,1.0),16.0));
     vec3 color2 = normalize(vec3(0.5,0.3,1.0));

     float con = 1.0;
     float amb = 0.5 + 0.5*nor.y;

     float dif1 = max( 0.0, dot(nor,lig1) );
     float dif2 = max( 0.0, dot(nor,lig2) );

     float sha1 = softShadow( pos, lig1 );
     float sha2 = softShadow( pos, lig2 );

     col = con*vec3(0.0); //0.2,0.3,0.4);
     col += amb*vec3(0.0); //0.2,0.3,0.4);
     col += dif1*color1*sha1;
     col += dif2*color2*sha2;

     if(t.y < 1.5) { // must be circle
        col *= circleMaterial(pos,nor);
     }else if(t.y < 2.5) { // must be floor
        col *= floorMaterial(pos,nor);
     }else if(t.y < 3.5) { // must be torus
        col *= torusMaterial(pos,nor);
     }

     // add specular from light1
     col += 0.5*spe1;
     // add specular from light2
     col += 0.5*spe2;
   }
   fragColor = vec4(col,1.0);
}")

(create_raymarcher_shader vertshader fragshader)

;; set the wheels in motion
(gl_draw_loop (now) (/ 1. 30.) 0.)
