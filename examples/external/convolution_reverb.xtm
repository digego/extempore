;;
;; convolution.xtm
;;
;; A partitioned convolution reverb
;; this has not been optimized so you
;; will almost certainly need to increase
;; your FRAME size when starting extempore
;; try --frames=512 with this example

;; You can get the IR files (indeed the whole assets directory) from
;; https://github.com/extemporelang/extempore-assets - untar it and put
;; it in the top level of your extempore directory.

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libsndfile fft
;;

;;; Code:

(sys:load "libs/external/audio_dsp_ext.xtm")
(sys:load "libs/external/instruments_ext.xtm")

(bind-val sampler INSTRUMENT (make_instrument (sampler_note) (sampler_fx)))
(define sampler ($$ sampler))

;; just for processing sampler
(bind-func dsp1:DSP
  (let ((vol 1.0))
    (lambda (in time chan dat)
      (* vol (sampler in time chan dat)))))

;; convolution reverb takes mono
;; files as input (i.e. separates left and right)
(bind-func dspsum:DSPMT
  (let ((reverb (creverb_st_c "assets/ir/minsterl.aif"
                              "assets/ir/minsterr.aif"))
        (rms (rms_st_c))
        (left:SAMPLE 0.0)
        (right:SAMPLE 0.0)
        (wet 2.0)
        (dry 0.3))
    (lambda (in:SAMPLE* time chan dat:SAMPLE*)
      (if (= 0 (% time FRAMES))
          (begin (set! left (rms.left))
                 (set! right (rms.right))))
      (rms chan (reverb chan (pref in 0) dry wet)))))

;; #f runs dspsum in parallel to dsp1
;; i.e. double buffered.
;; this introduces FRAMES latency
;; but means dspsum can process at the
;; same time as dsp1
(dsp:set! #f dspsum dsp1)

;; load up the sampler!
(load-sampler sampler "assets/samples/salamander-piano/mf/")

;; set envelope for sampler2
(set_amp_env sampler 100.0 0.0 1.0 100.0)

(dspsum.wet 2.0)
(dspsum.dry 0.0)
(dsp1.vol 2.0)

;; make some noise
(define test
  (lambda (beat dur)
    (play sampler 72 120 10.0 0 0.2)
    (play 2 sampler 77 120 10.0 0 0.8)
    (play 4 sampler 68 125 8.0 0 0.6)
    (play 7 sampler 75 120 12.0 0 0.4)
    (play 10 sampler 70 125 11.0 0 0.55)
    (play 12 sampler 67 130 7.0 0 0.45)
    (callback (*metro* (+ beat (* .5 dur))) 'test (+ beat dur) dur)))

(test (*metro* 'get-beat 4) 16)

(bind-func console_print
  (lambda (cpu:double rmsl:double rmsr:double)
    (ascii_text_color 0 0 1)
    (printf "Load:%f RMS: %f %f \n" (* 100. cpu) rmsl rmsr)
    void))

;; blank lines
(print-full)
(print-full-nq "Convolution Reverb\n")
(print-full-nq "-------------------------------\n")


(define print-load
  (lambda (beat dur)
    (ascii-print-color 0 2 8)
    (console_print (sys:audio-load) (dspsum.left) (dspsum.right))
    (callback (*metro* (+ beat (* .5 dur))) 'print-load (+ beat dur) dur)))

(print-load (*metro* 'get-beat 4) 1)
