;; xtmrender.xtm
;;
;; using the default xtm OpenGL pipeline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; NOTES for BLENDER MODELS
;;
;; you can download the blender models from:
;;
;; http://extempore.moso.com.au/extras/peppino.blend
;; http://extempore.moso.com.au/extras/scene.blend
;; http://extempore.moso.com.au/extras/dome_cut.blend
;;
;; or use your own models ;)
;;
;; smooth shading ONLY so ...
;;
;; 1) Blender 2.6 models not supported yet
;; use Blender 2.5.
;;
;; 2) make sure model is smooth shaded in blender
;; then apply modifier (edge split) for any
;; meshes that you want flat shaded.
;;
;; 3) If your meshes have a strange black grainy
;; look then you'll need reverse the GL_FRONT/GL_BACK
;; face culling in the FIRST PASS of the render
;;
;; 4) You will probably need to do a rotation
;; of the model around the X axis.  It might be
;; easier to set this up in blender before export
;; (i.e. Y should be up not Z)
;;

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val width i32 1024)
(bind-val height i32 768)

(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window width height)))

(sys:load "libs/external/assimp.xtm")

;; add a light and a camera
(bind-func prerender:XTMRENDERCB
  (lambda (frame shader m v p data)
    ;; (xtm_light_pos 1 10.0 10.0 15.0)
    ;; (xtm_light_tgt 1 1.0 3.0 0.0)
    ;; (xtm_light_up 1 0.0 1.0 0.0)
    ;; (xtm_light_diffuse 1 1.0 0.9 0.7 1.0)
    ;; (xtm_light_power 1 30.0)
    ;; (xtm_light_angle 1 60.0)
    (xtm_camera_pos (+ 0.0 (* 10.0 (sin (* .005 (i64tof frame)))))
                    0.0
                    (+ 0.0 (* 10.0 (cos (* .005 (i64tof frame))))))
    (xtm_camera_tgt 0.0 0.0 0.0)
    (xtm_camera_up 0.0 1.0 0.0)
    void))

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (let ((model:XTMModel* (cast data XTMModel*)))
      ;; (rotate_matrix m (* 0.01 (i64tof frame)) 0.0 1.0 0.0)
      (translate_matrix m 0.0 -3.0 0.0)
      (scale_matrix m 2.0 2.0 2.0)
      (xtm_draw_model model shader m v p)
      (fill_identity_matrix m)
      void)))

(bind-func gl_render
  (let ((models:XTMModel** (alloc 3)))
    (lambda (model1:XTMModel*)
      (if (null? model1)
          (println "gl_render recieved null pointer for model1 - did you load the model successfully?"))
      (xtm_render prerender:XTMRENDERCB render:XTMRENDERCB null null (cast model1 i8*))
      void)))

(bind-val model_path i8*
  (cstring (cat2 (String (sys_sharedir)) (String "/assets/models/"))))
(bind-val peppino XTMModel*
  (assimp_load_model model_path "peppino.dae" aiProcess_Triangulate))

(bind-func init_env_map
  (lambda ()
    (let ((path (cat2 (String (sys_sharedir)) (String "/assets/images/Yokohama/"))))
      (xtm_envmap_init #f ;; don't flip images
                       (cat2 path (Str "front.jpg"))  ;; front
                       (cat2 path (Str "back.jpg"))  ;; back
                       (cat2 path (Str "up.jpg"))  ;; up
                       (cat2 path (Str "down.jpg"))  ;; down
                       (cat2 path (Str "right.jpg"))  ;; right
                       (cat2 path (Str "left.jpg")))  ;; left
      void)))

(init_env_map)

;; initialize
(bind-func init_sky
  (lambda ()
    (let ((path (cat2 (String (sys_sharedir)) (String "/assets/images/Yokohama/")))
          (model (assimp_load_model model_path "skybox.dae" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder))))
      (xtm_skybox_init model
                       #f ;; don't flip images
                       (cat2 path (Str "front.jpg"))  ;; front
                       (cat2 path (Str "back.jpg"))  ;; back
                       (cat2 path (Str "up.jpg"))  ;; up
                       (cat2 path (Str "down.jpg"))  ;; down
                       (cat2 path (Str "right.jpg"))  ;; right
                       (cat2 path (Str "left.jpg"))) ;; left
      void)))

(init_sky)

(xtm_render_init
 (call-as-xtlang (glfw_get_framebuffer_width window))
 (call-as-xtlang (glfw_get_framebuffer_height window)))

(bind-func gl_draw_loop
  (lambda ()
    (gl_render peppino)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (callback (now) gl_draw_loop)))

;; and to start it running...
(gl_draw_loop)
