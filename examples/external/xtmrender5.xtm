;; xtmrender.xtm
;;
;; using the default xtm OpenGL pipeline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; NOTES for BLENDER MODELS
;;
;; you can download the blender models from:
;;
;; http://extempore.moso.com.au/extras/peppino.blend
;; http://extempore.moso.com.au/extras/scene.blend
;; http://extempore.moso.com.au/extras/dome_cut.blend
;;
;; or use your own models ;)
;;
;; smooth shading ONLY so ...
;;
;; 1) Blender 2.6 models not supported yet
;; use Blender 2.5.
;;
;; 2) make sure model is smooth shaded in blender
;; then apply modifier (edge split) for any
;; meshes that you want flat shaded.
;;
;; 3) If your meshes have a strange black grainy
;; look then you'll need reverse the GL_FRONT/GL_BACK
;; face culling in the FIRST PASS of the render
;;
;; 4) You will probably need to do a rotation
;; of the model around the X axis.  It might be
;; easier to set this up in blender before export
;; (i.e. Y should be up not Z)
;;

;;; Code:

(sys:load "libs/external/glfw3.xtm")

(bind-val WIDTH i32 1024)
(bind-val HEIGHT i32 768)

(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (glfw_init_and_create_interaction_window WIDTH HEIGHT)))

(sys:load "libs/external/assimp.xtm")

(sys:load "libs/external/nanovg.xtm")

(nvg_init) ;; init nanovg

(bind-val VGCTX NVGcontext* (nvg_create_context))
(bind-val pixel_ratio float (glfw_get_pixel_ratio window))

(bind-func load_vg_fonts
  (lambda ()
    (nvg_load_opensans_fonts VGCTX (cstring (cat (Str (sys_sharedir)) (Str "/assets/fonts/"))))
    void))

(load_vg_fonts)

;; for lights and cameras
(bind-func prerender:XTMRENDERCB
  (lambda (frame shader m v p data)
    (xtm_light_pos 1 0.0 5.0 15.0)
    (xtm_light_tgt 1 0.0 0.0 0.0) ;; was 2
    (xtm_light_up 1 0.0 1.0 0.0)
    (xtm_light_diffuse 1 1.0 0.9 0.7 1.0)
    (xtm_light_ambient 1 0.0 0.0 0.0 1.0)
    (xtm_light_specular 1 1.0 1.0 1.0 1.0)
    (xtm_light_power 1 10.0)
    (xtm_light_angle 1 60.0)

    (xtm_light_pos 2 5.0 5.0 15.0)
    (xtm_light_tgt 2 1.0 0.0 0.0) ;; was 2
    (xtm_light_up 2 0.0 1.0 0.0)
    (xtm_light_diffuse 2 1.0 0.3 0.6 1.0)
    (xtm_light_ambient 2 0.0 0.0 0.0 1.0)
    (xtm_light_specular 2 1.0 1.0 1.0 1.0)
    (xtm_light_power 2 10.0)
    (xtm_light_angle 2 60.0)

    (xtm_light_pos 3 -10.0 5.0 10.0)
    (xtm_light_tgt 3 0.0 0.0 -5.0)
    (xtm_light_up 3 0.0 1.0 0.0)
    (xtm_light_diffuse 3 0.3 1.0 0.6 1.0)
    (xtm_light_specular 3 1.0 1.0 1.0 1.0)
    (xtm_light_ambient 3 0.0 0.0 0.0 1.0)
    (xtm_light_power 3 10.0)
    (xtm_light_angle 3 60.0)

    (xtm_camera_pos 0.0 3.0 15.0)
    (xtm_camera_tgt 3.0 2.0 0.0)
    (xtm_camera_up 0.0 1.0 0.0)
    void
    ))

;; for models
(bind-func render:XTMRENDERCB
  (lambda (frame shader m v p data)
    (let ((nodes:XTMModel** (cast data XTMModel**)))
      (rotate_matrix m (* .00005 (i64tof (now))) 0.0 1.0 0.0)
      (translate_matrix m 2.0 -1.9 0.0)
      (scale_matrix m 1.5 1.5 1.5)
      ;; (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 0) shader m v p)
      (fill_identity_matrix m)
      ;; (xtm_update_matrices shader m v p)
      (xtm_draw_model (pref nodes 1) shader m v p)
      (xtm_draw_model (pref nodes 2) shader m v p)
      void)))

(bind-func vector_gfx:XTMRENDERCB
  (let ((white (NVGcolor 1.0 1.0 1.0 1.0))
        (black (NVGcolor 0.0 0.0 0.0 0.8))
        (r:Rect* (Rect 60.0 700.0 400. 10.0))
        (face (Str "Regular"))
        (text (Str "Picture in Picture"))
        (blueStroke (NVGcolor 0.0 0.0 1.0 0.5)))
    (lambda (frame shader m v p data)
      (let ((vg VGCTX))
        (nvgBeginFrame vg WIDTH HEIGHT pixel_ratio)
        (nvgResetTransform vg)
        (nvgFillColor vg black)
        (nvgStrokeColor vg black)
        (nvgStrokeWidth vg 2.0)
        (nvgBeginPath vg)
        (nvgRect vg 50. 500. 411. 230.0)
        (nvgStroke vg)
        (nvgBeginPath vg)
        (nvgRect vg 50. 680. 411. 50.0)
        (nvgFill vg)
        (nvgBeginPath vg)
        (nvgFillColor vg white)
        (nvg_draw_text vg text r face 40.0:f)
        (nvgFill vg)
        (nvgEndFrame vg)
        void))))

;; for 2d overlays etc..
(bind-func postrender:XTMRENDERCB
  (let ((uvmat:float* (alloc 16))
        (pcopy (alloc 16)))
    (lambda (frame shader m v p data)
      ;; in postrender we are responible for drawing the render_fbo!!
      ;; i.e. the actual scene!
      (xtm_draw_tex xtm_render_quad_shader (colour_tex (xtm_render_fbo)) m v p)
      ;; let's draw a picture in picture while we are at it!
      (mcopy p 4 4 pcopy)
      ;; add picture in picture
      ;; first scale and translate the PIP to a size and location on screen
      (scale_matrix pcopy 0.4 0.3 0.5) ;; flip the image (and possibly resize?)
      (translate_matrix pcopy -0.5 -0.6 0.0) ;; move the image somewhere?
      ;; second uvmap translate/scale to zoom into peppino (i.e. zoom into fbo)
      (fill_identity_matrix uvmat)
      (scale_matrix uvmat 0.2 0.2 1.0)
      (translate_matrix uvmat .4 .45 0.0)
      ;; next setup blending for transparent draw
      (glEnable GL_BLEND)  ;; add for blending
      (glBlendFunc GL_SRC_ALPHA GL_ONE_MINUS_SRC_ALPHA)
      ;; finally draw the render_fbo again with a 0.7 alpha
      (xtm_draw_tex xtm_render_quad_shader (colour_tex (xtm_render_fbo)) uvmat #f 0.7 m v pcopy)
      ;; Finally use nano vg to draw some white text with a black background
      ;; as well as a border
      (vector_gfx frame shader m v p data)
      (glDisable GL_BLEND)
      (glEnable GL_DEPTH_TEST)
      void)))


(bind-func gl_render
  (let ((models:XTMModel** (alloc 3)))
    (lambda (model1:XTMModel* model2:XTMModel* model3:XTMModel*)
      (cond ((null? model1)
             (println "gl_render recieved null pointer for model1 - did you load the model successfully?"))
            ((null? model2)
             (println "gl_render recieved null pointer for model2 - did you load the model successfully?"))
            ((null? model3)
             (println "gl_render recieved null pointer for model3 - did you load the model successfully?"))
            (else
             (pfill! models model1 model2 model3)
             (xtm_render prerender:XTMRENDERCB render:XTMRENDERCB null postrender:XTMRENDERCB (cast models i8*))
             void)))))

(bind-val model_path i8*
  (cstring (cat2 (String (sys_sharedir)) (String "/assets/models/"))))
(bind-val peppino XTMModel*
  (assimp_load_model model_path "peppino.dae" aiProcess_Triangulate))
(bind-val scene XTMModel*
  (assimp_load_model model_path "scene.dae" aiProcess_Triangulate))
(bind-val dome XTMModel*
  (assimp_load_model model_path "dome_cut.dae" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder)))

(xtm_render_init
 (call-as-xtlang (glfw_get_framebuffer_width window))
 (call-as-xtlang (glfw_get_framebuffer_height window)))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (gl_render peppino scene dome)
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

;; and to start it running...
(gl_draw_loop (now) (/ 1.0 30.0)) ;; 30fps
