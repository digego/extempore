;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A GPU Frag shader Image Processing Pipeline example
;; 

(load "libs/opengl_lib.xtm")

;; must create openglview before calling gl-load-extensions
;(define pr2 (gl:make-ctx ":0.0" #t 0.0 0.0 900.0 600.0))
(define pr2 (gl:make-ctx ":0.0" #t 0.0 0.0 (* 3.0 1920.0) 1080.0))
;(gl-set-view 900.0 600.0)

(definec gl-set-view-ext
  (lambda (w:double h:double fov:double depth:double)
    (glViewport 0 0 (dtoi32 w) (dtoi32 h))
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective fov (/ w h) 1.0 depth)
    (glMatrixMode GL_MODELVIEW)
    (glEnable GL_DEPTH_TEST)
    (gl-setup)
    1))

;(gl-set-view-ext (* 3.0 1920.0) 1080.0 55.0 2000.0)
;(gl-set-view-ext (* 3.0 1920.0) 1080.0 35.0 2000.0)
(gl-set-view-ext (* 3.0 1920.0) 1080.0 21.24 (* 3.0 1920.0))

(gl-load-extensions) ;; for windows 

(define scr-width (* 3.0 1920.0))
(define scr-height 1080.0)
(bind-val scr_width double scr-width)
(bind-val scr_height double scr-height)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A dictionary

(bind-type list <!head,list*>)

(bind-func cons:[list*,!head,list*]*
  (lambda (a b)
    (let ((pair (halloc)))
      (tset! pair 0 a)
      (tset! pair 1 b)
      pair)))

(bind-func car:[!head,list*]*
  (lambda (a)
    (tref a 0)))

(bind-func cdr:[list*,list*]*
  (lambda (a)
    (tref a 1)))

(bind-func head:[!head,list*]*
  (lambda (a)
    (tref a 0)))

(bind-func tail:[list*,list*]*
  (lambda (a)
    (tref a 1)))

(bind-func add-key-value-b
  (lambda (key:i8* val:double dict:list*)
    (let ((p:<i8*,double>* (zalloc)))
      (tfill! p key val)
      (cons p dict))))

(bind-func value-for-key
  (lambda (key:i8* dict:list* val:double*)
    (let ((e:<i8*,double>* (car dict)))
      (if (null? e)
	  0
	  (if (= (strcmp (tref e 0) key) 0)
	      (begin (pset! val 0 (tref e 1)) 1)
	      (value-for-key key (cdr dict) val))))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; a little osc control
;; a couple of things to keep in mind
;; args is the complete list of arguments
;;
;; by default all extempore osc ints and floats
;; are 32bit (i.e. not 64bit)
;; finally, osc messages are bit endian
;; so you'll likely need to swap your arguments
(definec osc-receive-7020
  (lambda (address:i8* types:i8* args:i8*)
    (let ((data (bitcast args i32*)))
      (printf "address:%s  type:%s arg1:%f arg2:%lld\n"
	      address types
	      (ftod (unswap32f (pref data 0)))
	      (unswap32i (pref data 1))))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; START BY CREATING INPUT AND OUTPUT FBOs
;;

;; need two fbos so we can keep swapping
;; the input and output of shaders
;(define fbotex1 (create-texture 900 600))
;(define fbodepth1 (create-depth-buffer 900 600))
;(define fbo1 (create-fbo fbotex1 fbodepth1 900 600))
(define fbo1 (create-fbo (real->integer scr-width) (real->integer scr-height)))

;(define fbotex2 (create-texture 900 600))
;(define fbodepth2 (create-depth-buffer 900 600))
(define fbo2 (create-fbo (real->integer scr-width) (real->integer scr-height)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Grid Offsets is used by convolution shaders
;; box size of 5*5
(bind-val gridoffsets float* (sys:make-cptr (* 5 5 2 4)))

(definec set-grid-offsets
  (lambda (width:float height:float factor:float)
    (let ((xinc:float (/ factor width))
	  (yinc:float (/ factor height))
	  (i 0) (j 0))
      (dotimes (i 5) ;; columns
	(dotimes (j 5) ;; rows
	  (pset! gridoffsets (+ (* (+ (* i 5) j) 2) 0)
		 (+ (* -2.0 xinc)
		    (* (i32tof i) xinc)))
	  (pset! gridoffsets (+ (* (+ (* i 5) j) 2) 1)
		 (+ (* -2.0 xinc)
		    (* (i32tof i) yinc)))))
      void)))



;; image to use
;; (define myimg (soil-load-tex "/home/andrew/Pictures/paris.png" 0))
;; (define myimg (soil-load-tex "/home/andrew/Pictures/aacell1.png" 0))
;; (define myimg (soil-load-tex "/home/andrew/Pictures/paristwo.png" 0))
(define myimg (soil-load-tex "../images/myparis.png" 0))

(definec gl-loop
  (let ((cnt 0.0))
    (lambda (img:i32
	     fbo1:E_fbo* fbo2:E_fbo*
	     s1:i32 s2:i32 s3:i32 s4:i32 s5:i32)
      (glClearColor 0.0 0.0 1.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (set! cnt (+ cnt 5.0))
      
      (glLoadIdentity)
      ;(gl-look-at 0.0 0.0 (+ 1000.0 (* 100.0 (cos (* cnt .01)))) 0.0 0.0 0.0 0.0 1.0 0.0)
      ;(gl-look-at 0.0 0.0 1300.0 0.0 0.0 0.0 0.0 1.0 0.0)
      ;(gl-look-at 0.0 0.0 1037.0 0.0 0.0 0.0 0.0 1.0 0.0)
      (gl-look-at 0.0 0.0 2880.0 0.0 0.0 0.0 0.0 1.0 0.0)                        
      
      ;(set-grid-offsets 1.0 1.0 1.0) ;(* 2.0 (dtof (cos (* .00005 (i64tod (now)))))))
      (set-grid-offsets 1.0 1.0 (* 2.0 (dtof (cos (* .00002 (i64tod (now)))))))
      
      ;; shader pass 1
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo1 0))    
      (glUseProgram s1)            
      (glActiveTexture GL_TEXTURE0)
      (glUniform2fv (glGetUniformLocation s1 "texoffset") 25 gridoffsets)
      (glUniform1i (glGetUniformLocation s1 "tex1") 0)
      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; (gl-draw-img-from-img
      ;;  (modulo cnt 9000.0) 0.0       
      ;;  scr_width 512.0
      ;;  (* scr_width -0.5) (* scr_height -0.5)
      ;;  (* 1.0 scr_width) (* 1.0 scr_height) 0.0 img)      
      (gl-draw-img-from-img
       (modulo cnt 9000.0) 0.0       
       scr_width 170.6
       (* scr_width -0.5) (* scr_height -0.5)
       (* 1.0 scr_width) (* 0.3333333 scr_height) 0.0 img)
      (gl-draw-img-from-img
       (modulo (* 1.1 cnt) 9000.0) 170.6
       scr_width 170.6
       (* scr_width -0.5) (+ (* scr_height -0.5) (* 0.3333333 scr_height))
       (* 1.0 scr_width) (* 0.3333333 scr_height) 0.0 img)
      (gl-draw-img-from-img
       (modulo (* 1.2 cnt) 9000.0) 341.2       
       scr_width 170.6
       (* scr_width -0.5) (+ (* scr_height -0.5) (* 0.6666666 scr_height))
       (* 1.0 scr_width) (* 0.3333333 scr_height) 0.0 img)            
      (glBindFramebuffer GL_FRAMEBUFFER 0)   
      (glUseProgram 0)
      
      ;; shader pass 2
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo2 0))    
      (glUseProgram s2)     
      (glActiveTexture GL_TEXTURE0)
      (glUniform2fv (glGetUniformLocation s2 "texoffset") 25 gridoffsets)
      (glUniform1i (glGetUniformLocation s2 "tex1") 0)
      (glClearColor 1.0 0.0 0.0 1.0)      
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (gl-draw-img (* scr_width -0.5) (* scr_height -0.5)
      		   scr_width scr_height 0.0 (tref fbo1 1))
      ;(gl-draw-img -450.0 -300.0 900.0 600.0 0.0 (tref fbo1 1))
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)

      ;; shader pass 3
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo1 0))    
      (glUseProgram s3)
      (glActiveTexture GL_TEXTURE0)
      (glUniform2fv (glGetUniformLocation s3 "texoffset") 25 gridoffsets)
      (glUniform1i (glGetUniformLocation s3 "tex1") 0)
      (glClearColor 0.0 1.0 1.0 1.0)      
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (gl-draw-img (* scr_width -0.5) (* scr_height -0.5)
      		   scr_width scr_height 0.0 (tref fbo2 1))      
      ;(gl-draw-img -450.0 -300.0 900.0 600.0 0.0 (tref fbo2 1))
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)

      ;; shader pass 4
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo2 0))    
      (glUseProgram s4)
      (glActiveTexture GL_TEXTURE0)
      (glUniform2fv (glGetUniformLocation s4 "texoffset") 25 gridoffsets)
      (glUniform1i (glGetUniformLocation s4 "tex1") 0)
      (glClearColor 1.0 1.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (gl-draw-img (* scr_width -0.5) (* scr_height -0.5)
      		   scr_width scr_height 0.0 (tref fbo1 1))      
      ;(gl-draw-img -450.0 -300.0 900.0 600.0 0.0 (tref fbo1 1))
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)
      
      ;; shader output pass (i.e. don't draw output to an fbo)
      (glUseProgram s5)
      (glUniform2fv (glGetUniformLocation s5 "texoffset") 25 gridoffsets)
      (glUniform1i (glGetUniformLocation s5 "tex1") 0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      
      (gl-draw-img (* scr_width -0.5) (* scr_height -0.5) scr_width scr_height 0.0 (tref fbo2 1))
      
      ;; (gl-draw-img-from-img
      ;;  (+ 1000.0 (* 1000.0 (cos (* .001 cnt)))) 0.0 ;(modulo cnt 10000.0) 0.0
      ;;  scr_width 512.0
      ;;  (* scr_width -0.5) (* scr_height -0.5)
      ;;  scr_width scr_height 0.0 img)
      

      ;; (gl-draw-img-b 0.0 0.0 ;(modulo cnt 10000.0) 0.0
      ;; 		     3000.0 512.0
      ;; 		     (* scr_width -0.5) (* scr_height -0.5)
      ;; 		     scr_width scr_height 0.0 img)
      

      ;; (gl-draw-img-b (modulo cnt 10000.0) 0.0
      ;; 		     scr_width 512.0
      ;; 		     (* scr_width -0.5) (* scr_height -0.5)
      ;; 		     scr_width scr_height 0.0 img)
      

      (glFlush))))


;; standard impromptu callback to call openg-draw
(define opengl-test
  (lambda (time degree) ; distance)
    (if (< time (now))
	(println 'im-late))
    (define tt (now))
    (define distance 80.0)
    (gl-loop myimg fbo1 fbo2
	     *shader1* *shader2* *shader3* *shader4* *shader5*)
    (gl:swap-buffers pr2)
    (callback (+ time 200) 'opengl-test (+ time 600) (+ degree 0.01)))) ; distance)))

      		 		 	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; shaders
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; vert shader
(define passthrough_vert
"// VERTEX SHADER
// #version 330

varying vec2 TexCoord;
 
void main() {   
   // pass through texture coordinate
   //TexCoord =  gl_TextureMatrix[0].st * gl_MultiTexCoord0.st;   
   TexCoord = gl_MultiTexCoord0.st;
   gl_FrontColor = gl_Color;
   gl_Position = ftransform();
}")


;; frag shader
(define passthrough_frag
"//  FRAGMENT SHADER
// #version 330
#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2DRect(tex1,TexCoord);
}")


;; frag shader
(define greyscale_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   float alpha = texture2DRect(tex1,TexCoord).a;
   float grey = dot(texture2DRect(tex1,TexCoord).rgb, vec3(0.299, 0.587, 0.114));
   gl_FragColor = vec4(vec3(grey),alpha);
}")


;; sepia
(define sepia_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   float alpha = texture2DRect(tex1,TexCoord).a;
   float grey = dot(texture2DRect(tex1,TexCoord).rgb, vec3(0.299, 0.587, 0.114));
   gl_FragColor = vec4(grey*vec3(1.2,1.0,0.8),alpha);
}")


(define invert_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;

varying vec2 TexCoord;

void main() {
   float alpha = texture2DRect(tex1,TexCoord).a;
   vec4 colour = texture2DRect(tex1,TexCoord);
   gl_FragColor = vec4(1.0 - colour.rgb,alpha);
}")


(define gaussian_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
   vec4 sample[25];
   for (int i = 0; i < 25; i++)
   {
      // Sample a grid around and including our texel
      sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
   }
 
   gl_FragColor = ((1.0  * (sample[0] + sample[4]  + sample[20] + sample[24])) +
	           (4.0  * (sample[1] + sample[3]  + sample[5]  + sample[9] + sample[15] + sample[19] + sample[21] + sample[23])) +
	           (7.0  * (sample[2] + sample[10] + sample[14] + sample[22])) +
	           (16.0 * (sample[6] + sample[8]  + sample[16] + sample[18])) +
	           (26.0 * (sample[7] + sample[11] + sample[13] + sample[17])) +
	           (41.0 * sample[12])
	           ) / 273.0;
   //gl_FragColor = vec4(1.0,0.0,0.0,1.0);
}")


;;  Blur (median filter)
(define blur_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
   gl_FragColor = vec4(0.0);
 
   for (int i = 0; i < 25; i++)
   {
      // Sample a grid around and including our texel
      gl_FragColor += texture2DRect(tex1, TexCoord + texoffset[i]);
   }
 
   gl_FragColor /= 25.0;
}")


;;  sharpen
(define sharpen_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
    vec4 sample[25];
 
    for (int i = 0; i < 25; i++)
    {
       // Sample a grid around and including our texel
       sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
    }
  
    gl_FragColor = 25.0 * sample[12];
 
    for (int i = 0; i < 25; i++)
    {
       if (i != 12)
          gl_FragColor -= sample[i];
    }
}")

(define dilate_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {  
   vec4 sample[25];
   vec4 maxValue = vec4(0.0);
 
   for (int i = 0; i < 25; i++)
   {
      // Sample a grid around and including our texel
      sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
 
      // Keep the maximum value		
      maxValue = max(sample[i], maxValue);
   }
 
   gl_FragColor = maxValue;
}")


(define erode_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
    vec4 sample[25];
    vec4 minValue = vec4(1.0);
 
    for (int i = 0; i < 25; i++)
    {
        // Sample a grid around and including our texel
        sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
 
        // Keep the minimum value		
        minValue = min(sample[i], minValue);
    }
    gl_FragColor = minValue;
}")


(define edge_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform float     time;
uniform vec2      texoffset[25];

varying vec2 TexCoord;

void main() {
    vec4 sample[25];
 
    for (int i = 0; i < 25; i++)
    {
       // Sample a grid around and including our texel
       sample[i] = texture2DRect(tex1, TexCoord + texoffset[i]);
    }

    gl_FragColor = 24.0 * sample[12];
 
    for (int i = 0; i < 25; i++)
    {
	if (i != 12)
	   gl_FragColor -= sample[i];
    }
}")


(define blend_frag
"//  FRAGMENT SHADER
// #version 330

#extension GL_ARB_texture_rectangle : enable

uniform sampler2DRect tex1;
uniform sampler2DRect img;
uniform float       time;
uniform float       opacity;

varying vec2 TexCoord;

void main() {
    vec4 base = texture2DRect(tex1, TexCoord);
    vec4 blend = texture2DRect(img, TexCoord);

    vec4 result = blend + base;
         result = clamp(result, 0.0, 1.0);

    gl_FragColor = mix(base, result, opacity);
}")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  Now setup and run
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define pass_shader (create-shader passthrough_vert passthrough_frag))
(define invert_shader (create-shader passthrough_vert invert_frag))
(define greyscale_shader (create-shader passthrough_vert greyscale_frag))
(define sepia_shader (create-shader passthrough_vert sepia_frag))
(define gaussian_shader (create-shader passthrough_vert gaussian_frag))
(define blur_shader (create-shader passthrough_vert blur_frag))
(define sharpen_shader (create-shader passthrough_vert sharpen_frag))
(define dilate_shader (create-shader passthrough_vert dilate_frag))
(define erode_shader (create-shader passthrough_vert erode_frag))
(define edge_shader (create-shader passthrough_vert edge_frag))

(define *shader1* dilate_shader)
(define *shader2* erode_shader)
(define *shader3* gaussian_shader)
(define *shader4* sharpen_shader)
(define *shader5* erode_shader)

(define *shader1* pass_shader) ;invert_shader)
(define *shader2* sharpen_shader)
(define *shader3* pass_shader)
(define *shader4* pass_shader)
(define *shader5* pass_shader)
;(define *shader5* sharpen_shader)

(opengl-test (now) 0.0)
