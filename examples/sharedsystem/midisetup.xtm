;;; sharedsystem/midisetup.xtm -- initialise sharedsystem MIDI

;;; Commentary:

;; this sets up a MIDI input and output device and sets up a polling loop &
;; xtlang handler function for receiving MIDI input

;; for info on how to load the sharedsystem, see examples/sharedsystem/setup.xtm

;; if you *really* don't want to load the audio stuff, you can just load this
;; file on its own

;;; Code:

;; (sys:load "libs/external/instruments_ext.xtm")
;; (sys:load "libs/external/audio_dsp_ext.xtm")
(sys:load "libs/core/pattern-language.xtm")
(sys:load "libs/external/midi.xtm")

;; a couple more "wrapper" bind funcs so we can access info about the midi
;; devices in scheme

;; perhaps this stuff should go in the main portmidi library - will leave it
;; here for now

(bind-func pm_device_with_id
  "return pointer to device info struct"
  (lambda (id)
    (Pm_GetDeviceInfo id)))

(bind-func pm_device_name
  (lambda (device_id)
    (let ((dev_info (Pm_GetDeviceInfo device_id)))
      (if (null? dev_info)
          "" ;; "empty" name
          (tref dev_info 2)))))

(bind-func pm_device_input_p
  (lambda (device_id)
    (let ((dev_info (Pm_GetDeviceInfo device_id)))
      (if (null? dev_info)
          0 ;; false if the device ID doesn't exist
          (tref dev_info 3)))))

(bind-func pm_device_output_p
  (lambda (device_id)
    (let ((dev_info (Pm_GetDeviceInfo device_id)))
      (if (null? dev_info)
          0 ;; false if the device ID doesn't exist
          (tref dev_info 4)))))

(bind-func pm_count_devices
  (lambda ()
    (Pm_CountDevices)))

;; helper for doing regex-based matching of device names
(define get-midi-device-names-alist
  (lambda ()
    (make-list-with-proc
     (pm_count_devices)
     (lambda (id) (cons id (cptr->string (pm_device_name id)))))))

(define get-midi-input-device-names-alist
  (lambda ()
    (filter (lambda (dev) (= 1 (pm_device_input_p (car dev))))
            (get-midi-device-names-alist))))

(define get-midi-output-device-names-alist
  (lambda ()
    (filter (lambda (dev) (= 1 (pm_device_output_p (car dev))))
            (get-midi-device-names-alist))))

(define *min* #f)
(define *mout* #f)

;; initialise the midi in/out devices based on either the --midiin/--midiout CLI
;; params or (alternately) the EXT_MIDI_{IN,OUT}_DEVICE_NAME environment
;; variables

;; this now uses regex-matching on midi device name - this both more convenient
;; than having to get the exact string right, and also consistent with the
;; "select audio device" behaviour

;;;;;;;;;;;;;;;;;
;; midi output ;;
;;;;;;;;;;;;;;;;;

(let* ((midi-out-device-name (or (sys:cmdarg "midiout")
                                 (sys:get-env "EXT_MIDI_OUT_DEVICE_NAME")
                                 #f))
       (matching-devices (and midi-out-device-name
                              (filter (lambda (dev) (regex:match? (cdr dev) midi-out-device-name))
                                      (get-midi-output-device-names-alist)))))
  (cond ((not midi-out-device-name)
         (print-with-colors
          'yellow 'default #t
          (print (string-append
                  "Warning: no --midiout CLI arg or EXT_MIDI_OUT_DEVICE_NAME env var specified\n"
                  "No midi output device configured\n"))))
        ((null? matching-devices)
         (print-with-colors
          'yellow 'default #t
          (print (string-append
                  "Warning: no MIDI output device fount matching regex '" midi-out-device-name "'\n"
                  "No midi output device configured\n"))))
        (else
         (let ((device (car matching-devices))) ;; pick the first one with name matching regex
           (set_midi_out (car device))
           (set! *mout* (get_midi_out))
           (println 'midiout '*mout* (cptr->string (pm_device_name (car device))) 'is *mout*)))))

;;;;;;;;;;;;;;;;;
;; midi input ;;
;;;;;;;;;;;;;;;;;

(let* ((midi-in-device-name (or (sys:cmdarg "midiin")
                                 (sys:get-env "EXT_MIDI_IN_DEVICE_NAME")
                                 #f))
       (matching-devices (and midi-in-device-name
                              (filter (lambda (dev) (regex:match? (cdr dev) midi-in-device-name))
                                      (get-midi-input-device-names-alist)))))
  (cond ((not midi-in-device-name)
         (print-with-colors
          'yellow 'default #t
          (print (string-append
                  "Warning: no --midiin CLI arg or EXT_MIDI_IN_DEVICE_NAME env var specified\n"
                  "No midi input device configured\n"))))
        ((null? matching-devices)
         (print-with-colors
          'yellow 'default #t
          (print (string-append
                  "Warning: no MIDI input device fount matching regex '" midi-in-device-name "'\n"
                  "No midi input device configured\n"))))
        (else
         (let ((device (car matching-devices))) ;; pick the first one with name matching regex
           (set_midi_in (car device))
           (set! *min* (get_midi_in))
           (println 'midiin '*min* (cptr->string (pm_device_name (car device))) 'is *min*)))))

(bind-val MCC_ARR |127,float|)

(bind-func MCC
  (lambda (idx)
    (aref MCC_ARR idx)))

(bind-func midi_note_on
  (lambda (timestamp:i32 pitch:i32 volume:i32 chan:i32)
    ;; (println "NOTE_ON :" pitch volume chan "timestamp:" timestamp)
    void))

(bind-func midi_note_off
  (lambda (timestamp:i32 pitch:i32 volume:i32 chan:i32)
    ;; (println "NOTE_OFF:" pitch volume chan "timestamp:" timestamp)
    void))

(bind-func midi_cc
  (lambda (timestamp:i32 controller:i32 value:i32 chan:i32)
    ;; (println "MIDI_CC :" controller value chan "timestamp:" timestamp)
    void))

;; if there's a midi input device, start up midi 'xtlang' scheduler
(if *min* (start_midi_scheduler))

(print-with-colors
 'green 'default #t
 (print "sharedsystem MIDI setup complete\n"))
