;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Simple GStreamer demo
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; load gstreamer lib
(load "libs/gstreamer_lib.xtm")

(bind-func bus_call:GstBusFunc
  (lambda (bus msg data)
    (let ((loop (cast data GMainLoop*))
	  (msgtype (tref msg 3))
	  (i 0)
	  (time (tref msg 4)))
      ;(printf "msgtype:%d time:%llu\n" msgtype time)
      (cond ((= msgtype GST_MESSAGE_EOS)
	     (printf "End of stream\n")
	     (g_main_loop_quit loop)
	     1)
	    ((= msgtype GST_MESSAGE_ERROR)
	     (let ((debug:|1,i8*|* (alloc))
		   (error:|1,GError*|* (alloc)))
	       (gst_message_parse_error msg (cast error GError**) (cast debug i8**))
	       (g_free (pref debug 0))
	       (printf "GstError: %s\n" (tref (pref error 0) 2))
	       (g_error_free (pref error 0))
	       1))
	    (else 1))
      (i64toi1 1))))


(bind-func on_pad_added
  (lambda (element:GstElement* pad:GstPad* data:gpointer)
    (printf "Dynamic pad created linking demux/decode\n")    
    (let ((decoder (cast data GstElement*))
	  (sinkpad (gst_element_get_static_pad decoder "sink")))
      (gst_pad_link pad sinkpad)
      (gst_object_unref sinkpad)
      void)))
      

;; path to ogg file
(bind-func ogg_audio
  (lambda (path)
    (gst_init null null)
    (let ((loop (g_main_loop_new null 0))
	  (pipeline (gst_pipeline_new "audio-player"))
	  (source (gst_element_factory_make "filesrc" "file-source"))
	  (demuxer (gst_element_factory_make "oggdemux" "ogg-demuxer"))
	  (decoder (gst_element_factory_make "vorbisdec" "vorbis-decoder"))
	  (conv (gst_element_factory_make "audioconvert" "converter"))
	  (sink (gst_element_factory_make "autoaudiosink" "audio-output"))
	  (bus (gst_pipeline_get_bus (cast pipeline GstPipeline*)))
	  (msg (gst_message_new_eos (cast pipeline GstObject*)))
	  (G_TYPE_STRING (* 4 (g_type_fundamental 16)))
	  (i 0)
	  (gval:GValue* (alloc)))
      (g_value_init gval G_TYPE_STRING)      
      (g_value_set_static_string gval path)
      ;; set location of audio file
      (g_object_set_property (cast source GObject*) "location" gval)
      (printf "set property\n")
      ;; add message handler
      (gst_bus_add_watch bus (cast (llvm_get_function_ptr "bus_call_native") GstBusFunc) loop)

      ;; unref bus
      ;(gst_object_unref bus)

      (printf "add elements to pipeline\n")
      (gst_bin_add (cast pipeline GstBin*) source)
      (gst_bin_add (cast pipeline GstBin*) demuxer)
      (gst_bin_add (cast pipeline GstBin*) decoder)
      (gst_bin_add (cast pipeline GstBin*) conv)
      (gst_bin_add (cast pipeline GstBin*) sink)

      (printf "link elements\n")
      (gst_element_link source demuxer)
      (gst_element_link decoder conv)
      (gst_element_link conv sink)

      (printf "connect signal\n")
      (g_signal_connect (cast demuxer gpointer) "pad-added"
      			(cast (llvm_get_function_ptr "on_pad_added_native") GCallback)
      			(cast decoder gpointer))

      (printf "now playing\n")
      (gst_element_set_state pipeline GST_STATE_PLAYING)

      (printf "running\n")
      (g_main_loop_run loop)

      (printf "returned, stopping playback\n")
      (gst_element_set_state pipeline GST_STATE_NULL)

      (printf "delete pipeline\n")
      (gst_object_unref (cast pipeline gpointer))

      0)))


(bind-func playbin_bus_call:GstBusFunc
  (lambda (bus msg data)
    (let ((playz (cast data GstElement*))
	  (msgtype (tref msg 3))
	  (time (tref msg 4)))
      (cond ((= msgtype GST_MESSAGE_EOS)
	     (printf "End of stream\n")
	     (gst_element_set_state playz GST_STATE_NULL)
	     (gst_object_unref (cast playz gpointer))
	     1)
	    ((= msgtype GST_MESSAGE_ERROR)
	     (let ((debug:|1,i8*|* (alloc))
		   (error:|1,GError*|* (alloc)))
	       (gst_message_parse_error msg (cast error GError**) (cast debug i8**))
	       (g_free (pref debug 0))
	       (printf "GstError: %s\n" (tref (pref error 0) 2))
	       (g_error_free (pref error 0))
	       1))
	    (else 1))
      (i64toi1 1))))


;; URI to any media
(bind-func playbin
  (lambda (path)
    (gst_init null null)
    (let ((playz (gst_element_factory_make "playbin2" "play"))
	  (bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
	  (G_TYPE_STRING (* 4 (g_type_fundamental 16)))
	  (gval:GValue* (alloc)))
      (g_value_init gval G_TYPE_STRING)
      (g_value_set_string gval path)      
      (g_object_set_property (cast playz GObject*) "uri" gval)
      (gst_bus_add_watch bus (cast (llvm_get_function_ptr "playbin_bus_call_native") GstBusFunc) (cast playz gpointer))
      (gst_object_unref bus)
      (gst_element_set_state playz GST_STATE_PLAYING)
      1)))

;; message loop
(bind-func g_loop
  (lambda ()
    (g_main_context_iteration null 0)))

(define msg-loop
  (lambda ()
    (g_loop)
    (callback (+ (now) 2000) 'msg-loop)))

;; start GST msg loop
(msg-loop)


;; start audio playback
(playbin "file:///home/andrew/Music/Enigma/Enigma/02\ Track\ 02.mp3")
;; 1
(playbin "file:///home/andrew/Videos/stp_model.mov")
;; 2
(playbin "file:///home/andrew/Videos/stp_model.mov")
;; 3
(playbin "file:///home/andrew/Videos/stp_model.mov")

;; (ogg_audio "/tmp/audio.ogg")
