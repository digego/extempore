;;; kinect_fire.xtm -- a Simple Fluid Dynamics Example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: kinectlib

;;; Commentary:

;; A nice and simple 2d fluid simulation
;; based on code from Jos Stam and Mike Ash.
;;
;; This little example is nice and simple
;; The computation is all on the CPU and
;; the density of each cell is drawn using
;; very simple immediate OpenGL calls.
;;
;; The simulation is a little smoke sim
;; with constant air streams from bottom->top
;; and from left->right.  Smoke is injected
;; into the system semi-regularly.

;;; Code:

(define *server* #t)

;; start new procs
(ipc:new "fluid1" 7094)
(ipc:new "fluid2" 7095)

;; optimize compiles
(llvm:optimize #t)

;(sys:load "../libs/core/audio_dsp.xtm")
(sys:load "libs/external/gl.xtm")
(sys:load "libs/external/particles.xtm")
(sys:load "libs/external/fluid2d.xtm")
(sys:load "libs/contrib/kinect.xtm")

;; make opengl context
;(define pr2 (gl:make-ctx ":0.0" #f 0.0 0.0 900.0 600.0))
;(define pr2 (gl:make-ctx ":0.0" #f 0.0 0.0 1080.0 960.0))
(define pr2 (gl:make-ctx ":0.0" #t 0.0 0.0 1920.0 (* 1080.0 2.0)))
;(gl-set-view 900.0 600.0)
(gl-set-view 1920.0 (* 2.0 1080.0))
;(gl-set-view 1080.0 960.0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Fluid sym stuff
;;

;; help function
(bind-func range-limit
  (lambda (v:double l:double h:double)
    (if (< v l) l
  (if (> v h) h
      v))))

;; I don't want boundary conditions for this one
(bind-func fluid-set-boundary
  (lambda (b:i64 x:double* Ny:i64 N:i64)
    1))

(bind-func get-fluid-cube-1
;   (let ((cube (fluid-cube-create 322 182 0.0002 0.00002 0.05)))    ; test
   (let ((cube (fluid-cube-create 322 182 0.005 0.000000002 0.035)))    ; test
    (lambda ()
      cube)))

(bind-func fluid-fsc-1
  (lambda ()
    (fluid-step-cube (get-fluid-cube-1))))

(bind-func get-fluid-cube-2
;   (let ((cube (fluid-cube-create 322 182 0.0002 0.00002 0.05)))    ; test
   (let ((cube (fluid-cube-create 322 182 0.005 0.000000002 0.035)))    ; test
    (lambda ()
      cube)))

(bind-func fluid-fsc-2
  (lambda ()
    (fluid-step-cube (get-fluid-cube-2))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Data Handling
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val osc_xs double* 20)
(bind-val osc_ys double* 20)
(bind-val osc_xxs double* 20)
(bind-val osc_yys double* 20)
(bind-val osc_vols double* 20)
(bind-val osc_grads double* 20)
(bind-val osc_alive i64* 20)
(bind-val vehicles_x double* 1000)
(bind-val vehicles_y double* 1000)
(bind-val vehicles_xx double* 1000)
(bind-val vehicles_yy double* 1000)
(bind-val ubo i32 -1)
(bind-val vehicles float* 2000)

(bind-func init-osc-vars
  (lambda ()
    (let ((i 0))
      (dotimes (i 20)
  (pset! osc_xs i 100.0)
  (pset! osc_ys i 100.0)
  (pset! osc_xxs i 0.0)
  (pset! osc_yys i 0.0)
  (pset! osc_yys i 0.0)
  (pset! osc_vols i 0.0)
  (pset! osc_grads i 0.0)
  (pset! osc_alive i 0)))))

(init-osc-vars)


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OPENGL DRAWING STUFF!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func add-density-1
  (lambda (x:i64 y:i64 amount:double)
    (let ((cube (get-fluid-cube-1)))
      (fluid-cube-add-density cube x y amount))))

(bind-func add-density-2
  (lambda (x:i64 y:i64 amount:double)
    (let ((cube (get-fluid-cube-2)))
      (fluid-cube-add-density cube x y amount))))

(bind-func add-velocity-1
  (lambda (x y amount-x amount-y)
    (fluid-cube-add-velocity (get-fluid-cube-1) x y amount-x amount-y)))

(bind-func add-velocity-2
  (lambda (x y amount-x amount-y)
    (fluid-cube-add-velocity (get-fluid-cube-2) x y amount-x amount-y)))

(bind-func note-active
  (lambda (idx)
    (pref osc_alive idx)))

(bind-func note-pitch
  (lambda (idx)
    (pref osc_xs idx)))

(bind-func note-activity
  (lambda (idx)
    (+ (pref osc_xxs idx)
       (pref osc_yys idx))))

(bind-func note-grad
  (lambda (idx)
    (pref osc_grads idx)))

(bind-func update-fluid-sym-state
  (lambda ()
    (let ((i 0))
      (dotimes (i 20)
  (if (> (note-active i) 0)
      (let ((x (dtoi64 (range-limit (* 322.0 (- (* 1.1 (pref osc_xs i)) .05)) 1.0 321.0)))
      (ya (pref osc_ys i))
      (y (dtoi64 (+ 1.0 (* 181.0 ya))))
      (xx (pref osc_xxs i))
      (yy (pref osc_yys i)))
        (if (< x 320)
      (add-velocity-1 x y (* 1000.0 xx) (* -1000.0 yy))
      (add-velocity-2 x y (* 1000.0 xx) (* -1000.0 yy)))
        ;(add-velocity-1 x y (* 1000.0 xx) (* -1000.0 yy))
        1)
      1))
      1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; helpers for opengl rendering of fluidsym
(bind-func set-data-arrays-lines
  (lambda (cube:fluidcube* point_data:float* color_data:float* xoffset:float yoffset:float n:i64)
    (let ((ii:i64 0)
    (jj:i64 0)
    (Vx (tref cube 6))
    (Vy (tref cube 7))
    (size (tref cube 0))
    (size-y (tref cube 10))
    (cnt 0)
    (red (dtof 0.3))
    (blue (dtof 0.9))
    (green (dtof 0.0))
    (trans (dtof 0.9))
    (mn:double 0.0))
      (dotimes (jj (- size-y 2))
  (dotimes (ii (- size 2))
    (let ((idx (+ (+ ii 1) (* (+ jj 1) size)))
    (xv (pref Vx idx))
    (yv (pref Vy idx))
    (norm (* 1.0 (sqrt (+ (* xv xv) (* yv yv)))))
    (n1 (fabs (/ norm 0.5))))
      ;(set! norm (* 0.125 norm))
      (if (> norm mn) (set! mn norm))
      (pset! point_data (+ 0 (* 4 cnt)) (+ xoffset (i64tof ii)))
      (pset! point_data (+ 1 (* 4 cnt)) (+ yoffset (i64tof jj)))
      (pset! point_data (+ 2 (* 4 cnt)) (dtof (+ (ftod xoffset)
                   (/ xv norm)
              (i64tod ii))))
      (pset! point_data (+ 3 (* 4 cnt)) (dtof (+ (ftod yoffset)
                   (i64tod jj)
                   (/ yv norm))))
      (pset! color_data (+ 0 (* 8 cnt)) red)
      (pset! color_data (+ 1 (* 8 cnt)) green)
      (pset! color_data (+ 2 (* 8 cnt)) blue)
      (pset! color_data (+ 3 (* 8 cnt)) 1.0) ;(dtof (* 4.0 n1))) ;(dtof n1)) ;(dtof (/ norm 10.0))) ;trans) ;trans)
      (pset! color_data (+ 4 (* 8 cnt)) red)
      (pset! color_data (+ 5 (* 8 cnt)) green)
      (pset! color_data (+ 6 (* 8 cnt)) blue)
      (pset! color_data (+ 7 (* 8 cnt)) (dtof (* 4.0 n1))) ; (dtof (/ norm 10.0)))
      (set! cnt (+ cnt 1))))))
    void))


(bind-func set-data-arrays-points
  (lambda (cube:fluidcube* point_data:float* color_data:float* xoffset:float yoffset:float n:i64)
    (let ((densities (tref cube 5))
    (ii:i64 0)
    (jj:i64 0)
    (Vx (tref cube 6))
    (Vy (tref cube 7))
    (size (tref cube 0))
    (size-y (tref cube 10))
    (cvar:float 0.0)
    (cnt 0)
    (red (dtof 0.5)) ;(dtof 0.3))
    (blue (dtof 0.1))
    (green (dtof 0.2))) ;(dtof .2)))
      (dotimes (ii (- size 2))
  (dotimes (jj (- size-y 2))
    (let ((idx (+ (+ ii 1) (* (+ jj 1) size))))
      (pset! point_data (+ 0 (* 2 cnt)) (+ xoffset (i64tof ii)))
      (pset! point_data (+ 1 (* 2 cnt)) (+ yoffset (i64tof jj)))
      (set! cvar (dtof (* 1.0 (pref densities idx))))
      (pset! color_data (+ 0 (* 4 cnt)) (* cvar red))
      (pset! color_data (+ 1 (* 4 cnt)) (* cvar green))
      (pset! color_data (+ 2 (* 4 cnt)) (* cvar blue)) ;(* cvar (- 1.0 blue)))
      (pset! color_data (+ 3 (* 4 cnt)) 1.0)
      (set! cnt (+ cnt 1))))))
    void))


(bind-func set-data-particles
  (lambda (cube:fluidcube* psys:psystem* cnt:i64 xoffset:float yoffset:float)
    (let ((densities (tref cube 5))
    (ii:i64 0)
    (jj:i64 0)
    (kk:i64 0)
    (Vx (tref cube 6))
    (Vy (tref cube 7))
    (size (tref cube 0))
    (size-y (tref cube 10))
    (cvar:float 0.0)
    (maxcvar:float 0.0)
    (mincvar:float 0.0)
      (xs (psystem_xs psys))
    (ys (psystem_ys psys))
    (sizes (psystem_sizes psys))
    (states (psystem_states psys))
    (reds (psystem_reds psys))
    (greens (psystem_greens psys))
    (blues (psystem_blues psys))
    (alphas (psystem_alphas psys))
        (red (* 10.0 (dtof 0.1)))
        (blue (* 10.0 (dtof 0.01)))
        (green (* 10.0 (dtof 0.1))))
      (dotimes (kk (- 50000 cnt))
  (pset! states (+ cnt kk) 0))
      (dotimes (ii (- size 2))
      (dotimes (jj (- size-y 2))
        (let ((idx (+ (+ ii 1)
      (* (+ jj 1) size))))
          (if (and (< cnt 50000)
         (> (pref densities idx) 1.0))
        (begin (pset! xs cnt (+ xoffset (i64tof ii)))
           (if (< ii 320)
         (add-velocity-1 ii jj
             (* 0.05 (- (random) .5))
             (* 0.05 (- (random) .5)))
         (add-velocity-2 ii jj
             (* 0.05 (- (random) .5))
             (* 0.05 (- (random) .5))))
               (pset! ys cnt (+ yoffset (i64tof jj)))
           (set! cvar (dtof (* 0.001 (pref densities idx))))
               ;; ;; (set! cvar (dtof (pow (* 0.9 (pref densities idx)) 4.0)))
           ;; (set! cvar (/ (dtof (* 0.5 (pref densities idx))) 50.0))
           (if (< cvar mincvar) (set! mincvar cvar))
           (if (> cvar maxcvar) (set! maxcvar cvar))
               (pset! reds cnt red); (* cvar red))
               (pset! greens cnt green) ;(* cvar green))
               (pset! blues cnt blue) ;(* cvar blue)) ;(* cvar (- 1.0 blue)))
               (pset! alphas cnt (* 1.0 cvar))
               (pset! sizes cnt (* .1 (- 1.0 cvar))) ;(+ .02 (* .1 (- 1.0 cvar)))) ;(+ 15.0 (* (- 1.0 cvar) 15.0)))
               (pset! states cnt 1)
               (set! cnt (+ cnt 1))
               1)
        1))))
      (printf "min:%f max:%f cnt:%lld\n" (ftod mincvar) (ftod maxcvar) cnt)
      )
    cnt))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; A little Kinect Demo (windows only)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func interp2d
  (lambda (p1:Vector4* p2:Vector4* p3:Vector4* pos:float)
    (let ((x (+ (tref p1 0) (* (- (tref p2 0) (tref p1 0)) pos)))
    (y (+ (tref p1 1) (* (- (tref p2 1) (tref p1 1)) pos))))
      (tfill! p3 x y 0.0 0.0)
      void)))

(bind-val offset-x double 100.0)
(bind-val offset-y double 40.0)
(bind-val scale-x double 0.1)
(bind-val scale-y double 0.5)

(bind-func set-scale-x
  (lambda (val)
    (set! scale-x val)))

(bind-func set-scale-y
  (lambda (val)
    (set! scale-y val)))

(bind-func set-offset-x
  (lambda (val)
    (set! offset-x val)))

(bind-func set-offset-y
  (lambda (val)
    (set! offset-y val)))

(set-scale-x 0.5)
(set-scale-y 0.7)

(bind-func add-density-v
 (lambda (v:Vector4* amt:double)
   (let ((xs (* (* 320.0 0.5) scale-x))
   (xy (* (* 360.0 0.5) scale-y))
   (xx (dtoi64 (range-limit (+ offset-x xs (* xs (ftod (tref v 0)))) 0.0 320.0)))
   (yy (dtoi64 (range-limit (+ offset-y xy (* xy (ftod (tref v 1)))) 0.0 360.0))))
     (set! amt (* 1.0 amt))
     (if (< yy 180)
   (add-density-1 xx yy amt)
   (add-density-2 xx (- yy 180) amt)))
   void))

(bind-func add-density-xy
 (lambda (x y amt:double)
   (let ((xs (* (* 320.0 0.5) scale-x))
   (xy (* (* 360.0 0.5) scale-y))
   (xx (dtoi64 (range-limit (+ offset-x xs (* xs x)) 0.0 320.0)))
   (yy (dtoi64 (range-limit (+ offset-y xy (* xy y)) 0.0 180.0))))
     (set! amt (* amt 1.0))
     (if (< yy 180)
   (add-density-1 xx yy amt)
   (add-density-2 xx (- yy 180) amt)))
   void))

(bind-func add-head
  (lambda (head:Vector4* w density)
    (let ((x (ftod (tref head 0)))
    (y (ftod (tref head 1))))
      (add-density-xy x y density)
      (add-density-xy (- x w) y density)
      (add-density-xy (+ x w) y density)
      (add-density-xy x (- y w) density)
      (add-density-xy x (+ y w) density)
      void)))


;; (bind-func ping-skel
;;   (let ((skel-frame (zalloc 1 NUI_SKELETON_FRAME))
;;  (pos (zalloc 100 double)))
;;     (lambda ()
;;       (kinect_get_skeleton 100 skel-frame)
;;       (kinect-smooth-params skel-frame 0.5 0.5 0.5 0.05 0.04)
;;       (let ((skels:|6,NUI_SKELETON_DATA|* (tref-ptr skel-frame 5))
;;      (i 0))
;;  (dotimes (i 6)
;;    (let ((skel-data:NUI_SKELETON_DATA* (aref-ptr skels i))
;;    (state (tref skel-data 0))
;;    (id (tref skel-data 1))
;;    (position:Vector4* (tref-ptr skel-data  4))
;;    (positions:|20,Vector4|* (tref-ptr skel-data 5))
;;    (states:|20,i32|* (tref-ptr skel-data 6))
;;    (head (aref-ptr positions NUI_SKELETON_POSITION_HEAD))
;;    (spine (aref-ptr positions NUI_SKELETON_POSITION_SPINE))
;;    (sld_c (aref-ptr positions NUI_SKELETON_POSITION_SHOULDER_CENTER))
;;    (sld_r (aref-ptr positions NUI_SKELETON_POSITION_SHOULDER_RIGHT))
;;    (sld_l (aref-ptr positions NUI_SKELETON_POSITION_SHOULDER_LEFT))
;;    (hip_c (aref-ptr positions NUI_SKELETON_POSITION_HIP_CENTER))
;;    (hip_r (aref-ptr positions NUI_SKELETON_POSITION_HIP_RIGHT))
;;    (hip_l (aref-ptr positions NUI_SKELETON_POSITION_HIP_LEFT))
;;    (knee_r (aref-ptr positions NUI_SKELETON_POSITION_KNEE_RIGHT))
;;    (knee_l (aref-ptr positions NUI_SKELETON_POSITION_KNEE_LEFT))
;;    (elbow_r (aref-ptr positions NUI_SKELETON_POSITION_ELBOW_RIGHT))
;;    (elbow_l (aref-ptr positions NUI_SKELETON_POSITION_ELBOW_LEFT))
;;    (hand_r (aref-ptr positions NUI_SKELETON_POSITION_HAND_RIGHT))
;;    (hand_l (aref-ptr positions NUI_SKELETON_POSITION_HAND_LEFT))
;;    (ankle_r (aref-ptr positions NUI_SKELETON_POSITION_ANKLE_RIGHT))
;;    (ankle_l (aref-ptr positions NUI_SKELETON_POSITION_ANKLE_LEFT))
;;    (foot_r (aref-ptr positions NUI_SKELETON_POSITION_FOOT_RIGHT))
;;    (foot_l (aref-ptr positions NUI_SKELETON_POSITION_FOOT_LEFT))
;;    (head-state (aref states NUI_SKELETON_POSITION_HEAD)))
;;      (if (= state 2)
;;    (let ((v4 (salloc Vector4))
;;          (k 0)
;;          (dens 10.0))
;;      (dotimes (k 40)
;;        (interp2d hand_r elbow_r v4 (* (dtof 0.025) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 40)
;;        (interp2d elbow_r sld_r v4 (* (dtof 0.025) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 40)
;;        (interp2d sld_r sld_c v4 (* (dtof 0.025) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 40)
;;        (interp2d sld_c sld_l v4 (* (dtof 0.025) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 40)
;;        (interp2d sld_l elbow_l v4 (* (dtof 0.025) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 40)
;;        (interp2d elbow_l hand_l v4 (* (dtof 0.025) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 20)
;;        (interp2d spine head v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 20)
;;        (interp2d spine head v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 20)
;;        (interp2d spine hip_c v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 dens))
;;      (dotimes (k 20)
;;        (interp2d hip_c hip_r v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d hip_c hip_l v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d hip_r knee_r v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d hip_l knee_l v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d knee_l ankle_l v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d knee_r ankle_r v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d ankle_l foot_l v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (dotimes (k 20)
;;        (interp2d ankle_r foot_r v4 (* (dtof 0.05) (i64tof k)))
;;        (add-density-v v4 (* 2.0 dens)))
;;      (add-head head 0.05 (* 5.0 dens))
;;      ;(add-density-v head 150.0)
;;      1)
;;    1)
;;      1)))
;;       void)))


(bind-func draw-skeleton
  (lambda (positions:|20,Vector4|*)
    ;(printf "-----> %f\n" (ftod (tref (aref-ptr positions 0) 0)))
    (let ((head (aref-ptr positions NUI_SKELETON_POSITION_HEAD))
    (spine (aref-ptr positions NUI_SKELETON_POSITION_SPINE))
    (sld_c (aref-ptr positions NUI_SKELETON_POSITION_SHOULDER_CENTER))
    (sld_r (aref-ptr positions NUI_SKELETON_POSITION_SHOULDER_RIGHT))
    (sld_l (aref-ptr positions NUI_SKELETON_POSITION_SHOULDER_LEFT))
    (hip_c (aref-ptr positions NUI_SKELETON_POSITION_HIP_CENTER))
    (hip_r (aref-ptr positions NUI_SKELETON_POSITION_HIP_RIGHT))
    (hip_l (aref-ptr positions NUI_SKELETON_POSITION_HIP_LEFT))
    (knee_r (aref-ptr positions NUI_SKELETON_POSITION_KNEE_RIGHT))
    (knee_l (aref-ptr positions NUI_SKELETON_POSITION_KNEE_LEFT))
    (elbow_r (aref-ptr positions NUI_SKELETON_POSITION_ELBOW_RIGHT))
    (elbow_l (aref-ptr positions NUI_SKELETON_POSITION_ELBOW_LEFT))
    (hand_r (aref-ptr positions NUI_SKELETON_POSITION_HAND_RIGHT))
    (hand_l (aref-ptr positions NUI_SKELETON_POSITION_HAND_LEFT))
    (ankle_r (aref-ptr positions NUI_SKELETON_POSITION_ANKLE_RIGHT))
    (ankle_l (aref-ptr positions NUI_SKELETON_POSITION_ANKLE_LEFT))
    (foot_r (aref-ptr positions NUI_SKELETON_POSITION_FOOT_RIGHT))
    (foot_l (aref-ptr positions NUI_SKELETON_POSITION_FOOT_LEFT))
    ;(head-state (aref states NUI_SKELETON_POSITION_HEAD))
    (v4:Vector4* (salloc))
    (k 0)
    (dens 10.0))
      ;; (printf "drawing %f,%f,%f,%f\n"
      ;;        (ftod (tref elbow_r 0))
      ;;        (ftod (tref elbow_r 1))
      ;;        (ftod (tref elbow_r 2))
      ;;        (ftod (tref elbow_r 3)))
      (dotimes (k 40)
  (interp2d hand_r elbow_r v4 (* (dtof 0.025) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 40)
  (interp2d elbow_r sld_r v4 (* (dtof 0.025) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 40)
  (interp2d sld_r sld_c v4 (* (dtof 0.025) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 40)
  (interp2d sld_c sld_l v4 (* (dtof 0.025) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 40)
  (interp2d sld_l elbow_l v4 (* (dtof 0.025) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 40)
  (interp2d elbow_l hand_l v4 (* (dtof 0.025) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 20)
  (interp2d spine head v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 20)
  (interp2d spine head v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 20)
  (interp2d spine hip_c v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 dens))
      (dotimes (k 20)
  (interp2d hip_c hip_r v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d hip_c hip_l v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d hip_r knee_r v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d hip_l knee_l v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d knee_l ankle_l v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d knee_r ankle_r v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d ankle_l foot_l v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (dotimes (k 20)
  (interp2d ankle_r foot_r v4 (* (dtof 0.05) (i64tof k)))
  (add-density-v v4 (* 2.0 dens)))
      (add-head head 0.05 (* 5.0 dens))
      void)))


(bind-val texture1 i32 0)

(bind-func load-tex
  (lambda (id)
    ;(let ((t (gl-load-tex "C:/Users/andrew/Desktop/Extempore/Horde3D/textures/particles/star.png" id)))
    (let ((t (gl_load_image_sqr "Horde3D/textures/particles/star.png" id)))
      (set! texture1 t))))

;; 0 meaning load texture into new id
(load-tex 0)


;; a trivial opengl draw loop
;; need to call glfwSwapBuffers to flush
(bind-func gl-loop
  (let (;(degree 0.0)
  (i 0)
  (point_data1:float* (halloc 10000000))
  (color_data1:float* (halloc 10000000))
  (point_data2:float* (halloc 10000000))
  (color_data2:float* (halloc 10000000)))
    (lambda ()
      ;; _skeletons-alive_ and _skeletons_ from kinect.xtm
      (dotimes (i 6)
  (if (pref _skeletons-alive_ i)
      (begin (pset! _skeletons-alive_ i 0)
       (draw-skeleton (aref-ptr _skeletons_ i)))))
      ;(update-fluid-sym-state)

      (glEnable GL_BLEND)
      (glBlendFunc GL_SRC_ALPHA (+ GL_SRC_ALPHA 1))
      (glDisable GL_DEPTH_TEST)

      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glColorMaterial GL_FRONT_AND_BACK GL_AMBIENT_AND_DIFFUSE)

      (glEnable GL_COLOR_MATERIAL)
      (glColor4d 0.0 0.0 0.0 1.0)
      (glLoadIdentity)
      (glEnable GL_LINE_SMOOTH)
      (glEnable GL_POINT_SMOOTH)
      (glPointSize 10.0)

      (glRotated 0.0 0.0 0.0 1.0)
      (glScaled 1.26 1.0 1.0)
      (glTranslated -160.0 -178.0 (* 2.3 -370.0))

      ;; (glRotated 90.0 0.0 0.0 1.0)
      ;; (glScaled 1.26 1.0 1.0)
      ;; (glTranslated -160.0 -178.0 (* 2.3 -370.0))

      (glEnableClientState GL_VERTEX_ARRAY)
      (glEnableClientState GL_COLOR_ARRAY)

      (set-data-arrays-points (get-fluid-cube-1) point_data1 color_data1 0.0 0.0 1)
      (glVertexPointer 2 GL_FLOAT 0 (bitcast point_data1 i8*))
      (glColorPointer 4 GL_FLOAT 0 (bitcast color_data1 i8*))
      (glDrawArrays GL_POINTS 0 (i64toi32 (/ (* 320 180) 1))) ; size-y)))

      (set-data-arrays-points (get-fluid-cube-2) point_data2 color_data2 0.0 180.0 1)
      (glVertexPointer 2 GL_FLOAT 0 (bitcast point_data2 i8*))
      (glColorPointer 4 GL_FLOAT 0 (bitcast color_data2 i8*))
      (glDrawArrays GL_POINTS 0 (i64toi32 (/ (* 320 180) 1))) ; size-y)))

      (set-data-arrays-lines (get-fluid-cube-1) point_data2 color_data2 0.0 0.0 1)
      (glVertexPointer 2 GL_FLOAT 0 (bitcast point_data2 i8*))
      (glColorPointer 4 GL_FLOAT 0 (bitcast color_data2 i8*))
      (glDrawArrays GL_LINES 0 (i64toi32 (/ (* 320 180 2) 1))) ; size-y)))

      (set-data-arrays-lines (get-fluid-cube-2) point_data1 color_data1 0.0 180.0 1)
      (glVertexPointer 2 GL_FLOAT 0 (bitcast point_data1 i8*))
      (glColorPointer 4 GL_FLOAT 0 (bitcast color_data1 i8*))
      (glDrawArrays GL_LINES 0 (i64toi32 (/ (* 320 180 2) 1))) ; size-y)))

      (glDisableClientState GL_VERTEX_ARRAY)
      (glDisableClientState GL_COLOR_ARRAY)

      1)))


;; a trivial opengl draw loop
;; need to call glfwSwapBuffers to flush
(bind-func gl-loop
  (let (;(degree 0.0)
  (psys (psystem_create 50000 texture1))
  (i 0))
    (lambda ()
      ;;(printf "t1:%d\n" texture1)
      ;; _skeletons-alive_ and _skeletons_ from kinect.xtm
      (dotimes (i 6)
  ;(printf "alive %d:%d\n" i (pref _skeletons-alive_ i))
  (if (= (aref _skeletons-alive_ i) 1)
      (begin (aset! _skeletons-alive_ i 0)
       (draw-skeleton (aref-ptr _skeletons_ i)))))
      ;(update-fluid-sym-state)
      ;(ping-skel)

      (let ((cnt (set-data-particles (get-fluid-cube-1) psys 0 0.0 0.0)))
  (set-data-particles (get-fluid-cube-2) psys cnt 0.0 180.0))

      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glColorMaterial GL_FRONT_AND_BACK GL_AMBIENT_AND_DIFFUSE)
      (glLoadIdentity)

      ;(glActiveTexture GL_TEXTURE0)
      ;(glRotated 90.0 0.0 0.0 1.0)
      (glScaled 1.25 1.0 1.0)
      ;(glTranslated -160.0 -178.0 (* 2.3 -370.0))
      (glTranslated 0.0 0.0 -3.0)
      ;(glTranslated 0.0 0.0 -100.0)

      (psystem_draw2 psys 360.0 320.0)

      1)))


(bind-func wind
  (lambda ()
    (let ((i 0))
      (dotimes (i 12)
  ;(add-density-1 (* i 30) 20 300.0)
  (add-velocity-1 (* i 30) 10 0.0 0.0)
  )
      void)))


(bind-func update-borders
  (lambda ()
    (let ((xs1 (fluid-cube-get-last-row (get-fluid-cube-1) 6))
    (ys1 (fluid-cube-get-last-row (get-fluid-cube-1) 7))
    (ds1 (fluid-cube-get-last-row (get-fluid-cube-1) 5))
    (ds2 (fluid-cube-get-first-row (get-fluid-cube-2) 5))
    (xs2 (fluid-cube-get-first-row (get-fluid-cube-2) 6))
    (ys2 (fluid-cube-get-first-row (get-fluid-cube-2) 7)))
      (fluid-cube-set-first-row (get-fluid-cube-2) 5 ds1)
      (fluid-cube-set-first-row (get-fluid-cube-2) 6 xs1)
      (fluid-cube-set-first-row (get-fluid-cube-2) 7 ys1)
      (fluid-cube-set-last-row (get-fluid-cube-1) 5 ds2)
      (fluid-cube-set-last-row (get-fluid-cube-1) 6 xs2)
      (fluid-cube-set-last-row (get-fluid-cube-1) 7 ys2)
      (free xs1) (free xs2) (free ys1) (free ys2) (free ds1) (free ds2)
      void)))


;; opengl-test includes two sources
;; of constant wind speed
;;
;; bottom->top: straight up the middle
;; left->right: oscillates from back to front
;;
;; You might need to slow the rate of this
;; temporal recursion down if your machine
;; doesn't cope.  (i.e. 3000 to 5000 or more
;;
;; standard impromptu callback
(define opengl-test
  (lambda (time degree)
    (if (< (+ time 0) (now))
      (println 'gl-behind (- time (now))))

    (update-borders)

    ;(burners time)
    (wind)
    (gl-loop)
    (gl:swap-buffers pr2)

    (ipc:call-async "fluid1" 'fluid-fsc-1)
    (ipc:call-async "fluid2" 'fluid-fsc-2)

    ;(fluid-step-cube (get-fluid-cube))
    (callback (+ time 0) 'opengl-test
        (if (< time (now))
      (begin ;(println 'missed)
       (+ time 5000))
      (+ time 1200))
        (+ degree 0.001))))


(ipc:call-async "fluid1" 'println "hello fluid 1")
(ipc:call-async "fluid1" 'println "hello fluid 2")
(ipc:call-async "primary" 'println "hello primary")

(io:osc:start-server 7020 "receive-skel-osc"
         (llvm:get-native-function "receive-skel-osc"))

;; skel loop
(define send-skel
  (lambda (beat dur)
    (send-skeleton-osc "localhost" 7020)
    (send-skeleton-osc "131.181.106.74" 7020)
    (callback (*metro* (+ beat (* .5 dur))) 'send-skel (+ beat dur) dur)))


;; start kinect with SKEL TRACKING
(if *server* (kinect-start))

(begin (println 'go)
       (ipc:bind-func "fluid1" 'fluid-fsc-1)
       (ipc:bind-func "fluid2" 'fluid-fsc-2)
       (println 'sleep)
       (sys:sleep 44100)
       (println 'startloop)
       (if *server (send-skel (*metro* 'get-beat 4) 1/12))
       (opengl-test (now) 0.0))
