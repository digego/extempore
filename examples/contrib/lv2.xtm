;;; 3dmodel.xtm -- a very simple LV2 Host example

;; Author: Andrew Sorensen
;; Keywords: extempore, lv2

;;; Commentary:

;; This is the most trivial little LV2 host using the most
;; trivial little lv2 plugin: http://plugin.org.uk/swh-plugins/amp
;;
;; Also, there are a few hard paths that in this file
;; that you'll need to change to something suitable

;;; Code:

(sys:load "libs/external/lilv.xtm")

;; first initialize the LV2 world
(lilv_init_world)

;; second print all installed lv2 plugins on system
(lilv_print_all_lv2_plugins)

;; it helps to have a little wrapper for each plugin
;; so this wrapper gives us a nice 'functional' style
;; by returning a closure wrapper for us.
(bind-func init_lv2_amp
  (lambda (samplerate)
    (let ((in_buf:float* (halloc))
          (out_buf:float* (halloc))
          (gain_buf:float* (halloc))
          (instance (lilv_load_plugin "http://plugin.org.uk/swh-plugins/amp" samplerate))
          (descriptor (tref instance 0))
          (handle (tref instance 1))
          (run (tref descriptor 4)))
      (printf "decriptor name: %s\n" (tref descriptor 0))
      ;; setup ports
      (lilv_connect_to_port instance 0 (cast gain_buf))
      (lilv_connect_to_port instance 1 (cast in_buf))
      (lilv_connect_to_port instance 2 (cast out_buf))
      ;; create closure wrapper
      (lambda (in amp)
        (pset! gain_buf 0 (dtof amp))
        (pset! in_buf 0 (dtof in))
        (fptrcall run handle 1)
        (ftod (pref out_buf 0))))))


;; initialize amp and call with two arguments
;; first arg is input sample
;; second argument is amplitidue in DB
;;
;; oscillate between -10db and -70db
(bind-func dsp:[double,double,double,double,double*]*
  (let ((amp (init_lv2_amp 44100.0)))
    (lambda (in time chan dat)
      (amp (random) (+ -40.0 (* 30.0 (cos (* time .0005))))))))

;; set dsp
(dsp:set! dsp)


;;;; NOTICE that each time you compile dsp you load a new
;;;; instance of AMP
;;;; TO AVOID INSTANTIATING A NEW AMP EACH RECOMPILE OF DSP
;;;; YOU CAN USE A GLOBALLY BOUND AMP LIKE BELOW

;; (bind-val amp_ [double,double,double]*)

;; (bind-func init_global_amp_
;;   (lambda (samplerate)
;;     (set! amp_ (init_lv2_amp samplerate))
;;     void))

;; (init_global_amp_ 44100.0)
;;
;;;; NOW YOU CAN USE amp_ in dsp and remove amp from let
