;;; caas-example.xtm -- Extempore CaaS example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; OSC messages can also be recieved over TCP. This is parcicularly
;; useful for taking advantage of the Extempore compiler-as-a-service
;; (CaaS).

;; This example sets up a CaaS server on port 7029.

;;; Code:

;; set up the CaaS server

(define *caas-server-port* 7029)
(sys:load "libs/core/caas-server.xtm")

;; Now, (re)connect to the compiler on port *caas-server-port* and
;; send code strings for compilation. The extempore.el emacs mode
;; already has support for this:
;;   `M-x extempore-connect RET localhost RET 7029 RET TCP-OSC'

;; 3. evaluate code as usual with C-x C-x (`extempore-send-defn-at-point')

(println 'it 'works!)

;; Note that because Emacs uses per-buffer connections, you can have
;; some buffers which are connected normally (plain TCP), and some
;; which use OSC-over-TCP: C-x C-x should just work in each buffer.

;; Test that it works properly, although make sure you print things:
;; currently the results of computation are not 'echoed' in the
;; minibuffer as is the case with the regular TCP connection to the
;; compiler.

(define doubler
  (lambda (a)
    (* a 2)))

(println (doubler 5))
(println (doubler (random 5)))

;; xtlang code will work fine as well

(bind-func xtdoubler
  (lambda (a:i64)
    (printf "2 x %lld = %lld\n" a (* a 2))))

(xtdoubler (random 5))
