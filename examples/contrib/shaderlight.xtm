;;; lightshader.xtm
;;
;; opengl example using 100% shader pipeline
;;
;; the scene includes:
;; a couple of objects and a single spotline
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;; Code:


(define fullscreen #f)
;; (define wi,dth 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)

(bind-val width float width)
(bind-val height float height)

;; setup opengl window+context
;;(define glctx (gl:make-ctx ":0.0" #f 0.0 0.0 width height))
(define glctx (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

(sys:load "libs/core/math.xtm")
(sys:load "libs/external/gl.xtm")
(sys:load "libs/external/graphics-pipeline.xtm")

(bind-val lightshader i32 (create_shader light-vert light-frag))

(bind-func draw_scene
  (lambda (degree shader model:float* view:float* projection:float*)
    (let ((mata:float* (salloc 4))
          (matd:float* (salloc 4))
          (mats:float* (salloc 4))
          (tmp_matrix:float* (salloc 16)))
      (pfill! mata 0.0 0.0 0.0 1.0)
      (pfill! matd 0.0 0.0 1.0 1.0)
      (pfill! mats 1.0 1.0 1.0 1.0)
      (shader_update_material shader mata matd mats 50.0)
      ;; static cube
      (shader_update_matrices shader model view projection)
      (cube_whole)
      ;; rotating cube
      (mcopy model 4 4 tmp_matrix) ;; like pushing matrix i.e. (glPushMatrix)
      (translate_matrix model -2.0 0.0 1.0)
      (translate_matrix model 0.5 0.5 0.5)
      (rotate_matrix model (dtof (* 0.1 degree)) 1.0 1.0 1.0)
      (translate_matrix model -0.5 -0.5 -0.5)
      (shader_update_matrices shader model view projection)
      (cube_whole)
      (mcopy tmp_matrix 4 4 model) ;; like popping matrix
      ;; sphere 1
      (translate_matrix model 1.0 2.0 -2.0)
      (shader_update_matrices shader model view projection)
      (glutSolidSphere 1.0 50 50)
      ;; sometimes easier just to reverse something
      ;; rather than copying the matrix
      (translate_matrix model -1.0 -2.0 2.0)
      ;; wall colour
      (pfill! mata 0.0 0.0 0.0 1.0)
      (pfill! matd 1.0 0.3 0.2 1.0)
      (pfill! mats 0.5 0.5 0.5 1.0)
      (shader_update_material shader mata matd mats 50.0)
      ;; backwall
      (mcopy model 4 4 tmp_matrix)
      (translate_matrix model -5.0 -2.0 -5.0)
      (scale_matrix model 10.0 10.0 0.01)
      (shader_update_matrices shader model view projection)
      (cube_whole)
      (mcopy tmp_matrix 4 4 model)
      ;; floor
      (mcopy model 4 4 tmp_matrix)
      (translate_matrix model -5.0 -2.0 -5.0)
      (scale_matrix model 10.0 0.01 10.0)
      (shader_update_matrices shader model view projection)
      (cube_whole)
      (mcopy tmp_matrix 4 4 model)
      void)))

;; a trivial opengl draw loop
(bind-func gl_render
  (let ((size 0.01)
        (eye:float* (alloc 4))
        (target:float* (alloc 4))
        (up:float* (alloc 4))
        (model_matrix:float* (alloc 16))
        (view_matrix:float* (alloc 16))
        (projection_matrix:float* (alloc 16))
        (spotpos:float* (alloc 4))
        (spottgt:float* (alloc 4))
        (d:float* (alloc 4))
        (s:float* (alloc 4))
        (a:float* (alloc 4)))
    (lambda (degree:double)
      ;; setup stuff for render
      (glViewport 0 0 (ftoi32 (* 1.0 width)) (ftoi32 (* 1.0 height)))
      (glEnable GL_DEPTH_TEST)
      (glUseProgram lightshader) ;; turn shader on
      ;; light is on a slow dolly back and forth
      (pfill! spottgt (+ .5 (dtof (* 3.0 (cos (* degree .05))))) 1.0 0.0 1.0)
      (pfill! spotpos (+ .5 (dtof (* 3.0 (cos (* degree .05))))) 1.0 10.0 1.0)
      ;; setup lights colour
      (pfill! a 1.0 1.0 1.0 1.0)
      (pfill! s 1.0 1.0 1.0 1.0)
      (pfill! d 1.0 1.0 1.0 1.0)
      ;; camera 'eye' moves all around
      ;; but always looks to 'target' centre
      ;; camera 'eye' moves all around
      ;; but always looks to 'target' centre
      (pfill! eye
              (dtof (* 10.0 (cos (* .01 degree))))
              (dtof (+ 5.0 (* 5.0 (cos (* .005 degree)))))
              8.0
              1.0) ;; position
      (pfill! target 0.0 0.0 0.0 1.0) ;; position vector gets w==1.0
      (pfill! up 0.0 1.0 0.0 0.0) ;; direction vector gets w==0.0
      ;; setup projection view and model matrices
      (fill_projection_matrix projection_matrix 35.0 (/ width height) 0.1 10.0)
      (fill_view_matrix view_matrix eye target up)
      (fill_identity_matrix model_matrix)
      (shader_update_light lightshader spotpos spottgt 45.0 30.0 a d s)
      (shader_update_camera lightshader eye target)
      ;; draw scene
      (shader_update_matrices lightshader model_matrix view_matrix projection_matrix)
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (draw_scene degree lightshader model_matrix view_matrix projection_matrix)
      (glUseProgram 0) ;; turn shader off
      void)))

;; standard impromptu callback
(define opengl-loop
  (lambda (degree)
    (gl_print_error)
    (gl_render degree)
    (gl:swap-buffers glctx)
    (callback (+ (now) 1000) 'opengl-loop (+ degree .5))))

(opengl-loop 70.0)
