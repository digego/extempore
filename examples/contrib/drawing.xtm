;;; drawing.xtm -- A few small Cairo examples

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libCairo

;;; Code:

(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 900.0 600.0))

(sys:load "libs/core/math")
(sys:load "libs/external/cairo.xtm")
(sys:load "libs/external/gl.xtm")

;; write hello world to a png file
(bind-func test1
  (lambda ()
    (let ((surface (cairo_image_surface_create CAIRO_FORMAT_ARGB32 300 200))
    (cr (cairo_create surface)))
      (cairo_select_font_face cr "serif" CAIRO_FONT_SLANT_NORMAL CAIRO_FONT_WEIGHT_BOLD)
      (cairo_set_font_size cr 32.0)
      (cairo_set_source_rgb cr 0.0 0.0 1.0)
      (cairo_move_to cr 10.0 50.0)
      (cairo_show_text cr "Hello, world")
      (cairo_destroy cr)
      (cairo_surface_write_to_png surface "/tmp/hello.png")
      (cairo_surface_destroy surface)
      void)))

(test1)


(bind-func cairo_draw_image
  (lambda (cr:cairo_surface_t* image:cairo_surface_t* sx sy sw:double sh:double dx dy dw dh)
    (let ((scalex (/ dw sw))
    (scaley (/ dh sh)))
      (cairo_save cr)
      (cairo_scale cr scalex scaley)
      (cairo_set_source_surface cr image (- (* dx scalex) (* 1.0 sx)) (- (* dy scaley) (* 1.0 sy)))
      (cairo_rectangle cr (/ dx scalex) (/ dy scaley) (/ dw scalex) (/ dh scaley))
      (cairo_fill cr)
      (cairo_restore cr)
      void)))

;; draw animated circles to an opengl context
(bind-func test2
  (let ((surface (cairo_image_surface_create CAIRO_FORMAT_RGB24 900 600))
  (image (cairo_image_surface_create_from_png "/path/to/image.png"))
  (cr (cairo_create surface))
  (i 0.0)
  (width 0.0)
  (height 0.0))
    (lambda (t:double)
      ;; scale image to fullscreen background
      (set! width (i32tod (cairo_image_surface_get_width image)))
      (set! height (i32tod (cairo_image_surface_get_height image)))
      (cairo_draw_image cr image 0.0 0.0 width height 0.0 0.0 900.0 600.0)

      (dotimes (i 200.0)
        (cairo_set_source_rgba cr (* .005 i) (* 0.005 i) 0.7 0.7)
        (cairo_arc cr
             (+ 450.0 (* 350.0 (cos (* i t .00000003))))
             (+ 300.0 (* 200.0 (sin (* i t .0000002))))
             10.0 0.0 TWOPI)
        (cairo_stroke cr))
      ;(cairo_surface_flush surface)
      (cairo_image_surface_get_data surface))))


;; draw surface data returned from test2
(bind-func gl_draw
  (lambda ()
    (glLoadIdentity)
    (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; use tex num 5 repeatedly
    (gl_load_tex_bgr 900 600 4 GL_UNSIGNED_BYTE (test2 (i64tod (now))) 5)
    (gl_draw_img_reverse -1.0 -1.0 2.0 2.0 180.0 5)
    void))

;; standard callback
(define cairo-animation
  (lambda (beat dur)
    (gl_draw)
    (gl:swap-buffers ctx)
    (callback (*metro* (+ beat (* .5 dur))) 'cairo-animation (+ beat dur) dur)))

(cairo-animation (*metro* 'get-beat 4) 1/12)
