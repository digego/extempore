;;; spectral_meter.xtm -- spectral metering example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libCairo, kiss_fft, libsndfile

;;; Commentary:

;; This example uses the fft/ifft bindings from fft.xtm to draw a
;; real-time visualisation of the magnitude spectrum of an audio
;; signal.

;;; Code:

;; need to create the context before loading the graphics library
(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 1080.0 720.0))

;; load the libraries we need
(sys:load "libs/core/audio_dsp.xtm")
(sys:load "libs/external/sndfile.xtm")
(sys:load "libs/external/fft.xtm")
(sys:load "libs/external/cairo.xtm")
(sys:load "libs/external/gl.xtm")

;; let's make a helper type for holding rgb 3-tuples
(bind-type rgb_colour <double,double,double>)

(bind-func set_cairo_source_with_colour
  (lambda (cr colour:rgb_colour*)
    (cairo_set_source_rgba cr
                           (tref colour 0)
                           (tref colour 1)
                           (tref colour 2)
                           0.8)))

;; draw an individual 'bar' in the spectrum
(bind-func draw_spectral_bar
  (let ((orange_break 500.0)  ;marks transition to orange levels
        (red_break 650.0)     ;marks transition to red levels
        (colour_array:|3,rgb_colour|* (alloc)))
    ;; fill the colours for the spectral levels
    (tfill! (aref-ptr colour_array 0) 0.0 0.8 0.1) ;green
    (tfill! (aref-ptr colour_array 1) 0.6 0.5 0.0) ;orange
    (tfill! (aref-ptr colour_array 2) 1.0 0.2 0.0) ;red
    (lambda (cr bar_index bar_width bar_height)
      (let ((bar_width_jittered (+ bar_width
                                   (round (* (* bar_width 0.5)
                                             (- (random) 0.5)))))
            (bar_xpos (* (i64tod bar_index)
                         bar_width)))
        ;; draw red bars
        (if (> bar_height red_break)
            (begin
              (set_cairo_source_with_colour cr (aref-ptr colour_array 2))
              (cairo_rectangle cr
                               bar_xpos
                               0.0
                               bar_width_jittered
                               bar_height)
              (cairo_fill cr)))
        ;; draw orange bars
        (if (> bar_height orange_break)
            (begin
              (set_cairo_source_with_colour cr (aref-ptr colour_array 1))
              (cairo_rectangle cr
                               bar_xpos
                               0.0
                               bar_width_jittered
                               (if (> bar_height red_break)
                                   red_break bar_height))
              (cairo_fill cr)))
        ;; draw green bars
        (set_cairo_source_with_colour cr (aref-ptr colour_array 0))
        (cairo_rectangle cr
                         bar_xpos
                         0.0
                         bar_width_jittered
                         (if (> bar_height orange_break)
                             orange_break bar_height))
        (cairo_fill cr)))))

;; draw the frequency markins on the spectral meter
(bind-func draw_spectrum_key
  (let ((num_ticks:i64 8)
        (str_buf:i8* (alloc 100))
        (i:i64 0))
    (lambda (cr nbins bar_width)
      (cairo_set_source_rgb cr 1.0 1.0 1.0)
      (dotimes (i nbins)
        (if (= (modulo i (/ nbins num_ticks)) 2)
            (let ((freq (* 22050.0 (/ (i64tod i) (i64tod nbins)))))
              (cairo_move_to cr (- (* bar_width (i64tod i)) 30.0) 300.0)
              (if (< freq 1000.0)
                  (sprintf str_buf "%3.0fHz" freq)
                  (sprintf str_buf "%3.1fkHz" (/ freq 1000.0)))
              (cairo_show_text cr str_buf)))))))

(bind-func spectrum_visualiser 1000000
  (let ((width 1080)
        (height 720)
        (surface (cairo_image_surface_create CAIRO_FORMAT_RGB24
                                             (i64toi32 width) (i64toi32  height)))
  (cr (cairo_create surface))
  (i:i64 0))
    ;; for drawing the frequency markings
    (cairo_select_font_face cr
                         "Helvetica"
                         CAIRO_FONT_SLANT_NORMAL
                         CAIRO_FONT_WEIGHT_NORMAL)
    (cairo_set_font_size cr 20.0)
    (lambda (spectrum:double* nbins)
      (let ((bar_width (i64tod (/ width nbins))))
        (cairo_set_source_rgb cr 0.0 0.0 0.0)
        (cairo_paint_with_alpha cr 0.25)
        (dotimes (i nbins)
          (draw_spectral_bar cr i
                             bar_width
                             (* 20.0 (pref spectrum i))))
        (draw_spectrum_key cr nbins bar_width)
        (cairo_image_surface_get_data surface)))))

;; take a frequency domain signal (freq_buffer) of length N, and return the
;; average magnitude in n bins (with n < N)
(bind-func bin_spectrum
  (let ((i:i64 0)
        (j:i64 0)
        (total 0.0))
    (lambda (spectrum:double* freq_buffer fft_window_size nbins)
      (let ((bin_width (/ (/ fft_window_size nbins) 2)))
        (dotimes (i nbins)
          (set! total 0.0)
          (dotimes (j (* i bin_width) bin_width)
            (set! total (+ total (magnitude_cpxd (pref-ptr freq_buffer j)))))
          (pset! spectrum i (* 1.0 (/ total (i64tod bin_width)))))))))

;; take the time_domain signal (time_buffer) and return the spectrum
(bind-func mag_spectrum
  (let ((nbins 512) ; number of bins for spectrogram
        (spectrum:double* (zalloc nbins))
        (i:i64 0))
    (lambda (audio:double* fft_window_size time_buffer freq_buffer)
      (dotimes (i fft_window_size)
        ;; add sum of L and R channels into real component
        ;; of time_buffer (which is a buffer of complex values
        (tset! (pref-ptr time_buffer i) 0
               (+ (pref audio (* 2 i)) ; L channel
                  (pref audio (+ 1 (* 2 i)))))) ; R channel
      ;; take DFT, store results in freq_buffer
      (fft_cpxd time_buffer freq_buffer fft_window_size)
      (bin_spectrum spectrum freq_buffer fft_window_size nbins))))

;; draw the surface data returned from spectrum_visualiser
(bind-func gl_draw 1000000
  (lambda (spectrum:double* nbins)
    (glLoadIdentity)
    (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
    ;; ;; use tex num 5 repeatedly
    (gl_load_tex_bgr 1080 720 4 GL_UNSIGNED_BYTE (spectrum_visualiser spectrum nbins) 5)
    (gl_draw_img_reverse -1.0 -1.0 2.0 2.0 180.0 5)
    void))

;; set up the type alias for our dsp function
(bind-alias DSP [double,double,double,double,double*]*)
;; dsp function - this will play the sound file.  Remember to
;; change the file path to an audio file on your system
(bind-func dsp:DSP 100000000     ; make sure we allocate enough memory
  (let ((audio_length 60)
        (audio:double* (zalloc (* 44100 2 audio_length)))
        (samples_read (read_audio_data "/path/to/audiofile.wav"
                                       audio
                                       0
                                       (* 44100 audio_length)))
        (playhead 0)
        (fft_window_size 1024)
        (time_buffer:cpxd* (zalloc fft_window_size))
        (freq_buffer:cpxd* (zalloc fft_window_size))
        (i:i64 0))
    (lambda (in time chan dat)
      (if (and (= (modulo playhead fft_window_size) 0)
               (= chan 0.0))
          (mag_spectrum (pref-ptr audio playhead) fft_window_size
                        time_buffer freq_buffer))
      ;; increment playhead once per (stereo) pair of samples
      (if (= chan 1.0)
          (set! playhead (modulo (+ playhead 1)
                                 (* audio_length 44100))))
      ;; play audio
      (pref audio (+ (dtoi64 chan) (* 2 playhead))))))

(dsp:set! dsp)

;; the animation callback - remember this is in scheme, not xtlang
(define spectrum-animation
  (lambda (time fps)
    (gl_draw (mag_spectrum.spectrum) (mag_spectrum.nbins))
    (gl:swap-buffers ctx)
    (callback (+ time (* 0.5 (/ *samplerate* fps)))
              'spectrum-animation
              (+ time (/ *samplerate* fps))
              fps)))

(spectrum-animation (now) 30)
