;;; random-walk.xtm -- simple MPI example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libmpi

;;; Commentary:

;; This is an xtlang translation of the "Point-to-Point Communication
;; Application - Random Walk" example from http://mpitutorial.com/

;;; Code:

(sys:load "libs/contrib/mpi.xtm")

                 ;<loc,steps_remaining>
(bind-type Walker <i32,i32>)

(bind-func print_walker
  (lambda (w:Walker*)
    (printf "Walker:<%d,%d>"
            (tref w 0)
            (tref w 1))))

                      ;<n  ,walkers>
(bind-type WalkerArray <i32,Walker*>)

(bind-func print_walker_array
  (lambda (wa:WalkerArray*)
    (printf "WalkerArray:<%d,%p>"
            (tref wa 0)
            (tref wa 1))))

                        ;<start,size>
(bind-type DomainRegion <i32,i32>)

(bind-func create_walker_array
  (lambda (max_size:i32)
    (let ((walkers:Walker* (zalloc max_size))
          (wa (WalkerArray 0 walkers)))
      wa)))

(bind-func walker_at_index
  (lambda (wa:WalkerArray* index:i32)
    (pref-ptr (tref wa 1) index)))

(bind-func add_walker
  (lambda (wa:WalkerArray* walker:Walker*)
    (let ((current_size (tref wa 0))
          (next_walker (walker_at_index wa current_size)))
      (tfill! next_walker
              (tref walker 0)
              (tref walker 1))
      (tset! wa 0 (+ current_size 1))
      void)))

(bind-func clear_walker_array
  (lambda (wa:WalkerArray*)
    (tset! wa 0 0)))

(bind-func decompose_domain
  (lambda (domain_size:i32
      world_rank:i32
      world_size:i32)
    (if (> world_size domain_size)
        ;; Don't worry about this special case. Assume the domain size
        ;; is greater than the world size.
        (MPI_Abort MPI_COMM_WORLD 1))
    (let ((start (* (/ domain_size world_size) world_rank))
          (size (/ domain_size world_size)))
      (if (= world_rank (- world_size 1))
          ;; Give remainder to last process
          (set! size (+ size (% domain_size world_size))))
      (DomainRegion start size))))

(bind-func initialize_walkers
  (lambda (num_walkers_per_proc:i32
      max_walk_size:i32
      region:DomainRegion*)
    (let ((wa (create_walker_array (* num_walkers_per_proc 4))) ;; is 4x oversized buffers enough?
          (walkers (tref wa 1)))
      (doloop (i num_walkers_per_proc)
        (tset! (walker_at_index wa i) 0 (tref region 0))
        (tset! (walker_at_index wa i) 1 (random max_walk_size)))
      (tset! wa 0 num_walkers_per_proc)
      wa)))

(bind-func walk
  (lambda (walker:Walker* region:DomainRegion* domain_size outgoing_walkers)
    (let ((location (tref walker 0))
          (steps_remaining (tref walker 1))
          (region_start (tref region 0))
          (region_size (tref region 1)))
      (if (< (+ location steps_remaining)
             (+ region_start region_size))
          ;; walk ends in this domain
          (begin (tfill! walker (+ location steps_remaining) 0) void)
          (begin
            (tfill! walker
                    (if (> (+ location steps_remaining) domain_size)
                        0 ;; off the end of the world! need to wrap
                        (+ region_start region_size)) ;; beginning of next region
                    (% (+ location steps_remaining) region_size))
            (add_walker outgoing_walkers walker))))))

(bind-func send_outgoing_walkers
  (lambda (outgoing_walkers:WalkerArray* world_rank:i32 world_size:i32)
    ;; Send the data as an array of MPI_BYTEs to the next process.
    ;; The last process sends to process zero.
    (MPI_Send (convert (tref outgoing_walkers 1) i8*)
              (* (tref outgoing_walkers 0) 8) ;; sizeof(Walker) = 8?? (if packed)
              MPI_BYTE (% (+ world_rank 1) world_size) 0 MPI_COMM_WORLD)
    ;; Clear the outgoing walkers list
    (clear_walker_array outgoing_walkers)))

(bind-func receive_incoming_walkers
  (lambda (incoming_walkers:WalkerArray* world_rank:i32 world_size:i32)
    ;; Probe for new incoming walkers
    (let ((status:MPI_Status* (salloc))
          ;; Receive from the process before you. If you are process zero,
          ;; receive from the last process
          (incoming_rank (if (= world_rank 0)
                             (- world_size 1)
                             (- world_rank 1)))
          (incoming_walkers_size_ptr:i32* (salloc)))
      (MPI_Probe incoming_rank 0 MPI_COMM_WORLD status)
      ;; Resize your incoming walker buffer based on how much data is
      ;; being received
      (MPI_Get_count status MPI_BYTE incoming_walkers_size_ptr)
      ;; incoming_walkers->resize(incoming_walkers_size / sizeof(Walker));
      (MPI_Recv (convert (tref incoming_walkers 1) i8*)
                (pref incoming_walkers_size_ptr 0)
                MPI_BYTE incoming_rank 0 MPI_COMM_WORLD
                MPI_STATUS_IGNORE)
      (tset! incoming_walkers 0 (/ (pref incoming_walkers_size_ptr 0) 8)))))

(bind-func main
  (let ((domain_size:i32 100)
        (max_walk_size:i32 500)
        (num_walkers_per_proc:i32 20))
    (lambda ()
      (MPI_Init null null)
      (let ((world_size_ptr:i32* (salloc))
            (world_size (begin
                          (MPI_Comm_size MPI_COMM_WORLD world_size_ptr)
                          (pref world_size_ptr 0)))
            (world_rank_ptr:i32* (salloc))
            (world_rank (begin
                          (MPI_Comm_rank MPI_COMM_WORLD world_rank_ptr)
                          (pref world_rank_ptr 0)))
            (region (decompose_domain domain_size world_rank world_size))
            (incoming_walkers (initialize_walkers num_walkers_per_proc max_walk_size region))
            (walker_ptr (tref incoming_walkers 1))
            (outgoing_walkers (create_walker_array (* num_walkers_per_proc 4)))
            ;; Determine the maximum amount of sends and receives needed to
            ;; complete all walkers
            (maximum_sends_recvs (+ (/ max_walk_size (/ domain_size world_size)) 1)))
        ;; (println
        ;;  "Process" world_rank "initiated" num_walkers_per_proc
        ;;  "walkers in subdomain" (tref region 0) " - " (+ (tref region 0)
        ;;                                                  (tref region 1)
        ;;                                                  -1))
        (doloop (m maximum_sends_recvs)
          (doloop (i (tref incoming_walkers 0))
            (walk (walker_at_index incoming_walkers i) region domain_size outgoing_walkers))
          ;; (println "Process" world_rank "sending" (tref outgoing_walkers 0)
          ;;          "outgoing walkers to process" (% (+ world_rank 1) world_size))
          (if (= (% world_rank 2) 0)
              (begin
                ;; Send all outgoing walkers to the next process.
                (send_outgoing_walkers outgoing_walkers world_rank world_size)
                ;; Receive all the new incoming walkers
                (receive_incoming_walkers incoming_walkers world_rank world_size))
              (begin
                ;; Receive all the new incoming walkers
                (receive_incoming_walkers incoming_walkers world_rank world_size)
                ;; Send all outgoing walkers to the next process.
                (send_outgoing_walkers outgoing_walkers world_rank world_size)))
          (println "Process" world_rank "received" (tref incoming_walkers 0)
                   "incoming walkers"))
        (println "Process" world_rank "done.")

        (MPI_Finalize)))))

(main)
