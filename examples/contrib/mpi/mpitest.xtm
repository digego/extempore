;;; mpitest.xtm -- test of MPI functionality in Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libmpi, libmpimain

;;; Commentary:

;; based on Viktor Decyk's code

;;; Code:

(sys:load "libs/contrib/mpi.xtm")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libmpimain
  (cond ((string=? (sys:platform) "OSX")
         ;; "/Users/ben/Code/src/skeleton-pic/tutorials/smdemo_mpi/libmpimain.dylib"
         "libmpimain.dylib")
        ((string=? (sys:platform) "Linux")
         "libmpimain.so")
        ((string=? (sys:platform) "Windows")
         "libmpimain.dll")))

(bind-lib libmpimain mpadd [void,float*,float*,float*,i32]*)
(bind-lib libmpimain init_mpi [void,i32*,i32*,i32*,i32,i8**]*)
(bind-lib libmpimain vscatter [void,float*,float*,i32,i32]*)
(bind-lib libmpimain vgather [void,float*,float*,i32,i32]*)
(bind-lib libmpimain end_mpi [void]*)

(bind-func cadd
  (lambda (a:float* b:float* c:float* nx:i32)
    (doloop (j nx)
      (pset! a j (+ (pref b j)
                    (pref c j))))))

(bind-func main
  (let ((nx:i32 (convert 1e8)) ;1048576          ;; /* nx = size of array */
        (idproc_ptr:i32* (alloc))  ;; /* idproc = processor id               */
        (idproc:i32 -1)
        (nvp_ptr:i32* (alloc))     ;; /* nvp = number of processors obtained */
        (nvp:i32 -1)
        (irc_ptr:i32* (alloc))
        (irc:i32 -1)

        (j:i32 0)
        (nxp:i32 0)
        (nxps:i32 0)

        (eps:float 0.0)
        (epsmax:float 0.0)

        (a:float* null)
        (b:float* null)
        (c:float* null)
        (d:float* null)
        (p_a:float* null)
        (p_b:float* null)
        (p_c:float* null))
    (lambda ()
      ;; /* set up mpi */
      (set! irc 0)

      (init_mpi idproc_ptr nvp_ptr irc_ptr 0 null) ;; argc argv

      (set! idproc (pref idproc_ptr 0))
      (set! nvp (pref nvp_ptr 0))
      (set! irc (pref irc_ptr 0))

      (if (<> irc 0)
          (printf "%i MPI initialization error!\n" idproc))
      (if (= idproc 0)
          (printf "mpi nodes available = %i\n" nvp))

      ;; /* initialize Host data */
      (if (= idproc 0)
          (begin (set! a (halloc nx))
                 (set! b (halloc nx))
                 (set! c (halloc nx))
                 (set! d (halloc nx))
                 ;; /* initialize vectors */
                 (dotimes (j nx)
                   (pset! a j 0.)
                   (pset! b j (+ (convert j float) 1.))
                   (pset! c j (* (convert j float) 2.))
                   (pset! d j -1.))
                 void))
          ;; /* nxp = maximum size of array on each processor */
          (set!  nxp (+ (/ (- nx 1) nvp) 1))
          ;; /* allocate data for mpi */
          (set! p_a (halloc nxp))
          (set! p_b (halloc nxp))
          (set! p_c (halloc nxp))
          ;; /* nxps = size of actual data, if nx is not an exact multiple of nvp */
          (set! nxps (if (> 0:i32 (* (- nx nxp) idproc)) 0 (* (- nx nxp) idproc)))
          (set! nxps (if (< nxp nxps) nxp nxps))

          ;; /* First execute on Host in C: a = b + c */
          (if (= idproc 0)
              (cadd a b c nx))

          ;; /* Copy data for mpi */
          (vscatter b p_b nx nxp)
          (vscatter c p_c nx nxp)

          ;; /* Execute with mpi: g_a = g_b + g_c */
          (mpadd p_a p_b p_c nxps)
          ;; /* Copy data from mpi: d = g_a */
          (vgather d p_a nx nxp)

          ;; /* Check for correctness: compare a and d */
          (if (= idproc 0)
              (set! epsmax 0.0))
          (dotimes (j nx)
            (set! eps (- (pref a j)
                         (pref d j)))
            (if (< eps 0.0)
                (set! eps (* -1 eps)))
            (if (> eps epsmax)
                (set! epsmax eps)))
          (printf "maximum difference = %e\n" epsmax)

          ;; /* deallocate memory for mpi */
          (free p_a)
          (free p_b)
          (free p_c)
          ;; /* close down mpi */
          (end_mpi)
          ;; /* deallocate Host memory */
          (if (= idproc 0)
              (begin (free a)
                     (free b)
                     (free c)
                     (free d)))
          (println "Finished processing."))))

(let ((t (clock:clock)))
  (call-as-xtlang (main))
  (print "done in" (- (clock:clock) t) "seconds.\n"))

(quit 0)
