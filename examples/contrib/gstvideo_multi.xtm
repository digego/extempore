;;; gstreamer.xtm -- Simple GStreamer playbin example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: gstreamer

;;; Commentary:
;;
;; An asynchronous 'multi-threaded' multi-video
;; rendering example.
;;
;; Starts up to four videos running concurrently
;;

;;; Code:

(define fullscreen #f)
;; (define width 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)

(bind-val width float width)
(bind-val height float height)

;; setup opengl
(define glctx (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

(sys:load "libs/core/math.xtm")
(sys:load "libs/external/gl.xtm")
(sys:load "libs/external/graphics-pipeline.xtm")
(sys:load "libs/external/assimp.xtm")
(sys:load "libs/external/glib.xtm")
(sys:load "libs/external/gstreamer.xtm")

;; FIRST of all setup GSTREAMER pipeline

(bind-val texid1 i32 0)
(bind-val texid2 i32 0)
(bind-val texid3 i32 0)
(bind-val texid4 i32 0)
(bind-val vplay1 i1 0)
(bind-val vplay2 i1 0)
(bind-val vplay3 i1 0)
(bind-val vplay4 i1 0)
(bind-val sampledata1 i8*)
(bind-val sampledata1dirty i1 0)
(bind-val sampledata2 i8*)
(bind-val sampledata2dirty i1 0)
(bind-val sampledata3 i8*)
(bind-val sampledata3dirty i1 0)
(bind-val sampledata4 i8*)
(bind-val sampledata4dirty i1 0)

(bind-type userdata <i32,GstElement*>)

(bind-func init_sample_data
  (lambda ()
    (set! vplay1 #f)
    (set! sampledata1dirty #f)
    (set! sampledata1 (malloc (* 3 600 400)))
    (set! vplay2 #f)
    (set! sampledata2dirty #f)
    (set! sampledata2 (malloc (* 3 600 400)))
    (set! vplay3 #f)
    (set! sampledata3dirty #f)
    (set! sampledata3 (malloc (* 3 600 400)))
    (set! vplay4 #f)
    (set! sampledata4dirty #f)
    (set! sampledata4 (malloc (* 3 600 400)))
    void))

(bind-func gl_load_movie_textures
  (lambda ()
    (if sampledata1dirty
        (set! texid1 (gl_load_tex 600 400 3 GL_UNSIGNED_BYTE sampledata1 texid1)))
    (if sampledata2dirty
        (set! texid2 (gl_load_tex 600 400 3 GL_UNSIGNED_BYTE sampledata2 texid2)))
    (if sampledata3dirty
        (set! texid3 (gl_load_tex 600 400 3 GL_UNSIGNED_BYTE sampledata3 texid3)))
    (if sampledata4dirty
        (set! texid4 (gl_load_tex 600 400 3 GL_UNSIGNED_BYTE sampledata4 texid4)))
    void))

(bind-func playbin_bus_call:GstBusFunc
  (lambda (bus msg data)
    (let ((playz (tref (cast data userdata*) 1))
    (msgtype (tref msg 1))
    (time (tref msg 2))
          (seq (tref msg 4)))
      (cond ((<> (& GST_MESSAGE_EOS msgtype) 0)
             ;; (printf "END OF STREAM!\n")
             (gst_element_set_state playz GST_STATE_NULL)
             (gst_object_unref (cast playz gpointer)) ;; does playz release sink?
             (free data)
       1)
      ((<> (& GST_MESSAGE_ERROR msgtype) 0)
       (let ((debug:|1,i8*|* (alloc))
       (error:|1,GError*|* (alloc)))
         (gst_message_parse_error msg (cast error GError**) (cast debug i8**))
         (g_free (pref debug 0))
         (printf "GstError: %s\n" (tref (pref error 0) 2))
         (g_error_free (pref error 0))
         1))
            ((<> (& msgtype GST_MESSAGE_WARNING) 0)
             (printf "WARNING: %s\n" (gst_message_type_get_name msgtype))
             1)
      (else
             ;; (printf "MSG: %d:%s\n" msgtype (gst_message_type_get_name msgtype))
             1))
      1)))

(bind-func new_preroll
  (lambda (sink:GstAppSink* data:gpointer)
    (let ((sample (gst_app_sink_pull_preroll (cast sink i8*)))
          (caps (gst_sample_get_caps sample))
          (st (gst_caps_get_structure caps 0))
          (gv (gst_structure_get_value st "framerate"))
          (num (gst_value_get_fraction_numerator gv))
          (denom (gst_value_get_fraction_denominator gv))
          (playz (tref (cast data userdata*) 1))
          (quad (tref (cast data userdata*) 0)))
      (cond ((= quad 1) (set! vplay1 #t))
            ((= quad 2) (set! vplay2 #t))
            ((= quad 3) (set! vplay3 #t))
            ((= quad 4) (set! vplay4 #t)))
      ;; (printf "Preroll[%d]: %s\n" quad (gst_caps_to_string caps))
      GST_FLOW_OK)))

(bind-func new_sample
  (lambda (sink:GstAppSink* data:gpointer)
    (let ((sample (gst_app_sink_pull_sample (cast sink i8*)))
          (caps (gst_sample_get_caps sample))
          (buffer (gst_sample_get_buffer sample))
          (dat:i8* null)
          (xsize:gsize 0)
          (quad (tref (cast data userdata*) 0)))
      ;; (printf "Playing back on quad:%d\n" quad)
      (set! dat (cond ((= quad 1) sampledata1)
                      ((= quad 2) sampledata2)
                      ((= quad 3) sampledata3)
                      ((= quad 4) sampledata4)))
      (set! xsize (gst_buffer_extract buffer 0 dat (* 3 600 400)))
      (if (= xsize (* 3 600 400))
          (cond ((= quad 1) (set! sampledata1dirty #t))
                ((= quad 2) (set! sampledata2dirty #t))
                ((= quad 3) (set! sampledata3dirty #t))
                ((= quad 4) (set! sampledata4dirty #t)))
          (cond ((= quad 1) (set! sampledata1dirty #f))
                ((= quad 2) (set! sampledata2dirty #f))
                ((= quad 3) (set! sampledata3dirty #f))
                ((= quad 4) (set! sampledata4dirty #f))))
      GST_FLOW_OK)))

(bind-func eos
  (lambda (sink:GstAppSink* data:gpointer)
    (let ((quad (tref (cast data userdata*) 0))
          (playz (tref (cast data userdata*) 1)))
      (cond ((= quad 1) (set! vplay1 #f) (set! sampledata1dirty #f))
            ((= quad 2) (set! vplay2 #f) (set! sampledata2dirty #f))
            ((= quad 3) (set! vplay3 #f) (set! sampledata3dirty #f))
            ((= quad 4) (set! vplay4 #f) (set! sampledata4dirty #f)))
      (printf "Finished Decoding[%d]!\n" quad)
      void)))

;; path must be a valid URI to media
(bind-func xtm_play
  (lambda (path)
    (if (and vplay1 vplay2 vplay3 vplay4)
        (begin (printf "No available video slots! Try again later!\n") #f)
        (let ((playz (gst_element_factory_make "playbin" "play"))
              (sinkz (gst_element_factory_make "appsink" "app_sink"))
              (bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
              (caps:GstCaps* (gst_caps_from_string "video/x-raw,format=RGB,width=600,height=400"))
              (rgbFilter:GstElement* (gst_element_factory_make "capsfilter" "rgb_filter"))
              (appBin:GstElement* (gst_bin_new "app_bin"))
              (rgbSinkPad:GstPad* null)
              (ghostPad:GstPad* null)
              (data:userdata* (halloc))
              (callbacks:GstAppSinkCallbacks* (halloc))
              (gv:GValue* (halloc)))
          ;; Listen for messages on the playbin pipeline bus.
          (gst_bus_add_watch bus (cast (llvm_get_function_ptr "playbin_bus_call_native") GstBusFunc) (cast data gpointer))
          (gst_object_unref bus)
          ;;(printf "playz(%p) sinkz(%p) bus(%p) bin(%p)\n" playz sinkz bus appBin)
          ;; force video decode to RGB 600x400
          (gst_app_sink_set_caps (cast sinkz i8*) caps)
          ;; set callbacks
          (tfill! callbacks
                  (llvm_get_function_ptr "eos_native")
                  (llvm_get_function_ptr "new_preroll_native")
                  (llvm_get_function_ptr "new_sample_native"))
          (cond ((not vplay1) (tset! data 0 1))
                ((not vplay2) (tset! data 0 2))
                ((not vplay3) (tset! data 0 3))
                ((not vplay4) (tset! data 0 4)))
          (tset! data 1 playz)
          (gst_app_sink_set_callbacks (cast sinkz i8*) callbacks (cast data gpointer) null)
          ;; Replace the default window sink with appsink,
          ;;(g_value_unset gv)
          (g_value_init gv G_TYPE_OBJECT)
          (g_value_set_object gv (cast sinkz gpointer))
          (g_object_set_property (cast playz GObject*) "video-sink" gv)
          ;; URI to load media from
          (g_value_unset gv)
          (g_value_init gv G_TYPE_STRING)
          (g_value_set_string gv path)
          (g_object_set_property (cast playz GObject*) "uri" gv)
          ;; start decoding the media!
          (let ((res (gst_element_set_state playz GST_STATE_PLAYING)))
            (if (or (= res 1) (= res 2))
                (begin (printf "Start Decoding[%d]\n" (tref data 0)) #t)
                (begin (printf "Failed To Open[%d]\n" (tref data 0))
                       (gst_element_set_state playz GST_STATE_NULL)
                       (gst_object_unref (cast playz i8*))
                       (free data)
                       #f)))))))


;;;;;;;;;;;;;;;;;;;;;;;
;; Glib event loop

;; glib message loop
(bind-func _glib_main_loop_call
  (lambda ()
    (g_main_context_iteration null 0)))

;;;;;;;;;;;;;;;;;;;;;;;
;; GST init
(bind-func init-gst
  (lambda ()
    (gst_init_check null null null)))

;;;;;;;;;;;;;;;;;;;;;;;
;;
;; NOW GL STUFF!
;;
(bind-func post:XTMRENDERCB
  (lambda (frame shader m v p data)
    (fill_orthographic_matrix p -1.0 1.0 -1.0 1.0 -1.0 1.0)
    (fill_identity_matrix v)
    (fill_identity_matrix m)
    (scale_matrix m 1.0 -1.0 0.0) ;; flip
    (translate_matrix m -0.5 -0.5 0.0)
    (if (> texid1 0)
        (xtm_draw_tex shader texid1 m v p))
    (fill_identity_matrix m)
    (scale_matrix m 1.0 -1.0 0.0) ;; flip
    (translate_matrix m -0.5 0.5 0.0)
    (if (> texid2 0)
        (xtm_draw_tex shader texid2 m v p))
    (fill_identity_matrix m)
    (scale_matrix m 1.0 -1.0 0.0) ;; flip
    (translate_matrix m 0.5 -0.5 0.0)
    (if (> texid3 0)
        (xtm_draw_tex shader texid3 m v p))
    (fill_identity_matrix m)
    (scale_matrix m 1.0 -1.0 0.0) ;; flip
    (translate_matrix m 0.5 0.5 0.0)
    (if (> texid4 0)
        (xtm_draw_tex shader texid4 m v p))
    void))

(bind-func gl_render
  (lambda ()
    (xtm_render null null null post null)
    void))

;; standard impromptu callbacks
(define opengl-loop
  (lambda (time dur degree)
    (if (= (modulo time 12000) 0)
        (println 'heartbeat!))
    (let ((v (now)))
      (gl_load_movie_textures)
      (gl_render)
      (gl:swap-buffers glctx)
      )
    (callback (+ time (* dur .1)) 'opengl-loop (+ time dur) 2000 (+ degree .5))))

;; glib message loop
(define glib-main-loop
  (lambda ()
    (_glib_main_loop_call)
    (callback (+ (now) 2000) 'glib-main-loop)))


;; init xtm render pipeline
(xtm_render_setup (real->integer width) (real->integer height))

;; start glib event loop
(glib-main-loop)

;; initialize gst
(init_sample_data)
(init-gst)

;; start opengl loop
(opengl-loop (now) 1500 70.0)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; start your movies here!
;;

;; (xtm_play "file:///Users/sorensen/Movies/cave.mov")
;; (xtm_play "file:///Users/sorensen/Movies/stp_model.mov")
;; (xtm_play "file:///Users/sorensen/Movies/stp_model.mov")
;; (xtm_play "file:///Users/sorensen/Movies/cave.mov")
