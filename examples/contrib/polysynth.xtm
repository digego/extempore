;;; polysynth.xtm -- and example of using synth instruments

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; This example shows how to define your own polyphonic synths

;;; Code:

;; load the core/instruments library, which provides (among other
;; things) the bind-instrument macro
(sys:load "libs/core/instruments.xtm")

;; define a default instrument called synth
(bind-instrument synth synth_note_c synth_fx)

(bind-func dsp:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]*
  (lambda (in time chan dat)
    (cond ((< chan 2)
           (synth in time chan dat))
    (else 0.0))))

(dsp:set! dsp)

(play-note (now) synth (random 60 90) 80 44100)

;; first let's play with synth
(define loop
  (lambda (beat offset dur)
    (play-note (*metro* beat) synth (+ offset (random '(60 62 63 65 67))) 80 2000)
    (callback (*metro* (+ beat (* dur .5))) 'loop
              (+ beat dur)
              offset
              dur)))


(loop (*metro* 'get-beat 4) 0 1/2) ;; start one playing quavers
(loop (*metro* 'get-beat 4) 12 1/3) ;; another playing triplets

;; but we can change the instrument on the fly by swapping in a new
;; 'note kernel' function: the dsp code that gets rendered for
;; each note (it must be a closure that returns a closure)
;;
;; lets try a simple sawwave synth note kernel
(bind-func saw_synth_note_c
  (lambda (data:NoteInitData* nargs:i64 dargs:SAMPLE*)
    (let ((sawl (saw_c 0.0))
          (sawr (saw_c 0.0)))
      (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
        (cond ((= chan 0)
               (sawl amp freq))
              ((= chan 0)
               (sawr amp freq))
              (else 0.0))))))

;; make a new saw_synth with this new note kernel
(bind-instrument saw_synth saw_synth_note_c default_fx)

;; let's add some delay (via a stereo pair of delays) to the
;; global audio output
;;
;; NOTE: then 100000 is extra memory for our
;; delays
(bind-func dsp:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* 1000000
  (let ((delayl (delay_c (convert (* SAMPLERATE 0.25))))
        (delayr (delay_c (convert (* SAMPLERATE 0.33333333)))))
    (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
      (cond ((= chan 0)
             (delayl (+ (* 0.7 (synth in time chan dat))
                        (* 2.0 (saw_synth in time chan dat)))
                     0.5 0.3))
            ((= chan 1)
             (delayr (+ (* 0.7 (synth in time chan dat))
                        (* 2.0 (saw_synth in time chan dat)))
                     0.5 0.3))
            (else 0.0)))))


(play-note (now) saw_synth (random 60 90) 80 44100)

;; now start another temporal recursion which plays our new saw_synth
;; instrument
(define loop2
  (lambda (beat dur)
    (let ((pitch (random '(55 36 63 70 72 72 75))))
      (play-note (*metro* beat) saw_synth pitch
                 (if (= pitch 36) 105 95) 600)
      (callback (*metro* (+ beat (* dur .5))) 'loop2
                (+ beat dur)
                dur))))

(loop2 (*metro* 'get-beat 4) 1/3)


;; again, we can recompile saw_synth_note_c into something
;; else whenever we like
;; here's something more complex
(bind-func saw_synth_note_c
  (let ((res .4)
        (cof 8000.0))
    (lambda (data:NoteInitData* nargs:i64 dargs:SAMPLE*)
      (let ((sawl (saw_c 0.0))
            (sawl2 (saw_c 0.0))
            (modl (osc_c 0.0))
            (lpfl (lpf_c))
            (lpflmod (osc_c 0.0))
            (sawr (saw_c 0.0))
            (sawr2 (saw_c 0.0))
            (modr (osc_c 0.0))
            (lpfr (lpf_c))
            (lpfrmod (osc_c 0.0)))
        (lambda (time:i64 chan:i64 freq:SAMPLE amp:SAMPLE)
          (cond ((= chan 0)
                 (lpfl (* amp (+ (sawl (* 1.0 amp) freq)
                                 (sawl2 amp (+ freq (modl 100.0 0.2)))))
                       (+ cof (lpflmod 1000. 1.0))
                       res))
                ((= chan 1)
                 (lpfr (* amp (+ (sawr (* 1.0 amp) freq)
                                 (sawr2 amp (+ freq (modr 50.0 0.5)))))
                       (+ cof (lpfrmod 1000.0 1.72))
                       res))
                (else 0.0)))))))


;; some event level modification to saw_synth
;; adjust res & cof of saw_synth_note_c (dsp kernel)
(define res-sweep
  (lambda (beat dur)
    (saw_synth_note_c.res (cosr .5 .44 1/37))
    (saw_synth_note_c.cof (cosr 5000.0 1500.0 1/19))
    (callback (*metro* (+ beat (* dur .5))) 'res-sweep
              (+ beat dur) dur)))

(res-sweep (*metro* 'get-beat 4.0) 1/8)
