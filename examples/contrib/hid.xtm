;;
;; hid.xtm
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libhid
;;

;;; Code:

(sys:load "libs/external/hid.xtm")

;; in's are 0x80
;; out's are 0x90
(bind-func xhid_open
  (lambda (vendor_id:i64 product_id:i64 interface:i32)
    (let ((stdout (fdopen 0 "w"))
          (stderr (fdopen 1 "w"))
          (hid:HIDInterface* null)
          (ret:hid_return 0)
          ;; (vendor_id #x046d)
          ;; (product_id #xc408)
          (iface_num interface)
          (matcher (HIDInterfaceMatcher (convert vendor_id)
                                        (convert product_id)
                                        null null 0)))
      (hid_set_debug (convert (bor #x1 #x2)))
      (hid_set_debug_stream stderr)
      (println "vendor id:" vendor_id "product id:" product_id)
      (set! ret (hid_init))
      (if (<> ret 0) (printf "%d,%s\n" ret (hid_strerror ret)))
      (set! hid (hid_new_HIDInterface))
      (printf "HID: %p\n" hid)
      (set! ret (hid_force_open hid iface_num matcher 3))
      (if (<> ret 0) (printf "%d,%s\n" ret (hid_strerror ret)))
      (set! ret (hid_write_identification stdout hid))
      (if (<> ret 0) (printf "%s\n" (hid_strerror ret)))
      (set! ret (hid_dump_tree stdout hid))
      (if (<> ret 0) (printf "%s\n" (hid_strerror ret)))
      hid)))

(bind-func xhid_close
  (lambda (hid)
    (let ((ret:hid_return 0))
      (set! ret (hid_close hid))
      (if (<> ret 0) (printf "%s\n" (hid_strerror ret)))
      (set! ret (hid_cleanup))
      (if (<> ret 0) (printf "%s\n" (hid_strerror ret)))
      void)))

(bind-func xhid_dump
  (lambda (hid)
    (let ((stdout (fdopen 0 "w")))
      (hid_dump_tree stdout hid))))

(bind-func xhid_read
  (lambda (hid)
    (let ((ret:hid_return 0)
          (packets 4)
          (pathlen 3) (i:i32 0)
          (path_out:i32* (alloc pathlen))
          (dat:i8* (alloc packets)))
      ;; where path_out values are based are taken from parse tree!
      (pfill! path_out #x00010002 #x0008004b #x00080041)
      (set! ret (hid_get_input_report hid path_out pathlen dat packets))
      (printout "->")
      (dotimes (i packets)
        (printout " " (pref dat i)))
      (println "")
      void)))

(define xhid_listener
  (lambda (beat dur)
    (xhid_read hid)
    (callback (*metro* (+ beat (* .5 dur))) 'xhid_listener (+ beat dur) 1/8)))

(xhid_listener (*metro* 'get-beat 1) 1/8)

(define hid (xhid_open #x046d #xc404 0))

(xhid_dump hid)
(hid_read hid)
(hid_close hid)
