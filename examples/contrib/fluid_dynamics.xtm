;;; fluid_dynamics.xtm -- a simple fluid dynamics example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; A nice and simple 3d fluid simulation
;; based on code from Jos Stam and Mike Ash.

;; This little example is nice and simple
;; The computation is all on the CPU and
;; the density of each cell is drawn using
;; very simple immediate OpenGL calls.
;; The importance of this example is to demonstrate
;; Extempore's ability to bind to arbitrary dynamic
;; libraries at runtime.  In this case OpenCV.
;;
;; The simulation is a little smoke sim
;; with constant air streams from bottom->top
;; and from left->right.  Smoke is injected
;; into the system semi-regularly.

;;; Code:

;; First the fluid dynamics code

;; code here largely pilfered from from
;; Jos Stam and Mike Ash

(define pr2 (gl:make-ctx ":0.0" #f 0.0 0.0 1024.0 768.0))

(sys:load "libs/external/gl.xtm")

(bind-type fluidcube <i64,double,double,double,double*,double*,double*,double*,double*,double*,double*,double*>)

(bind-func fluid-ix
  (lambda (x:i64 y:i64 z:i64 N:i64)
    (+ x (* y N) (* z N N))))

(bind-func fluid-cube-create
  (lambda (size diffusion viscosity dt:double)
    (let ((cube:fluidcube* (heap-alloc))
    (size3:i64 (* size size size))
    (s:double* (heap-alloc size3))
    (density:double* (heap-alloc size3))
    (Vx:double* (heap-alloc size3))
    (Vy:double* (heap-alloc size3))
    (Vz:double* (heap-alloc size3))
    (Vx0:double* (heap-alloc size3))
    (Vy0:double* (heap-alloc size3))
    (Vz0:double* (heap-alloc size3)))
      (tfill! cube size dt diffusion viscosity s density Vx Vy Vz Vx0 Vy0 Vz0)
      cube)))


(bind-func fluid-cube-add-density
  (lambda (cube:fluidcube* x y z amount:double)
    (let ((N (tref cube 0))
    (idx (fluid-ix x y z N))
    (density-ptr:double* (tref cube 5))
    (density (pref density-ptr idx)))
      (pset! density-ptr idx (+ density amount))
      (+ density amount))))


(bind-func fluid-cube-add-velocity
  (lambda (cube:fluidcube* x y z amount-x:double amount-y:double amount-z:double)
    (let ((N (tref cube 0))
    (idx (fluid-ix x y z N))
    (_Vx (tref cube 6))
    (_Vy (tref cube 7))
    (_Vz (tref cube 8)))
      (pset! _Vx idx (+ amount-x (pref _Vx idx)))
      (pset! _Vy idx (+ amount-y (pref _Vy idx)))
      (pset! _Vz idx (+ amount-z (pref _Vz idx)))
      cube)))


(bind-func fluid-set-boundary
  (lambda (b:i64 x:double* N:i64)
    (let ((j 0)
    (i 0)
    (kk 0)
    (ii 0)
    (kkk 0)
    (jjj 0))
    (dotimes (j (- N 2))
      (dotimes (i (- N 2))
  (pset! x (fluid-ix (+ i 1) (+ j 1) 0 N)
         (if (= b 3)
       (- 0.0 (pref x (fluid-ix (+ i 1) (+ j 1) 1 N)))
       (pref x (fluid-ix (+ i 1) (+ j 1) 1 N))))
  (pset! x (fluid-ix (+ i 1) (+ j 1) (- N 1) N)
         (if (= b 3)
       (- 0.0 (pref x (fluid-ix (+ i 1) (+ j 1) (- N 2) N)))
       (pref x (fluid-ix (+ i 1) (+ j 1) (- N 2) N))))))
    (dotimes (kk (- N 2))
      (dotimes (ii (- N 2))
  (pset! x (fluid-ix (+ ii 1) 0 (+ kk 1) N)
         (if (= b 2)
       (- 0.0 (pref x (fluid-ix (+ ii 1) 1 (+ kk 1) N)))
       (pref x (fluid-ix (+ ii 1) 1 (+ kk 1) N))))
  (pset! x (fluid-ix (+ ii 1) (- N 1) (+ kk 1) N)
         (if (= b 2)
       (- 0.0 (pref x (fluid-ix (+ ii 1) (- N 2) (+ kk 1) N)))
       (pref x (fluid-ix (+ ii 1) (- N 2) (+ kk 1) N))))))
    (dotimes (kkk (- N 2))
      (dotimes (jjj (- N 2))
  (pset! x (fluid-ix 0 (+ jjj 1) (+ kkk 1) N)
         (if (= b 1)
       (- 0.0 (pref x (fluid-ix 1 (+ jjj 1) (+ kkk 1) N)))
       (pref x (fluid-ix 1 (+ jjj 1) (+ kkk 1) N))))
  (pset! x (fluid-ix (- N 1) (+ jjj 1) (+ kkk 1) N)
         (if (= b 1)
       (- 0.0 (pref x (fluid-ix (- N 2) (+ jjj 1) (+ kkk 1) N)))
       (pref x (fluid-ix (- N 2) (+ jjj 1) (+ kkk 1) N))))))

    (pset! x (fluid-ix 0 0 0 N)
     (* 0.33333 (+ (pref x (fluid-ix 1 0 0 N))
       (pref x (fluid-ix 0 1 0 N))
       (pref x (fluid-ix 0 0 1 N)))))

    (pset! x (fluid-ix 0 (- N 1) 0 N)
     (* 0.33333 (+ (pref x (fluid-ix 1 (- N 1) 0 N))
       (pref x (fluid-ix 0 (- N 2) 0 N))
       (pref x (fluid-ix 0 (- N 1) 1 N)))))

    (pset! x (fluid-ix 0 0 (- N 1) N)
     (* 0.33333 (+ (pref x (fluid-ix 1 0 (- N 1) N))
       (pref x (fluid-ix 0 1 (- N 1) N))
       (pref x (fluid-ix 0 0 N N)))))

    (pset! x (fluid-ix 0 (- N 1) (- N 1) N)
     (* 0.33333 (+ (pref x (fluid-ix 1 (- N 1) (- N 1) N))
       (pref x (fluid-ix 0 (- N 2) (- N 1) N))
       (pref x (fluid-ix 0 (- N 1) (- N 2) N)))))

    (pset! x (fluid-ix (- N 1) 0 0 N)
     (* 0.33333 (+ (pref x (fluid-ix (- N 2) 0 0 N))
       (pref x (fluid-ix (- N 1) 1 0 N))
       (pref x (fluid-ix (- N 1) 0 1 N)))))

    (pset! x (fluid-ix (- N 1) (- N 1) 0 N)
     (* 0.33333 (+ (pref x (fluid-ix (- N 2) (- N 1) 0 N))
       (pref x (fluid-ix (- N 1) (- N 2) 0 N))
       (pref x (fluid-ix (- N 1) (- N 1) 1 N)))))

    (pset! x (fluid-ix (- N 1) 0 (- N 1) N)
     (* 0.33333 (+ (pref x (fluid-ix (- N 2) 0 (- N 1) N))
       (pref x (fluid-ix (- N 1) 1 (- N 1) N))
       (pref x (fluid-ix (- N 1) 0 (- N 2) N)))))

    (pset! x (fluid-ix (- N 1) (- N 1) (- N 1) N)
     (* 0.33333 (+ (pref x (fluid-ix (- N 2) (- N 1) (- N 1) N))
       (pref x (fluid-ix (- N 1) (- N 2) (- N 1) N))
       (pref x (fluid-ix (- N 1) (- N 1) (- N 2) N)))))
    1)))



(bind-func fluid-lin-solve
  (lambda (b:i64 x:double* x0:double* a c iter:i64 N:i64)
    (let ((cRecip (/ 1.0 c))
    (k 0)
    (m 0)
    (j 0)
    (i 0))
      (dotimes (k iter)
  (dotimes (m (- N 2))
    (dotimes (j (- N 2))
      (dotimes (i (- N 2))
        (pset! x (fluid-ix (+ i 1) (+ j 1) (+ m 1) N)
         (* cRecip
      (+ (pref x0 (fluid-ix (+ i 1) (+ j 1) (+ m 1) N))
         (* a (+ (pref x (fluid-ix (+ i 2) (+ j 1) (+ m 1) N))
           (pref x (fluid-ix i (+ j 1) (+ m 1) N))
           (pref x (fluid-ix (+ i 1) (+ j 2) (+ m 1) N))
           (pref x (fluid-ix (+ i 1) j (+ m 1) N))
           (pref x (fluid-ix (+ i 1) (+ j 1) (+ m 2) N))
           (pref x (fluid-ix (+ i 1) (+ j 1) m N))))))))))
  (fluid-set-boundary b x N)))
    1))


(bind-func fluid-diffuse
  (lambda (b:i64 x:double* x0:double* diff:double dt:double iter N)
    (let ((a:double (* dt diff (i64tod (* (- N 2) (- N 2))))))
      (fluid-lin-solve b x x0 a (+ 1.0 (* 6.0 a)) iter N))))


(bind-func fluid-project
  (lambda (velocx:double* velocy:double* velocz:double* p:double* div:double* iter N)
    (let ((j 0)
    (k 0)
    (i 0)
    (kk 0)
    (jj 0)
    (ii 0))
    (dotimes (k (- N 2))
      (dotimes (j (- N 2))
  (dotimes (i (- N 2))
    (pset! div (fluid-ix (+ i 1) (+ j 1) (+ k 1) N)
     (* -0.5 (/ (+ (- (pref velocx (fluid-ix (+ i 2) (+ j 1) (+ k 1) N))
          (pref velocx (fluid-ix i (+ j 1) (+ k 1) N)))
             (- (pref velocy (fluid-ix (+ i 1) (+ j 2) (+ k 1) N))
          (pref velocy (fluid-ix (+ i 1) j (+ k 1) N)))
             (- (pref velocz (fluid-ix (+ i 1) (+ j 1) (+ k 2) N))
          (pref velocz (fluid-ix (+ i 1) (+ j 1) k N))))
          (i64tod N))))
    (pset! p (fluid-ix (+ i 1) (+ j 1) (+ k 1) N) 0.0)
    1)))

    (fluid-set-boundary 0 div N)
    (fluid-set-boundary 0 p N)
    (fluid-lin-solve 0 p div 1.0 6.0 iter N)

    (dotimes (kk (- N 2))
      (dotimes (jj (- N 2))
  (dotimes (ii (- N 2))
    (pset! velocx (fluid-ix (+ ii 1) (+ jj 1) (+ kk 1) N)
     (- (pref velocx (fluid-ix (+ ii 1) (+ jj 1) (+ kk 1) N))
        (* 0.5
           (- (pref p (fluid-ix (+ ii 2) (+ jj 1) (+ kk 1) N))
        (pref p (fluid-ix (+ ii 0) (+ jj 1) (+ kk 1) N)))
           (i64tod N))))
    (pset! velocy (fluid-ix (+ ii 1) (+ jj 1) (+ kk 1) N)
     (- (pref velocy (fluid-ix (+ ii 1) (+ jj 1) (+ kk 1) N))
        (* 0.5
           (- (pref p (fluid-ix (+ ii 1) (+ jj 2) (+ kk 1) N))
        (pref p (fluid-ix (+ ii 1) (+ jj 0) (+ kk 1) N)))
           (i64tod N))))
    (pset! velocz (fluid-ix (+ ii 1) (+ jj 1) (+ kk 1) N)
     (- (pref velocz (fluid-ix (+ ii 1) (+ jj 1) (+ kk 1) N))
        (* 0.5
           (- (pref p (fluid-ix (+ ii 1) (+ jj 1) (+ kk 2) N))
        (pref p (fluid-ix (+ ii 1) (+ jj 1) (+ kk 0) N)))
           (i64tod N))))
    1)))

    (fluid-set-boundary 1 velocx N)
    (fluid-set-boundary 2 velocy N)
    (fluid-set-boundary 3 velocz N)

    1)))


(bind-func fluid-advect
  (lambda (b:i64 d:double* d0:double* velocx:double* velocy:double* velocz:double* dt:double N:i64)
    (let ((n-2 (i64tod (- N 2)))
    (dtx (* dt n-2))
    (dty dtx)
    (dtz dty)
    (kfloat 0.0) (jfloat 0.0) (ifloat 0.0)
    (s0 0.0) (s1 0.0) (t0 0.0) (t1 0.0) (u0 0.0) (u1 0.0)
    (i0 0.0) (i0i:i64 0) (i1 0.0) (i1i:i64 0)
    (j0 0.0) (j0i:i64 0) (j1 0.0) (j1i:i64 0)
    (k 0) (j 0) (i 0)
    (tmp1 0.0) (tmp2 0.0) (tmp3 0.0)
    (x 0.0) (y 0.0) (z 0.0)
    (k0 0.0) (k0i:i64 0) (k1 0.0) (k1i:i64 0)
    (Nfloat (i64tod N)))
      (dotimes (k (- N 2))
  (set! kfloat (+ kfloat 1.0))
  (set! jfloat 0.0)
  (dotimes (j (- N 2))
    (set! jfloat (+ jfloat 1.0))
    (set! ifloat 0.0)
    (dotimes (i (- N 2))
      (set! ifloat (+ ifloat 1.0))
      (set! tmp1 (* dtx (pref velocx (fluid-ix (+ i 1) (+ j 1) (+ k 1) N))))
      (set! tmp2 (* dty (pref velocy (fluid-ix (+ i 1) (+ j 1) (+ k 1) N))))
      (set! tmp3 (* dtz (pref velocz (fluid-ix (+ i 1) (+ j 1) (+ k 1) N))))
      (set! x (- ifloat tmp1))
      (set! y (- jfloat tmp2))
      (set! z (- kfloat tmp3))

      (if (< x 0.5) (set! x 0.5))
      (if (> x (+ Nfloat 0.5)) (set! x (+ Nfloat 0.5)))
      (set! i0 (floor x))
      (set! i1 (+ i0 1.0))
      (if (< y 0.5) (set! y 0.5))
      (if (> y (+ Nfloat 0.5)) (set! y (+ Nfloat 0.5)))
      (set! j0 (floor y))
      (set! j1 (+ j0 1.0))
      (if (< z 0.5) (set! z 0.5))
      (if (> z (+ Nfloat 0.5)) (set! z (+ Nfloat 0.5)))
      (set! k0 (floor z))
      (set! k1 (+ k0 1.0))

      (set! s1 (- x i0))
      (set! s0 (- 1.0 s1))
      (set! t1 (- y j0))
      (set! t0 (- 1.0 t1))
      (set! u1 (- z k0))
      (set! u0 (- 1.0 u1))

      (set! i0i (dtoi64 i0))
      (set! i1i (dtoi64 i1))
      (set! j0i (dtoi64 j0))
      (set! j1i (dtoi64 j1))
      (set! k0i (dtoi64 k0))
      (set! k1i (dtoi64 k1))

      (pset! d (fluid-ix (+ i 1) (+ j 1) (+ k 1) N)
       (+ (* s0 (+ (* t0 (+ (* u0 (pref d0 (fluid-ix i0i j0i k0i N)))
          (* u1 (pref d0 (fluid-ix i0i j0i k1i N)))))
             (* t1 (+ (* u0 (pref d0 (fluid-ix i0i j1i k0i N)))
          (* u1 (pref d0 (fluid-ix i0i j1i k1i N)))))))
          (* s1 (+ (* t0 (+ (* u0 (pref d0 (fluid-ix i1i j0i k0i N)))
          (* u1 (pref d0 (fluid-ix i1i j0i k1i N)))))
             (* t1 (+ (* u0 (pref d0 (fluid-ix i1i j1i k0i N)))
          (* u1 (pref d0 (fluid-ix i1i j1i k1i N))))))))))))

      (fluid-set-boundary b d N))))



(bind-func fluid-step-cube
  (lambda (cube:fluidcube*)
    (let ((N (tref cube 0))
    (dt (tref cube 1))
    (diff (tref cube 2))
    (visc (tref cube 3))
    (s (tref cube 4))
    (k 0)
    (kk 0)
    (density (tref cube 5))
    (Vx (tref cube 6))
    (Vy (tref cube 7))
    (Vz (tref cube 8))
    (Vx0 (tref cube 9))
    (Vy0 (tref cube 10))
    (Vz0 (tref cube 11)))

      (fluid-diffuse 1 Vx0 Vx visc dt 4 N)
      (fluid-diffuse 2 Vy0 Vy visc dt 4 N)
      (fluid-diffuse 3 Vz0 Vz visc dt 4 N)

      (dotimes (k (* N N N))
        (pset! Vx k 0.0)
        (pset! Vy k 0.0)
        (pset! Vz k 0.0))

      (fluid-project Vx0 Vy0 Vz0 Vx Vy 4 N)

      (fluid-advect 1 Vx Vx0 Vx0 Vy0 Vz0 dt N)
      (fluid-advect 2 Vy Vy0 Vx0 Vy0 Vz0 dt N)
      (fluid-advect 3 Vz Vz0 Vx0 Vy0 Vz0 dt N)

      (dotimes (kk (* N N N))
        (pset! Vx0 kk 0.0)
        (pset! Vy0 kk 0.0)
        (pset! Vz0 kk 0.0))

      (fluid-project Vx Vy Vz Vx0 Vy0 4 N)
      (fluid-diffuse 0 s density diff dt 4 N)
      (fluid-advect 0 density s Vx Vy Vz dt N)
      cube)))

(bind-func get-fluid-cube
  (let ((cube (fluid-cube-create 22 0.001 0.001 0.002)))
    (lambda ()
      cube)))

(bind-func clean-cube
  (lambda ()
    (let ((densities (tref (get-fluid-cube) 5))
    (Vx (tref (get-fluid-cube) 6))
    (Vy (tref (get-fluid-cube) 7))
    (Vz (tref (get-fluid-cube) 8))
    (x 0)
    (y 0)
    (z 0)
    (size (tref (get-fluid-cube) 0)))
      (dotimes (x size)
  (dotimes (y size)
    (dotimes (z size)
      (let ((idx (fluid-ix x y z size)))
        (pset! Vx idx 0.0)
        (pset! Vy idx 0.0)
        (pset! Vz idx 0.0)
        (pset! densities idx 0.0))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Next Some OpenGL Stuff

(gl_set_view 1024.0 768.0 200.0)
;;(gl_set_view 1920.0 1200.0 1000.0)

(bind-func some_gl_init
  (lambda ()
    (glEnable GL_BLEND)
    (glBlendFunc GL_SRC_ALPHA (+ GL_SRC_ALPHA 1))
    (glDisable GL_DEPTH_TEST)))


(bind-func add-density
  (lambda (x:i64 y:i64 z:i64 amount:double)
    (let ((cube (get-fluid-cube)))
      (fluid-cube-add-density cube x y z amount))))

(bind-func add-velocity
  (lambda (x y z amount-x amount-y amount-z)
    (fluid-cube-add-velocity (get-fluid-cube) x y z amount-x amount-y amount-z)))

(bind-func get-velocity
  (lambda (x y z)
    (let ((xs (tref (get-fluid-cube) 6))
    (size (tref (get-fluid-cube) 0)))
      (pref xs (fluid-ix x y z size)))))


(bind-func look-at
  (lambda (eyex eyey eyez centre-x centre-y centre-z up-x up-y up-z)
    (glLoadIdentity)
    (gluLookAt eyex eyey eyez centre-x centre-y centre-z up-x up-y up-z)))


(bind-func glCube
  (let ((dlist -1))
    (lambda ()
      (if (> dlist -1)
    (begin (glCallList dlist) 1)
    (begin (set! dlist (glGenLists 1))
     (glNewList dlist (+ GL_COMPILE 1))
     (glBegin GL_QUADS)
     ;; Front face
     (glNormal3d 0.0 0.0 1.0)
     (glVertex3d 0.0 0.0  1.0)
     (glVertex3d 1.0 0.0  1.0)
     (glVertex3d 1.0  1.0  1.0)
     (glVertex3d 0.0  1.0  1.0)
     ;; Back face
     (glNormal3d 0.0 0.0 -1.0)
     (glVertex3d 0.0 0.0 0.0)
     (glVertex3d 0.0  1.0 0.0)
     (glVertex3d 1.0  1.0 0.0)
     (glVertex3d 1.0 0.0 0.0)
     ;; Top face
     (glNormal3d 0.0 1.0 0.0)
     (glVertex3d 0.0  1.0 0.0)
     (glVertex3d 0.0  1.0  1.0)
     (glVertex3d 1.0  1.0  1.0)
     (glVertex3d 1.0  1.0 0.0)
     ;; Bottom face
     (glNormal3d 0.0 -1.0 0.0)
     (glVertex3d 0.0 0.0 0.0)
     (glVertex3d 1.0 0.0 0.0)
     (glVertex3d 1.0 0.0  1.0)
     (glVertex3d 0.0 0.0  1.0)
     ;; Right face
     (glNormal3d 1.0 0.0 0.0)
     (glVertex3d 1.0 0.0 0.0)
     (glVertex3d 1.0  1.0 0.0)
     (glVertex3d 1.0  1.0  1.0)
     (glVertex3d 1.0 0.0  1.0)
     ;; Left face
     (glNormal3d -1.0 0.0 0.0)
     (glVertex3d 0.0 0.0 0.0)
     (glVertex3d 0.0 0.0  1.0)
     (glVertex3d 0.0  1.0  1.0)
     (glVertex3d 0.0  1.0 0.0)
     (glEnd)
     (glEndList)
     1)))))


  ;; a trivial opengl draw loop
;; need to call glfwSwapBuffers to flush
(bind-func my-gl-loop
  (let ((degree 0.0))
    (lambda ()
      ;; (glClearColor 1.0 0.5 0.0 1.0)
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      (glColor4d 0.0 0.0 0.0 1.0)
      (glLineWidth 1.0)

      (glLoadIdentity)
      (glTranslated -10.0 -10.0 -50.0)

      (fluid-step-cube (get-fluid-cube))
      (let ((densities (tref (get-fluid-cube) 5))
      (i:double 0.0)
      (j:double 0.0)
      (k:double 0.0)
            (Vx (tref (get-fluid-cube) 6))
            (Vy (tref (get-fluid-cube) 7))
            (Vz (tref (get-fluid-cube) 8))
            (size (tref (get-fluid-cube) 0))
            (sized (i64tod size))
            (cvar 0.0))

  (glTranslated 10.0 11.0 11.0)
        (glRotated (* 300.0 degree) 0.0 1.0 0.0)
        (glTranslated -10.0 -11.0 -11.0)

        (dotimes (i 0. sized)
          (dotimes (j 0. sized)
            (dotimes (k 0. sized)
        (let ((idx (fluid-ix (dtoi64 i) (dtoi64 j) (dtoi64 k) size))
        (norm (sqrt (+ (* (pref Vx idx) (pref Vx idx))
           (* (pref Vy idx) (pref Vy idx))
           (* (pref Vz idx) (pref Vz idx))))))
    (glPushMatrix)
    (glTranslated i j k)
    (set! cvar (pref densities idx))
    (glColor4d 0.8 1.0 0.4 cvar)
    (glCube)
    ;; turn 0.2 to 0.0 to stop drawing vertex arrows
    (glColor4d 1.0 1.0 1.0 1.0)
    ;; if you're having performance problems you
    ;; could start by commenting out the next 4 lines
    ;; i.e. stop drawing the red velocity arrows
    (glBegin GL_LINES)
    (glVertex3d 0.5 0.5 0.5)
    (glVertex3d (+ 0.5 (* 0.5 (/ (pref Vx idx) norm)))
          (+ 0.5 (* 0.5 (/ (pref Vy idx) norm)))
          (+ 0.5 (* 0.5 (/ (pref Vz idx) norm))))
    (glEnd)
    (glPopMatrix))))))

      (set! degree (+ degree .001))
      1)))



;;
;; opengl-test includes two sources
;; of constant wind speed
;;
;; bottom->top: straight up the middle
;; left->right: oscillates from back to front
;;
;; You might need to slow the rate of this
;; temporal recursion down if your machine
;; doesn't cope.  (i.e. 3000 to 5000 or more
;;
;; standard impromptu callback
(define opengl-test
  (lambda (time degree)
    (my-gl-loop)
    ;; 1000.0 is wind speed from bottom to top
    (add-velocity 11 1 11 0.0 1000.0 0.0)
    ;; 600.0 is wind speed from left to right
    (add-velocity 2 5 11 300.0 0.0 (+ 200.0 (* 200.0 (cos (* 100.0 degree)))))
    ;; everynow and then remove smoke from cube
    (if (< (modulo degree 1.0) 0.005) (clean-cube))
    (gl:swap-buffers pr2)
    (callback time 'opengl-test (+ time 3000) (+ degree 0.001))))

;;
;; Smoke signal injects smoke into the system
;; at semi-regular intervals (* 40000 (random 4 9))
;;
(define smoke-signal
  (lambda (time)
    ;; increase 300.0 to kick more smoke into the system
    (add-density 2 5 11 (+ 1.0 (* (random) 50.0)))
    ;; decrease (random 4 9) to inject smoke more often
    (callback (+ time 4410) 'smoke-signal (+ time (* 40000 (random 4 9))))))


(opengl-test (now) 0.0)
(some_gl_init)
(smoke-signal (now))

;; eval this again if you want to clean the cube at some point!
; (clean-cube)
