;; multilight.xtm
;;
;; opengl example using 100% shader pipeline
;;
;; the scene includes:
;; a couple of objects and three spotlights
;; with shadowing for the spotlights
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; NOTES for BLENDER MODELS
;;
;; you can download the blender models from:
;;
;; http://extempore.moso.com.au/extras/peppino.blend
;; http://extempore.moso.com.au/extras/scene.blend
;; http://extempore.moso.com.au/extras/dome_cut.blend
;;
;; or use your own models ;)
;;
;; smooth shading ONLY so ...
;;
;; 1) Blender 2.6 models not supported yet
;; use Blender 2.5.
;;
;; 2) make sure model is smooth shaded in blender
;; then apply modifier (edge split) for any
;; meshes that you want flat shaded.
;;
;; 3) If your meshes have a strange black grainy
;; look then you'll need reverse the GL_FRONT/GL_BACK
;; face culling in the FIRST PASS of the render
;;
;; 4) You will probably need to do a rotation
;; of the model around the X axis.  It might be
;; easier to set this up in blender before export
;; (i.e. Y should be up not Z)
;;

;;; Code:

;; make sure you include / on the end
(define path "assets/models/")

(define fullscreen #f)
;; (define width 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)

(bind-val width float width)
(bind-val height float height)

(bind-val shadowmapsize float 1024.0)

;; setup opengl
(define glctx (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

(sys:load "libs/core/math.xtm")
(sys:load "libs/external/gl.xtm")
(sys:load "libs/external/graphics-pipeline.xtm")
(sys:load "libs/external/assimp.xtm")

(bind-val simpleshader i32 (create_shader_xtm simple-vert-xtm simple-frag))
(bind-val shadowshader i32 (create_shader_xtm xtmvert-xtm xtmfrag))

(bind-func get-fbo
  (let ((fbo:E_fbo* (create_fbo (ftoi32 (* 4.0 1024.0)) (ftoi32 (* 4.0 1024.0)) 0 0)))
    (lambda ()
      fbo)))

;; a trivial opengl draw loop
(bind-func gl_render
  (let ((fbo:E_fbo* null)
        (size 0.01)
        (lights:i32 3)
        (i:i32 0)
        (eye:float* (alloc 4))
        (target:float* (alloc 4))
        (up:float* (alloc 4))
        (tmp_matrix:float* (alloc 16))
        (model_matrix:float* (alloc 16))
        (view_matrix:float* (alloc 16))
        (projection_matrix:float* (alloc 16))
        (mata:float* (alloc 4))
        (matd:float* (alloc 4))
        (mats:float* (alloc 4))
        (_angle:float* (alloc 10))
        (_power:float* (alloc 10))
        (_spotpos:float* (alloc (* lights 4)))
        (spotpos:float* null)
        (_spottgt:float* (alloc (* lights 4)))
        (spottgt:float* null)
        (_light_view_matrix:float* (alloc (* lights 16)))
        (light_view_matrix:float* null)
        (_diffuse_light:float* (alloc (* lights 4)))
        (_specular_light:float* (alloc (* lights 4)))
        (_ambient_light:float* (alloc (* lights 4))))
    ;; warm for light 1!
    (pfill! (pref-ptr _ambient_light 0) 1.0 0.8 0.5 1.0)
    (pfill! (pref-ptr _specular_light 0) 1.0 1.0 1.0 1.0)
    (pfill! (pref-ptr _diffuse_light 0) 1.0 0.8 0.5 1.0)
    ;; red for light 2!
    (pfill! (pref-ptr _ambient_light 4) 0.0 0.0 0.0 1.0)
    (pfill! (pref-ptr _specular_light 4) 1.0 0.0 0.0 1.0)
    (pfill! (pref-ptr _diffuse_light 4) 1.0 0.1 0.0 1.0)
    ;; green for light 3!
    (pfill! (pref-ptr _ambient_light 8) 0.0 0.0 0.0 1.0)
    (pfill! (pref-ptr _specular_light 8) 0.0 1.0 0.0 1.0)
    (pfill! (pref-ptr _diffuse_light 8) 0.1 1.0 0.0 1.0)
    ;; camera always up and pointing to centre
    (pfill! target 0.0 0.0 0.0 1.0) ;; position vector gets w==1.0
    (pfill! up 0.0 1.0 0.0 0.0) ;; direction vector gets w==0.0
    (lambda (model1:xtm_node* model2:xtm_node* model3:xtm_node* degree:double)
      ;; setup rotating spot light
      (pfill! (pref-ptr _spottgt 0)
              (dtof (* 5.0 (cos (* degree .05))))
              -1.7
              (+ 11.0 (dtof (* 5.0 (sin (* degree .05)))))
              1.0)
      (pfill! (pref-ptr _spotpos 0) 0.0 -2.8 11.0 1.0)
      ;; (pfill! (pref-ptr _spotpos 0) (+ .5 (dtof (* 8.0 (cos (* degree 0.05))))) 1.0 20.0 1.0)
      ;; setup second light as fixed
      ;; (pfill! (pref-ptr _spottgt 4) (+ .5 (dtof (* 10.0 (cos (* degree 0.05))))) 0.0 -1.0 1.0)
      ;; (pfill! (pref-ptr _spotpos 4) (+ .5 (dtof (* 10.0 (cos (* degree 0.05))))) 2.0 20.0 1.0)
      (pfill! (pref-ptr _spottgt 4) -3.0 0.0 0.0 1.0)
      (pfill! (pref-ptr _spotpos 4) 8.0 4.0 -2.0 1.0)
      (pfill! (pref-ptr _spottgt 8) -1.0 0.0 -1.0 1.0)
      (pfill! (pref-ptr _spotpos 8) -15.0 4.0 7.0 1.0)
      ;; (pfill! (pref-ptr _spottgt 8) 2.0 0.0 -5.0 1.0)
      ;; (pfill! (pref-ptr _spotpos 8) -3.0 1.0 10.0 1.0)
      ;; set eye position (looking at target)
      (pfill! eye
              (dtof (* 5.0 (cos (* .01 degree))))
              (dtof (+ 5.0 (* 5.0 (cos (* .005 degree)))))
              (dtof (+ 15.0 (* 10.0 (cos (* .025 degree)))))
              1.0) ;; position
      ;; setup projection matrix
      (fill_projection_matrix projection_matrix 35.0 (/ width height) 0.1 100.0)
      (set! lights (i64toi32 3))
      ;; make sure a few opengl settings are enabled
      (glShadeModel GL_SMOOTH)
      (glEnable GL_DEPTH_TEST)
      (glEnable GL_TEXTURE_2D)
      ;;
      ;; Now we render the Scene into An FBO
      ;; this first pass is from the lights
      ;; perspective (i.e. Light provides ViewMatrix)
      ;; We really only care about the depth buffer here
      ;;
      (set! fbo (get-fbo))
      ;; bind framebuffer to write depth info into
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo 0))
      (glUseProgram simpleshader)
      ;; clear fbo
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      (pset! _angle 0 40.0)
      (pset! _power 0 60.0) ;; 60
      (pset! _angle 1 60.0)
      (pset! _power 1 40.0) ;; 40
      (pset! _angle 2 60.0)
      (pset! _power 2 60.0) ;; 60

      (dotimes (i lights)
        (set! light_view_matrix (pref-ptr _light_view_matrix (* i 16)))
        (set! spottgt (pref-ptr _spottgt (* i 4)))
        (set! spotpos (pref-ptr _spotpos (* i 4)))
        ;; run once for each light!
        (fill_view_matrix light_view_matrix spotpos spottgt up)
        (fill_identity_matrix model_matrix)
        (shader_update_matrices simpleshader model_matrix light_view_matrix projection_matrix)
        ;; draw scene into shadowmap (divided into 1/4s (i.e. up to 4 shadowmaps)
        ;; shadow map atlas size (1024.*1024.)
        (glViewport (* (% i 4) 1024) (* (ftoi32 (/ (i32tof i) 4.0)) 1024) 1024 1024)
        (glEnable GL_CULL_FACE) ;; face culling ON for shadowmapping
        (glCullFace GL_FRONT)
        (fill_identity_matrix model_matrix)
        (translate_matrix model_matrix -3.0 -2.9 -1.0)
        (scale_matrix model_matrix 1.5 1.5 1.5)
        (shader_update_matrices simpleshader model_matrix light_view_matrix projection_matrix)
        (assimp_draw_model model3 simpleshader model_matrix light_view_matrix projection_matrix lights _light_view_matrix)
        (fill_identity_matrix model_matrix)
        (shader_update_matrices simpleshader model_matrix light_view_matrix projection_matrix)
        (assimp_draw_model model2 simpleshader model_matrix light_view_matrix projection_matrix lights _light_view_matrix)
        (assimp_draw_model model1 simpleshader model_matrix light_view_matrix projection_matrix
                            lights _light_view_matrix))

      ;; turn everything FBO
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)

      ;;
      ;; Finally we render the scene to the window
      ;; using the FBO depth buffer as a shadow map
      ;;
      ;; make sure we are not writing to a framebuffer!
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram shadowshader)
      ;; clear main framebuffer
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))

      ;; setup shadowmap textures
      ;;(set! fbo (get-fbo)) ;; get fbo for this lights shadow
      (glActiveTexture GL_TEXTURE0) ;; texture unit 0 for shadowMap
      (glBindTexture GL_TEXTURE_2D (tref fbo 2))

      (glUniform1i (glGetUniformLocation shadowshader "shadowMap") 0)
      ;; setup light
      (shader_update_lights shadowshader lights _spotpos _spottgt
                            _angle _power ;;30.0 30.0
                            _ambient_light _diffuse_light _specular_light)
      ;; setup matrices
      (fill_view_matrix view_matrix eye target up) ;; cameras view matrix
      (fill_identity_matrix model_matrix) ;; reset model matrix
      (shader_update_camera shadowshader eye target)
      (dotimes (i lights)
        (fill_view_matrix (pref-ptr _light_view_matrix (* i 16))
                          (pref-ptr _spotpos (* i 4)) (pref-ptr _spottgt (* i 4)) up)) ;; lights view matrix
      (shader_update_matrices_lvs shadowshader model_matrix view_matrix projection_matrix lights _light_view_matrix)
      ;; draw scene
      (glViewport 0 0 (ftoi32 (* 1.0 width)) (ftoi32 (* 1.0 height))) ;; window size
      (glDisable GL_CULL_FACE) ;; turn face culling off
      (fill_identity_matrix model_matrix)
      (translate_matrix model_matrix -3.0 -2.9 -1.0)
      (scale_matrix model_matrix 1.5 1.5 1.5)
      (shader_update_matrices_lvs shadowshader model_matrix view_matrix projection_matrix lights _light_view_matrix)
      (assimp_draw_model model3 shadowshader model_matrix view_matrix projection_matrix lights _light_view_matrix)
      (fill_identity_matrix model_matrix) ;; reset model matrix
      (shader_update_matrices_lvs shadowshader model_matrix view_matrix projection_matrix lights _light_view_matrix)
      (assimp_draw_model model2 shadowshader model_matrix view_matrix projection_matrix lights _light_view_matrix)
      (assimp_draw_model model1 shadowshader model_matrix view_matrix projection_matrix lights _light_view_matrix)

      ;; turn everything off again.
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D 0)

      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)

      (glDisable GL_TEXTURE_2D) ;; unbind texture unit 0
      ;; turn off texture 2d
      ;; (glDisable GL_TEXTURE_2D)

      ;; print errors?
      (gl_print_error)

      void)))


;; standard impromptu callback
(define opengl-loop
  (lambda (time dur model1 model2 model3 degree)
    (let ((v (now)))
      (gl_render model1 model2 model3 degree)
      (gl:swap-buffers glctx)
      )
    (callback (+ time (* dur .1)) 'opengl-loop (+ time dur) dur model1 model2 model3 (+ degree .5))))

(gl_print_error)

(define peppino (assimp_load_model path "peppino.blend"))
(define scene (assimp_load_model path "scene.blend"))
(define dome (assimp_load_model path "dome_cut.blend" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder)))

(gl_print_error)

(opengl-loop (now) 2500 dome scene peppino 70.0)
