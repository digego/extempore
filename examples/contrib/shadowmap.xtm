;; shadowmap.xtm
;;
;; opengl example using 100% shader pipeline
;;
;; the scene includes:
;; a couple of objects and a single spotlight
;; and shadowing for the spotlight
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;;
;;
;; NOTES for BLENDER MODELS
;;
;; you can download the blender models from:
;;
;; http://extempore.moso.com.au/extras/peppino.blend
;; http://extempore.moso.com.au/extras/scene.blend
;; http://extempore.moso.com.au/extras/dome_cut.blend
;;
;; or use your own models ;)
;;
;; smooth shading ONLY so ...
;;
;; 1) Blender 2.6 models not supported yet
;; use Blender 2.5.
;;
;; 2) make sure model is smooth shaded in blender
;; then apply modifier (edge split) for any
;; meshes that you want flat shaded.
;;
;; 3) If your meshes have a strange black grainy
;; look then you'll need reverse the GL_FRONT/GL_BACK
;; face culling in the FIRST PASS of the render
;;
;; 4) You will probably need to do a rotation
;; of the model around the X axis.  It might be
;; easier to set this up in blender before export
;; (i.e. Y should be up not Z)
;;

;;; Code:

;; make sure you include / on the end
(define path "assets/models/")

(define fullscreen #f)
;; (define width 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)

(bind-val width float width)
(bind-val height float height)

;; setup opengl
(define glctx (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

(sys:load "libs/core/math.xtm")
(sys:load "libs/external/gl.xtm")
(sys:load "libs/external/graphics-pipeline.xtm")
(sys:load "libs/external/assimp.xtm")

(bind-val simpleshader i32 (create_shader_xtm simple-vert-xtm simple-frag))
(bind-val shadowshader i32 (create_shader_xtm light-and-shade-vert-xtm light-and-shade-frag))

;; make fbo global so it doesn't get
;; created between compiles of gl_render
;; which is NOT very safe!!
(bind-func get-fbo
  (let ((fbo (create_fbo (ftoi32 (* 2.0 width)) (ftoi32 (* 2.0 height)) 0 0)))
    (gl_print_error)
    (lambda ()
      fbo)))

;; a trivial opengl draw loop
(bind-func gl_render
  (let ((fbo:E_fbo* null)
        (size 0.01)
        (eye:float* (alloc 4))
        (target:float* (alloc 4))
        (up:float* (alloc 4))
        (tmp_matrix:float* (alloc 16))
        (model_matrix:float* (alloc 16))
        (view_matrix:float* (alloc 16))
        (projection_matrix:float* (alloc 16))
        (mata:float* (alloc 4))
        (matd:float* (alloc 4))
        (mats:float* (alloc 4))
        (spotpos:float* (alloc 4))
        (spottgt:float* (alloc 4))
        (spotdir:float* (alloc 4))
        (light_view_matrix:float* (alloc 16))
        (d1:float* (alloc 4))
        (s1:float* (alloc 4))
        (a1:float* (alloc 4)))
    ;; white light!
    (pfill! a1 1.0 1.0 1.0 1.0)
    (pfill! s1 1.0 1.0 1.0 1.0)
    (pfill! d1 1.0 1.0 1.0 1.0)
    ;; camera always up and pointing to centre
    (pfill! target 0.0 0.0 0.0 1.0) ;; position vector gets w==1.0
    (pfill! up 0.0 1.0 0.0 0.0) ;; direction vector gets w==0.0
    (lambda (model1:xtm_node* model2:xtm_node* model3:xtm_node* degree:double)
      ;; first grab the fbo
      (set! fbo (get-fbo))
      ;; setup light on a slow dolly back and forth
      (pfill! spottgt (+ .5 (dtof (* 5.0 (cos (* degree .05))))) 0.0 -1.0 1.0)
      (pfill! spotpos (+ .5 (dtof (* 5.0 (cos (* degree .05))))) 2.0 20.0 1.0)
      ;; set eye position (looking at target)
      (pfill! eye
              (dtof (* 5.0 (cos (* .01 degree))))
              (dtof (+ 5.0 (* 5.0 (cos (* .005 degree)))))
              (dtof (+ 15.0 (* 10.0 (cos (* .025 degree)))))
              1.0) ;; position
      ;; setup projection matrix
      (fill_projection_matrix projection_matrix 35.0 (/ width height) 0.1 100.0)

      ;; make sure a few opengl settings are enabled
      (glShadeModel GL_SMOOTH)
      (glEnable GL_DEPTH_TEST)
      (glEnable GL_TEXTURE_2D)

      ;;
      ;; Now we render the Scene into An FBO
      ;; this first pass is from the lights
      ;; perspective (i.e. Light provides ViewMatrix)
      ;; We really only care about the depth buffer here
      ;;

      ;; bind framebuffer to write depth info into
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo 0))
      (glUseProgram simpleshader)
      ;; setup matrices
      (fill_view_matrix light_view_matrix spotpos spottgt up)
      (fill_identity_matrix model_matrix)
      (shader_update_matrices simpleshader model_matrix light_view_matrix projection_matrix)
      ;; draw scene
      (glViewport 0 0 (ftoi32 (* 2.0 width)) (ftoi32 (* 2.0 height))) ;; shadow map is big!
      (glEnable GL_CULL_FACE) ;; face culling ON for shadowmapping
      (glCullFace GL_FRONT)
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (fill_identity_matrix model_matrix)
      (translate_matrix model_matrix -3.0 -2.9 -1.0)
      (scale_matrix model_matrix 1.5 1.5 1.5)
      (shader_update_matrices simpleshader model_matrix light_view_matrix projection_matrix)
      (assimp_draw_model model3 simpleshader model_matrix light_view_matrix projection_matrix 1 light_view_matrix)
      (fill_identity_matrix model_matrix)
      (shader_update_matrices simpleshader model_matrix light_view_matrix projection_matrix)
      (assimp_draw_model model2 simpleshader model_matrix light_view_matrix projection_matrix 1 light_view_matrix)
      (assimp_draw_model model1 simpleshader model_matrix light_view_matrix projection_matrix 1 light_view_matrix)
      ;; turn everything off
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)

      ;;
      ;; Finally we render the scene to the window
      ;; using the FBO depth buffer as a shadow map
      ;;
      ;; make sure we are not writing to a framebuffer!
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram shadowshader)
      ;; setup shadowmap texture
      (glActiveTexture GL_TEXTURE0) ;; texture unit 0 for shadowMap
      (glUniform1i (glGetUniformLocation shadowshader "shadowMap") 0)
      (glBindTexture GL_TEXTURE_2D (tref fbo 2))
      ;; setup light
      (shader_update_light shadowshader spotpos spottgt 30.0 30.0 a1 d1 s1)
      ;; setup matrices
      (fill_view_matrix view_matrix eye target up) ;; cameras view matrix
      (fill_view_matrix light_view_matrix spotpos spottgt up) ;; lights view matrix
      (fill_identity_matrix model_matrix) ;; reset model matrix
      (shader_update_camera shadowshader eye target)
      (shader_update_matrices_lv shadowshader model_matrix view_matrix projection_matrix light_view_matrix)
      ;; draw scene
      (glViewport 0 0 (ftoi32 (* 1.0 width)) (ftoi32 (* 1.0 height))) ;; window is small
      (glDisable GL_CULL_FACE) ;; turn face culling off
      (glClearColor 0.0 0.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (fill_identity_matrix model_matrix)
      (translate_matrix model_matrix -3.0 -2.9 -1.0)
      (scale_matrix model_matrix 1.5 1.5 1.5)
      (shader_update_matrices_lv shadowshader model_matrix view_matrix projection_matrix light_view_matrix)
      (assimp_draw_model model3 shadowshader model_matrix view_matrix projection_matrix 1 light_view_matrix)
      (fill_identity_matrix model_matrix) ;; reset model matrix
      (shader_update_matrices_lv shadowshader model_matrix view_matrix projection_matrix light_view_matrix)
      (assimp_draw_model model2 shadowshader model_matrix view_matrix projection_matrix 1 light_view_matrix)
      (assimp_draw_model model1 shadowshader model_matrix view_matrix projection_matrix 1 light_view_matrix)

      ;; turn everything off again.
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D 0) ;; unbind texture unit 0
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (glUseProgram 0)

      ;; turn off texture 2d
      (glDisable GL_TEXTURE_2D)

      ;; print errors?
      (gl_print_error)

      void)))


;; standard impromptu callback
(define opengl-loop
  (lambda (model1 model2 model3 degree)
    (gl_render model1 model2 model3 degree)
    (gl:swap-buffers glctx)
    (callback (+ (now) 1000) 'opengl-loop model1 model2 model3 (+ degree .5))))

(gl_print_error)

(define peppino (assimp_load_model path "peppino.blend"))
(define scene (assimp_load_model path "scene.blend"))
;; flip winding order so inside of dome is the front face
(define dome (assimp_load_model path "dome_cut.blend" (+ aiProcess_Triangulate aiProcess_FlipWindingOrder)))

(gl_print_error)

(opengl-loop dome scene peppino 70.0)
