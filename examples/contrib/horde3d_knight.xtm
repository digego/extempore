;;; horde3d_knight.xtm -- Knight Example for Horde3D

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: horde3Dlib

;;; Commentary:

;; This example is pulled pretty much straight off the
;; Knight example that comes with Horde3D.
;;
;; Also demonstrates running opengl rendering in secondary process
;;
;; NOTE!:
;; a) You will need to load the horde3d.xtm to bind to Horde3D
;; b) You will need to change the resource path to match your system!
;;    (resource path set on line 102)

;;; Code:

;; first load libfile
(sys:load "libs/external/glfw3.xtm")
(sys:load "libs/external/graphics-pipeline.xtm")
(sys:load "libs/external/horde3d.xtm")

;; set path to Horde resources
(bind-val resources_path i8* "/Users/andrew/Documents/code/Horde3D/Content")

(bind-val width i32 1024)
(bind-val height i32 768)

;; (bind-val width i32 1920)
;; (bind-val height i32 1200)

(bind-func set_width_and_height
  (lambda (w:i32 h:i32)
    (set! width w)
    (set! height h)
    void))


(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    ;;(glfw_init_and_create_interaction_compatibility_window width height)))
    (glfw_init_and_create_fullscreen_compatibility_window)))

(bind-func get_window
  (lambda ()
    window))


;; globals
(bind-val Knight i32 0)
(bind-val light i32 0)
(bind-val _particleSys i32 0)
(bind-val _particleSys2 i32 0)
(bind-val _cam i32 0)
(bind-val _hdrPipeRes i32 0)
(bind-val _x float 5.0)
(bind-val _y float 3.0)
(bind-val _z float 19.0)
(bind-val _rx float 7.0)
(bind-val _ry float 15.0)
(bind-val _rz float 1.0)
(bind-val _velocity float 10.0)
(bind-val _curFPS float 30.0)
(bind-val _weight float 1.0)
(bind-val _animTime float 0.0)
(bind-val _forwardPipeRes i32 0)
(bind-val _deferredPipeRes i32 0)
(bind-val _fontMatRes i32 0)
(bind-val _panelMatRes i32 0)
(bind-val _logoMatRes i32 0)
(bind-val env i32 0)


(bind-func resize
  (lambda (width:float height:float)
    ;; resize viewport
    (h3dSetNodeParamI _cam H3DCamera_ViewportXI 0)
    (h3dSetNodeParamI _cam H3DCamera_ViewportYI 0)
    (h3dSetNodeParamI _cam H3DCamera_ViewportWidthI (ftoi32 width))
    (h3dSetNodeParamI _cam H3DCamera_ViewportHeightI (ftoi32 height))
    ;; set virtual cam params
    (h3dSetupCameraView _cam 45.0 (/ width height) 0.1 1000.0)
    (h3dResizePipelineBuffers _hdrPipeRes (ftoi32 width) (ftoi32 height))
    (h3dResizePipelineBuffers _forwardPipeRes (ftoi32 width) (ftoi32 height))
    1))


(bind-func h3d_init
  (let ((hand -1)
  (matRes -1)
  (envRes -1)
  (knightRes -1)
  (knightAnim1Res -1)
  (knightAnim2Res -1)
  (particleSysRes -1)
  )
    (lambda ()
      (if (h3dInit)
    (printf "Successfully Inited Horde3D\n")
    (begin (h3dutDumpMessages)
     (printf "Failed to init Horde3D\n")))

      ;; set options
      (h3dSetOption H3DOptions_LoadTextures 1.0)
      (h3dSetOption H3DOptions_TexCompression 0.0)
      (h3dSetOption H3DOptions_FastAnimation 0.0)
      (h3dSetOption H3DOptions_MaxAnisotropy 4.0)
      (h3dSetOption H3DOptions_ShadowMapSize 2048.0)

      ;; set resources
      (set! _hdrPipeRes (h3dAddResource H3DResTypes_Pipeline "pipelines/hdr.pipeline.xml" 0))
      (set! _forwardPipeRes (h3dAddResource H3DResTypes_Pipeline "pipelines/forward.pipeline.xml" 0))

      (set! envRes (h3dAddResource H3DResTypes_SceneGraph "models/sphere/sphere.scene.xml" 0))
      (set! knightRes (h3dAddResource H3DResTypes_SceneGraph "models/knight/knight.scene.xml" 0))
      (set! knightAnim1Res (h3dAddResource H3DResTypes_Animation "animations/knight_order.anim" 0))
      (set! knightAnim2Res (h3dAddResource H3DResTypes_Animation "animations/knight_attack.anim" 0))
      (set! particleSysRes (h3dAddResource H3DResTypes_SceneGraph "particles/particleSys1/particleSys1.scene.xml" 0))

      ;; load resources: you might need to change this for your system
      (if (h3dutLoadResourcesFromDisk resources_path)
          (printf "succesfully loaded resouces\n")
          (printf "failed to load resources\n"))

      ;; log any errors to Horde3D_Log.html
      (h3dutDumpMessages)

      ;; add camera
      (set! _cam (h3dAddCameraNode H3DRootNode "Camera" _hdrPipeRes))
      ;; add environment
      (set! env (h3dAddNodes H3DRootNode envRes))
      (h3dSetNodeTransform env 0.0 -20.0 0.0
                   0.0  0.0  0.0
                   20.0 20.0 20.0)

      ;; add knight
      (set! Knight (h3dAddNodes H3DRootNode knightRes))
      (h3dSetNodeTransform Knight 0.0 0.0   0.0
                       0.0 180.0 0.0
                 0.1 0.1   0.1)
      (h3dSetupModelAnimStage Knight 0 knightAnim1Res 0 "" #f)
      (h3dSetupModelAnimStage Knight 1 knightAnim2Res 0 "" #f)

      ;; attach particle system to hand joint
      (h3dFindNodes Knight "Bip01_R_Hand" H3DNodeTypes_Joint)
      (set! hand (h3dGetNodeFindResult 0))
      (set! _particleSys (h3dAddNodes hand particleSysRes))
      (h3dSetNodeTransform _particleSys 0.0  40.0 0.0
                            90.0 0.0  0.0
                1.0  1.0  1.0)
      ;; attached 2nd particle system to root node
      ;; (set! _particleSys2 (h3dAddNodes H3DRootNode particleSysRes))

      ;; add light source
      (set! light (h3dAddLightNode H3DRootNode "Light1" 0 "LIGHTING" "SHADOWMAP"))
      (h3dSetNodeTransform light 0.0   15.0 10.0
                     -60.0 0.0  0.0
               1.0   1.0  1.0)
      (h3dSetNodeParamF light H3DLight_RadiusF 0 30.0)
      (h3dSetNodeParamF light H3DLight_FovF 0 90.0)
      (h3dSetNodeParamI light H3DLight_ShadowMapCountI 1)
      (h3dSetNodeParamF light H3DLight_ShadowMapBiasF 0 0.01)
      (h3dSetNodeParamF light H3DLight_ColorF3 0 1.0)
      (h3dSetNodeParamF light H3DLight_ColorF3 1 0.8)
      (h3dSetNodeParamF light H3DLight_ColorF3 2 0.7)
      (h3dSetNodeParamF light H3DLight_ColorMultiplierF 0 1.0)

      (resize (convert width) (convert height))

      1)))

(bind-val Head i8* "Bip01_Head")
(bind-val Neck i8* "Bip01_Neck")
(bind-val Spine i8* "Bip01_Spine2")
(bind-val RHand i8* "Bip01_R_Hand")
(bind-val LHand i8* "Bip01_L_Hand")
(bind-val RArm i8* "Bip01_R_Forearm")
(bind-val LArm i8* "Bip01_L_Forearm")
(bind-val RFoot i8* "Bip01_R_Foot")
(bind-val LFoot i8* "Bip01_L_Foot")


;; (bind-func model_anim
;;   (lambda (_at:double)
;;     (rotate-joint Knight
;;                   "Bip01_Neck"
;;                   0.0
;;                   (+ 10.0 (dtof (* 30.0 (cos (* 2/1 3.141592 _at)))))
;;                   0.0)
;;     (rotate-joint Knight
;;                   "Bip01_Spine2"
;;                   (dtof (* 30.0 (sin (* 1/2 PI _at))))
;;                   0.0
;;                   (dtof (* 50.0 (cos (* 1/2 PI _at)))))
;;     void))

(bind-func model_update
  (lambda (at:float)
    void))

(bind-val LookY float 5.0)
(bind-val PosZ float 10.0)

(bind-func mainLoop
  (let ((fps:float 30.0))
    (lambda (_at:double)
      (set! _curFPS fps)
      (h3dSetOption H3DOptions_DebugViewMode 0.0)
      (h3dSetOption H3DOptions_WireframeMode 0.0)
      (set! _at (+ _at 0.025))

      (let ((cnt (h3dFindNodes _particleSys "" H3DNodeTypes_Emitter))
            (i 0))
        (dotimes (i cnt)
          (h3dUpdateEmitter (h3dGetNodeFindResult i) (/ 1.0 _curFPS))))

      (h3dUpdateModel Knight 1)
      (h3dSetModelAnimParams Knight 0 (* (dtof (* 0.5 _at)) 24.0) 24.0) ;_weight)

      (model_update (dtof _at))

      (h3dSetNodeTransform light
                           4.0 9.0 3.0
                           -60.0 0.0  0.0
                           1.0  1.0  1.0)

      (h3dSetNodeTransform _cam
                           (+ (* PosZ (dtof (cos (* 0.25 _at)))) 0.0)
                           LookY ;;(+ 5.0 (dtof (* 0.1 (sin (* 2/1 3.141592 _at)))))
                           (+ (* PosZ (dtof (sin (* 0.25 _at)))) 0.0)
                           0.0
                           (dtof (* 57.295791 (atan2 (cos (* 0.25 _at))
                                                     (sin (* 0.25 _at)))))
                           0.0
                           1.0 1.0 1.0)
      (h3dRender _cam)
      (h3dFinalizeFrame)
      (h3dClearOverlays)
      (h3dutDumpMessages)
      1)))


;; standard impromptu callback
(define opengl-test
  (lambda (beat dur)
    (set! dur 1/16)
    ;; (if (< (*metro* beat) (now))
    ;;  (println 'opengl-test-behind (- (*metro* beat) (now))))
    (mainLoop beat)
    (glfw_poll_events)
    (glfw_swap_buffers (get_window))
    (callback (*metro* (+ beat (* dur .125))) 'opengl-test (+ beat dur) dur)))


(define start
  (lambda ()
    (h3d_init)
    (resize 1024.0 768.0)
    (opengl-test (*metro* 'get-beat 4) 1/12)))

(start)

;; ($ (resize 1920.0 1200.0))

;; setup new process
;; (let ((proc "opengl"))
;;   (ipc:new proc 7095)
;;   (sys:sleep 11025)
;;   (ipc:bind-func proc 'mainLoop)
;;   (ipc:bind-func proc 'h3d_init)
;;   (ipc:bind-func proc 'resize)
;;   (ipc:define proc 'opengl-test opengl-test)
;;   (ipc:define proc 'start start)
;;   (ipc:call-async proc 'start))
