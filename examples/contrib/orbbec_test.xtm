(sys:load "./orbbec_astra.xtm")
(sys:load "./xtmcv_test.xtm")

(bind-type astra_handpoint_X <i32,i32,<i32,i32>,<float,float,float>,<float,float,float>>)

(bind-type AstraCtx <astra_streamsetconnection_t,astra_reader_t>)
(bind-func astra_reader (lambda (a:AstraCtx*) (tref a 1)))
(bind-func astra_sensor (lambda (a:AstraCtx*) (tref a 0)))

(bind-func astra_start_rgb
  (lambda ()
    (let ((sensor:astra_streamsetconnection_t (alloc))
          (reader:astra_reader_t (alloc))
          (colorAvailable:i1 0)
          (mode:<i32,i32,i32,i32,i8,i32>* (alloc))
          (stream:astra_colorstream_t (alloc)))
      (astra_initialize)
      (println '[open]: (astra_streamset_open "device/default" (ref sensor)))
      (println '[create 'reader]: (astra_reader_create sensor (ref reader)))
      (println '[fetch 'stream]: (astra_reader_get_colorstream reader (ref stream)))
      (println '[check 'color 'available]: (astra_colorstream_is_available stream (ref colorAvailable)))
      (println '[is 'color 'available]: colorAvailable)
      ;(tfill! mode 0 640 480 ASTRA_PIXEL_FORMAT_RGB888 30)
      ;(println '[set 'mode]: (astra_imagestream_set_mode stream (convert mode)))
      (println '[start 'stream]: (astra_stream_start stream))
      (AstraCtx sensor reader))))

(bind-func astra_start_body
  (lambda ()
    (let ((sensor:astra_streamsetconnection_t (alloc))
          (reader:astra_reader_t (alloc))
          (available:i1 0)
          (mode:<i32,i32,i32,i32,i8,i32>* (alloc))
          (depthstream:astra_depthstream_t (alloc))
          (colorstream:astra_colorstream_t (alloc))
          (bodystream:astra_bodystream_t (alloc))
          (handstream:astra_handstream_t (alloc))
          (colorbodystream:astra_colorizedbodystream_t (alloc)))
      (astra_initialize)
      (println '[open]: (astra_streamset_open "device/default" (ref sensor)))
      (println '[create 'reader]: (astra_reader_create sensor (ref reader)))

      ;;; depth stream
      ; (println '[fetch 'depthstream]: (astra_reader_get_depthstream reader (ref depthstream)))
      ; (println '[available]: (astra_depthstream_is_available depthstream (ref available)))
      ; (println "is available" available)
      ; (println '[start 'depth 'stream]: (astra_stream_start depthstream))

      ;;; color stream
      (println '[fetch 'colorstream]: (astra_reader_get_colorstream reader (ref colorstream)))
      (println '[available]: (astra_colorstream_is_available colorstream (ref available)))
      (println "is available" available)
      ;; (println '[start 'color 'stream]: (astra_stream_start colorstream))

      ;;; set color mode example
      ; (tfill! mode 0 640 480 ASTRA_PIXEL_FORMAT_RGB888 30)
      ; (println '[set 'mode]: (astra_imagestream_set_mode colorstream (convert mode)))

      ;;; body stream
      ; (println '[fetch 'bodystream]: (astra_reader_get_bodystream reader (ref bodystream)))
      ; (println '[available]: (astra_bodystream_is_available bodystream (ref available)))
      ; (println "is available" available)
      ; (println '[start 'depth 'stream]: (astra_stream_start depthstream))

      ;;; color body stream
      (println '[fetch 'colorbodystream]: (astra_reader_get_colorizedbodystream reader (ref colorbodystream)))
      (println '[available]: (astra_colorizedbodystream_is_available colorbodystream (ref available)))
      (println "is available" available)
      (println '[start 'color 'body 'stream]: (astra_stream_start colorbodystream))

      ;;; hand stream
      (println '[fetch 'handstream]: (astra_reader_get_handstream reader (ref handstream)))
      (println '[available]: (astra_handstream_is_available handstream (ref available)))
      (println "is available" available)
      (println '[start 'hand 'stream]: (astra_stream_start handstream))

      (AstraCtx sensor reader))))

(bind-func draw_rgb_frame
  (lambda (frame:astra_colorframe_t)
    (let ((bytes:i32 0)
          (dat:i8* (salloc)))
      (astra_colorframe_get_data_ptr frame (ref dat) (ref bytes))
      ;; (println "size:" bytes)
      (if (= bytes (* 640 480 3))
          (ocv_imshow 'RGB' (ocv_cvtColor (ocv_Mat 480 640 (CV_MAKE_TYPE CV_8U 3) dat) ocv_COLOR_RGB2BGR)))
      void)))

(bind-func draw_color_body_frame
  (lambda (frame:astra_colorizedbodyframe_t)
    (let ((bytes:i32 0)
          (dat:i8* (salloc)))
      (astra_colorizedbodyframe_get_data_ptr frame (convert (ref dat)) (ref bytes))
      ;; (println "size:" bytes)
      (if (= bytes (* 640 480 4))
          (ocv_imshow 'Body' (ocv_cvtColor (ocv_Mat 480 640 (CV_MAKE_TYPE CV_8U 4) dat) ocv_COLOR_RGBA2BGRA)))
      void)))

(bind-func draw_color_body_frame_with_hands
  (let ((num:i64 1))
    (lambda (frame:astra_colorizedbodyframe_t hands:astra_handpoint_X* numhands:i32 mlres:i8* vid:ocv_VideoWriter* record:i1)
      (letz ((bytes:i32 0) (i:i32 0) (hand:astra_handpoint_X* null)
             (dat:i8* (salloc))
             (sizesqr:i32 128))
        ;; (astra_colorframe_get_data_ptr frame (ref dat) (ref bytes))
        (astra_colorizedbodyframe_get_data_ptr frame (convert (ref dat)) (ref bytes))
        ;; (println "size:" bytes)
        (if (= bytes (* 640 480 4))
            (let ((img (ocv_cvtColor (ocv_Mat 480 640 (CV_MAKE_TYPE CV_8U 4) dat) ocv_COLOR_RGBA2BGR))
                  (grey (ocv_cvtColor (ocv_Mat 480 640 (CV_MAKE_TYPE CV_8U 4) dat) ocv_COLOR_RGBA2GRAY))
                  (rect (ocv_Rect_val 0 0 0 0))
                  (point (ocv_Point_val 0 0))
                  (foundHand #f)
                  (scalar (ocv_Scalar_val 0.0 255.0 0.0 0.0)))
              (tfill! (ref rect)
                      (clamp (- 320 (/ sizesqr 2)) 0 (- 640 sizesqr))
                      (clamp (- 240 (/ sizesqr 2)) 0 (- 480 sizesqr))
                      sizesqr sizesqr)
              (tfill! (ref point) 20 60)
              (dotimes (i numhands)
                (set! hand (pref-ptr hands i))
                (if (and (> (tref hand 0) 0) (= (tref hand 1) 2))
                    (begin
                      (set! num (+ num 1))
                      (tfill! (ref rect)
                              (clamp (- (tref (tref hand 2) 0) (/ sizesqr 2)) 0 (- 640 sizesqr))
                              (clamp (- (tref (tref hand 2) 1) (- (/ sizesqr 2) 5)) 0 (- 480 sizesqr))
                              sizesqr sizesqr)
                      (set! foundHand #t)
                      (if record
                          (ocv_imwrite (cat 'data/image_' (toString num) '.png') (ocv_region grey (convert (ref rect)))))
                      (ocv_rectangle img (convert (ref rect)) (convert (ref scalar)) 2))))
              ; (set! num (+ num 1))
              ; (tfill! (ref rect) 250 200 sizesqr sizesqr)
              ;; (ocv_imwrite (cat 'data/null/image_' (toString num) '.png') (ocv_region grey (convert (ref rect))))
              ;; (ocv_rectangle img (convert (ref rect)) (convert (ref scalar)) 2)
              ;; (println "write out image")
              (ocv_imwrite 'data/image.png' (ocv_region grey (convert (ref rect))))
              (if foundHand
                  (ocv_puttext img mlres (convert (ref point)) 0 2.0 (convert (ref scalar)) 2)
                  (ocv_puttext img "None" (convert (ref point)) 0 2.0 (convert (ref scalar)) 2))
              ;; (println "draw image to screen")
              (ocv_write vid img)
              (ocv_imshow 'Body' img)))
        void))))

(bind-func get_hand_data
  (lambda (frame:astra_handframe_t data:astra_handpoint_X* print:i1)
    (letz ((hand:astra_handpoint_X* null)
          (coord:<i32,i32>* null)
          (i:i32 0)
          (ptr:i32* null)
          (handCount:i32 0))
      (astra_handframe_get_hand_count frame (ref handCount))
      (astra_handframe_copy_hands frame (convert data))
      (if print
        (dotimes (i handCount)
          (set! hand (pref-ptr data i))
          (set! coord (tref-ptr hand 2))
          (if (and (> (tref hand 0) 0) (= (tref hand 1) 2))
              (println "hand id:" (tref hand 0) "status:" (tref hand 1) "x:" (tref coord 0) "y:" (tref coord 1)))))
      handCount)))

(bind-func astra_readX
  (lambda (astra:AstraCtx* mlres:i8* vid:ocv_VideoWriter* timeout)
    (let ((res:i32 (astra_update))
           (reader (astra_reader astra))
           (frame:astra_reader_frame_t (salloc))
           (colorFrame:astra_colorframe_t (salloc))
           (colorBodyFrame:astra_colorizedbodyframe_t (salloc))
           (handFrame:astra_handframe_t (salloc))
           (hands:astra_handpoint_X* (alloc 20)) ; (alloc (* 1024 768))))
           (hand:astra_handpoint_X* null)
           (numhands:i32 0) (i:i32 0)
           (res2 (astra_reader_open_frame reader timeout (ref frame))))
      ; (printf "reader %p\n" reader)
      ; (println "astra update" res)
      ; (println "open frame " res2)
      (if (= res2 ASTRA_STATUS_SUCCESS)
          (begin
            (set! res (astra_frame_get_handframe frame (ref handFrame)))
            (set! numhands (get_hand_data handFrame hands #f))
            ; (set! res (astra_frame_get_colorframe frame (ref colorFrame)))
            ; (println "color" res)
            (set! res (astra_frame_get_colorizedbodyframe frame (ref colorBodyFrame)))
            ;; (println "colorbody" res)
            (draw_color_body_frame_with_hands colorBodyFrame hands numhands mlres vid #f)
            ;; (println "out of color!")
            (ocv_waitKey 1)
            (set! res (astra_reader_close_frame (ref frame)))
            void)
          (begin
            (ocv_waitKey 1)
            (println "Fail!" res2)))
      void)))

(bind-func astra_stop
  (lambda (astra:AstraCtx*)
    (let ((sensor (astra_sensor astra))
          (reader (astra_reader astra)))
        (println '[close 'reader]: (astra_reader_destroy (ref sensor)))
        (println '[close 'stream]: (astra_streamset_close (ref reader)))

        (astra_terminate)
        (println "DONE!")
        void)))

(define resval "____")

(define test)
  (let ((all (list "None" "None" "None"))
        (handstate "None"))
    (lambda (beat dur)
      (sys:load "data/res.txt")
      ;; (println 'resval resval (now))
      (set! all (append (cdr all) (list resval)))
      (if (and (string=? (car all) (caddr all))
               (string=? (car all) (cadr all)))
          (set! handstate (car all)))
      (astra_readX astra handstate vw 100)
      (callback (*metro* (+ beat (* .5 dur))) 'test (+ beat dur) dur))))

(define astra (astra_start_body))

(test (*metro* 'get-beat 4) 1/12)

(astra_stop astra)

;; (ocv_close 'RGB')

;;;;;;;; video!?

(define vw (ocv_VideoWriter "swiper1.wmv" "WMV2" 24.0 640 480 1))
(println "video writer open?" (ocv_isopen vw))
(ocv_close vw)


(bind-type XX <|4,float|>)

(bind-func f4ToArray
  (lambda (f4:float*)
    (array (pref f4 0) (pref f4 1) (pref f4 2) (pref f4 3))))

(bind-func abc
  (lambda ()
    (let ((y:float* (alloc 4))
          (x (XX (array 1.0 2.0 3.0 4.0))))
     (println x)
     (pfill! y 4.0 3.0 2.0 1.0)
     (tset! x 0 (f4ToArray y))
     (println x)
     void)))

(abc)
