;;
;; some ADT examples
;;

(sys:load "libs/base/adt.xtm")

;; underscore in 'type' breaks shit :(
;; looks like _ in constructors is OK!

(bind-data Point{!a}
           (K_Point2D !a !a)
           (K_Point3D !a !a !a))

(bind-data Shape{!a}
           (K_Circle Point{!a}* !a)
           (K_Rect Point{!a}* !a !a))

(bind-func test
  (lambda ()
    (let ((p1 (K_Point2D 11 12))
          (circle (K_Circle p1 5:i64))
          (rect (K_Rect (K_Point2D 0 0) 5 5)))
      (K_Point2D$ p1 (x y)
                  (begin (printout 'x: x " " 'y: y "\n")
                         x)
                  0)
      (println (K_Circle$ circle (p r)
                          (K_Point2D$ p (x y)
                                      (tuple x y)
                                      (tuple 0 0))
                          (tuple 0 0)))
      void)))

($ (test))
(quit 1)

;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Either Monad
;;
;;;;;;;;;;;;;;;;;;;;;;;

(bind-data Either{!a,!b}
           (Left !a)
           (Right !b))

(bind-func testeither:[Either{i64,String*}*,i1]*
  (lambda (choice)
    (if choice
        (Left 100)
        (Right (Str "100")))))

(bind-func tteither
  (lambda ()
    (let ((res (testeither #f)))
      (Right$ res (x) (println x) (println "wrong"))
      void)))

($ (tteither))

;;;;;;;;;;;;;;;;;;;;;;
;;
;; list monad
;;
;;;;;;;;;;;;;;;;;;;;;;;

(bind-data List{!a}
           (Nil)
           (Cons !a List{!a}*))

(bind-func append:[List{!a}*,List{!a}*,List{!a}*]*
  (lambda (as bs)
    (Cons$ as (x xs) (Cons x (append xs bs)) bs)))

;; also sometimes called flatten
(bind-func join:[List{!a}*,List{List{!a}*}*]*
  (lambda (M)
    (Cons$ M (xs xss) (append xs (join xss)) (Nil))))

(bind-func fmap:[List{!b}*,[!b,!a]*,List{!a}*]*
  (lambda (f F)
    (Cons$ F (x xs) (Cons (f x) (fmap f xs)) (Nil))))

;; also known as bind in haskell
(bind-func flatmap:[List{!b}*,List{!a}*,[List{!b}*,!a]*]*
  (lambda (M f)
    ;; alternative 'direct' implementation
    ;; (Cons$ M (x xs) (append (f x) (flatmap xs f)) (Nil))))
    (join (fmap f M))))

;; also known as pure or return
(bind-func unit:[List{!a}*,!a]*
  (lambda (x)
    (Cons x (Nil))))

;; also known as <*> or ap
(bind-func apply:[List{!b}*,List{[!b,!a]*}*,List{!a}*]*
  (lambda (F1 F2)
    (Cons$ F1 (f fs)
           (Cons$ F2 (x xs)
                  (Cons (f x) (apply fs xs))
                  (Nil))
           (Nil))))


(bind-func foldl:[!b,[!b,!b,!a]*,!b,List{!a}*]*
  (lambda (fn start lst)
    (Cons$ lst (x xs)
           (foldl fn (fn start x) xs)
           start)))

(bind-func foldr:[!b,[!b,!b,!a]*,!b,List{!a}*]*
  (lambda (fn start lst)
    (Cons$ lst (x xs)
           (fn x (foldr fn start xs))
           start)))

;; list range function (inclusive min & max)
;; (bind-func range:[List{!a}*,!a,!a]*
;;   (lambda (mn mx)
;;     (if (> mn mx)
;;         (Nil)
;;         (Cons mn (range (+ mn (convert 1)) mx)))))

;; tail recursive version of range
(bind-func range:[List{!a}*,!a,!a,!a]*
  (lambda (mn mx i)
    (let ((rng (lambda (m x lst)
                 (if (< x m)
                     lst
                     (rng m (- x i) (Cons x lst))))))
      (rng mn mx (Nil)))))

(bind-func range:[List{!a}*,!a,!a]*
  (lambda (mn mx)
    (range mn mx (convert 1))))

(bind-func range:[List{!a}*,!a]*
  (lambda (mx)
    (range (convert 0) mx (convert 1))))


;; (bind-func reverse:[List{!a}*,List{!a}*]*
;;   (lambda (lst)
;;     (Cons$ lst (x xs)
;;            (append (reverse xs) (unit x))
;;            (Nil))))

(bind-func reverse:[List{!a}*,List{!a}*]*
  (lambda (lst)
    (let ((rev (lambda (old new)
                 (if (Nil$ lst () #t #f)
                     rlst
                     (rev (Cons$ old (x xs) xs (Nil))
                          (Cons$ old (x xs)
                                 (Cons x new)
                                 (Nil)))))))
      (rev lst (Nil)))))

;; print & toString for lists

(bind-func toString_help:[String*,List{!a}*,String*]*
  (lambda (lst s)
    (Cons$ lst (x xs)
           (Nil$ xs ()
                 (toString_help xs (cat s (toString x)))
                 (toString_help xs (cat s (toString x) (Str ","))))
           (cat s (Str "]")))))

(bind-func print:[void,List{!a}*]*
  (lambda (lst)
    (printout (toString_help lst (Str "[")))
    void))

(bind-func toString:[String*,List{!a}*]*
  (lambda (lst)
    (toString_help lst (Str "["))))

;; list test 1
(bind-func lt1
  (lambda ()
    (let ((l1 (Cons 1 (Cons 2 (Nil)))))
      (println 'l1 '= l1))))

($ (lt1))

;; list test 2
(bind-func lt2
  (lambda ()
    (let ((l1 (Cons 1 (Cons 2 (Nil))))
          (l2 (fmap (lambda (x) (* x x)) l1)))
      (println 'l2 '= l2))))

($ (lt2))

;; list test 3
(bind-func lt3
  (lambda ()
    (let ((l1 (Cons 1 (Cons 2 (Nil))))
          (l3 (fmap (lambda (x) (Cons x (Cons x (Nil)))) l1)))
      (println 'l3 '= l3))))

($ (lt3))

(bind-func lt4
  (lambda ()
    (let ((l1:List{i64}* (Cons 20 (Nil)))
          (l2:List{i64}* (Cons 4 (Nil)))
          (l3 (fmap (lambda (x:i64) (lambda (y:i64) (* x y))) l2)))
      (t: (apply l3 l1) List{i64}*))))

($ (lt4))

;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Pairs
;;
;;;;;;;;;;;;;;;;;;;;;;;

(bind-data Pair{!a} (Pair !a !a))

;; tostring for pair
(bind-func toString:[String*,Pair{!a}*]*
  (lambda (p)
    (Pair$ p (a b)
           (cat (Str "(") (toString a) (Str ",") (toString b) (Str ")"))
           (Str "()"))))

(bind-func pairs_test
  (lambda ()
    (dolet ((x (range 1 2))
            (y (range 1 4)))
           (unit (Pair x y)))))

($ (println (pairs_test)))

;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Maybe monad
;;
;;;;;;;;;;;;;;;;;;;;;;;

(bind-data Option{!a}
           (Some !a)
           (None))

(bind-func toString:[String*,Option{!a}*]*
  (lambda (F)
    (Some$ F (x)
           (toString x)
           (Str "_"))))

(bind-func print:[void,Option*]*
  (lambda (F)
    (printout (toString F))))

;; also known as map, lift
(bind-func fmap:[Option{!b}*,[!b,!a]*,Option{!a}*]*
  (lambda (f F)
    (Some$ F (x) (Some (f x)) (None))))

(bind-func join:[Option{!a}*,Option{Option{!a}*}*]*
  (lambda (M)
    (Some$ M (x) x (None))))

;; also known as bind
;; it's more convenient to have the function in last arg position
(bind-func flatmap:[Option{!b}*,Option{!a}*,[Option{!b}*,!a]*]*
  (lambda (M f)
    ;; (join (fmap f M)))) ;; alternate using join & fmap
    (Some$ M (x) (f x) (None))))


;; also known as return or pure
(bind-func unit:[Option{!a}*,!a]*
  (lambda (x)
    (Some x)))

;; also known as <*> or ap
(bind-func apply:[Option{!b}*,Option{[!b,!a]*}*,Option{!a}*]*
  (lambda (F1 F2)
    (Some$ F1 (f)
           (Some$ F2 (x)
                  (Some (f x))
                  (None))
           (None))))

;; using flatmap explicity
(bind-func div_test:[Option*,Option*,Option*]*
  (lambda (a b)
    (flatmap
     a (lambda (n) ;; numerator
         (flatmap
          b (lambda (d) ;; denominator
              (if (= d 0)
                  (None)
                  (Some (/ n d)))))))))


;; do style version
(bind-func div_test:[Option*,Option*,Option*]*
  (lambda (a b)
    (dolet ((n a)  ;; numerator
            (d b)) ;; denominator
      (if (= d 0)
          (None)
          (Some (/ n d))))))

(bind-func div_test:[Option{!a}*,!a,!a]*
  (lambda (x y)
    (div_test (Some x) (Some y))))


(bind-func test_div
  (lambda ()
    (println (div_test (Some 125) (Some 25))
             (div_test 50 10)
             (div_test 10 0)
             (div_test 15 3))))

($ (test_div))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; pattern matching
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func equ:[bool,!a,!a]* -> (lambda (r a b)
                                     (and (equal? a b)
                                          (t:number? a)))
  "numeric equality check"
  (lambda (a b)
    (= a b)))

;; (bind-func equ:[bool,!a,i64]* -> (lambda (r a b) (t:integer? a))
;;   "numeric equality check"
;;   (lambda (a b)
;;     (= a (convert b))))

;; (bind-func equ:[bool,!a,double]* -> (lambda (r a b) (t:float? a))
;;   "numeric equality check"
;;   (lambda (a b)
;;     (= a (convert b))))

;; if we fall through to this then we don't have any
;; valid tests for !a and should fail
(bind-func equ:[bool,!a,!a]* -> (lambda (r a b) (equal? a b))
  (lambda (a b)
    #f))

;; two different types cannot be equal!
(bind-func equ:[bool,!a,!b]* -> (lambda (r a b) (not (equal? a b)))
  (lambda (a b)
    #f))

(bind-func equ
  (lambda (s1:Symbol* s2:Symbol*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        1:i1 0:i1)))

(bind-func equ
  (lambda (s1:String* s2:String*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        1:i1 0:i1)))

(bind-func equ
  (lambda (s1:String* s2:i8*)
    (if (= (strcmp (tref s1 1) s2) 0)
        1:i1 0:i1)))

($ (println (let ((x 'boy'))
              (cond ((equ x 5.0) 'float)
                    ((equ x 55) 'int_a)
                    ((equ x 5) 'int_b)
                    ((equ x 'boy') 'string_a)
                    ((equ x 'fred) 'symbol_a)
                    ((equ x 'john) 'symbol_b)
                    (else 'bad)))))


(define a
  (lambda ()
    (dotimes (i 5)
      (println "I am running a" i)
      (sys:sleep 40000))))

(define b
  (lambda ()
    (dotimes (i 5)
      (println "I am running b" i)
      (sys:sleep 40000))))

(let ((t (now)))
  (callback t a)
  (callback (+ t 20000) b))
