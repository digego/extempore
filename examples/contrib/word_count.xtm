;;; word_count.xtm -- String example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; Doesn't work properly yet - beware.

;;; Code:


(sys:load "libs/core/adt.xtm")

(bind-val	SEEK_SET i32	0) ;;	/* set file offset to offset */
(bind-val	SEEK_CUR i32	1) ;;	/* set file offset to current plus offset */
(bind-val	SEEK_END i32	2) ;;	/* set file offset to EOF plus offset */

(bind-func file_size
  (lambda (fp)
    (fseek fp 0 SEEK_END)
    (let ((size (ftell fp)))
      (fseek fp 0 SEEK_SET) ;; set fp back to beginning
      size)))

(bind-func fill_buffer_with_file
  "fill buffer with up to maxlen bytes from filename"
  (lambda (buf filename maxlen)
    (let ((fp (fopen filename "rb")))
      (if (null? fp)
          (begin (println "Error reading file.")
                 -1)
          (let ((filesize (file_size fp))
                (bytes_read (fread buf 1 (if (> filesize maxlen) maxlen filesize) fp)))
            (if (<> bytes_read filesize)
                (println "Warning: filesize is" filesize "but only read" bytes_read "bytes.\nPerhaps you need a bigger buffer?")
                (begin (printf "Read %lld bytes from %s\n" bytes_read filename)
                       void))
            (fclose fp)
            bytes_read)))))

(bind-func string_list_from_string
  "turn a c string into a list of String*, splitting on split_on"
  (lambda (str split_on)
    (let ((split_on_cstr (cstring split_on))
          (tokenptr (strtok (cstring str) split_on_cstr))
          (strlist (list))
          (cnt 0))
      (while (not (null? tokenptr))
        ;; (if (= (% cnt 10000) 0)
        ;;     (printf "cnt: %lld tokenptr: %p\n" cnt tokenptr))
        (set! cnt (+ cnt 1))
        (set! strlist (cons (String tokenptr) strlist))
        (set! tokenptr (strtok null split_on_cstr)))
      (println "processed" cnt "tokens")
      (reverse strlist))))

(bind-func string_list_from_file
  (lambda (filename)
    (letz
        ((buflen 10000000)
         (buf:i8* (halloc buflen))
         (strlist null))
      (if (> (fill_buffer_with_file buf filename buflen) 0)
          (begin (set! strlist (string_list_from_string (String buf) (String " ,.\t\n")))
                 void)
          (println "Problem."))
      (free buf)
      strlist)))

(bind-func word_count
  "turn a c string into a word count dict of <String*,i64>, splitting on split_on"
  (lambda (str split_on)
    (let ((split_on_cstr (cstring split_on))
          (tokenptr (strtok (cstring str) split_on_cstr))
          (dict (list (Pair (String "first_key") 0)))
          (cnt 0))
      (while (not (null? tokenptr))
        (if (= (% cnt 10000) 0)
            (printf "cnt: %lld tokenptr: %p\n" cnt tokenptr))
        (set! cnt (+ cnt 1))
        (dict_update dict (String tokenptr) (lambda (x) (+ x 1)))
        (set! tokenptr (strtok null split_on_cstr)))
      (println "processed" cnt "tokens")
      dict)))

(bind-func file_word_count
  (lambda (filename)
    (letz
        ((buflen 1000000000)
         (buf:i8* (halloc buflen))
         (wc_dict null))
      (if (> (fill_buffer_with_file buf filename buflen) 0)
          (begin (set! wc_dict (word_count (String buf) (String " ,.\t\n")))
                 void))
      (free buf)
      (println "length:" (length wc_dict))
      (println (take wc_dict 100))
      (if (null? wc_dict) wc_dict (cdr wc_dict)))))

(bind-func testitall
  (lambda ()
    (letz ((wc_dict (file_word_count "/Users/ben/Desktop/books/kjv.txt")))
      1)))

(testitall)

;; prime factorisation

(sys:load "libs/core/adt.xtm")

(bind-func divisors
  "find the prime factors of n"
  (lambda (n)
    (letz ((factors (list))
           (d 2))
      (if (< n 2)
          (begin (set! factors (cons n factors))
                 void)
          (while (< d n)
            (if (= (% n d) 0)
                (begin (set! factors (cons d factors))
                       (set! n (/ n d)))
                (if (= d 2)
                    (set! d 3)
                    (set! d (+ d 2))))))
      factors)))

(call-as-xtlang (println "xtlang:" (divisors (- (<< 1 50) 1))))

(define factorize-scheme
  (lambda (n)
    (let loop ((n n)
               (d 2)
               (factors '()))
      (if (< n 2)
          (cons n factors)
          (if (< d n)
              (if (= (modulo n d) 0)
                  (loop (real->integer (/ n d))
                        d
                        (cons d factors))
                  (loop n
                        (if (= d 2)
                            (set! d 3)
                            (set! d (+ d 2)))
                        factors))
              factors)))))

(println 'scheme: (factorize-scheme (real->integer (- (expt 2 50) 1))))

(bind-func divisors
  "find the proper divisors of n"
  (lambda (n)
    (letz ((candidates (range 1 (- n 1))))
      (filter (lambda (d) (= (% n d) 0)) candidates))))

;; (sys:load "libs/core/math.xtm")
(sys:load "libs/core/adt.xtm")

(call-as-xtlang (println (dr (list 1 2 3 96) 5)))

;; (bind-func drop:[List:<!a,List*>*,List:<!a,List*>*,i64]*
;;   (lambda (lst n)
;;     ))

(bind-func sum_list
  (lambda (lst)
    (foldl (lambda (a b) (+ a b)) 0 lst)))

                                        ; "Public: split-by
                                        ; splits an list into multiple lists of n length.
                                        ;
                                        ; Parameters:
                                        ;  * n - the size of the lists it should be broken into.
                                        ;  * lst - the list to be split
                                        ;
                                        ; Returns:
                                        ; A list of smaller list of the specified length (or raises an exception).
                                        ;
                                        ; Examples:
                                        ;    (split-by 2 '(1 2 3 4)) ; => ((1 2) (3 4))
                                        ;    (split-by 2 '(1 2 3)) ; => not evenly divisible error"

(define split-by
  (lambda (n lst)
    (let ((list-size (length lst)))
      (if (not (= 0 (modulo list-size n)))
          (println "list length must be divisible by n"))
      (if (null? lst)
          '()
          (cons (take lst n) (split-by n (drop lst n)))))))

(split-by 2 '(1 2 3 4)) ; => ((1 2) (3 4))

;; (bind-func weird_p
;;   (lambda (n)
;;     (and (> (sum_list (divisors n)) n)
;;          (not))))

(define combn
  (lambda (lst n)
    (println 'lst: lst 'n: n)
    (cond ((< n 1) '())
          ((= n 1) (map list lst))
          ((null? lst) '())
          (else (append (map (lambda (subset) (cons (car lst) subset))
                             (combn (cdr lst) (- 1 n)))
                        (combn (cdr lst) n))))))


(bind-func first_n_weird_numbers
  (lambda (n)
    (letz ((weird (list))
           (i 1))
      (while (< (length weird) n)
        (if (= (% n d) 0)
            (begin (set! weird (cons d weird))
                   (set! n (/ n d)))
            (if (= d 2)
                (set! d 3)
                (set! d (+ d 2)))))
      weird)))

;; lucas-lehmer

(bind-func prime_p
  (lambda (p)
    (if (= p 2)
        #t
        (if (or (<= p 1) (= (% p 2) 0))
            #f
            (let ((prime #t)
                  (to (convert (sqrt (convert p double)) i64))
                  (i 3))
              (while (and (< i to) (not prime))
                (set! i (+ i 2))
                (set! prime (= (% p i) 0)))
              prime)))))

(bind-func mersenne_prime_p
  (lambda (p)
    (if (= p 2)
        #t
        (let ((m_p (- (<< 1 p) 1))
              (s 4)
              (i 3))
          (while (< i p)
            (set! s (% (- (* s s) 2) m_p))
            (set! i (+ i 1)))
          (= s 0)))))

(bind-func print_mersenne_primes
  (lambda (upper_bound)
    (println "Mersenne primes:")
    (let ((p 2))
      (while (< p upper_bound)
        (if (and (prime_p p)
                 (mersenne_prime_p p))
            (printf " M%lld" p))
        (set! p (+ p 1)))
      (println))))

;; something funny going on with overflows here - it doesn't work
(print_mersenne_primes 32)
