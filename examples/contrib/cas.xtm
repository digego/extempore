;;; cas -- Computer Algebra System

;; Author: Sorensen
;; Keywords: extempore giac
;; Required dylibs: libgiac

;;; Commentary:

;; Examples for extempore wrapper for giac (xcas)
;; https://www-fourier.ujf-grenoble.fr/~parisse/giac.html

;;; Code:

(sys:load "libs/contrib/cas.xtm")

(cas coeff{3*x^2+2*x+7})
(cas degree{3*y^2+2*y+7,y})
(cas degree{3*x^2+2*x})

;; factor
(println (factor (- (pow x 4) 1)))

;; solve
(println (solve (= (- (pow x 2) 3) 0) x))

;; simplify
(println (simplify (* (+ x 5) (+ 7 8))))

;; dy/dx sin(x)
(println (diff (sin x)))
;; dy/dx sin(x) with respect to x
(println (diff (sin x) x))
;; dy/dm sin(m) with respect to m
(println (diff (sin m) m))
;; d2y/dx2 sin(x) (multiple x for diff order)
(println (diff (sin x) x x))
;; diff with respect to x
(println (diff (+ (pow y 2) (* x y) (pow x 2)) x))
;; diff with respect to y
(println (diff (+ (pow y 2) (* x y) (pow x 2)) y))
;; diff with respect to x and y
(println (diff (+ (pow y 2) (* x y) (pow x 2)) (vector x y)))

;; integrate x (with respect to x by default)
(println (integrate x))
;; integrate cos(y) with respect to y
(println (integrate (cos y) y))
;; integrate cos(y) with respect to y
(println (integrate (cos y) y))
;; definite integral cos(y) between 1/2 and 2/3
(println (integrate (cos y) y 1/2 2/3))

;; limit of e^1/2 as x approaches 1 (2 sided 0)
(println (limit (exp (/ 1 x)) x 1 0))
;; limit of e^1/2 as x approaches 0 (from above 1)
(println (limit (exp (/ 1 x)) x 0 1))
;; limit of e^1/2 as x approaches 0 (from below -1)
(println (limit (exp (/ 1 x)) x 0 -1))
;; limit from above and below (i.e. no 4th arg)
(println (limit (/ (sin x) (+ (pow x 2.0) (* -3 x))) x 0))

;; grad, curl, div
(println (grad (+ (pow x 2) (pow y 2) (pow z 2)) (vector x y z)))
(println (curl (vector (pow x 3) (pow y 3) (pow z 5)) (vector x y z)))
(println (divergence (vector (pow x 3) (pow y 3) (pow z 5)) (vector x y z)))

;; taylor series expansion
(println (taylor (/ (sin x) x) (= x 0)))

;; diff equation solver (y respect x)
(println (desolve (= (+ (diff y x x) y) 0) x y))
;; diff equation solver (y respect t)
(println (desolve (= (+ (diff y t t) y) 0) t y))
;; diff eq
(println (desolve (= (+ (diff y x x) y) (sin x)) x y))

;; solve linear system
(println (linsolve (vector (= (+ x y z) 1)
                           (= (- x y) 2)
                           (= (- (* 2 x) z) 3))
                   (vector x y z)))

;; you can of course combine these
(println (simplify (integrate (diff (pow x 2)))))

;; you can also apply any of the above
;; in a macro form inside any xtlang function
;;
;; the *resulting* expression of the CAS command
;; is directly inlined into the code before compilation


;; for example f1 and f2 are identical
(bind-func f1
  (lambda (x)
    (* 2.0 x)))

(bind-func f2
  (lambda (x)
    (diff (pow x 2))))

($ (println (f1 5.0) '= (f2 5.0)))

;; watch for CAS calls that take and return vectors
(bind-func f3
  (lambda (x y z)
    (grad (+ (pow x 2)
             (pow y 3)
             (pow z 4))
          (vector x y z))))

(bind-func print:[void,/3,double/]*
  (lambda (v)
    (printout "<" (vref v 0) "," (vref v 1) "," (vref v 2) ">")))

($ (println (f3 5.0 5.0 5.0)))

;; you may combine the macros in any valid way
;; remembering some expressions take/return vectors!
(bind-func f4
  (lambda (x y)
    (+ (simplify (* (+ x 5) (- 6 y)))
       (diff (pow x 2)))))

($ (println (f4 2.0 3.0)))

;; as above CAS calls maybe safely nested
(bind-func f5
  (lambda (x)
    (integrate (diff (pow x 2)))))

($ (println (f5 5.0)))

;; your CAS expression may return variables!
;; this example FAILS
;; (bind-func f6
;;   (lambda (x)
;;     (desolve (= (+ (diff y x x) y) 0) x y)))

;; remembering expression result includes constants
;; c_0 and c_1
(println (desolve (= (+ (diff y x x) y) 0) x y))

;; which must be passed to f6
(bind-func f6
  (lambda (x c_0 c_1)
    (desolve (= (+ (diff y x x) y) 0) x y)))


;; watch out for vectors!
(bind-func f7
  (lambda ()
    (let ((res (linsolve (vector (= (+ x y z) 1)
                                 (= (- x y) 19)
                                 (= (- (* 2 x) z) 3))
                         (vector x y z))))
      (println "x:" (vref res 0)
               "y:" (vref res 1)
               "z:" (vref res 2))
      void)))

($ (f7))
