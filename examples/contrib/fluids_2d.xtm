;;; fluids_2d.xtm -- a simple fluid dynamics example

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; A nice and simple 3d fluid simulation
;; based on code from Jos Stam and Mike Ash.

;; This little example is nice and simple
;; The computation is all on the CPU and
;; the density of each cell is drawn using
;; very simple immediate OpenGL calls.
;;
;; The simulation is a little smoke sim
;; with constant air streams from bottom->top
;; and from left->right.  Smoke is injected
;; into the system semi-regularly.

;;; Code:

;; start new procs
;; (ipc:new "fluid" 7094)

(sys:load "libs/core/xthread.xtm")

;; optimize compiles
;; (llvm:optimize #t)

(sys:load "libs/external/glfw3.xtm")

(bind-val FULLSCREEN i1 #t)

;; if fullscreen is #t width and height will
;; match fullscreen
(bind-val WIDTH i32 1024)
(bind-val HEIGHT i32 768)

(bind-val CUBE_W i64 400)
(bind-val CUBE_H i64 200)

(bind-val window GLFWwindow*
  ;; some of the shaders in the graphics pipeline use older glsl
  ;; versions, so we need a "compatibility" graphics context
  (begin
    (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
    (if FULLSCREEN
        (let ((w:i32* (salloc))
              (h:i32* (salloc))
              (win (glfw_init_and_create_fullscreen_window 1)))
          (glfwGetWindowSize win w h)
          (set! WIDTH (pref w 0))
          (set! HEIGHT (pref h 0))
          win)
        (glfw_init_and_create_interaction_window WIDTH HEIGHT))))

(sys:load "libs/external/graphics-pipeline.xtm")


(bind-func range_limit
  (lambda (h:double l:double v:double)
    (if (< v l) l
        (if (> v h) h
            v))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; First the fluid dynamics code
;;
;; code here largely pilfered from from
;; Jos Stam and Mike Ash
;;

(bind-type fluidcube <i64,double,double,double,double*,double*,double*,double*,double*,double*,i64>)

(bind-func fluid_ix
  (lambda (x:i64 y:i64 N:i64)
    (+ x (* y N))))

(bind-func fluid_cube_create
  (lambda (size_x size_y diffusion viscosity dt:double)
    (let ((cube:fluidcube* (halloc))
          (size2:i64 (* size_x size_y 10))
          (s:double* (halloc size2))
          (density:double* (heap-alloc size2))
          (Vx:double* (heap-alloc size2))
          (Vy:double* (heap-alloc size2))
          (Vx0:double* (heap-alloc size2))
          (Vy0:double* (heap-alloc size2)))
      (tfill! cube size_x dt diffusion viscosity s density Vx Vy Vx0 Vy0 size_y)
      cube)))

(bind-func fluid_cube_add_density
  (lambda (cube:fluidcube* x y amount:double)
    (let ((N (tref cube 0))
          (idx (+ x (* y N)))
          (density_ptr:double* (tref cube 5))
          (density (pref density_ptr idx)))
                                        ;(printf "idx: %d:%d:%d:%d\n" idx N x y)
      (pset! density_ptr idx (+ density amount))
      (+ density amount))))

(bind-func fluid_cube_add_velocity
  (lambda (cube:fluidcube* x y amount_x:double amount_y:double)
    (let ((N (tref cube 0))
          (idx (+ x (* y N)))
          (_Vx (tref cube 6))
          (_Vy (tref cube 7)))
      (pset! _Vx idx (+ amount_x (pref _Vx idx)))
      (pset! _Vy idx (+ amount_y (pref _Vy idx)))
      cube)))

;; I don't want boundary conditions for this one
(bind-func fluid_set_boundary
  (lambda (b:i64 x:double* Ny:i64 N:i64)
      1))

(bind-func fluid_lin_solve
  (lambda (b:i64 x:double* x0:double* a c iter:i64 Ny:i64 N:i64)
    (let ((cRecip (/ 1.0 c))
          (k 0)
          (m 0)
          (j 0)
          (i 0))
      (dotimes (k iter)
        (dotimes (j (- Ny 1))
          (dotimes (i (- N 1))
            (pset! x (+ (+ i 1) (* (+ j 1) N))
                   (* cRecip
                      (+ (pref x0 (+ (+ i 1) (* (+ j 1) N)))
                         (* a (+ (pref x (+ (+ i 2) (* (+ j 1) N)))
                                 (pref x (+ i (* (+ j 1) N)))
                                 (pref x (+ (+ i 1) (* (+ j 2) N)))
                                 (pref x (+ (+ i 1) (* j N)))))))))))
      (fluid_set_boundary b x Ny N))
    1))

(bind-func fluid_diffuse
  (lambda (b:i64 x:double* x0:double* diff:double dt:double iter Ny N)
    (let ((a:double (* dt diff (i64tod (- N 2)))))
      (fluid_lin_solve b x x0 a (+ 1.0 (* 6.0 a)) iter Ny N))))

(bind-func fluid_project
  (lambda (velocx:double* velocy:double* p:double* div:double* iter Ny N)
    (let ((j 0)
          (i 0)
          (jj 0)
          (ii 0))
      (dotimes (j (- Ny 1))
        (dotimes (i (- N 1))
          (pset! div (+ (+ i 1) (* (+ j 1) N))
                 (* -0.5 (/ (+ (- (pref velocx (+ (+ i 2) (* (+ j 1) N)))
                                  (pref velocx (+ i (* (+ j 1) N))))
                               (- (pref velocy (+ (+ i 1) (* (+ j 2) N)))
                                  (pref velocy (+ (+ i 1) (* j N)))))
                            (i64tod N))))
          (pset! p (+ (+ i 1) (* (+ j 1) N)) 0.0)
          1))

      (fluid_set_boundary 0 div Ny N)
      (fluid_set_boundary 0 p Ny N)
      (fluid_lin_solve 0 p div 1.0 6.0 iter Ny N)

      (dotimes (jj (- Ny 1))
        (dotimes (ii (- N 1))
          (pset! velocx (+ (+ ii 1) (* (+ jj 1) N))
                 (- (pref velocx (+ (+ ii 1) (* (+ jj 1) N)))
                    (* 0.5
                       (- (pref p (+ (+ ii 2) (* (+ jj 1) N)))
                          (pref p (+ (+ ii 0) (* (+ jj 1) N))))
                       (i64tod N))))
          (pset! velocy (+ (+ ii 1) (* (+ jj 1) N))
                 (- (pref velocy (+ (+ ii 1) (* (+ jj 1) N)))
                    (* 0.5
                       (- (pref p (+ (+ ii 1) (* (+ jj 2) N)))
                          (pref p (+ (+ ii 1) (* (+ jj 0) N))))
                       (i64tod N))))
          1))

      (fluid_set_boundary 1 velocx Ny N)
      (fluid_set_boundary 2 velocy Ny N)

      1)))

(bind-func fluid_advect
  (lambda (b:i64 d:double* d0:double* velocx:double* velocy:double* dt:double Ny:i64 N:i64)
    (let ((n_1 (i64tod (- N 1)))
          (dtx (* dt n_1))
          (dty (* dt n_1))
          (jfloat 0.0) (ifloat 0.0)
          (s0 0.0) (s1 0.0) (t0 0.0) (t1 0.0)
          (i0 0.0) (i0i 0) (i1 0.0) (i1i 0)
          (j0 0.0) (j0i 0) (j1 0.0) (j1i 0)
          (j:i64 0) (i:i64 0)
          (tmp1 0.0) (tmp2 0.0) (tmp3 0.0)
          (x 0.0) (y 0.0) (z 0.0)
          (Nfloat (i64tod N)))
      (dotimes (j (- Ny 1))
        (set! jfloat (+ jfloat 1.0))
        (set! ifloat 0.0)
        (dotimes (i (- N 1))
          (set! ifloat (+ ifloat 1.0))
          (set! tmp1 (* dtx (pref velocx (+ (+ i 1) (* (+ j 1) N)))))
          (set! tmp2 (* dty (pref velocy (+ (+ i 1) (* (+ j 1) N)))))
          (set! x (- ifloat tmp1))
          (set! y (- jfloat tmp2))

          (if (< x 0.5) (set! x 0.5))
          (if (> x (+ Nfloat 0.5)) (set! x (+ Nfloat 0.5)))
          (set! i0 (floor x))
          (set! i1 (+ i0 1.0))
          (if (< y 0.5) (set! y 0.5))
          (if (> y (+ Nfloat 0.5)) (set! y (+ Nfloat 0.5)))
          (set! j0 (floor y))
          (set! j1 (+ j0 1.0))

          (set! s1 (- x i0))
          (set! s0 (- 1.0 s1))
          (set! t1 (- y j0))
          (set! t0 (- 1.0 t1))

          (set! i0i (dtoi64 i0))
          (set! i1i (dtoi64 i1))
          (set! j0i (dtoi64 j0))
          (set! j1i (dtoi64 j1))

          (pset! d (+ (+ i 1) (* (+ j 1) N))
                 (+ (* s0 (+ (* t0 (pref d0 (+ i0i (* j0i N))))
                             (* t1 (pref d0 (+ i0i (* j1i N))))))
                    (* s1 (+ (* t0 (pref d0 (+ i1i (* j0i N))))
                             (* t1 (pref d0 (+ i1i (* j1i N))))))))))

      (fluid_set_boundary b d Ny N))))

(bind-func fluid_step_cube
  (lambda (cube:fluidcube*)
    (let ((N (tref cube 0))
          (Ny (tref cube 10))
          (dt (tref cube 1))
          (diff (tref cube 2))
          (visc (tref cube 3))
          (s (tref cube 4))
          (k 0)
          (iter 7)
          (kk 0)
          (density (tref cube 5))
          (Vx (tref cube 6))
          (Vy (tref cube 7))
          (Vx0 (tref cube 8))
          (Vy0 (tref cube 9))
          (time (now)))
      (fluid_diffuse 1 Vx0 Vx visc dt iter Ny N)
      (fluid_diffuse 2 Vy0 Vy visc dt iter Ny N)

      (dotimes (k (* Ny N))
        (pset! Vx k 0.0)
        (pset! Vy k 0.0))

      (fluid_project Vx0 Vy0 Vx Vy iter Ny N)

      (fluid_advect 1 Vx Vx0 Vx0 Vy0 dt Ny N)
      (fluid_advect 2 Vy Vy0 Vx0 Vy0 dt Ny N)

      (dotimes (kk (* Ny N))
        (pset! Vx0 kk 0.0)
        (pset! Vy0 kk 0.0))

      (fluid_project Vx Vy Vx0 Vy0 iter Ny N)

      (fluid_diffuse 0 s density diff dt iter Ny N)
      (fluid_advect 0 density s Vx Vy dt Ny N)

      ;; (printf "time: %lld:%lld\n" (now) (- (now) time))
      cube)))

(bind-func get_fluid_cube
  ;;  (let ((cube (fluid_cube_create 322 182 0.0002 0.00002 0.05)))    ; test
  (let ((cube (fluid_cube_create CUBE_W CUBE_H 0.0002 0.00002 0.05)))    ; test
    (lambda ()
      cube)))

(bind-val StepNum i64 0)
(bind-val SIM_ACTIVE i1 #f)

(bind-func fluid_fsc
  (let ((step 0:i64))
    (lambda ()
      (set! SIM_ACTIVE #t)
      (spawn (lambda ()
               (while (= #t SIM_ACTIVE)
                 (thread_sleep 0 100000)
                 (if (< step StepNum)
                     (begin (set! step StepNum)
                            (fluid_step_cube (get_fluid_cube))))
                 void)))
      void)))

(bind-func stop_sim
  (lambda ()
    (set! SIM_ACTIVE #f)
    (set! StepNum 0)
    (fluid_fsc.step 0:i64)
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Data Handling
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OPENGL DRAWING STUFF!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func add_density
  (lambda (x:i64 y:i64 amount:double)
    (let ((cube (get_fluid_cube)))
      (fluid_cube_add_density cube x y amount))))

(bind-func add_velocity
  (lambda (x y amount_x amount_y)
    (fluid_cube_add_velocity (get_fluid_cube) x y amount_x amount_y)))

(bind-func get_velocity
  (lambda (x y)
    (let ((xs (tref (get_fluid_cube) 6))
          (size (tref (get_fluid_cube) 0)))
      (pref xs (+ x (* y size))))))

(bind-val DataVAO VAO* (VAO))

(bind-func init_vao
  (lambda ()
    (let ((num (* CUBE_W CUBE_H))
          (verts:float* (alloc (* 4 num)))
          (colours:float* (alloc (* 4 num)))
          (vbo_verts (VBO verts (* 4 num)))
          (vbo_colours (VBO colours (* 4 num)))
          (i 0) (j 0) (k 0))
      ;; set all to centre
      (dotimes (i (* 4 num)) (pset! verts i 0.0))
      ;; white colour
      (dotimes (i (* 4 num)) (pset! colours i 1.0))
      ;; setup vao
      (set_attribute DataVAO vbo_verts 0 4)
      (set_attribute DataVAO vbo_colours 3 4)
      (update vbo_verts)
      (update vbo_colours)
      void)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; helpers for opengl rendering of fluidsym
(bind-func update_data_points
  (lambda () ;;cube:fluidcube* point_data:float* color_data:float*)
    (let ((vao DataVAO)
          (cube (get_fluid_cube))
          (vert_vbo (get_vbo vao 0))
          (verts (data vert_vbo))
          (vertsf (cast verts float*))
          (colour_vbo (get_vbo vao 3))
          (colours (data colour_vbo))
          (coloursf (cast colours float*))
          (densities (tref cube 5))
          (ii:i64 0)
          (jj:i64 0)
          (Vx (tref cube 6))
          (Vy (tref cube 7))
          (size_x (tref cube 0))
          (size_y (tref cube 10))
          (cvar:float 0.0)
          (cnt 0:i64)
          (idx 0)
          (red (dtof 1.0)) ;(dtof 0.3))
          (blue (dtof 0.8))
          (green (dtof 0.4))) ;(dtof .2)))
      (dotimes (ii (- size_x 2))
        (dotimes (jj (- size_y 2))
          (set! idx (+ (+ ii 1) (* (+ jj 1) size_x)))
          (pset! vertsf (+ 0 (* 4 cnt)) (- (* 2.0 (/ (i64tof ii) (i64tof CUBE_W))) 1.0))
          (pset! vertsf (+ 1 (* 4 cnt)) (- (* 2.0 (/ (i64tof jj) (i64tof CUBE_H))) 1.0))
          (pset! vertsf (+ 2 (* 4 cnt)) (* cvar 0.05))
          (pset! vertsf (+ 3 (* 4 cnt)) 1.0)
          (set! cvar (dtof (* 1.0 (pref densities idx))))
          (pset! coloursf (+ 0 (* 4 cnt)) (* cvar red))
          (pset! coloursf (+ 1 (* 4 cnt)) (* cvar green))
          (pset! coloursf (+ 2 (* 4 cnt)) (* cvar blue))
          ;; (pset! coloursf (+ 2 (* 4 cnt)) (* cvar blue)) ;(* cvar (- 1.0 blue)))
          (pset! coloursf (+ 3 (* 4 cnt)) cvar) ;1.0)
          (set! cnt (+ cnt 1))))
      (update vert_vbo)
      (update colour_vbo))
    void))

(bind-val Swoosh Texture* (Texture (Str "swoosh.png")))
(bind-val BurnerPositions |10000,<i64,i64>|)
(bind-val NumBurners i64 0)

(bind-func init_burners
  (lambda ()
    (set! NumBurners 0)
    (let ((tex Swoosh)
          (dat (data tex))
          (w (width tex))
          (h (height tex))
          (jj 0)
          (t:<i64,i64>* null)
          (i 0) (j 0))
      (dotimes (i w)
        (dotimes (jj h)
          (set! j (- h jj))
          (if (> (i8toui32 (pref dat (+ (* 4 i) (* j 4 w)))) 230)
              (begin
                ;; (set! t (aref-ptr BurnerPositions NumBurners))
                ;; (tfill! t (i32toi64 i) (i32toi64 j))
                (aset! BurnerPositions NumBurners (tuple (i32toi64 i) (i32toi64 j)))
                (set! NumBurners (+ NumBurners 1))))))
      (println "Total Burners:" NumBurners)
      (dotimes (i (i64toi32 NumBurners))
        (println "burn:" i
                 (tref (aref BurnerPositions i) 0)
                 (tref (aref BurnerPositions i) 1)))
      void)))

($ (init_burners))

(bind-func burners
  (let ((rnds:double* (alloc 10000)) (k 0))
    (dotimes (k 10000) (pset! rnds k (random)))
    (lambda (time:double)
      (let ((i 0) (j 0) (k 0) (tup (tuple 0:i64 0:i64))
            (offx 100) (offy 0))
        (dotimes (k NumBurners)
          (set! tup (aref BurnerPositions k))
          (set! i (clamp (tref tup 0) 2 (- CUBE_W 2)))
          (set! j (clamp (tref tup 1) 2 (- CUBE_H 2)))
          (add_density (+ offx (* i 1)) (+ offy (* j 1)) (* 2.0 (random)))
          (if (= k (% (dtoi64 time) NumBurners)) ; (> (random) 0.99:double)
              (add_velocity (+ offx (* i 1)) (+ offy (* j 1))
                            (* 5.1 (cos (* time (convert i) (pref rnds k) .01 .0027)))
                            (* 5.1 (sin (* time (convert j) (pref rnds k) .01 .0013)))))
          void)
        ;; (add_velocity 200 (- CUBE_H 20)
        ;;               (* 1.5 (cos (* time .001)))
        ;;               (* 1.5 (sin (* time .0001))))
        ;; (add_velocity 200 20
        ;;               (* 0.5 (cos (* time .0027)))
        ;;               (* 0.5 (sin (* time .013))))
        void))))


;; (bind-func burners
;;   (let ((rnds:double* (alloc 10000)) (k 0))
;;     (dotimes (k 10000) (pset! rnds k (random)))
;;     (lambda (time:double)
;;       (let ((i 0) (j 0) (offx 50) (offy 50))
;;         (dotimes (i 10)
;;           (dotimes (j 10)
;;             (add_density (+ offx (* i 30)) (+ offy (* j 10))
;;                          (+ 1.0 (* 20.0 (cos (* time (pref rnds (* (+ i 1) (+ j 1))) .001)))))
;;             (add_velocity (+ offx (* i 30)) (+ offy (* j 10))
;;                           (* 0.5 (cos (* time (pref rnds (* (+ i 1) (+ j 1))) .0001)))
;;                           (* 0.5 (sin (* time (pref rnds (* (+ i 1) (+ j 1))) .0001)))))))
;;       void)))

;; start XTM gfx
(xtm_render_init
 (call-as-xtlang (glfw_get_framebuffer_width window))
 (call-as-xtlang (glfw_get_framebuffer_height window)))

;;
;; opengl_test includes two sources
;; of constant wind speed
;;
;; bottom->top: straight up the middle
;; left->right: oscillates from back to front
;;
;; You might need to slow the rate of this
;; temporal recursion down if your machine
;; doesn't cope.  (i.e. 3000 to 5000 or more
;;
;; standard impromptu callback

(bind-val StarTex Texture* (Texture (Str "assets/images/star_trans.png")))

;; trans is like render but generates no shadows
(bind-func trans:XTMRENDERCB
  (lambda (frame shader m v p data)
    ;; (fill_orthographic_matrix p -1.0 1.0 -1.0 1.0 -1.0 1.0)
    ;; (fill_identity_matrix m)
    ;; (rotate_matrix m (* .00002 (i64tof (now))) 1.0 1.0 1.0)
    (scale_matrix m 6.0 4.0 1.0)
    ;; (translate_matrix m 0.5 0.0 0.0)
    (shader_update_material:[void,ShaderProgram*,|4,float|,|4,float|,|4,float|,|4,float|,float]*
     shader
     (array 0.0 0.0 0.0 1.0)
     (array 1.0 1.0 1.0 1.0)
     (array 0.0 0.0 0.0 1.0)
     (array 0.0 0.0 0.0 1.0)
     1.0)
    (glDisable GL_DEPTH_TEST)
    (xtm_draw_vao DataVAO shader m v p GL_POINTS #f 10.0 StarTex 1:i1)
    (glEnable GL_DEPTH_TEST)
    void))

(bind-func gl_draw_loop
  (lambda (time:i64 delta_t:double)
    (burners (i64tod time))
    (set! StepNum (+ StepNum 1))
    (update_data_points)
    (xtm_render null null trans:XTMRENDERCB null null) ;(cast models i8*))
    ;; swap buffers
    (glfwPollEvents)
    (glfwSwapBuffers window)
    ;; set next frame callback
    (let ((next_time (+ time (convert (* 44100. delta_t)))))
      (callback next_time gl_draw_loop next_time delta_t))))

(bind-func set_bg
  (lambda (r g b)
    (xtm_background_colour r g b 1.0)
    void))

;; and to start it running...
(begin ;(ipc:bind-func "fluid" 'fluid_fsc)
       (fluid_fsc)
       (sys:sleep 44100)
       (init_vao)
       (set_bg 0.0 0.0 0.0)
       (gl_draw_loop (now) (/ 1.0 30.0))
       (add_density 50 50 1000.0)
       (add_velocity 50 50 1000.0 1000.0))
