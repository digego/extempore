;;; midi.xtm -- sending/recieving MIDI in Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: rtmidi

;;; Commentary:

;; an example of using the new RtMidi v4 lib (based on the rtmidi_c.h C API)

(sys:load "libs/core/audio_dsp.xtm")
(sys:load "libs/contrib/rtmidi.xtm")

;; create the input/output devices
(bind-val midi_in RtMidiInPtr (rtmidi_in_create_default))
(bind-val midi_out RtMidiOutPtr (rtmidi_out_create_default))

;; in case we need to access these pointers in Scheme as well
(define *min* ($ midi_in))
(define *mout* ($ midi_out))

;; trivial dsp routine with exposed freq param
(bind-func dsp:DSP
  (let ((freql:SAMPLE 110.)
        (freqr:SAMPLE 110.)
        (oscl (osc_c 0.0))
        (oscr (osc_c 0.0)))
    (lambda (in time chan dat)
      (if (= chan 0)
          (oscl 0.2 freql)
          (oscr 0.2 freqr)))))

(dsp:set! dsp)

;; an xtlang function which will "pull" the next incoming midi message (if there
;; is one) and then change the pitch of an oscillator
(bind-func rtmidi_process_message
  (let ((type:i8 0) (chan:i8 0) (a:i8 0) (b:i8 0)
        (left:i8 1) (right:i8 2)
        (message:i8* (alloc 1024))
        (size:i64* (alloc)))
    (lambda (dev:RtMidiInPtr)
      (rtmidi_in_get_message dev message size)
      (set! type (>> (pref message 0) 4))
      (set! chan (& (pref message 0) 15))
      (set! a (pref message 1))
      (set! b (pref message 2))
      (println type chan a b)
      (if (= a left) (dsp.freql (+ 110. (pow (i8tof b) 1.25))))
      (if (= a right) (dsp.freqr (+ 110. (pow (i8tof b) 1.25))))
      void)))

;; open an input port (assuming port 0)
($ (rtmidi_open_port midi_in 0 "Extempore input port"))
;; now open output port (assuming port 0)
($ (rtmidi_open_port midi_out 0 "Extempore output port"))

;; and send a stream of control messages
;; ($ (midi_send *mout* 11 0 8 90))

;; send and process random control change messages (for testing)
(bind-func test
  (lambda ()
    (rtmidi_send midi_out MIDI_CC 0 1 (i64toi8 (random 128)))
    (rtmidi_process_message midi_in)))

;; now, run it in a loop
(define loop
  (lambda (beat dur)
    (test)
    (callback (*metro* (+ beat (* .5 dur))) 'loop (+ beat dur) dur)))

(loop (*metro* 'get-beat 4) 1/4)
