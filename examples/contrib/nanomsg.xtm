;;; nanomsg.xtm -- nanomsg examples

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libnanomsg

;;; Commentary:

;; http://nanomsg.org/

;; These examples are translated from the C examples at
;; https://github.com/dysinger/nanomsg-examples

;;; Code:

(sys:load "libs/external/nanomsg.xtm")

;; Pipeline

;; non-blocking (polling) version

(bind-func listener
  (let ((sock (nn_socket AF_SP NN_PULL))
        (buflen:i64 1024)
        (buf:i8* (zalloc buflen)))
    (if (or (< sock 0)
            (< (nn_bind sock "ipc:///tmp/pipeline.ipc") 0))
        (nn_println_strerror))
    (lambda ()
      (let ((bytes (nn_recv sock buf buflen NN_DONTWAIT)))
        (if (> bytes 0) buf "")))))

(bind-func sender
  (let ((sock (nn_socket AF_SP NN_PUSH)))
    (if (or (< sock 0)
            (< (nn_connect sock "ipc:///tmp/pipeline.ipc") 0))
        (nn_println_strerror))
    (lambda (msg:i8*)
      (let ((sz_msg (+ (strlen msg) 1))
            (bytes (nn_send sock msg sz_msg 0)))
        (if (< bytes 0) ;; should also check (< bytes (convert sz_msg))
            (nn_println_strerror)
            void)))))

(define listener-callback
  (lambda (time delta-t)
    (let ((res (cptr->string (listener))))
      (if (not (string=? res ""))
          (println 'listener 'received: res)))
    (let ((next-time (max (+ time (* *second* delta-t)) (now))))
      (callback next-time
                'listener-callback
                next-time
                delta-t))))

;; start the listener callback
(listener-callback (now) .1)

;; try it out
(sender "test string")
(sender "another string")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ok, let's try a blocking version

(sys:load "libs/external/nanomsg.xtm")

(bind-val SEND_SOCKET i32 -1)
(bind-val RECV_SOCKET i32 -1)
(bind-val SOCKET_ADDRESS i8* "tcp://127.0.0.1:7150")

(bind-func set_up_sockets
  (lambda ()
    (set! SEND_SOCKET (create_socket NN_PUSH))
    (set! RECV_SOCKET (create_socket NN_PULL))
    (bind_socket SEND_SOCKET SOCKET_ADDRESS)
    (connect_socket RECV_SOCKET SOCKET_ADDRESS)
    (println "SEND_SOCKET:" SEND_SOCKET "RECV_SOCKET:" RECV_SOCKET)))

(set_up_sockets)

(bind-func receiver
  (let ((buflen:i64 1024)
        (buf:i8* (zalloc buflen)))
    (lambda ()
      (println "Starting receiver...")
      (let ((bytes (nn_recv RECV_SOCKET buf buflen 0)))
        (if (> bytes 0)
            (printf "message received: %s\n" buf)
            0)))))

;; need to call receiver on the utility process, since it blocks
(ipc:bind-func "utility" 'receiver)
(ipc:call-async "utility" 'receiver)

(bind-func sender
  (lambda (msg:i8*)
    (let ((sz_msg (+ (strlen msg) 1))
          (bytes (nn_send SEND_SOCKET msg sz_msg 0)))
      (if (< bytes 0) ;; should also check (< bytes (convert sz_msg))
          (nn_println_strerror)
          void))))

;; try it out
(sender "test message")

;; note that this'll only print the first message (receiver prints the
;; results of a single call to nn_recv and then exits).

;; so we need to put it into a loop
(bind-func receiver_loop
  (let ((buflen:i64 1024)
        (buf:i8* (zalloc buflen))
        (running 1))
    (lambda ()
      (println "starting receiver_loop...")
      (let ((bytes -1))
        (while (= running 1)
          (set! bytes (nn_recv RECV_SOCKET buf buflen 0))
          (if (> bytes 0)
              (printf "message received: %s\n" buf)))
        (println "stopping receiver_loop")))))

;; again, call receiver_loop on the utility process
(ipc:bind-func "utility" 'receiver_loop)
(ipc:call-async "utility" 'receiver_loop)

(dotimes (i 20)
  (sender (string-append "test string: " (number->string (random i)))))

;; to stop it, we can set running (in the top-level let) to 0
(receiver_loop.running 0)

;; but it won't actually return until the final (blocking) nn_recv
;; call gets a message

(sender "this is the final message")

;;;;;;;;;;;;;;;;;;;
;; Request/Reply ;;
;;;;;;;;;;;;;;;;;;;

(sys:load "libs/external/nanomsg.xtm")

(bind-val REPLY_SOCKET i32 -1)

(bind-func set_up_reply_socket
  (lambda ()
    (if (or (< (set! REPLY_SOCKET (create_socket NN_REP)) 0)
            (< (bind_socket REPLY_SOCKET "tcp://0.0.0.0:7199") 0))
        (nn_println_strerror "reply socket")
        (println "successfully bound REPLY_SOCKET:" REPLY_SOCKET))))

(ipc:bind-func "utility" 'set_up_reply_socket)
(ipc:call-async "utility" 'set_up_reply_socket)

(bind-func reply_loop
  (let ((reqlen:i64 1024)
        (reqbuf:i8* (zalloc reqlen))
        (replen:i64 1024)
        (repbuf:i8* (zalloc replen))
        (running 1))
    (lambda ()
      (println "starting reply_loop...")
      (while (= running 1)
        (let ((reqbytes (nn_recv REPLY_SOCKET reqbuf reqlen 0)))
          (if (> reqbytes 0)
              (begin (sprintf repbuf "%s: message received from %.*s at time: %lld"
                              (getenv "USER") reqbytes reqbuf (now))
                     (if (< (nn_send REPLY_SOCKET repbuf (+ 1 (convert (strlen repbuf))) 0) 0)
                         (nn_println_strerror "error in user_name_handler"))))))
      (println "stopping reply_loop"))))

;; call reply_loop on the utility process
(ipc:bind-func "utility" 'reply_loop)
(ipc:call-async "utility" 'reply_loop)

(sys:load "libs/external/nanomsg.xtm")

(bind-val REQUEST_SOCKET i32 -1)

(bind-func set_up_request_socket
  (lambda ()
    (if (or (< (set! REQUEST_SOCKET (create_socket NN_REQ)) 0)
            (< (connect_socket REQUEST_SOCKET "tcp://172.17.8.101:7199") 0))
        (nn_println_strerror "request socket")
        (println "successfully connected REQUEST_SOCKET:" REQUEST_SOCKET))))

(set_up_request_socket)

(bind-func request
  (let ((buflen:i64 1024)
        (buf:i8* (zalloc buflen)))
    (lambda (msg:i8*)
      (let ((sz_msg (+ (strlen msg) 1))
            (bytes (nn_send REQUEST_SOCKET msg sz_msg 0)))
        (if (= bytes (convert sz_msg)) ;; should also check (< bytes (convert sz_msg))
            (let ((rbytes (nn_recv REQUEST_SOCKET buf buflen 0)))
              (if (> rbytes 0)
                  (begin (printf "reply received: %s\n" buf)
                         void)))
            (nn_println_strerror "error in request"))))))

;; try it out
(request "req-rep test message")

;; to stop it, we can set running (in the top-level let) to 0
(reply_loop.running 0)

;; but it won't actually return until the final (blocking) nn_recv
;; call gets a message
(request "this is the final message")
