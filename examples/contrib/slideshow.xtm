;;; openvg.xtm -- OpenVG drawing example

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libOpenVG

;;; Commentary:

;;

;;; Code:

(define fullscreen #t)
(define width 1920.0)
(define height 1200.0)
;; (define width 1024.0)
;; (define height 768.0)

(bind-val width float width)
(bind-val height float height)

;; setup opengl
(define *gl-ctx* (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

(sys:load "libs/core/math.xtm")
(sys:load "libs/external/gl.xtm")
(sys:load "libs/external/graphics-pipeline.xtm")
(sys:load "libs/external/openvg.xtm")
(sys:load "libs/external/glib.xtm")
(sys:load "libs/external/instruments_ext.xtm")
(sys:load "libs/external/gstreamer.xtm")

(bind-val movietexid i32 0)
(bind-val vplay i1 0)

(bind-func xtm_decode 5000000
  (let ((dat:i8* (alloc (* 1200 800 3))))
    (lambda (playz:GstElement* sink:GstElement* time rate preroll:i1)
      (if (<> (gst_app_sink_is_eos (cast sink GstAppSink*)) 0)
          (begin
            (printf "Finished Streaming! Try another video!\n")
            (gst_element_set_state playz GST_STATE_NULL)
            (gst_object_unref (cast playz gpointer))
            (set! vplay #f)
            void)
          (let ((sample (gst_app_sink_pull_sample (cast sink i8*)))
                (caps (gst_sample_get_caps sample))
                (buffer (gst_sample_get_buffer sample))
                (xsize:gsize 0))
            (if preroll
                (let ((st (gst_caps_get_structure caps 0))
                      (gv (gst_structure_get_value st "framerate"))
                      (num (gst_value_get_fraction_numerator gv))
                      (denom (gst_value_get_fraction_denominator gv)))
                  (set! vplay #t)
                  (set! rate (ftoi64 (/ 44100.0 (/ (i32tof num) (i32tof denom)))))
                  (printf "Play format: %s\n" (gst_caps_to_string caps))))
            (set! xsize (gst_buffer_extract buffer 0 dat (* 3 1200 800)))
            ;; load texture into 11
            (if (= xsize (* 3 1200 800))
                (set! movietexid (gl_load_tex 1200 800 3 GL_UNSIGNED_BYTE dat movietexid)))
            (if (or preroll
                    (and (> rate 0)
                         (> xsize 0)))
                (callback (+ time (/ rate 2)) xtm_decode playz sink (+ time rate) rate 0)
                (begin (set! vplay #f)
                       (printf "Are we here :(\n")
                       void)))))))


;; path must be a valid URI to media
(bind-func xtm_play
  (lambda (path)
    (gst_init null null)
    (if vplay
        (begin (printf "Wait to finish the running video first!\n") 1)
        (let ((playz (gst_element_factory_make "playbin" "play"))
              (sinkz (gst_element_factory_make "appsink" "app_sink"))
              (bus (gst_pipeline_get_bus (cast playz GstPipeline*)))
              (caps:GstCaps* (gst_caps_from_string "video/x-raw,format=RGB,width=1200,height=800"))
              (rgbFilter:GstElement* (gst_element_factory_make "capsfilter" "rgb_filter"))
              (appBin:GstElement* (gst_bin_new "app_bin"))
              (rgbSinkPad:GstPad* null)
              (ghostPad:GstPad* null)
              (gv:GValue* (alloc)))
          ;; force video decode to RGB 1200x800
          (gst_app_sink_set_caps (cast sinkz i8*) caps)
          ;; Replace the default window sink with appsink,
          (g_value_init gv G_TYPE_OBJECT)
          (g_value_set_object gv (cast sinkz gpointer))
          (g_object_set_property (cast playz GObject*) "video-sink" gv)
          ;; URI to load media from
          (g_value_unset gv)
          (g_value_init gv G_TYPE_STRING)
          (g_value_set_string gv path)
          (g_object_set_property (cast playz GObject*) "uri" gv)
          ;; start decoding the media!
          (gst_element_set_state playz GST_STATE_PLAYING)
          (callback (now) xtm_decode playz sinkz (now) 1024 1)
          1))))

;;;;;;;;;;;;;;;;;;;;;;;
;; Glib event loop

;; glib message loop
(bind-func _glib_main_loop_call
  (lambda ()
    (g_main_context_iteration null 0)))

;; glib message loop
(define glib-main-loop
  (lambda ()
    (_glib_main_loop_call)
    (callback (+ (now) 2500) 'glib-main-loop)))

;; init xtm render pipeline
(xtm_render_setup (real->integer width) (real->integer height))
;; setup audio
(xtm_audio_setup)
;; start glib loop
(glib-main-loop)

(let ((vg-ctx-res (xtm_vg_create_contexti32 (real->integer width) (real->integer height))))
  (if (<> vg-ctx-res 1)
      (xtm_vg_print_error)))

;; at most 250 images!
(bind-val slides |250,i32|*)
(bind-val slides_end i32 0)
(bind-val slide_idx i32 0)

(bind-func set_slide_texture
  (lambda (path)
    (printf "load img: %s\n" path)
    (aset! slides slides_end (gl_load_image path 0))
    (set! slides_end (+ slides_end 1))
    void))

(bind-func max_slide_num
  (lambda () slides_end))

(bind-func set_slide
  (lambda (idx)
    (set! slide_idx idx)))

(bind-func forward_slide
  (lambda ()
    (set! slide_idx (+ slide_idx 1))
    (printf "slide: %d\n" slide_idx)
    slide_idx))

(bind-func backward_slide
  (lambda ()
    (set! slide_idx (- slide_idx 1))
    (if (< slide_idx 0) (set! slide_idx (i64toi32 0)))
    (printf "slide: %d\n" slide_idx)
    slide_idx))

(define init-slides
  (lambda (dirpath)
    (let ((file-list (sys:directory-list (sys:expand-path dirpath))))
      (for-each (lambda (f)
                  (if (regex:match? f "png$")
                      (set_slide_texture (string-append (sys:expand-path dirpath) "/" f))))
                file-list)
      (println 'loaded (max_slide_num) 'slides))))

(init-slides "~/Pictures/xtmslides/")

(bind-func post:XTMRENDERCB
  (lambda (frame shader m v p data)
    (fill_orthographic_matrix p -1.0 1.0 -1.0 1.0 -1.0 1.0)
    (fill_identity_matrix v)
    (fill_identity_matrix m)
    (if vplay ;; if movies playing display it!
        (begin (scale_matrix m 2.0 -2.0 0.0)
               (xtm_draw_tex shader movietexid m v p))
        (if (< slide_idx slides_end)
            (begin (scale_matrix m 2.0 2.0 0.0)
                   (xtm_draw_tex shader (aref slides slide_idx) m v p))))
    void))

(bind-func gl_render
  (lambda ()
    (xtm_render null null null post null)
    void))

(define gl-loop
  (lambda (beat dur)
    (gl_render)
    (gl:swap-buffers *gl-ctx*)
    (callback (*metro* (+ beat (* .5 dur))) 'gl-loop (+ beat dur) dur)))

(gl-loop (*metro* 'get-beat 4) 1/8)

(forward_slide)
(backward_slide)
;; (xtm_play "file:///Users/sorensen/Movies/playroom_xtm.mov")
;; (xtm_play "file:///Users/sorensen/Movies/stp_model.mov")
