;;; audio_101.xtm -- basic audio example

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; Simplest possible audio example Just eval each expression in turn

;; Extempore provides very low-level audio support. Essentially the
;; routine you choose to set using dsp:set! is responsible for
;; directly filling the audio-devices audio-buffer. In practice this
;; means that you have to MUST use the extempore compiler to write
;; your DSP code. If you don't know anything about the extempore
;; compiler you should start by looking at the extempore_lang.xtm
;; example.

;;; Code:

;; compile sample by sample dsp code
(bind-func dsp:DSP
  (lambda (in:SAMPLE time:i64 channel:i64	data:SAMPLE*)
    (random .2)))

;; set compiled function named "dsp" to be the dsp callback
;; once this is set any recompilation of the function
;; named "dsp" will hot-swap automatically.
;; in other words you should only need to call dsp:set! once.
(dsp:set! dsp)

;; recompile dsp to produce two sine wave in left and right using the
;; (input) time:i64 argument
(bind-func dsp
  (lambda (in:SAMPLE time:i64 channel:i64	data:SAMPLE*)
    (cond ((= channel 0)
           (* 0.5 (sin (* STWOPI 200.0 (/ (i64tof time) SRf)))))
          ((= channel 1)
           (* 0.5 (sin (* STWOPI 210.0 (/ (i64tof time) SRf)))))
          (else	0.0))))


;; but it's clunky having to do all this modulo and pi-related stuff
;; with the time, especially when we have closures to manage
;; function-local state. So we abstract out an oscillator function
(bind-func osc_c
  (lambda (phase)
    (lambda (amp freq)
      (let ((inc (* STWOPI (/ freq SRf))))
        (set! phase (+ phase inc))
        (if (> phase SPI) (set! phase (- phase STWOPI)))
        (* amp (sin phase))))))


;; same example as above but using the new osc_c oscillator abstraction
(bind-func dsp
  (let ((osc1 (osc_c 0.0))
        (osc2 (osc_c 0.0)))
    (lambda (in:SAMPLE time:i64 channel:i64 data:SAMPLE*)
      (cond ((= channel 1) (osc1 0.5 200.0))
            ((= channel 0) (osc2 0.5 210.0))
            (else 0.0)))))


;; slightly more complex example
(bind-func dsp
  (let ((oscs:|9,[SAMPLE,SAMPLE,SAMPLE]*|* (zalloc))
        (i 0))
    (dotimes (i 9)
      (aset! oscs i (osc_c 0.0)))
    (lambda (a:SAMPLE b:i64 c:i64 d:SAMPLE*)
      (cond ((= c 0) ;; left channel
             (+ ((aref oscs 0) (+ 0.3 ((aref oscs 2) 0.2 1.0)) 60.0)
                ((aref oscs 3) 0.2 220.0)
                ((aref oscs 4) 0.2 (+ 400. ((aref oscs 5) 200. .1)))
                ((aref oscs 6) 0.1 900.0)))
            ((= c 1) ;; right channel
             ((aref oscs 7) 0.3 (+ 220.0 ((aref oscs 8) 110.0 20.0))))
            (else 0.0))))) ;; any remaining channels


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; a simple example of "event" level control
;;
;; or how to to control DSP code from inside
;; a scheme temporal recursion


;; modify one of the examples from above
;; adding freq1 and freq2 into closure environment
(bind-func dsp
  (let ((osc1 (osc_c 0.0))
        (osc2 (osc_c 0.0))
        (freq1 220.0)
        (freq2 220.0))
    (lambda (in:SAMPLE time:i64 channel:i64 data:SAMPLE*)
      (cond ((= channel 1) (osc1 0.3 freq1))
            ((= channel 0) (osc2 0.3 freq2))
            (else 0.0)))))

;; write accessor function for modification
;; of closure slots freq1 and freq2
(bind-func change_freq
  (lambda (freq1 freq2)
    (dsp.freq1:SAMPLE freq1)
    (dsp.freq2:SAMPLE freq2)))


;; a "normal scheme" temporal recursion
;; for event level control
(define loop
  (lambda (time freq dir)
    (change_freq
     (* 1.0 (random 100 500))
     (* 1.0 freq))
    (callback time 'loop (+ time (* 20.0 freq))
              (dir freq 50.0)
              (cond ((> freq 600.0) -)
                    ((< freq 300.0) +)
                    (else dir)))))

;; start loop
(loop (now) 220.0 +)
