;;
;; metronome test for topclock.
;;
;; run this on several machines at once.
;;

(sys:load "libs/core/topclock.xtm")
(sys:load "libs/core/instruments.xtm")

(bind-val metrosynth INSTRUMENT (make_instrument (fmsynth_note) (fmsynth_fx)))
(define metrosynth ($$ metrosynth))

(bind-func dsp:DSP 1000000
  (let ((t 0))
    (lambda (in time chan dat)
      (if (= t 0) (set! t time))
      (if (< chan 2)
          (+ (metrosynth in time chan dat)
             0.0)
          0.0))))

(dsp:set! dsp)

;; any client can send tempo/cycle changes
(define test
  (lambda (beat dur)
    (if (and (= (modulo beat 4) 0)
             (> (random) 0.8))
        (topclock-bpm (*metro* beat) (random 20 280) beat (random '(6 5 4 3))))
    (println 'beat: (rational->n beat) 'pos: (*metro* 'pos beat) 'clock: (clock:clock))
    (if (= (*metro* 'pos beat) 0)
        (play metrosynth (random '(63 65 67 70 72)) 80 .1)
        (play metrosynth 60 80 .1))
    (callback (*metro* (+ beat (* .5 dur))) 'test (+ beat dur) dur)))

(define teststart
  (lambda ()
    (test (*metro* 'get-beat 4) 1)))

;; give topclock a few seconds to get sync'd
(callback (+ (now) (* *second* 10)) 'teststart)
