;;
;; compile a trivial native dynamic library
;;
;; a godot native script plugin
;;
;; ./extempore.exe --compile=./examples/core/godot_test1.xtm -dll
;;

(sys:load "libs/contrib/libgodot.xtm")

(bind-func godot_string
  (lambda (str:i8*)
    (let ((gstr:godot_string* (alloc)))
      ;; should put in auto destroy here!!!
      (godot_string_new gstr)
      (godot_string_parse_utf8 gstr str)
      gstr)))

(bind-func godot_array
  (lambda ()
    (let ((garr:godot_array* (alloc)))
      ;; should put in auto destroy here!!!
      (godot_array_new garr)
      garr)))

(bind-func godot_string_var
  (lambda (str:i8*)
    (let ((gstr:godot_string* (salloc))
          (var:godot_variant* (salloc)))
      (godot_string_new gstr)
      (godot_string_parse_utf8 gstr str)
      (godot_variant_new_string var gstr)
      (godot_string_destroy gstr)
      (pref var 0))))

(bind-func godot_string_pvar
  (lambda (str:i8*)
    (let ((gstr:godot_string* (salloc))
          (var:godot_variant* (alloc)))
      ;; should put auto destroy here!
      (godot_string_new gstr)
      (godot_string_parse_utf8 gstr str)
      (godot_variant_new_string var gstr)
      (godot_string_destroy gstr)
      var)))

(bind-func godot_vector2_var
  (lambda (x:godot_real y:godot_real)
    (let ((vec:godot_vector2* (salloc))
          (var:godot_variant* (salloc)))
      (godot_vector2_new vec x y)
      (godot_variant_new_vector2 var vec)
      (pref var 0))))

(bind-func godot_vector2_pvar
  (lambda (x:godot_real y:godot_real)
    (let ((vec:godot_vector2* (salloc))
          (var:godot_variant* (alloc)))
      (godot_vector2_new vec x y)
      (godot_variant_new_vector2 var vec)
      var)))

(bind-func godot_vector3_var
  (lambda (x:godot_real y:godot_real z:godot_real)
    (let ((vec:godot_vector3* (salloc))
          (var:godot_variant* (salloc)))
      (godot_vector3_new vec x y z)
      (godot_variant_new_vector3 var vec)
      (pref var 0))))

(bind-func godot_vector3_pvar
  (lambda (x:godot_real y:godot_real z:godot_real)
    (let ((vec:godot_vector3* (salloc))
          (var:godot_variant* (alloc)))
      (godot_vector3_new vec x y z)
      (godot_variant_new_vector3 var vec)
      var)))

(bind-func godot_bool_var
  (lambda (val:godot_bool)
    (let ((var:godot_variant* (salloc)))
      (godot_variant_new_bool var val)
      (pref var 0))))

(bind-func godot_bool_pvar
  (lambda (val:godot_bool)
    (let ((var:godot_variant* (alloc)))
      (godot_variant_new_bool var val)
      var)))

(bind-func find_node
  (lambda (instance:godot_object* name:i8*)
    (println "FIND NODE!")
    (let ((method:godot_method_bind* (godot_method_bind_get_method "Node" "find_node"))
           (arg1 (godot_string_var name))
           (arg2 (godot_bool_var 1))
           (arg3 (godot_bool_var 1))
           (args:godot_variant** (salloc 3)) ;; find_node is a 3 arg funtion
           (error:godot_variant_call_error* (salloc)))
      (println "ok to here in find node!")
      ;; find_node is (string, bool, bool)
      (pfill! args (ref arg1) (ref arg2) (ref arg3)) ;; true and true
      (println "filled args!")
      (godot_method_bind_call method instance args 3 error))))

(bind-func call_object
  (lambda (instance:godot_object*) ;// args:godot_array*)
    (printf "call object with name:\n")
    (let ((callv (godot_method_bind_get_method "Object" "callv"))
           (methname (godot_string "get"))
           (propname (godot_string_var "name"))
           (args (godot_array)) ;; find_node is a 3 arg funtion
           ;; (error:godot_variant_call_error* (salloc))
           (res:godot_variant* (salloc))
           (obj (godot_global_get_singleton "Main"))
           (c_args:|2,i8*|* (alloc)))
      ;; (godot_array_append args methname)
      (godot_array_append args (ref propname))
      ;; callv expects (godot_string*, godot_array*)
      (pfill! (cast c_args i8**) (cast methname i8*) (cast args i8*))
      ; (godot_array_arg2 arg3)
      (println "ok to here in call object with name!")
      (godot_method_bind_ptrcall callv obj (cast c_args i8**) (cast res i8*))
      (printf "res type: %d\n" (godot_variant_get_type res))
      (printf "name is: %s\n" (cast res i8*))
      void)))
     ;;  (pref res 0))))

(bind-func godot_call
  (lambda (classname:i8* methodname:i8* instance:godot_object* arg1:godot_variant*)
    (let ((method:godot_method_bind* (godot_method_bind_get_method classname methodname))
          (args:godot_variant** (salloc 1))
          (error:godot_variant_call_error* (salloc)))
      (pfill! args arg1)
      (let ((res (godot_method_bind_call method instance args 1 error)))
        (println "call return type:" (godot_variant_get_type (ref res)) "errors:" error)
        res))))

(bind-func godot_call
  (lambda (classname:i8* methodname:i8* instance:godot_object* arg1:godot_variant* arg2:godot_variant*)
    (let ((method:godot_method_bind* (godot_method_bind_get_method classname methodname))
          (args:godot_variant** (salloc 2))
          (error:godot_variant_call_error* (salloc)))
      (pfill! args arg1 arg2)
      (let ((res (godot_method_bind_call method instance args 2 error)))
        (println "call return type:" (godot_variant_get_type (ref res)) "errors:" error)
        res))))

(bind-func godot_call
  (lambda (classname:i8* methodname:i8* instance:godot_object* arg1:godot_variant* arg2:godot_variant* arg3:godot_variant*)
    (let ((method:godot_method_bind* (godot_method_bind_get_method classname methodname))
          (args:godot_variant** (salloc 3))
          (error:godot_variant_call_error* (salloc)))
      (pfill! args arg1 arg2 arg3)
      (let ((res (godot_method_bind_call method instance args 3 error)))
        (println "call return type:" (godot_variant_get_type (ref res)) "errors:" error)
        res))))

(bind-func godot_call
  (lambda (classname:i8* methodname:i8* instance:godot_object* arg1:godot_variant* arg2:godot_variant* arg3:godot_variant* arg4:godot_variant*)
    (let ((method:godot_method_bind* (godot_method_bind_get_method classname methodname))
          (args:godot_variant** (salloc 4))
          (error:godot_variant_call_error* (salloc)))
      (pfill! args arg1 arg2 arg3 arg4)
      (let ((res (godot_method_bind_call method instance args 4 error)))
        (println "call return type:" (godot_variant_get_type (ref res)) "errors:" error)
        res))))

(bind-func try_a_get
  (lambda (instance:godot_object*)
    (println "try a get!")
    (let ((method:godot_method_bind* (godot_method_bind_get_method "Object" "get"))
           (arg1 (godot_string_var "name"))
           (args:godot_variant** (salloc 1)) ;; find_node is a 3 arg funtion
           (error:godot_variant_call_error* (salloc)))
      (println "ok to here in try a get!")
      ;; find_node is (string, bool, bool)
      (pfill! args (ref arg1))
      (println "filled args!")
      (let ((res (godot_method_bind_call method instance args 1 error))
            (type (godot_variant_get_type (ref res))))
        (println "done with try a get!" type error)
        void))))


(bind-func global_transform2d
  (lambda (instance:godot_object* x y)
    (let ((method:godot_method_bind* (godot_method_bind_get_method "Node2D" "global_transform"))
          (arg1 (godot_vector2_var x y))
          (args:godot_variant** (salloc 1))
          (error:godot_variant_call_error* (salloc)))
      (pset! args 0 (ref arg1))
      (godot_method_bind_call method instance args 1 error))))


;; open this dll
(bind-func static godot_gdnative_init
  (lambda (options:godot_gdnative_init_options*)
    (printf "XTL godot_gdnative_init\n")
    (printf "GDNATIVE_EXT_NATIVESCRIPT = %d\n" GDNATIVE_EXT_NATIVESCRIPT)
    (let ((api (tref options 7))
          (extensions:godot_gdnative_api_struct** (tref api 4))
          (num (tref api 3))
          (i 0:i32))
      (set! gdnative_api api)
      (printf "The gdnative_api is set to [%p]\n" gdnative_api)
      (dotimes (i num)
        (if (= (tref (pref extensions i) 0) GDNATIVE_EXT_NATIVESCRIPT)
            (set! nativescript_api (cast (pref extensions i) godot_gdnative_ext_nativescript_api_struct*))))
      (printf "The nativescript api is set to [%p]\n" nativescript_api)
      ;; this is the xtlang init (not a godot init just to be confusing)
      ;; it's name 'godot_test1'_init is based off the xtm file name
      ;; load this after nativescript_api and gdnative_api are bound
      (godot_test1_init)
      void)))

;; close this dll
(bind-func static godot_gdnative_terminate
  (lambda (options:godot_gdnative_terminate_options)
    (printf "XTL godot_gdnative_terminate\n")
    (set! gdnative_api null)
    (set! nativescript_api null)))

(bind-func static simple_constructor
  (lambda (instance:godot_object* method_data:i8*)
    (printf "XTL simple_constructor -> instance:%p method_data:%p\n" (cast instance i8*) method_data)
    (let ((user_data:i8* (godot_alloc 256)))
      (strcpy user_data "Hello From Extempore!")
      user_data)))

(bind-func static simple_destructor
  (lambda (instance:godot_object* method_data:i8* user_data:i8*)
    (printf "XTL simple_destructor -> instance:%p method_data:%p user_data:%p\n" (cast instance i8*) method_data user_data)
    (godot_free user_data)))

(bind-func static simple_get_data
  (lambda (instance:godot_object* method_data:i8* user_data:i8* num_args:i32 args:godot_variant**)
    (printf "XTL simple_get_data -> instance:%p method_data:%p user_data:%p num_args:%d args:%p\n" (cast instance i8*) method_data user_data num_args (cast args i8*))
    (let ((data:godot_string* (salloc))
          (ret:godot_variant* (alloc)))
      (godot_string_new data)
      (godot_string_parse_utf8 data user_data)
      (godot_variant_new_string ret data)
      (godot_string_destroy data)
      (pref ret 0))))

(bind-func static simple_get_color
  (lambda (instance:godot_object* method_data:i8* user_data:i8* num_args:i32 args:godot_variant**)
    (printf "XTL simple_get_color -> instance:%p method_data:%p user_data:%p num_args:%d args:%p\n" (cast instance i8*) method_data user_data num_args (cast args i8*))
    (let ((color:godot_color* (salloc))
          (ret:godot_variant* (salloc)))
      (godot_color_new_rgb color (random) (random) (random))
      (godot_variant_new_color ret color)
      (pref ret 0))))

(bind-func static simple_move
  (lambda (instance:godot_object* method_data:i8* user_data:i8* num_args:i32 args:godot_variant**)
    (printf "XTL simple_move -> instance:%p method_data:%p user_data:%p num_args:%d args:%p\n" (cast instance i8*) method_data user_data num_args (cast args i8*))
    ;; (try_a_get instance "name")
    (godot_call "Object" "get" (godot_variant_as_object (pref args 0)) (godot_string_pvar "name"))))

(bind-func get_new_pos
  (let ((vec2:godot_vector2* (alloc))
        (var:godot_variant* (alloc))
        (phase 0.0:f))
    (godot_vector2_new vec2 500.0 200.0)
    (godot_variant_new_vector2 var vec2)
    (lambda ()
      (set! phase (+ phase 0.001:f))
      (godot_vector2_set_x vec2 (+ 500.0 (* 100.0 (cos phase))))
      (godot_vector2_set_y vec2 (+ 200.0 (* 100.0 (sin phase))))
      var)))

(bind-func get_new_pos2
  (let ((phase 0.0:f))
    (lambda ()
      (set! phase (+ phase 0.01:f))
      (godot_vector2_var (+ 500.0 (* 100.0 (cos phase))) (+ 200.0 (* 100.0 (sin phase)))))))

; (bind-func static simple_process
;   (lambda (instance:godot_object* method_data:i8* user_data:i8* num_args:i32 args:godot_variant**)
;     (printf "XTL simple_process -> instance:%p method_data:%p user_data:%p num_args:%d args:%p\n" (cast instance i8*) method_data user_data num_args (cast args i8*))
;     (godot_call "Control" "set_global_position"
;                         (godot_variant_as_object (pref args 0))
;                         (get_new_pos))))
                        ;; (godot_vector2_pvar (* (random) 1000.0) (* (random) 550.0))))))

(bind-func static simple_process
  (lambda (instance:godot_object* method_data:i8* user_data:i8* num_args:i32 args:godot_variant**)
    (let ((pos (get_new_pos2)))
      (godot_call "Control" "set_global_position"
                  (godot_variant_as_object (pref args 0))
                  (ref pos)))))

; api_struct->godot_variant_new_node_path(&path, &some_node_path);
; args[0] = &path;
; Finally, call the method:

; godot_variant ret = api_struct->godot_method_bind_call(get_node,some_node_object, args, 1, &error);




    ; godot_variant path;
; godot_variant* args[1]; // an array of 1 pointer, in C's insane syntax
; godot_variant_call_error error;
; Put your godot_node_path in the one argument:

; api_struct->godot_variant_new_node_path(&path, &some_node_path);
; args[0] = &path;
; Finally, call the method:

; godot_variant ret = api_struct->godot_method_bind_call(get_node,some_node_object, args, 1, &error);

    ; api_struct->godot_variant_new_node_path(&path, &some_node_path);

    ; godot_variant path;
; godot_variant* args[1]; // an array of 1 pointer, in C's insane syntax
; godot_variant_call_error error;


(bind-func static godot_nativescript_init
  (lambda (handle:i8*)
    (let ((a:godot_instance_create_func* (halloc))
          (b:godot_instance_destroy_func* (halloc))
          (c:godot_method_attributes* (halloc))
          (d:godot_instance_method* (halloc))
          (e:godot_instance_method* (halloc))
          (f:godot_instance_method* (halloc))
          (g:godot_instance_method* (halloc)))
      (tset! a 0 (cast simple_constructor))
      (tset! b 0 (cast simple_destructor))
      (register_class handle "SIMPLE" "Reference" a b)
      (tset! c 0 GODOT_METHOD_RPC_MODE_DISABLED)
      (tset! d 0 (cast simple_get_data))
      (register_method handle "SIMPLE" "get_data" c d)
      (tset! e 0 (cast simple_get_color))
      (register_method handle "SIMPLE" "get_color" c e)
      (tset! f 0 (cast simple_process))
      (register_method handle "SIMPLE" "xtproc" c f)
      (tset! g 0 (cast simple_move))
      (register_method handle "SIMPLE" "move" c g)
      void)))

;;
;; YOU WILL ALSO NEED TO WRITE an appropriate gdnlib file
;; below is a minimal working example
;;

; [general]

; singleton=false
; load_once=true
; symbol_prefix="godot_"
; reloadable=true

; [entry]

; Windows.64="res://bin/godot_test1.dll"

; [dependencies]

; X11.64=[]
; Windows.64=["res://bin/extempore.dll"]
; OSX.64=[]







; Doing this is extremely convoluted, because the C interface is mainly designed
; to be wrapped by language bindings rather than used directly in game code. I'll
; describe the basic steps to calling any method on a godot_object like a Node,
; but it's obviously much easier with C++:

; I'm assuming you already set up a simple project with a godot_gdnative_init
; function, like in the official C simple demo. You only need to save the
; api_struct pointer in a global variable like the first line of the function here
; - you don't need anything else relating to NativeScript yet.

; Get the godot_method_bind pointer for the method you want:

; godot_method_bind *get_node = api_struct->godot_method_bind_get_method("Node", "get_node");
; Prepare storage for an array of Variant arguments and an error code:

; godot_variant path;
; godot_variant* args[1]; // an array of 1 pointer, in C's insane syntax
; godot_variant_call_error error;
; Put your godot_node_path in the one argument:

; api_struct->godot_variant_new_node_path(&path, &some_node_path);
; args[0] = &path;
; Finally, call the method:

; godot_variant ret = api_struct->godot_method_bind_call(get_node,some_node_object, args, 1, &error);

; The two things you need to destroy by
; yourself are path and ret (using godot_variant_destroy). Probably also
; some_node_path, but that depends on your code. The MethodBind and
; some_node_object are just pointers and don't need to be destroyed. (Btw, manual
; memory management is one of the main reasons not to use C without bindings. All
; of Godot's core value types and any godot_objects derived from Reference require
; RAII.)

;; maybe try ("Control", "set_position") instead of ("Node", "get_node") which should take a Vector3?
