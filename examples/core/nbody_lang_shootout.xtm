;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; nbody Performance Test
;; Taken from the Computer Language Benchmark Game
;;
;; Implementation tries to stick reasonably faithfully
;; to the original C implementation:
;;
;; Included inline here! for ease of testing
;; My Last Test: n = 50000000
;; gave results of:
;; clang C -> 13.757s
;; XTLang  -> 16.468s
;;
;;
;; /* The Computer Language Benchmarks Game
;;  * http://benchmarksgame.alioth.debian.org/
;;  *
;;  * contributed by Christoph Bauer
;;  *
;;  */
;;
;; #include <math.h>
;; #include <stdio.h>
;; #include <stdlib.h>
;;
;; #define pi 3.141592653589793
;; #define solar_mass (4 * pi * pi)
;; #define days_per_year 365.24
;;
;; struct planet {
;;   double x, y, z;
;;   double vx, vy, vz;
;;   double mass;
;; };
;;
;; void advance(int nbodies, struct planet * bodies, double dt)
;; {
;;   int i, j;
;;
;;   for (i = 0; i < nbodies; i++) {
;;     struct planet * b = &(bodies[i]);
;;     for (j = i + 1; j < nbodies; j++) {
;;       struct planet * b2 = &(bodies[j]);
;;       double dx = b->x - b2->x;
;;       double dy = b->y - b2->y;
;;       double dz = b->z - b2->z;
;;       double distance = sqrt(dx * dx + dy * dy + dz * dz);
;;       double mag = dt / (distance * distance * distance);
;;       b->vx -= dx * b2->mass * mag;
;;       b->vy -= dy * b2->mass * mag;
;;       b->vz -= dz * b2->mass * mag;
;;       b2->vx += dx * b->mass * mag;
;;       b2->vy += dy * b->mass * mag;
;;       b2->vz += dz * b->mass * mag;
;;     }
;;   }
;;   for (i = 0; i < nbodies; i++) {
;;     struct planet * b = &(bodies[i]);
;;     b->x += dt * b->vx;
;;     b->y += dt * b->vy;
;;     b->z += dt * b->vz;
;;   }
;; }
;;
;; double energy(int nbodies, struct planet * bodies)
;; {
;;   double e;
;;   int i, j;
;;
;;   e = 0.0;
;;   for (i = 0; i < nbodies; i++) {
;;     struct planet * b = &(bodies[i]);
;;     e += 0.5 * b->mass * (b->vx * b->vx + b->vy * b->vy + b->vz * b->vz);
;;     for (j = i + 1; j < nbodies; j++) {
;;       struct planet * b2 = &(bodies[j]);
;;       double dx = b->x - b2->x;
;;       double dy = b->y - b2->y;
;;       double dz = b->z - b2->z;
;;       double distance = sqrt(dx * dx + dy * dy + dz * dz);
;;       e -= (b->mass * b2->mass) / distance;
;;     }
;;   }
;;   return e;
;; }
;;
;; void offset_momentum(int nbodies, struct planet * bodies)
;; {
;;   double px = 0.0, py = 0.0, pz = 0.0;
;;   int i;
;;   for (i = 0; i < nbodies; i++) {
;;     px += bodies[i].vx * bodies[i].mass;
;;     py += bodies[i].vy * bodies[i].mass;
;;     pz += bodies[i].vz * bodies[i].mass;
;;   }
;;   bodies[0].vx = - px / solar_mass;
;;   bodies[0].vy = - py / solar_mass;
;;   bodies[0].vz = - pz / solar_mass;
;; }
;;
;; #define NBODIES 5
;; struct planet bodies[NBODIES] = {
;;   {                               /* sun */
;;     0, 0, 0, 0, 0, 0, solar_mass
;;   },
;;   {                               /* jupiter */
;;     4.84143144246472090e+00,
;;     -1.16032004402742839e+00,
;;     -1.03622044471123109e-01,
;;     1.66007664274403694e-03 * days_per_year,
;;     7.69901118419740425e-03 * days_per_year,
;;     -6.90460016972063023e-05 * days_per_year,
;;     9.54791938424326609e-04 * solar_mass
;;   },
;;   {                               /* saturn */
;;     8.34336671824457987e+00,
;;     4.12479856412430479e+00,
;;     -4.03523417114321381e-01,
;;     -2.76742510726862411e-03 * days_per_year,
;;     4.99852801234917238e-03 * days_per_year,
;;     2.30417297573763929e-05 * days_per_year,
;;     2.85885980666130812e-04 * solar_mass
;;   },
;;   {                               /* uranus */
;;     1.28943695621391310e+01,
;;     -1.51111514016986312e+01,
;;     -2.23307578892655734e-01,
;;     2.96460137564761618e-03 * days_per_year,
;;     2.37847173959480950e-03 * days_per_year,
;;     -2.96589568540237556e-05 * days_per_year,
;;     4.36624404335156298e-05 * solar_mass
;;   },
;;   {                               /* neptune */
;;     1.53796971148509165e+01,
;;     -2.59193146099879641e+01,
;;     1.79258772950371181e-01,
;;     2.68067772490389322e-03 * days_per_year,
;;     1.62824170038242295e-03 * days_per_year,
;;     -9.51592254519715870e-05 * days_per_year,
;;     5.15138902046611451e-05 * solar_mass
;;   }
;; };
;;
;; int main(int argc, char ** argv)
;; {
;;   int n = atoi(argv[1]);
;;   int i;
;;
;;   offset_momentum(NBODIES, bodies);
;;   printf ("%.9f\n", energy(NBODIES, bodies));
;;   for (i = 1; i <= n; i++)
;;     advance(NBODIES, bodies, 0.01);
;;   printf ("%.9f\n", energy(NBODIES, bodies));
;;   return 0;
;; }
;;
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-type planet <double,double,double,double,double,double,double>)

(define PI 3.141592653589793)
(bind-val solar_mass double (* 4.0 PI PI))
(bind-val days_per_year double 365.24)

(bind-func print_planet
  (lambda (p:planet*)
    (printf "x[%E] y[%E] z[%E]\n" (tref p 0) (tref p 1) (tref p 2))
    (printf "vx[%E] vy[%E] vz[%E]\n" (tref p 3) (tref p 4) (tref p 5))
    (printf "mass[%E]\n\n" (tref p 6))))

(bind-func make_bodies
  (lambda ()
    (let ((bodies:planet* (halloc 5))
          (sun:planet* (pref-ptr bodies 0))
          (jupiter:planet* (pref-ptr bodies 1))
          (saturn:planet* (pref-ptr bodies 2))
          (uranus:planet* (pref-ptr bodies 3))
          (neptune:planet* (pref-ptr bodies 4)))
      (tfill! sun 0.0 0.0 0.0 0.0 0.0 0.0 (* 1.0 solar_mass))
      (tfill! jupiter
              4.84143144246472090e+00
              -1.16032004402742839e+00
              -1.03622044471123109e-01
              (* 1.66007664274403694e-03 days_per_year)
              (* 7.69901118419740425e-03 days_per_year)
              (* -6.90460016972063023e-05 days_per_year)
              (* 9.54791938424326609e-04 solar_mass))
      (tfill! saturn
              8.34336671824457987e+00
              4.12479856412430479e+00
              -4.03523417114321381e-01
              (* -2.76742510726862411e-03 days_per_year)
              (* 4.99852801234917238e-03 days_per_year)
              (* 2.30417297573763929e-05 days_per_year)
              (* 2.85885980666130812e-04 solar_mass))
      (tfill! uranus
             1.28943695621391310e+01
             -1.51111514016986312e+01
             -2.23307578892655734e-01
             (* 2.96460137564761618e-03 days_per_year)
             (* 2.37847173959480950e-03 days_per_year)
             (* -2.96589568540237556e-05 days_per_year)
             (* 4.36624404335156298e-05 solar_mass))
      (tfill! neptune
              1.53796971148509165e+01
              -2.59193146099879641e+01
              1.79258772950371181e-01
              (* 2.68067772490389322e-03 days_per_year)
              (* 1.62824170038242295e-03 days_per_year)
              (* -9.51592254519715870e-05 days_per_year)
              (* 5.15138902046611451e-05 solar_mass))
      bodies)))

(bind-func advance
  (lambda (nbodies:i64 bodies:planet* dt)
    (let ((i:i64 0) (j:i64 0)
          (dx 0.0) (dy 0.0) (dz 0.0) (distance 0.0) (mag 0.0)
          (b:planet* null)
          (b2:planet* null)
          (b3:planet* null))
      (dotimes (i nbodies)
        (set! b (pref-ptr bodies i))
        (dotimes (j (+ i 1) (- nbodies (+ i 1)))
          (set! b2 (pref-ptr bodies j))
          (set! dx (- (tref b 0) (tref b2 0)))
          (set! dy (- (tref b 1) (tref b2 1)))
          (set! dz (- (tref b 2) (tref b2 2)))
          (set! distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz))))
          (set! mag (/ dt (* distance distance distance)))
          (tset! b 3 (- (tref b 3) (* dx (tref b2 6) mag)))
          (tset! b 4 (- (tref b 4) (* dy (tref b2 6) mag)))
          (tset! b 5 (- (tref b 5) (* dz (tref b2 6) mag)))
          (tset! b2 3 (+ (tref b2 3) (* dx (tref b 6) mag)))
          (tset! b2 4 (+ (tref b2 4) (* dy (tref b 6) mag)))
          (tset! b2 5 (+ (tref b2 5) (* dz (tref b 6) mag)))))
      (dotimes (i nbodies)
        (set! b3 (pref-ptr bodies i))
        (tset! b3 0 (+ (tref b3 0) (* dt (tref b3 3))))
        (tset! b3 1 (+ (tref b3 1) (* dt (tref b3 4))))
        (tset! b3 2 (+ (tref b3 2) (* dt (tref b3 5)))))
      void)))


(bind-func energy
  (lambda (nbodies:i32 bodies:planet*)
    (let ((i:i32 0) (j:i32 0) (e 0.0)
          (dx 0.0) (dy 0.0) (dz 0.0) (distance 0.0)
          (b:planet* null) (b2:planet* null))
      (dotimes (i nbodies)
        (set! b (pref-ptr bodies i))
        (set! e (+ e (* 0.5 (tref b 6)
                        (+ (* (tref b 3) (tref b 3))
                           (* (tref b 4) (tref b 4))
                           (* (tref b 5) (tref b 5))))))
        (dotimes (j (+ i 1) (- nbodies (+ i 1)))
          (set! b2 (pref-ptr bodies j))
          (set! dx (- (tref b 0) (tref b2 0)))
          (set! dy (- (tref b 1) (tref b2 1)))
          (set! dz (- (tref b 2) (tref b2 2)))
          (set! distance (sqrt (+ (* dx dx) (* dy dy) (* dz dz))))
          (set! e (- e (/ (* (tref b 6) (tref b2 6)) distance)))
          ))
      e)))

(bind-func offset_momentum
  (lambda (nbodies bodies:planet*)
    (let ((px 0.0) (py 0.0) (pz 0.0)
          (b:planet* null)
          (i 0))
      (dotimes (i nbodies)
        (set! b (pref-ptr bodies i))
        (set! px (+ px (* (tref b 3) (tref b 6))))
        (set! py (+ py (* (tref b 4) (tref b 6))))
        (set! pz (+ pz (* (tref b 5) (tref b 6)))))
      (tset! bodies 3 (/ (- 0.0 px) solar_mass))
      (tset! bodies 4 (/ (- 0.0 py) solar_mass))
      (tset! bodies 5 (/ (- 0.0 pz) solar_mass))
      void)))

(bind-val bodies planet*)

(bind-func init_bodies
  (lambda ()
    (set! bodies (make_bodies))
    void))

(bind-func main
  (lambda (n:i64)
    (let (;; (bodies:planet* (make_bodies))
          (i:i64 0))
      (offset_momentum 5 bodies)
      (printf "%.9f\n" (energy 5 bodies))
      (dotimes (i n)
        (advance 5 bodies 0.01))
      (printf "%.9f\n" (energy 5 bodies))
      void)))

(init_bodies)

(let ((t1 (clock:clock)))
  (main 50000000)
  (println 'time: (- (clock:clock) t1)))

(quit 0)
