;; Literal
(bind-type Lit <!a>)

(bind-func eval:[!a,Lit*]*
  (lambda (x)
    (tref x 0)))


;; Add
(bind-type Add <!a,!b>)

(bind-func eval:[!a,Add*]*
  (lambda (x)
    (+ (eval (tref x 0))
       (eval (tref x 1)))))


;; First Test
(bind-func expr_problem
  (lambda ()
    (let ((e1 (Add (Lit 1)   (Lit 2)))
          (e2 (Add (Lit 4.0) (Add (Lit 2.0) (Lit 3.0)))))
      (println "e1 =" (eval e1))
      (println "e2 =" (eval e2))
      void)))

(expr_problem)


;; Easy to add New Type sub

(bind-type Sub <!a,!b>)

(bind-func eval:[!a,Sub*]*
  (lambda (x)
    (- (eval (tref x 0))
       (eval (tref x 1)))))

(bind-func expr_problem
  (lambda ()
    (let ((e1 (Add (Lit 1)  (Lit 2)))
          (e2 (Sub (Lit 10) e1)))
      (println "e1 =" (eval e1))
      (println "e2 =" (eval e2))
      void)))

(expr_problem)

;; Easy to add new OP stringify

(bind-func stringify:[!a,Lit*]*
  (lambda (x)
    (toString (tref x 0))))

(bind-func stringify:[String*,Add*]*
  (lambda (x)
    (cat (Str "(")
         (stringify (tref x 0))
         (Str " + ")
         (stringify (tref x 1))
         (Str ")"))))

(bind-func stringify:[String*,Sub*]*
  (lambda (x)
    (cat (stringify (tref x 0))
         (Str " - ")
         (stringify (tref x 1)))))

(bind-func expr_problem
  (lambda ()
    (let ((e1 (Add (Lit 1)  (Lit 2)))
          (e2 (Sub (Lit 10) e1)))
      (println (stringify e1) "=" (eval e1))
      (println (stringify e2) "=" (eval e2))
      void)))

(expr_problem)
