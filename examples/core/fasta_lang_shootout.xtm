;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; fasta Performance Test
;; Taken from the Computer Language Benchmark Game
;;
;; Implementation tries to stick reasonably faithfully
;; to the original C implementation:
;;
;;
;; ORIGINAL C SOURCE

;; // The Computer Language Benchmarks Game
;; // http://benchmarksgame.alioth.debian.org/
;; //
;; // Contributed by Jeremy Zerfas

;; // This controls the width of lines that are output by this program.
;; #define MAXIMUM_LINE_WIDTH   60

;; #include <stdint.h>
;; #include <string.h>
;; #include <stdio.h>
;; #include <stdlib.h>

;; // intptr_t should be the native integer type on most sane systems.
;; typedef intptr_t intnative_t;

;; typedef struct{
;;    char letter;
;;    float probability;
;; } nucleotide_info;


;; // Repeatedly print string_To_Repeat until it has printed
;; // number_Of_Characters_To_Create. The output is also wrapped to
;; // MAXIMUM_LINE_WIDTH columns.
;; static void repeat_And_Wrap_String(const char string_To_Repeat[],
;;   const intnative_t number_Of_Characters_To_Create){
;;    const intnative_t string_To_Repeat_Length=strlen(string_To_Repeat);

;;    // Create an extended_String_To_Repeat which is a copy of string_To_Repeat
;;    // but extended with another copy of the first MAXIMUM_LINE_WIDTH characters
;;    // of string_To_Repeat appended to the end. Later on this allows us to
;;    // generate a line of output just by doing simple memory copies using an
;;    // appropriate offset into extended_String_To_Repeat.
;;    char extended_String_To_Repeat[string_To_Repeat_Length+MAXIMUM_LINE_WIDTH];
;;    for(intnative_t column=0; column<string_To_Repeat_Length+MAXIMUM_LINE_WIDTH;
;;      column++)
;;       extended_String_To_Repeat[column]=
;;         string_To_Repeat[column%string_To_Repeat_Length];
;;    intnative_t offset=0;

;;    char line[MAXIMUM_LINE_WIDTH+1];
;;    line[MAXIMUM_LINE_WIDTH]='\n';

;;    for(intnative_t current_Number_Of_Characters_To_Create=
;;      number_Of_Characters_To_Create;
;;      current_Number_Of_Characters_To_Create>0;){
;;       // Figure out the length of the line we need to write. If it's less than
;;       // MAXIMUM_LINE_WIDTH then we also need to add a line feed in the right
;;       // spot too.
;;       intnative_t line_Length=MAXIMUM_LINE_WIDTH;
;;       if(current_Number_Of_Characters_To_Create<MAXIMUM_LINE_WIDTH){
;;          line_Length=current_Number_Of_Characters_To_Create;
;;          line[line_Length]='\n';
;;       }

;;       memcpy(line, extended_String_To_Repeat+offset, line_Length);

;;       // Update the offset, reducing it by string_To_Repeat_Length if
;;       // necessary.
;;       offset+=line_Length;
;;       if(offset>string_To_Repeat_Length)
;;          offset-=string_To_Repeat_Length;

;;       // Output the line to stdout and update the
;;       // current_Number_Of_Characters_To_Create.
;;       fwrite(line, line_Length+1, 1, stdout);
;;       current_Number_Of_Characters_To_Create-=line_Length;
;;    }
;; }


;; // Generate a floating point pseudorandom number from 0.0 to max using a linear
;; // congruential generator.
;; #define IM      139968
;; #define IA      3877
;; #define IC      29573
;; #define SEED   42
;; static inline float get_LCG_Pseudorandom_Number(const float max){
;;    static uint32_t seed=SEED;
;;    seed=(seed*IA + IC)%IM;
;;    return max/IM*seed;
;; }


;; // Print a pseudorandom DNA sequence that is number_Of_Characters_To_Create
;; // characters long and made up of the nucleotides specified in
;; // nucleotides_Information and occurring at the frequencies specified in
;; // nucleotides_Information. The output is also wrapped to MAXIMUM_LINE_WIDTH
;; // columns.
;; static void generate_And_Wrap_Pseudorandom_DNA_Sequence(
;;   const nucleotide_info nucleotides_Information[],
;;   const intnative_t number_Of_Nucleotides,
;;   const intnative_t number_Of_Characters_To_Create){

;;    // Cumulate the probabilities. Note that the probability is being multiplied
;;    // by IM because later on we'll also be calling the random number generator
;;    // with a value that is multiplied by IM. Since the random number generator
;;    // does a division by IM this allows the compiler to cancel out the
;;    // multiplication and division by IM with each other without requiring any
;;    // changes to the random number generator code whose code was explicitly
;;    // defined in the rules.
;;    float cumulative_Probabilities[number_Of_Nucleotides],
;;      cumulative_Probability=0.0;
;;    for(intnative_t i=0; i<number_Of_Nucleotides; i++){
;;       cumulative_Probability+=nucleotides_Information[i].probability;
;;       cumulative_Probabilities[i]=cumulative_Probability*IM;
;;    }

;;    char line[MAXIMUM_LINE_WIDTH+1];
;;    line[MAXIMUM_LINE_WIDTH]='\n';

;;    for(intnative_t current_Number_Of_Characters_To_Create=
;;      number_Of_Characters_To_Create;
;;      current_Number_Of_Characters_To_Create>0;){
;;       // Figure out the length of the line we need to write. If it's less than
;;       // MAXIMUM_LINE_WIDTH then we also need to add a line feed in the right
;;       // spot too.
;;       intnative_t line_Length=MAXIMUM_LINE_WIDTH;
;;       if(current_Number_Of_Characters_To_Create<MAXIMUM_LINE_WIDTH){
;;          line_Length=current_Number_Of_Characters_To_Create;
;;          line[line_Length]='\n';
;;       }

;;       // Fill up the line with characters from nucleotides_Information[] that
;;       // are selected by looking up a pseudorandom number.
;;       for(intnative_t column=0; column<line_Length; column++){
;;          const float r=get_LCG_Pseudorandom_Number(IM);

;;          // Count the number of nucleotides with a probability less than what
;;          // was selected by the random number generator and then use that
;;          // count as an index for the nucleotide to select. It's arguable
;;          // whether this qualifies as a linear search but I guess you can say
;;          // that you're doing a linear search for all the nucleotides with a
;;          // probability less than what was selected by the random number
;;          // generator and then just counting how many matches were found.
;;          // With a small number of nucleotides this can be faster than doing
;;          // a more normal linear search (although in some cases it may
;;          // generate different results) and a couple of the other programs
;;          // already do this as well so we will too.
;;          intnative_t count=0;
;;          for(intnative_t i=0; i<number_Of_Nucleotides; i++)
;;             if(cumulative_Probabilities[i]<=r)
;;                count++;

;;          line[column]=nucleotides_Information[count].letter;
;;       }

;;       // Output the line to stdout and update the
;;       // current_Number_Of_Characters_To_Create.
;;       fwrite(line, line_Length+1, 1, stdout);
;;       current_Number_Of_Characters_To_Create-=line_Length;
;;    }
;; }


;; int main(int argc, char ** argv){
;;    const intnative_t n=atoi(argv[1]);

;;    fputs(">ONE Homo sapiens alu\n", stdout);
;;    const char homo_Sapiens_Alu[]=
;;      "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTC"
;;      "AGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCG"
;;      "TGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGG"
;;      "AGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA";
;;    repeat_And_Wrap_String(homo_Sapiens_Alu, 2*n);

;;    fputs(">TWO IUB ambiguity codes\n", stdout);
;;    nucleotide_info iub_Nucleotides_Information[]={
;;      {'a', 0.27}, {'c', 0.12}, {'g', 0.12}, {'t', 0.27}, {'B', 0.02},
;;      {'D', 0.02}, {'H', 0.02}, {'K', 0.02}, {'M', 0.02}, {'N', 0.02},
;;      {'R', 0.02}, {'S', 0.02}, {'V', 0.02}, {'W', 0.02}, {'Y', 0.02}};
;;    generate_And_Wrap_Pseudorandom_DNA_Sequence(iub_Nucleotides_Information,
;;      sizeof(iub_Nucleotides_Information)/sizeof(nucleotide_info), 3*n);

;;    fputs(">THREE Homo sapiens frequency\n", stdout);
;;    nucleotide_info homo_Sapien_Nucleotides_Information[]={
;;      {'a', 0.3029549426680}, {'c', 0.1979883004921},
;;      {'g', 0.1975473066391}, {'t', 0.3015094502008}};
;;    generate_And_Wrap_Pseudorandom_DNA_Sequence(
;;      homo_Sapien_Nucleotides_Information,
;;      sizeof(homo_Sapien_Nucleotides_Information)/sizeof(nucleotide_info), 5*n);

;;    return 0;
;; }

(bind-val stdout i8*)

(bind-val MAXIMUM_LINE_WIDTH i64 60)
(bind-val IM i32 139968)
(bind-val IA i32 3877)
(bind-val IC i32 29573)
(bind-val SEED i32 42)

(bind-type nucleotide_info <i8,float>)

(bind-func repeat_And_Wrap_String:[void,i8*,i64]*
  (let ((line:|61,i8|* (alloc)))
    (lambda (string_To_Repeat number_Of_Characters_To_Create)
      (let ((string_To_Repeat_Length (strlen string_To_Repeat))
            (extended_String_To_Repeat:i8* (salloc (+ string_To_Repeat_Length MAXIMUM_LINE_WIDTH)))
            (column 0) (offset 0) (line_Length 0)
            (current_Number_Of_Characters_To_Create number_Of_Characters_To_Create))
        (dotimes (column (+ string_To_Repeat_Length MAXIMUM_LINE_WIDTH))
          (pset! extended_String_To_Repeat column
                 (pref string_To_Repeat (% column string_To_Repeat_Length))))
        (aset! line MAXIMUM_LINE_WIDTH #o012)

        (while (> current_Number_Of_Characters_To_Create 0)
          (set! line_Length MAXIMUM_LINE_WIDTH)
          (if (< current_Number_Of_Characters_To_Create MAXIMUM_LINE_WIDTH)
              (begin
                (set! line_Length current_Number_Of_Characters_To_Create)
                (aset! line line_Length #o012)))
          (memcpy (cast line) (pref-ptr extended_String_To_Repeat offset) line_Length)
          (set! offset (+ offset line_Length))
          (if (> offset string_To_Repeat_Length)
              (set! offset (- offset string_To_Repeat_Length)))
          (fwrite (cast line) (+ 1 line_Length) 1 stdout)
          (set! current_Number_Of_Characters_To_Create (- current_Number_Of_Characters_To_Create line_Length)))
        void))))

(bind-func get_LCG_Pseudorandom_Number
  (let ((seed 42))
    (lambda (max:float)
      (set! seed (% (+ (* seed 3877) 29573) IM))
      (* (/ max (i32tof IM)) (i32tof seed)))))


(bind-func generate_And_Wrap_Pseudorandom_DNA_Sequence
  (let ((line:|61,i8|* (alloc))
        (cumulative_Probability 0.0:f) (i 0)
        (line_Length 0) (column 0) (r 0.0:f)
        (count 0))
    (lambda (nucleotides_Information:nucleotide_info* number_Of_Nucleotides:i64 number_Of_Characters_To_Create:i64)
      (set! cumulative_Probability 0.0:f)
      (let ((cumulative_Probabilities:float* (salloc number_Of_Nucleotides))
            (current_Number_Of_Characters_To_Create number_Of_Characters_To_Create)
            (IMf (i32tof IM)))
        (dotimes (i number_Of_Nucleotides)
          (set! cumulative_Probability (+ cumulative_Probability (tref (pref-ptr nucleotides_Information i) 1)))
          (pset! cumulative_Probabilities i (* IMf cumulative_Probability)))
        (aset! line MAXIMUM_LINE_WIDTH #o012)
        (while (> current_Number_Of_Characters_To_Create 0)
          (set! line_Length MAXIMUM_LINE_WIDTH)
          (if (< current_Number_Of_Characters_To_Create MAXIMUM_LINE_WIDTH)
              (begin
                (set! line_Length current_Number_Of_Characters_To_Create)
                (aset! line line_Length #o012)))
          (dotimes (column line_Length)
            (set! r (get_LCG_Pseudorandom_Number IMf))
            (set! count 0)
            (dotimes (i number_Of_Nucleotides)
              (if (<= (pref cumulative_Probabilities i) r)
                  (set! count (+ count 1))))
            (aset! line column (tref (pref-ptr nucleotides_Information count) 0)))
          (fwrite (cast line) (+ line_Length 1) 1 stdout)
          (set! current_Number_Of_Characters_To_Create (- current_Number_Of_Characters_To_Create line_Length))))
      void)))

(bind-val homo_Sapiens_Alu i8*)
(bind-val iub_Nucleotides_Information nucleotide_info*)
(bind-val homo_Sapien_Nucleotides_Information nucleotide_info*)

(bind-func init_globals
  (lambda ()
    (let ((info1:nucleotide_info* (halloc 15))
          (info2:nucleotide_info* (halloc 4)))
      (set! homo_Sapiens_Alu "GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGGGAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGACCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAATACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCAGCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGGAGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCCAGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA")
      (set! iub_Nucleotides_Information info1)
      (set! homo_Sapien_Nucleotides_Information info2)
      (tfill! (pref-ptr iub_Nucleotides_Information 0) #o141 0.27)
      (tfill! (pref-ptr iub_Nucleotides_Information 1) #o143 0.12)
      (tfill! (pref-ptr iub_Nucleotides_Information 2) #o147 0.12)
      (tfill! (pref-ptr iub_Nucleotides_Information 3) #o164 0.27)
      (tfill! (pref-ptr iub_Nucleotides_Information 4) #o102 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 5) #o104 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 6) #o110 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 7) #o112 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 8) #o115 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 9) #o116 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 10) #o122 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 11) #o123 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 12) #o126 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 13) #o127 0.02)
      (tfill! (pref-ptr iub_Nucleotides_Information 14) #o131 0.02)

      (tfill! (pref-ptr homo_Sapien_Nucleotides_Information 0) #o141 0.3029549426680)
      (tfill! (pref-ptr homo_Sapien_Nucleotides_Information 1) #o143 0.1979883004921)
      (tfill! (pref-ptr homo_Sapien_Nucleotides_Information 2) #o147 0.1975473066391)
      (tfill! (pref-ptr homo_Sapien_Nucleotides_Information 3) #o164 0.3015094502008)

      (set! stdout (fdopen 1 "w"))
      void)))

(bind-func main
  (lambda (n)
    (println ">ONE Homo sapiens alu")
    (repeat_And_Wrap_String homo_Sapiens_Alu (* 2 n))
    (println ">TWO IUB ambiguity codes")
    (generate_And_Wrap_Pseudorandom_DNA_Sequence iub_Nucleotides_Information 15 (* 3 n))
    (println ">THREE Homo sapiens frequency")
    (generate_And_Wrap_Pseudorandom_DNA_Sequence homo_Sapien_Nucleotides_Information 4 (* 5 n))
    void))

(init_globals)

(let ((t1 (clock:clock))
      (t2 0)
      (n 25000000))
  (main n)
  (set! t2 (clock:clock))
  (println "----------------")
  (println "FINISHED: " n)
  (println (- t2 t1)))

(quit 0)
