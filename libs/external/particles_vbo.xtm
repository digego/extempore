;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; an Incredibly Simple Particle System (VBO/GLSL based)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; lib-loading config
(sys:load-preload-check 'particles_vbo)
(define *xtmlib-particles_vbo-loaded* #t)

;; vert shader
(define particles-vert
"// VERTEX SHADER
// GLSL 1.2 compatible

//varying vec2 TexCoord;

attribute vec2 myVertex;
attribute vec4 myColour;
attribute float mySize;
attribute vec2 myVelocity;
attribute float myState;

void main() {
   gl_PointSize = mySize;
   if(myState > 0.0) {
     gl_FrontColor = myColour;
   }else{
     gl_FrontColor = vec4(0.0,0.0,0.0,0.0);
   }
   gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * vec4(myVertex.xy,0.0,1.0);
   //TexCoord = gl_MultiTexCoord0.st;
}")

(define particles-frag
"//  FRAGMENT SHADER
// #version 330

#version 120

#extension GL_ARB_texture_rectangle : disable

uniform sampler2D tex1;

//varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2D(tex1,gl_PointCoord)*gl_Color;
   //gl_FragColor = gl_Color;
}")


;; 0 1 2 3 4 5 6    7         8         9
;; x,y,r,g,b,a,size,xvelocity,yvelocity,state
(bind-type particle_t <float,float,float,float,float,float,float,float,float,i32>)
(bind-type psystem <i32,i32,particle_t*,E_vbo*>)

(bind-val particle_shader i32 (create_shader particles-vert particles-frag 0 0))

;; create system
(bind-func psystem_create
  (lambda (number:i32 texture_id)
    (let ((psys:psystem* (halloc))
          (particles:particle_t* (halloc number))
          (vbo (create_vbo (* number 40) (cast particles i8*) GL_STREAM_DRAW)))
      (tfill! psys number texture_id particles vbo)
      psys)))

;; destroy system
(bind-func psystem_destroy
  (lambda (psys:psystem*)
    ;; should destroy vbo also!!
    (free (tref psys 2))
    (free psys)
    void))


(bind-func psystem-set-particle
  (lambda (psys:psystem* idx:i32 x y s xx yy r g b a state)
    (let ((size (tref psys 0))
          (free-particle idx))
      (if (or (< idx 0)
              (> idx size))
          void
          (let ((particle (pref-ptr (tref psys 2) idx)))
            (tfill! particle x y r b g a s xx yy state)
            void)))))


;; draw system
(bind-func psystem_draw
  (let ((my_vertex:i32 -1)
        (my_colour:i32 -1)
        (my_velocity:i32 -1)
        (my_state:i32 -1)
        (my_size:i32 -1))
    (lambda (psys:psystem*)
      (let ((i 0)
            (size (tref psys 0))
            (texid (tref psys 1))
            ;; (data (tref psys 2))
            (vbo (tref psys 3))
            (cnt 0))
        (if (= my_vertex -1)
            (begin
              (set! my_vertex (glGetAttribLocation particle_shader "myVertex"))
              (set! my_colour (glGetAttribLocation particle_shader "myColour"))
              (set! my_size (glGetAttribLocation particle_shader "mySize"))
              (set! my_velocity (glGetAttribLocation particle_shader "myVelocity"))
              (set! my_state (glGetAttribLocation particle_shader "myState"))))

        ;; (printf "%d,%d,%d,%d,%d\n" my_vertex my_colour my_velocity my_state my_size)
        (glEnable GL_BLEND)
        (glDisable GL_DEPTH_TEST)
        (glDepthMask GL_FALSE)
        (glBlendFunc GL_SRC_ALPHA GL_ONE)

        (glEnable GL_POINT_SPRITE)
        (glEnable GL_VERTEX_PROGRAM_POINT_SIZE)

        ;; (glDisable GL_DEPTH_TEST)
        ;; (glDepthMask GL_FALSE)

        (glUseProgram particle_shader)

        ;; (printf "shader errors: %d\n" (glGetError))

        ;; vbo stuff
        (glBindBuffer GL_ARRAY_BUFFER (tref vbo 0))
        ;;(glBufferData GL_ARRAY_BUFFER (convert (tref vbo 1)) (tref vbo 2) GL_STREAM_DRAW)
        (glBufferSubData GL_ARRAY_BUFFER 0 (convert (tref vbo 1)) (tref vbo 2))

        (glEnableVertexAttribArray my_vertex)
        ;; (printf "%d\n" (glGetAttribLocation particle_shader "myPointSize"))
        (glVertexAttribPointer my_vertex 2 GL_FLOAT GL_FALSE 40 null) ;(pref-ptr (cast null i8*) 0))

        (glEnableVertexAttribArray my_colour)
        (glVertexAttribPointer my_colour 4 GL_FLOAT GL_FALSE 40 (pref-ptr (cast null i8*) 8))

        (glEnableVertexAttribArray my_size)
        (glVertexAttribPointer my_size 1 GL_FLOAT GL_FALSE 40 (pref-ptr (cast null i8*) 24))

        (if (> my_velocity -1)
            (begin
              (glEnableVertexAttribArray my_velocity)
              (glVertexAttribPointer my_velocity 2 GL_FLOAT GL_FALSE 40 (pref-ptr (cast null i8*) 28))))

        (if (> my_state -1)
            (begin
              (glEnableVertexAttribArray my_state)
              (glVertexAttribPointer my_state 1 GL_INT GL_FALSE 40 (pref-ptr (cast null i8*) 36))))

        ;; (printf "vbo errors: %s\n" (gluErrorString (glGetError)))

        (glActiveTexture GL_TEXTURE0)
        (glDisable GL_TEXTURE_RECTANGLE_ARB)
        (glEnable GL_TEXTURE_2D)

        (glBindTexture GL_TEXTURE_2D texid)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
        (glTexEnvi GL_POINT_SPRITE GL_COORD_REPLACE 1)
        (glUniform1i (glGetUniformLocation particle_shader "tex1") 0)

        (glDrawArrays GL_POINTS 0 size)

        (glActiveTexture GL_TEXTURE0)
        (glBindTexture GL_TEXTURE_2D 0)
        (glDisable GL_TEXTURE_2D)

        (glDisableVertexAttribArray my_vertex)
        (glDisableVertexAttribArray my_colour)
        (glDisableVertexAttribArray my_size)
        (if (> my_velocity -1)
            (glDisableVertexAttribArray my_velocity))
        (if (> my_state -1)
            (glDisableVertexAttribArray my_state))

        (glBindBuffer GL_ARRAY_BUFFER 0)
        (glDisable GL_VERTEX_PROGRAM_POINT_SIZE)
        (glDisable GL_POINT_SPRITE)
        (glDisable GL_VERTEX_PROGRAM_POINT_SIZE)


        (glDisable GL_BLEND)
        (glEnable GL_DEPTH_TEST)
        (glDepthMask GL_TRUE)

        (let ((glErr (glGetError)))
          (if (<>  glErr GL_NO_ERROR)
              (printf "final errors: %s\n" (gluErrorString glErr))))

        1))))


;; subtract 1 from state
;; updates x,y position from xv,yv
(bind-func psystem_update
  (lambda (psys:psystem*)
    (let ((particle:particle_t* null)
          (particles (tref psys 2))
          (i:i32 0)
          (active:i64 0)
          (size (tref psys 0)))
      (dotimes (i size)
        (set! particle (pref-ptr particles i))
        (if (> (tref particle 9) 0)
            (begin (set! active (+ active 1))
                   (tset! particle 9 (- (tref particle 9) 1))
                   (tset! particle 0 (+ (tref particle 0)
                                        (tref particle 7)))
                   (tset! particle 1 (+ (tref particle 1)
                                        (tref particle 8)))
                   1)))
      active)))
