;; passing a length of 0 will read the whole file
(define-macro (set-sampler-index inst fname index offset lgth bank print?)
  `(let* ((native ,inst))
     (if (and (cptr? native)
              (> ,index 0)
              (< ,index 128))
         (set_sample_data_ native
                           ,fname
                           (real->integer ,index)
                           (real->integer ,offset)
                           (real->integer ,lgth)
                           (real->integer ,bank)
                           ,(if (> print? 0) 1 0)))))


(define-macro (load-sample inst fname index . bank)
  (if (null? bank)
      `(set-sampler-index ,inst ,fname ,index 0 0 0 0)
      `(set-sampler-index ,inst ,fname ,index 0 0 ,(car bank) 0)))

;; (set-sample-offset sampler 60 50000)
;; this would offset the sample at index 60 by 50000 samples
(define-macro (set-sample-offset inst index offset)
  `(let ((native ,inst)) ;;(llvm:get-native-closure ,(impc:ti:get-mono-name (symbol->string inst)))))
     (if (cptr? native)
         (set_sample_offset_ native
                             (real->integer ,index)
                             (real->integer ,offset)))))

;; must be stereo samples of type wav aif or ogg
(define-macro (load-sampler sampler path . args)
  (let ((bank (if (> (length args) 0) (car args) 0))
        (parser (if (> (length args) 1) (cadr args) 'parse-sample-names))
        (midioffset (if (> (length args) 2) (caddr args) 0)))
    `(let ((cnt 0)
           (file-list (sys:directory-list (sys:expand-path ,path))))
       (for-each (lambda (samp-data)
                   (if samp-data
                       (begin
                         (set! cnt (+ cnt 1))
                         (set-sampler-index ,sampler
                                            (if (string=? (sys:platform) "Windows")
                                                (car samp-data)
                                                (string-append (sys:expand-path ,path) "/" (car samp-data)))
                                            (+ ,midioffset (cadr samp-data))
                                            (caddr samp-data)
                                            (cadddr samp-data)
                                            ,bank
                                            0))))
                 (,parser file-list))
       (ascii-print-color 0 6 9)
       (print 'Loaded cnt 'files 'into 'bank#: ,bank)
       (ascii-print-color 0 7 9)
       (println)
       )))

(define load-samples load-sampler)

(define-macro (clear-sampler sampler . args)
  (let ((bank (if (> (length args) 0) (car args) 0)))
    `(let ((native ,sampler) ;(llvm:get-native-closure ,(impc:ti:get-mono-name (symbol->string sampler))))
           (cnt 0))
       (dotimes (i 128)
         (if (> (clear_sample_data_ native (real->integer i) (real->integer ,bank)) 0)
             (set! cnt (+ cnt 1))))
       (ascii-print-color 0 6 9)
       (print 'Cleared cnt 'slots 'from 'bank#: ,bank)
       (ascii-print-color 0 7 9)
       (println)
       #t)))



;; as a start, here are a couple of parser functions which might be useful:

(define note-name-to-midi-number
  (lambda (name)
    (let ((result (regex:matched name "([abcdefgABCDEFG])([#b])?(-?[0-9])")))
        (if (null? result)
            #f
            (let ((offset (+ 12 (* (string->number (cadddr result)) 12)))
                  (pc (case (modulo (- (modulo (char->integer (car (string->list (cadr result)))) 16) 3) 7)
                        ((0) 0) ((1) 2) ((2) 4) ((3) 5) ((4) 7) ((5) 9) ((6) 11))))
              (+ offset pc
                 (cond ((string=? (caddr result) "#") 1)
                       ((string=? (caddr result) "b") -1)
                       (else 0))))))))

;; this will match e.g. 60.aiff (where 60 is the midi note number)
(define parse-sample-names-1
  (lambda (file-list)
    (map (lambda (fname)
           (let ((result (regex:matched fname "([0-9]*)\.(wav|WAV|aif|AIF|aiff|AIFF|ogg|OGG)$")))
             (if (null? result)
                 (begin (if (not (regex:match? fname "^\\."))
                            (println 'Error: 'cannot 'parse 'filename: fname))
                        #f)
                 (list fname                          ; filename
                       (string->number (cadr result)) ; midi note number
                       0                              ; offset
                       0))))                          ; length (0 for whole sample)
         file-list)))

;; this will match e.g. Eb3.aiff (representing E flat 3)
(define parse-sample-names-2
  (lambda (file-list)
    (map (lambda (fname)
           (let ((result (regex:matched fname "^.*?[-_[:space:]]([abcdefgABCDEFG][#b]?[0-9])[^0-9A-Za-z].*(wav|WAV|aif|AIF|aiff|AIFF|ogg|OGG)$")))
             ;; (println fname ":" result)
             (if (null? result)
                 (begin
                   (if (not (regex:match? fname "^\\."))
                       (begin
                         (println 'Error: 'cannot 'parse 'filename: fname)
                         (println 'Regex-result: result)))
                   #f)
                 (list fname                                    ; filename
                       (note-name-to-midi-number (cadr result)) ; midi note number
                       0                                        ; offset
                       0))))                                    ; length (0 for whole sample)
         file-list)))

(define parse-sample-names
  (lambda (file-list)
    (map (lambda (fname)
           (if (regex:match? fname "([0-9][0-9][0-9]*)\\.(wav|WAV|aif|AIF|aiff|AIFF|ogg|OGG)$")
               (car (parse-sample-names-1 (list fname)))
               (if (regex:match? fname "^.*?[-_[:space:]]([abcdefgABCDEFG][#b]?[0-9])[^0-9A-Za-z].*(wav|WAV|aif|AIF|aiff|AIFF|ogg|OGG)$")
                   (car (parse-sample-names-2 (list fname)))
                   #f)))
         file-list)))



;; for the MIS piano samples (mf loudness only), avaliable from
;; http://theremin.music.uiowa.edu/MISpiano.html
(define parse-MIS-piano-mf
  (lambda (file-list)
    (map (lambda (samp-data)
           (if (and samp-data
                    (regex:match? (car samp-data) ".*\.mf\..*"))
               samp-data
               #f))
         (parse-sample-names-2 file-list))))

(define parse-MIS-piano-ff
  (lambda (file-list)
    (map (lambda (samp-data)
           (if (and samp-data
                    (regex:match? (car samp-data) ".*\.ff\..*"))
               samp-data
               #f))
         (parse-sample-names-2 file-list))))


;; for NI Akoustik piano samples
;; Stein-R(A-1)-V(077)-dB(3129)-T(ML)-M(22)-P(1956-04-01).WAV
(define parse-NI-piano-pp
  (lambda (file-list)
    (let loop ((unparsed-files file-list)
               (samp-data-list '())
               (loaded-notes '()))
      (if (null? unparsed-files)
          samp-data-list
          (let ((result (regex:matched (car unparsed-files)
                                       ".*-R\\(([ABCDEFG][#b]?-?[0-9])\\)-.*-M\\(([0-9]*)\\)-.*")))
            (if (null? result)
                (loop (cdr unparsed-files) samp-data-list loaded-notes)
                (if (member (cadr result) loaded-notes)
                    (loop (cdr unparsed-files) samp-data-list loaded-notes)
                    (loop (cdr unparsed-files)
                          (cons (list (car unparsed-files)
                                      (+ 12 (note-name-to-midi-number (cadr result)))
                                      0 0)
                                samp-data-list)
                          (cons (cadr result) loaded-notes)))))))))


;; General MIDI drum note numbers

(define *gm-kick* 35)
(define *gm-kick-2* 36)
(define *gm-side-stick* 37)
(define *gm-snare* 38)
(define *gm-hand-clap* 39)
(define *gm-snare-2* 40)
(define *gm-low-floor-tom* 41)
(define *gm-closed-hi-hat* 42)
(define *gm-hi-floor-tom* 43)
(define *gm-pedal-hi-hat* 44)
(define *gm-low-tom* 45)
(define *gm-open-hi-hat* 46)
(define *gm-low-mid-tom* 47)
(define *gm-hi-mid-tom* 48)
(define *gm-crash* 49)
(define *gm-hi-tom* 50)
(define *gm-ride* 51)
(define *gm-chinese* 52)
(define *gm-ride-bell* 53)
(define *gm-tambourine* 54)
(define *gm-splash* 55)
(define *gm-cowbell* 56)
(define *gm-crash-2* 57)
(define *gm-vibraslap* 58)
(define *gm-ride-2* 59)
(define *gm-hi-bongo* 60)
(define *gm-low-bongo* 61)
(define *gm-mute-hi-conga* 62)
(define *gm-hi-conga* 63)
(define *gm-low-conga* 64)
(define *gm-hi-timbale* 65)
(define *gm-low-timbale* 66)
(define *gm-hi-agogo* 67)
(define *gm-low-agogo* 68)
(define *gm-cabasa* 69)
(define *gm-maracas* 70)
(define *gm-short-whistle* 71)
(define *gm-long-whistle* 72)
(define *gm-short-guiro* 73)
(define *gm-long-guiro* 74)
(define *gm-claves* 75)
(define *gm-hi-wood-block* 76)
(define *gm-low-wood-block* 77)
(define *gm-mute-cuica* 78)
(define *gm-open-cuica* 79)
(define *gm-mute-triangle* 80)
(define *gm-open-triangle* 81)
(define *gm-mute-surdo* 86)
(define *gm-open-surdo* 87)

(define *gm-drum-map-alist*
  '(("kick" . 35)
    ("kick-2" . 36)
    ("side-stick" . 37)
    ("snare" . 38)
    ("hand-clap" . 39)
    ("snare-2" . 40)
    ("low-floor-tom" . 41)
    ("closed-hi-hat" . 42)
    ("hi-floor-tom" . 43)
    ("pedal-hi-hat" . 44)
    ("low-tom" . 45)
    ("open-hi-hat" . 46)
    ("low-mid-tom" . 47)
    ("hi-mid-tom" . 48)
    ("crash" . 49)
    ("hi-tom" . 50)
    ("ride" . 51)
    ("chinese" . 52)
    ("ride-bell" . 53)
    ("tambourine" . 54)
    ("splash" . 55)
    ("cowbell" . 56)
    ("crash-2" . 57)
    ("vibraslap" . 58)
    ("ride-2" . 59)
    ("hi-bongo" . 60)
    ("low-bongo" . 61)
    ("mute-hi-conga" . 62)
    ("hi-conga" . 63)
    ("low-conga" . 64)
    ("hi-timbale" . 65)
    ("low-timbale" . 66)
    ("hi-agogo" . 67)
    ("low-agogo" . 68)
    ("cabasa" . 69)
    ("maracas" . 70)
    ("short-whistle" . 71)
    ("long-whistle" . 72)
    ("short-guiro" . 73)
    ("long-guiro" . 74)
    ("claves" . 75)
    ("hi-wood-block" . 76)
    ("low-wood-block" . 77)
    ("mute-cuica" . 78)
    ("open-cuica" . 79)
    ("mute-triangle" . 80)
    ("open-triangle" . 81)
    ("mute-surdo" . 86)
    ("open-surdo" . 87)))

