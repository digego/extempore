;;; instruments_ext-scm.xtm -- scheme helper functions for loading & playing samplers

;; Author: Anderw Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; A note on terms:

;; a "sampler" is the instrument
;; a "slot" is a single sound file (for playback with "play")
;; a "bank" is a group of (up to 128) "slots" in a given sampler instrument

;;; Code:

(define (sampler-populate-slot inst filename index offset lgth bank print?)
  (if (and (cptr? inst)
           (> index 0)
           (< index 128))
      (set_sample_data_ inst
                        filename
                        (real->integer index)
                        (real->integer offset)
                        (real->integer lgth)
                        (real->integer bank)
                        (if (> print? 0) 1 0))))

;; TODO - rename this to sampler-load-single or something (but check with SB
;; first that it's not gonna break his stuff in the middle of a gig)
(define (load-sample inst filename index . bank)
  (if (null? bank)
      (sampler-populate-slot inst filename index 0 0 0 0)
      (sampler-populate-slot inst filename index 0 0 (car bank) 0)))

;; (sampler-set-slot-offset sampler 60 50000)
;; this would offset the sample at index 60 by 50000 samples
(define (sampler-set-slot-offset inst index offset)
  (if (cptr? inst)
      (set_sample_offset_ inst
                          (real->integer ,index)
                          (real->integer ,offset))))

;; must be stereo samples of type wav aif or ogg
;; defaults: bank 0, parser sampler-parse-filename
(define (load-sampler sampler path . args)
  (let ((bank (if (> (length args) 0) (car args) 0))
        (filename-parser (if (> (length args) 1) (cadr args) sampler-parse-filename))
        (cnt 0))
    (for-each (lambda (filename)
                ;; skip hidden files... if you're using samples with hidden
                ;; filenames then I don't know what's wrong with you
                (if (not (regex:match? filename "^\\."))
                    ;; otherwise try and parse it with the filename-parser fn
                    (let ((samp-data (filename-parser filename)))
                      (if samp-data
                          (begin
                            (sampler-populate-slot sampler
                                                   (unix-or-Windows (string-append (sys:expand-path path) "/" (car samp-data))
                                                                    (car samp-data))
                                                   (cadr samp-data)
                                                   (caddr samp-data)
                                                   (cadddr samp-data)
                                                   bank
                                                   0)
                            (set! cnt (+ cnt 1)))))))
              (sys:directory-list (sys:expand-path path)))
    (log-info 'Loaded cnt 'files 'into 'bank bank)))

(define (clear-sampler sampler . args)
  (let ((bank (if (> (length args) 0) (car args) 0))
        (cnt 0))
    (dotimes (i 128)
      (if (> (clear_sample_data_ native (real->integer i) (real->integer bank)) 0)
          (set! cnt (+ cnt 1))))
    (log-info 'Cleared cnt 'slots 'from 'bank#: ,bank)
    (println)
    #t))

;; here are a couple of parser functions which might be useful:

;; https://en.wikipedia.org/wiki/Scientific_pitch_notation
;; e.g. Eb3.aiff -> E flat 3 (which is midi note 51)
(define scientific-pitch-notation-to-midi-number
  (lambda (name)
    (let ((result (regex:matched name "^([abcdefgABCDEFG])([#b])?(-?[0-9])$")))
      (if (null? result)
          #f
          (let ((offset (+ 12 (* (string->number (cadddr result)) 12)))
                (pc (case (modulo (- (modulo (char->integer (car (string->list (cadr result)))) 16) 3) 7)
                      ((0) 0) ((1) 2) ((2) 4) ((3) 5) ((4) 7) ((5) 9) ((6) 11))))
            (+ offset pc
               (cond ((string=? (caddr result) "#") 1)
                     ((string=? (caddr result) "b") -1)
                     (else 0))))))))

;; this will match e.g. 60.aiff (where 60 is the midi note number)
(define sampler-parse-midinote-filename
  (lambda (filename)
    (let ((result (regex:matched filename "([0-9]+?)\\.(wav|WAV|aif|AIF|aiff|AIFF|ogg|OGG)$")))
      (if (null? result)
          #f
          (list filename (string->number (cadr result)) 0 0)))))

;; match the first pitch (in scientific pitch notation) in the filename if you
;; need more subtlety (e.g. if there are multiple patterns which might be
;; matched) then supply a different parser function
(define sampler-parse-spn-filename
  (lambda (filename)
    (let ((result (regex:matched filename  "([abcdefgABCDEFG][#b]?-?[0-9]).*\\.(wav|WAV|aif|AIF|aiff|AIFF|ogg|OGG)$")))
      (if (null? result)
          #f
          (list filename (scientific-pitch-notation-to-midi-number (cadr result)) 0 0)))))

;; the "default" one, will try a few common naming conventions, and bail out
;; otherwise
(define sampler-parse-filename
  (lambda (filename)
    (or (sampler-parse-midinote-filename filename)
        (sampler-parse-spn-filename filename)
        #f)))

;; General MIDI drum note numbers

(define *gm-kick* 35)
(define *gm-kick-2* 36)
(define *gm-side-stick* 37)
(define *gm-snare* 38)
(define *gm-hand-clap* 39)
(define *gm-snare-2* 40)
(define *gm-low-floor-tom* 41)
(define *gm-closed-hi-hat* 42)
(define *gm-hi-floor-tom* 43)
(define *gm-pedal-hi-hat* 44)
(define *gm-low-tom* 45)
(define *gm-open-hi-hat* 46)
(define *gm-low-mid-tom* 47)
(define *gm-hi-mid-tom* 48)
(define *gm-crash* 49)
(define *gm-hi-tom* 50)
(define *gm-ride* 51)
(define *gm-chinese* 52)
(define *gm-ride-bell* 53)
(define *gm-tambourine* 54)
(define *gm-splash* 55)
(define *gm-cowbell* 56)
(define *gm-crash-2* 57)
(define *gm-vibraslap* 58)
(define *gm-ride-2* 59)
(define *gm-hi-bongo* 60)
(define *gm-low-bongo* 61)
(define *gm-mute-hi-conga* 62)
(define *gm-hi-conga* 63)
(define *gm-low-conga* 64)
(define *gm-hi-timbale* 65)
(define *gm-low-timbale* 66)
(define *gm-hi-agogo* 67)
(define *gm-low-agogo* 68)
(define *gm-cabasa* 69)
(define *gm-maracas* 70)
(define *gm-short-whistle* 71)
(define *gm-long-whistle* 72)
(define *gm-short-guiro* 73)
(define *gm-long-guiro* 74)
(define *gm-claves* 75)
(define *gm-hi-wood-block* 76)
(define *gm-low-wood-block* 77)
(define *gm-mute-cuica* 78)
(define *gm-open-cuica* 79)
(define *gm-mute-triangle* 80)
(define *gm-open-triangle* 81)
(define *gm-mute-surdo* 86)
(define *gm-open-surdo* 87)

(define *gm-drum-map-alist*
  '(("kick" . 35)
    ("kick-2" . 36)
    ("side-stick" . 37)
    ("snare" . 38)
    ("hand-clap" . 39)
    ("snare-2" . 40)
    ("low-floor-tom" . 41)
    ("closed-hi-hat" . 42)
    ("hi-floor-tom" . 43)
    ("pedal-hi-hat" . 44)
    ("low-tom" . 45)
    ("open-hi-hat" . 46)
    ("low-mid-tom" . 47)
    ("hi-mid-tom" . 48)
    ("crash" . 49)
    ("hi-tom" . 50)
    ("ride" . 51)
    ("chinese" . 52)
    ("ride-bell" . 53)
    ("tambourine" . 54)
    ("splash" . 55)
    ("cowbell" . 56)
    ("crash-2" . 57)
    ("vibraslap" . 58)
    ("ride-2" . 59)
    ("hi-bongo" . 60)
    ("low-bongo" . 61)
    ("mute-hi-conga" . 62)
    ("hi-conga" . 63)
    ("low-conga" . 64)
    ("hi-timbale" . 65)
    ("low-timbale" . 66)
    ("hi-agogo" . 67)
    ("low-agogo" . 68)
    ("cabasa" . 69)
    ("maracas" . 70)
    ("short-whistle" . 71)
    ("long-whistle" . 72)
    ("short-guiro" . 73)
    ("long-guiro" . 74)
    ("claves" . 75)
    ("hi-wood-block" . 76)
    ("low-wood-block" . 77)
    ("mute-cuica" . 78)
    ("open-cuica" . 79)
    ("mute-triangle" . 80)
    ("open-triangle" . 81)
    ("mute-surdo" . 86)
    ("open-surdo" . 87)))
