;;; gstreamer.xtm -- Gstreamer library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libgstreamer, libglib

;;; Commentary:

;;

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/gstreamer.xtm" 'quiet))
(sys:load-preload-check 'gstreamer)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/external/glib.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet)
 (sys:load "libs/external/glib.xtm" 'quiet))

(impc:aot:insert-header "xtmgstreamer")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib gstlib
  (cond ((string=? (sys:platform) "OSX")
         "libgstreamer-1.0.dylib")
        ((string=? (sys:platform) "Linux")
         "libgstreamer-1.0.so")))

(impc:aot:import-ll "xtmgstreamer")

(define *xtmlib-gstreamer-loaded* #t)

(bind-alias GstState i32)
(bind-val GST_STATE_VOID_PENDING i32 0)
(bind-val GST_STATE_NULL i32 1)
(bind-val GST_STATE_READY i32 2)
(bind-val GST_STATE_PAUSED i32 3)
(bind-val GST_STATE_PLAYING i32 4)

(bind-alias GstSeekFlags i32)
(bind-val  GST_SEEK_FLAG_NONE		i32 0)
(bind-val  GST_SEEK_FLAG_FLUSH		i32 1)
(bind-val  GST_SEEK_FLAG_ACCURATE	i32 2)
(bind-val  GST_SEEK_FLAG_KEY_UNIT	i32 4)
(bind-val  GST_SEEK_FLAG_SEGMENT	i32 8)

(bind-alias GstSeekType i32)
(bind-val  GST_SEEK_TYPE_NONE		i32 0)
(bind-val  GST_SEEK_TYPE_CUR		i32 1)
(bind-val  GST_SEEK_TYPE_SET		i32 2)
(bind-val  GST_SEEK_TYPE_END		i32 3)

(bind-alias GstFormat i32)
(bind-val  GST_FORMAT_UNDEFINED i32  0 )
(bind-val  GST_FORMAT_DEFAULT   i32  1)
(bind-val  GST_FORMAT_BYTES     i32  2)
(bind-val  GST_FORMAT_TIME  i32  3)
(bind-val  GST_FORMAT_BUFFERS	i32  4)
(bind-val  GST_FORMAT_PERCENT	i32  5)

(bind-alias GstMessageType i32)
(bind-val  GST_MESSAGE_UNKNOWN           i32 0)
(bind-val  GST_MESSAGE_EOS               i32 1)
(bind-val  GST_MESSAGE_ERROR             i32 2)
(bind-val  GST_MESSAGE_WARNING           i32 4)
(bind-val  GST_MESSAGE_INFO              i32 8)
(bind-val  GST_MESSAGE_TAG               i32 16)
(bind-val  GST_MESSAGE_BUFFERING         i32 32)
(bind-val  GST_MESSAGE_STATE_CHANGED     i32 64)
(bind-val  GST_MESSAGE_STATE_DIRTY       i32 128)
(bind-val  GST_MESSAGE_STEP_DONE         i32 256)
(bind-val  GST_MESSAGE_CLOCK_PROVIDE     i32 512)
(bind-val  GST_MESSAGE_CLOCK_LOST        i32 1024)
(bind-val  GST_MESSAGE_NEW_CLOCK         i32 2048)
(bind-val  GST_MESSAGE_STRUCTURE_CHANGE  i32 4096)
(bind-val  GST_MESSAGE_STREAM_STATUS     i32 8192)
(bind-val  GST_MESSAGE_APPLICATION       i32 16384)
(bind-val  GST_MESSAGE_ELEMENT           i32 32768)
(bind-val  GST_MESSAGE_SEGMENT_START     i32 65536)
(bind-val  GST_MESSAGE_SEGMENT_DONE      i32 131072)
(bind-val  GST_MESSAGE_DURATION          i32 262144)
(bind-val  GST_MESSAGE_LATENCY           i32 524288)
(bind-val  GST_MESSAGE_ASYNC_START       i32 1048576)
(bind-val  GST_MESSAGE_ASYNC_DONE        i32 2097152)
(bind-val  GST_MESSAGE_REQUEST_STATE     i32 4194304)
(bind-val  GST_MESSAGE_STEP_START        i32 8388608)
(bind-val  GST_MESSAGE_QOS               i32 16777216)
(bind-val  GST_MESSAGE_PROGRESS          i32 33554432)

(bind-alias GstPadLinkReturn i32)
(bind-val  GST_PAD_LINK_OK               i32  0)
(bind-val  GST_PAD_LINK_WRONG_HIERARCHY  i32 -1)
(bind-val  GST_PAD_LINK_WAS_LINKED       i32 -2)
(bind-val  GST_PAD_LINK_WRONG_DIRECTION  i32 -3)
(bind-val  GST_PAD_LINK_NOFORMAT         i32 -4)
(bind-val  GST_PAD_LINK_NOSCHED          i32 -5)
(bind-val  GST_PAD_LINK_REFUSED          i32 -6)

(bind-alias GstStateChange i32) ;; enum
(bind-alias GstStateChangeReturn i32) ;; enum

(bind-alias GStaticRecMutex i8) ;; not really i8
(bind-alias GstBus i8) ;; not really i8
(bind-alias GstClock i8) ;; not really i8
(bind-alias GstClockTimeDiff i64)
(bind-alias GstElementFactory i8) ;; opaque struct
(bind-alias GstPipeline i8) ;; opaque struct
;;(bind-alias GstBin i8) ;; opaque struct
(bind-alias GstPad i8) ;; opaque struct
;(bind-alias GstObject i8) ;; opaque struct
(bind-alias GstEvent i8) ;; opaque struct
(bind-alias GstBufferPrivate i8) ;; opaque
(bind-alias GstClockTime i64)
(bind-alias GstCapsFlags i32)
(bind-alias GstMapFlags i32)

(bind-type GstElement <GStaticRecMutex*,GCond*,guint32,GstState,GstState,GstState,GstStateChangeReturn,GstBus*,GstClock*,GstClockTimeDiff,guint16,GList,guint16,GList,guint16,GList,guint32>)
(bind-type GstElementDetails <gchar*,gchar*,gchar*,gchar*>)
(bind-type GstStructure <GType,GQuark,gint,GArray*,gpointer>)
(bind-type GstObject <gint,GMutex*,gchar*,gchar*,GstObject*,guint32>)
;; (bind-type GstMiniObject <GTypeInstance,i32,i32,i8*>)
(bind-type GstMiniObject <GType,gint,gint,guint,i8*,i8*,i8*,guint,gpointer>)
(bind-type GstCaps <GType,gint,GstCapsFlags,i8*,|4,gpointer|>)
(bind-type GstBuffer <GstMiniObject,i8*,guint,GstClockTime,GstClockTime,GstCaps*,i64,i64,i8*,GFreeFunc,GstBuffer*,GstBufferPrivate*,gpointer>)
(bind-type GstBin <gint,GList*,guint32,GstBus*,GList*,gboolean,gboolean,gboolean,GstClock*,GstElement*>)
(bind-type GstMemory <GstMiniObject,i8*,GstMemory*,gsize,gsize,gsize,gsize>)
(bind-type GstMapInfo <GstMemory*,GstMapFlags,guint8,gsize,gsize>)

(bind-alias GstMiniObjectCopyFunction [GstMiniObject*,GstMiniObject*]*)
(bind-alias GstMiniObjectDisposeFunction [gboolean,GstMiniObject*]*)
(bind-alias GstMiniObjectFreeFunction [void,GstMiniObject*]*)

;; 3 message type
;; 4 time
;; 5 gst_object
;; 6 gst_structure
;;
;; I add the i32 padding at the END because sizeof reports 104 (I Don't know why!)
;;(bind-type GstMessage <GstMiniObject,GMutex*,GCond*,GstMessageType,guint64,GstObject*,GstStructure*,|4,gpointer|,i32>)
;; miniobj(0) type(1) timestamp(2) src(3) seqnum(4) lock(5) cond(6)
(bind-type GstMessage <GstMiniObject,GstMessageType,guint64,GstObject*,guint32,GMutex,GCond>)

(bind-lib gstlib gst_version_string [gchar*]*)

;; gst object stuff
(bind-lib gstlib gst_object_get_type [GType]*)
(bind-lib gstlib gst_object_ref [gpointer,gpointer]*)
(bind-lib gstlib gst_object_unref [void,gpointer]*)
(bind-lib gstlib gst_object_ref_sink [void,gpointer]*)
;; (bind-lib gstlib gst_object_sink [void,gpointer]*) ;; missing in 1.0+?

(bind-lib gstlib gst_init [void,i32*,i8**]*)
(bind-lib gstlib gst_init_check [gboolean,i32*,i8**,GError**]*)
(bind-lib gstlib gst_is_initialized [gboolean]*)
(bind-lib gstlib gst_deinit [void]*)
(bind-lib gstlib gst_version [void,i32*,i32*,i32*,i32*]*)
(bind-lib gstlib gst_element_factory_make [GstElement*,gchar*,gchar*]*)
(bind-lib gstlib gst_element_factory_create [GstElement*,GstElementFactory*,gchar*]*)
(bind-lib gstlib gst_element_factory_find [GstElementFactory*,gchar*]*)

;; parse
(bind-lib gstlib gst_parse_launch [GstElement*,gchar*,GError*]*)

;; pipeline
(bind-lib gstlib gst_pipeline_new [GstElement*,gchar*]*)
(bind-lib gstlib gst_pipeline_get_bus [GstBus*,GstPipeline*]*)
(bind-lib gstlib gst_pipeline_set_clock [gboolean,GstPipeline*,GstClock*]*)

;; elements
(bind-lib gstlib gst_element_link [gboolean,GstElement*,GstElement*]*)
(bind-lib gstlib gst_element_link_pads [gboolean,GstElement*,gchar*,GstElement*,gchar*]*)
(bind-lib gstlib gst_element_unlink [void,GstElement*,GstElement*]*)
(bind-lib gstlib gst_element_add_pad [gboolean,GstElement*,GstPad*]*)
;; (bind-lib gstlib gst_element_get_pad [GstPad*,GstElement*,gchar*]*) ;; missing 1.0+
(bind-lib gstlib gst_element_set_state [GstStateChangeReturn,GstElement*,GstState]*)
(bind-lib gstlib gst_element_get_static_pad [GstPad*,GstElement*,gchar*]*)

;; bins
(bind-lib gstlib gst_bin_new [GstElement*,gchar*]*)
(bind-lib gstlib gst_bin_add [gboolean,GstBin*,GstElement*]*)
(bind-lib gstlib gst_bin_remove [gboolean,GstBin*,GstElement*]*)
(bind-lib gstlib gst_bin_get_by_name [GstElement*,GstBin*,gchar*]*)

;; buffer
(bind-lib gstlib gst_buffer_new [GstBuffer*]*)
(bind-lib gstlib gst_buffer_get_size [gsize,GstBuffer*]*)
;;(bind-lib gstlib gst_buffer_unref [void,GstBuffer*]*)
(bind-lib gstlib gst_buffer_map [gboolean,GstBuffer*,GstMapInfo*,GstMapFlags]*)
(bind-lib gstlib gst_buffer_extract [gsize,GstBuffer*,gsize,gpointer,gsize]*)
(bind-lib gstlib gst_buffer_fill [gsize,GstBuffer*,gsize,gpointer,gsize]*)
(bind-lib gstlib gst_buffer_memset [gsize,GstBuffer*,gsize,guint8,gsize]*)

;; buss
(bind-alias GstBusSyncReply i32) ;; enum
(bind-alias GstBusFunc [gboolean,GstBus*,GstMessage*,gpointer]*)
(bind-alias GstBusSyncHandler [GstBusSyncReply,GstBus*,GstMessage*,gpointer]*)

(bind-lib gstlib gst_bus_new [GstBus*]*)
(bind-lib gstlib gst_bus_post [gboolean,GstBus*,GstMessage*]*)
(bind-lib gstlib gst_bus_add_watch [guint,GstBus*,GstBusFunc,gpointer]*)

;; pads
(bind-lib gstlib gst_pad_link [GstPadLinkReturn,GstPad*,GstPad*]*)
(bind-lib gstlib gst_pad_unlink [gboolean,GstPad*,GstPad*]*)

;; ghost pad
(bind-lib gstlib gst_ghost_pad_new [GstPad*,gchar*,GstPad*]*)

;; events
(bind-lib gstlib gst_event_new_seek [GstEvent*,gdouble,GstFormat,GstSeekFlags,GstSeekType,gint64,GstSeekType,gint64]*)

;; messages
(bind-lib gstlib gst_message_parse_error [void,GstMessage*,GError**,gchar**]*)
(bind-lib gstlib gst_message_type_get_name [gchar*,GstMessageType]*)
(bind-lib gstlib gst_message_new_eos [GstMessage*,GstObject*]*)

;; gst caps and structure stuff
(bind-lib gstlib gst_caps_get_structure [GstStructure*,GstCaps*,guint]*)
(bind-lib gstlib gst_caps_to_string [gchar*,GstCaps*]*)
(bind-lib gstlib gst_caps_from_string [GstCaps*,gchar*]*)
(bind-lib gstlib gst_caps_new_empty_simple [GstCaps*,i8*]*)
;; (bind-lib gstlib gst_caps_unref [void,GstCaps*]*)
(bind-lib gstlib gst_structure_get_int [gboolean,GstStructure*,gchar*,gint*]*)
(bind-lib gstlib gst_structure_get_double [gboolean,GstStructure*,gchar*,gdouble*]*)
(bind-lib gstlib gst_structure_get_string [gchar*,GstStructure*,gchar*]*)
(bind-lib gstlib gst_structure_get_clock_time [gboolean,GstStructure*,gchar*,GstClockTime*]*)
(bind-lib gstlib gst_structure_get_value [GValue*,GstStructure*,gchar*]*)


;; gst value
(bind-lib gstlib gst_value_get_fraction_numerator [gint,GValue*]*)
(bind-lib gstlib gst_value_get_fraction_denominator [gint,GValue*]*)

;; gst mini object stuff NOT IN 1.0+?
;; (bind-lib gstlib gst_value_set_mini_object [void,GValue*,GstMiniObject*]*)
;; (bind-lib gstlib gst_value_take_mini_object [void,GValue*,GstMiniObject*]*)
;; (bind-lib gstlib gst_value_get_mini_object [GstMiniObject*,GValue*]*)
;; (bind-lib gstlib gst_value_dup_mini_object [GstMiniObject*,GValue*]*)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; GstApp src/sink stuff
;;

(bind-alias GstSample i8) ;; opaque
(bind-alias GstAppSink i8) ;; opaque
(bind-alias GstFlowReturn i32)
(bind-val GST_FLOW_OK i32 0)
(bind-val GST_FLOW_EOS i32 -3)
(bind-val GST_FLOW_NOT_NEGOTIATED i32 -4)
(bind-val GST_FLOW_ERROR i32 -5)
(bind-val GST_FLOW_NOT_SUPPORTED i32 -6)

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib gstapplib
  (cond ((string=? (sys:platform) "OSX")
         "libgstapp-1.0.dylib")
        ((string=? (sys:platform) "Linux")
         "libgstapp-1.0.so")))

;; (bind-type GstAppSinkCallbacks <[void,GstAppSink*,gpointer]*,[GstFlowReturn,GstAppSink*,gpointer]*,[GstFlowReturn,GstAppSink*,gpointer]*>)
(bind-type GstAppSinkCallbacks <i8*,i8*,i8*>) ;;[void,GstAppSink*,gpointer]*,[GstFlowReturn,GstAppSink*,gpointer]*,[GstFlowReturn,GstAppSink*,gpointer]*>)
(bind-lib gstapplib gst_app_sink_set_callbacks [void,GstAppSink*,GstAppSinkCallbacks*,gpointer,GDestroyNotify]*)
(bind-lib gstapplib gst_app_sink_pull_sample [GstSample*,GstAppSink*]*)
(bind-lib gstapplib gst_app_sink_pull_preroll [GstSample*,GstAppSink*]*)
(bind-lib gstapplib gst_app_sink_set_caps [void,GstSample*,GstCaps*]*)
(bind-lib gstapplib gst_app_sink_is_eos [gboolean,GstAppSink*]*)

(bind-lib gstapplib gst_sample_get_buffer [GstBuffer*,GstSample*]*)
(bind-lib gstapplib gst_sample_get_caps [GstCaps*,GstSample*]*)
(bind-lib gstapplib gst_sample_get_info [GstStructure*,GstSample*]*)

(define *xtmlib-gstreamer-loaded* #t)

(impc:aot:insert-footer "xtmgstreamer")
