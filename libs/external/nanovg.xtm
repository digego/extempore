;;; nanovg.xtm -- nanovg bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libnanovg

;;; Commentary:

;; if you've already tapped the benswift/extempore homebrew tap, then
;; you can install an Extempore-ready fork of nanovg with

;; brew install libnanovg

;; Otherwise, to build from source:

;; - get the source from https://github.com/extemporelang/nanovg
;; - premake4 gmake && cd build && make config=release nanovg

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/nanovg.xtm" 'quiet))
(sys:load-preload-check 'nanovg)
(define *xtmlib-nanovg-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/external/gl.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet)
 (sys:load "libs/external/gl.xtm" 'quiet))

(impc:aot:insert-header "xtmnanovg")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libnanovg
  (cond ((string=? (sys:platform) "OSX")
         "libnanovg.dylib")
        ((string=? (sys:platform) "Linux")
         "libnanovg.so")
        ((string=? (sys:platform) "Windows")
         "nanovg.dll"))
  "xtmnanovg")


(impc:aot:import-ll "xtmnanovg")

;;;;;;;;;;;;;;
;; nanovg.h ;;
;;;;;;;;;;;;;;

(bind-alias NVGcontext i8)

;; struct NVGcolor {
;;  union {
;;   float rgba[4];
;;   struct {
;;    float r,g,b,a;
;;   };
;;  };
;; };
(bind-type NVGcolor <float,float,float,float> (printer? . #f))

(bind-func print
  (lambda (color:NVGcolor*)
    (printf "<NVGcolor: r=%.3f, g=%.3f, b=%.3f, a=%.3f>"
            (convert (tref color 0) double)
            (convert (tref color 1) double)
            (convert (tref color 2) double)
            (convert (tref color 3) double))
    void))

(bind-func NVGcolor_hex
  "takes a 8-digit hex string (e.g. #x12ab3eff) and returns an NVGcolor

@param hex_value - should be RGBA, with two digits per channel.

@example
 (set! red   (NVGcolor_hex #xFF0000FF))
 (set! green (NVGcolor_hex #x00FF00FF))
 (set! blue  (NVGcolor_hex #x0000FFFF))"
  (lambda (hex_value:i64)
    (NVGcolor (/ (convert (>> (& hex_value #xFF000000) (* 4 6)) float) (convert #xFF float))
              (/ (convert (>> (& hex_value #x00FF0000) (* 4 4)) float) (convert #xFF float))
              (/ (convert (>> (& hex_value #x0000FF00) (* 4 2)) float) (convert #xFF float))
              (/ (convert (& hex_value #x000000FF) float) (convert #xFF float)))))

;; struct NVGpaint {
;;  float xform[6];
;;  float extent[2];
;;  float radius;
;;  float feather;
;;  NVGcolor innerColor;
;;  NVGcolor outerColor;
;;  int image;
;; };
(bind-type NVGpaint <|6,float|,|2,float|,float,float,NVGcolor,NVGcolor,i32> (printer? . #f))

(bind-func print
  (lambda (paint:NVGpaint*)
    (printf "<NVGpaint:\n    xform=|")
    (printf "%.3f " (convert (aref (tref paint 0) 0) double))
    (printf "%.3f " (convert (aref (tref paint 0) 1) double))
    (printf "%.3f " (convert (aref (tref paint 0) 2) double))
    (printf "%.3f " (convert (aref (tref paint 0) 3) double))
    (printf "%.3f " (convert (aref (tref paint 0) 4) double))
    (printf "%.3f|" (convert (aref (tref paint 0) 5) double))
    (printf "\n    extent=|%.3f %.3f|\n"
            (convert (aref (tref paint 1) 0) double)
            (convert (aref (tref paint 1) 1) double))
    (printf "    radius=%.3f\n    feather=%.3f\n"
            (convert (tref paint 2) double)
            (convert (tref paint 3) double))
    (printf "    innerColor=<NVGcolor: r=%.3f, g=%.3f, b=%.3f, a=%.3f>\n"
            (convert (tref (tref paint 4) 0) double)
            (convert (tref (tref paint 4) 1) double)
            (convert (tref (tref paint 4) 2) double)
            (convert (tref (tref paint 4) 3) double))
    (printf "    outerColor=<NVGcolor: r=%.3f, g=%.3f, b=%.3f, a=%.3f>\n"
            (convert (tref (tref paint 5) 0) double)
            (convert (tref (tref paint 5) 1) double)
            (convert (tref (tref paint 5) 2) double)
            (convert (tref (tref paint 5) 3) double))
    (printf "    image=%d>" (tref paint 6))
    void))


(bind-alias NVGwinding enum)
(bind-val NVG_CCW NVGwinding 1) ;; Winding for solid shapes
(bind-val NVG_CW NVGwinding 2) ;; Winding for holes


(bind-alias NVGsolidity enum)
(bind-val NVG_SOLID NVGsolidity 1)
(bind-val NVG_HOLE NVGsolidity 2)

(bind-alias NVGlineCap enum)
(bind-val NVG_BUTT NVGlineCap 0)
(bind-val NVG_ROUND NVGlineCap 1)
(bind-val NVG_SQUARE NVGlineCap 2)
(bind-val NVG_BEVEL NVGlineCap 3)
(bind-val NVG_MITER NVGlineCap 4)

(bind-alias NVGalign enum)
 ;; Horizontal align
(bind-val NVG_ALIGN_LEFT     NVGalign (<< 1 0)) ;; Default, align text horizontally to left.
(bind-val NVG_ALIGN_CENTER   NVGalign (<< 1 1)) ;; Align text horizontally to center.
(bind-val NVG_ALIGN_RIGHT    NVGalign (<< 1 2)) ;; Align text horizontally to right.
 ;; Vertical align
(bind-val NVG_ALIGN_TOP      NVGalign (<< 1 3)) ;; Align text vertically to top.
(bind-val NVG_ALIGN_MIDDLE   NVGalign (<< 1 4)) ;; Align text vertically to middle.
(bind-val NVG_ALIGN_BOTTOM   NVGalign (<< 1 5)) ;; Align text vertically to bottom.
(bind-val NVG_ALIGN_BASELINE NVGalign (<< 1 6)) ;; Default, align text vertically to baseline.


(bind-alias NVGblendFactor enum)
(bind-val NVG_ZERO enum (<< 1 0))
(bind-val NVG_ONE enum (<< 1 1))
(bind-val NVG_SRC_COLOR enum (<< 1 2))
(bind-val NVG_ONE_MINUS_SRC_COLOR enum (<< 1 3))
(bind-val NVG_DST_COLOR enum (<< 1 4))
(bind-val NVG_ONE_MINUS_DST_COLOR enum (<< 1 5))
(bind-val NVG_SRC_ALPHA enum (<< 1 6))
(bind-val NVG_ONE_MINUS_SRC_ALPHA enum (<< 1 7))
(bind-val NVG_DST_ALPHA enum (<< 1 8))
(bind-val NVG_ONE_MINUS_DST_ALPHA enum (<< 1 9))
(bind-val NVG_SRC_ALPHA_SATURATE enum (<< 1 10))

(bind-alias NVGcompositeOperation enum)
(bind-val NVG_SOURCE_OVER enum 0)
(bind-val NVG_SOURCE_IN enum 1)
(bind-val NVG_SOURCE_OUT enum 2)
(bind-val NVG_ATOP enum 3)
(bind-val NVG_DESTINATION_OVER enum 4)
(bind-val NVG_DESTINATION_IN enum 5)
(bind-val NVG_DESTINATION_OUT enum 6)
(bind-val NVG_DESTINATION_ATOP enum 7)
(bind-val NVG_LIGHTER enum 8)
(bind-val NVG_COPY enum 9)
(bind-val NVG_XOR enum 10)

(bind-type NVGcompositeOperationState <i32,i32,i32,i32>
"@member srcRGB - index 0
@member dstRGB - index 1
@member srcAlpha - index 2
@member dstAlpha - index 3")

(bind-lib libnanovg nvgGlobalCompositeOperation [void,NVGcontext*,i32]*
"@param ctx - index 0
@param op - index 1")
(bind-lib libnanovg nvgGlobalCompositeBlendFunc [void,NVGcontext*,i32,i32]*
"@param ctx - index 0
@param sfactor - index 1
@param dfactor - index 2")
(bind-lib libnanovg nvgGlobalCompositeBlendFuncSeparate [void,NVGcontext*,i32,i32,i32,i32]*
"@param ctx - index 0
@param srcRGB - index 1
@param dstRGB - index 2
@param srcAlpha - index 3
@param dstAlpha - index 4")

;; struct NVGglyphPosition {
;;  const char* str; ;; Position of the glyph in the input string.
;;  float x;   ;; The x-coordinate of the logical glyph position.
;;  float minx, maxx; ;; The bounds of the glyph shape.
;; };
(bind-type NVGglyphPosition <i8*,float,float,float>)

;; struct NVGtextRow {
;;  const char* start; ;; Pointer to the input text where the row starts.
;;  const char* end; ;; Pointer to the input text where the row ends (one past the last character).
;;  const char* next; ;; Pointer to the beginning of the next row.
;;  float width;  ;; Logical width of the row.
;;  float minx, maxx; ;; Actual bounds of the row. Logical with and bounds can differ because of kerning and some parts over extending.
;; };
(bind-type NVGtextRow <i8*,i8*,i8*,float,float,float>)

(bind-alias NVGimageFlags enum)
(bind-val NVG_IMAGE_GENERATE_MIPMAPS NVGimageFlags (<< 1 0)) ;; Generate mipmaps during creation of the image.
(bind-val NVG_IMAGE_REPEATX NVGimageFlags          (<< 1 1)) ;; Repeat image in X direction.
(bind-val NVG_IMAGE_REPEATY NVGimageFlags          (<< 1 2)) ;; Repeat image in Y direction.
(bind-val NVG_IMAGE_FLIPY NVGimageFlags            (<< 1 3)) ;; Flips (inverses) image in Y direction when rendered.
(bind-val NVG_IMAGE_PREMULTIPLIED NVGimageFlags    (<< 1 4)) ;; Image data has premultiplied alpha.

;; Begin drawing a new frame
;; Calls to nanovg drawing API should be wrapped in nvgBeginFrame() & nvgEndFrame()
;; nvgBeginFrame() defines the size of the window to render to in relation currently
;; set viewport (i.e. glViewport on GL backends). Device pixel ration allows to
;; control the rendering on Hi-DPI devices.
;; For example, GLFW returns two dimension for an opened window: window size and
;; frame buffer size. In that case you would set windowWidth/Height to the window size
;; devicePixelRatio to: frameBufferWidth / windowWidth.
(bind-lib libnanovg nvgBeginFrame [void,NVGcontext*,i32,i32,float]*)

;; Cancels drawing the current frame.
(bind-lib libnanovg nvgCancelFrame [void,NVGcontext*]*)

;; Ends drawing flushing remaining render state.
(bind-lib libnanovg nvgEndFrame [void,NVGcontext*]*)

;;
;; Color utils
;;
;; Colors in NanoVG are stored as unsigned ints in ABGR format.

;; Returns a color value from red, green, blue values. Alpha will be set to 255 (1.0f).
(bind-lib libnanovg nvgRGB [NVGcolor,i8,i8,i8]*)

;; Returns a color value from red, green, blue values. Alpha will be set to 1.0f.
(bind-lib libnanovg nvgRGBf [NVGcolor,float,float,float]*)


;; Returns a color value from red, green, blue and alpha values.
(bind-lib libnanovg nvgRGBA [NVGcolor,i8,i8,i8,i8]*)

;; Returns a color value from red, green, blue and alpha values.
(bind-lib libnanovg nvgRGBAf [NVGcolor,float,float,float,float]*)


;; Linearly interpolates from color c0 to c1, and returns resulting color value.
(bind-lib libnanovg nvgLerpRGBA [NVGcolor,NVGcolor,NVGcolor,float]*)

;; Sets transparency of a color value.
(bind-lib libnanovg nvgTransRGBA [NVGcolor,NVGcolor,i8]*)

;; Sets transparency of a color value.
(bind-lib libnanovg nvgTransRGBAf [NVGcolor,NVGcolor,float]*)

;; Returns color value specified by hue, saturation and lightness.
;; HSL values are all in range [0..1], alpha will be set to 255.
(bind-lib libnanovg nvgHSL [NVGcolor,float,float,float]*)

;; Returns color value specified by hue, saturation and lightness and alpha.
;; HSL values are all in range [0..1], alpha in range [0..255]
(bind-lib libnanovg nvgHSLA [NVGcolor,float,float,float,i8]*)

;;
;; State Handling
;;
;; NanoVG contains state which represents how paths will be rendered.
;; The state contains transform, fill and stroke styles, text and font styles,
;; and scissor clipping.

;; Pushes and saves the current render state into a state stack.
;; A matching nvgRestore() must be used to restore the state.
(bind-lib libnanovg nvgSave [void,NVGcontext*]*)

;; Pops and restores current render state.
(bind-lib libnanovg nvgRestore [void,NVGcontext*]*)

;; Resets current render state to default values. Does not affect the render state stack.
(bind-lib libnanovg nvgReset [void,NVGcontext*]*)

;;
;; Render styles
;;
;; Fill and stroke render style can be either a solid color or a paint which is a gradient or a pattern.
;; Solid color is simply defined as a color value, different kinds of paints can be created
;; using nvgLinearGradient(), nvgBoxGradient(), nvgRadialGradient() and nvgImagePattern().
;;
;; Current render style can be saved and restored using nvgSave() and nvgRestore().

;; Sets current stroke style to a solid color.
(bind-lib libnanovg nvgStrokeColor [void,NVGcontext*,NVGcolor*]*)

;; Sets current stroke style to a paint, which can be a one of the gradients or a pattern.
(bind-lib libnanovg nvgStrokePaint [void,NVGcontext*,NVGpaint*]*)

;; Sets current fill style to a solid color.
(bind-lib libnanovg nvgFillColor [void,NVGcontext*,NVGcolor*]*)

;; Sets current fill style to a paint, which can be a one of the gradients or a pattern.
(bind-lib libnanovg nvgFillPaint [void,NVGcontext*,NVGpaint*]*)

;; Sets the miter limit of the stroke style.
;; Miter limit controls when a sharp corner is beveled.
(bind-lib libnanovg nvgMiterLimit [void,NVGcontext*,float]*)

;; Sets the stroke width of the stroke style.
(bind-lib libnanovg nvgStrokeWidth [void,NVGcontext*,float]*)

;; Sets how the end of the line (cap) is drawn,
;; Can be one of: NVG_BUTT (default), NVG_ROUND, NVG_SQUARE.
(bind-lib libnanovg nvgLineCap [void,NVGcontext*,i32]*)

;; Sets how sharp path corners are drawn.
;; Can be one of NVG_MITER (default), NVG_ROUND, NVG_BEVEL.
(bind-lib libnanovg nvgLineJoin [void,NVGcontext*,i32]*)

;; Sets the transparency applied to all rendered shapes.
;; Already transparent paths will get proportionally more transparent as well.
(bind-lib libnanovg nvgGlobalAlpha [void,NVGcontext*,float]*)

;;
;; Transforms
;;
;; The paths, gradients, patterns and scissor region are transformed by an transformation
;; matrix at the time when they are passed to the API.
;; The current transformation matrix is a affine matrix:
;;   [sx kx tx]
;;   [ky sy ty]
;;   [ 0  0  1]
;; Where: sx,sy define scaling, kx,ky skewing, and tx,ty translation.
;; The last row is assumed to be 0,0,1 and is not stored.
;;
;; Apart from nvgResetTransform(), each transformation function first creates
;; specific transformation matrix and pre-multiplies the current transformation by it.
;;
;; Current coordinate system (transformation) can be saved and restored using nvgSave() and nvgRestore().

;; Resets current transform to a identity matrix.
(bind-lib libnanovg nvgResetTransform [void,NVGcontext*]*)

;; Premultiplies current coordinate system by specified matrix.
;; The parameters are interpreted as matrix as follows:
;;   [a c e]
;;   [b d f]
;;   [0 0 1]
(bind-lib libnanovg nvgTransform [void,NVGcontext*,float,float,float,float,float,float]*)

;; Translates current coordinate system.
(bind-lib libnanovg nvgTranslate [void,NVGcontext*,float,float]*)

;; Rotates current coordinate system. Angle is specified in radians.
(bind-lib libnanovg nvgRotate [void,NVGcontext*,float]*)

;; Skews the current coordinate system along X axis. Angle is specified in radians.
(bind-lib libnanovg nvgSkewX [void,NVGcontext*,float]*)

;; Skews the current coordinate system along Y axis. Angle is specified in radians.
(bind-lib libnanovg nvgSkewY [void,NVGcontext*,float]*)

;; Scales the current coordinate system.
(bind-lib libnanovg nvgScale [void,NVGcontext*,float,float]*)

;; Stores the top part (a-f) of the current transformation matrix in to the specified buffer.
;;   [a c e]
;;   [b d f]
;;   [0 0 1]
;; There should be space for 6 floats in the return buffer for the values a-f.
(bind-lib libnanovg nvgCurrentTransform [void,NVGcontext*,float*]*)


;; The following functions can be used to make calculations on 2x3 transformation matrices.
;; A 2x3 matrix is represented as float[6].

;; Sets the transform to identity matrix.
(bind-lib libnanovg nvgTransformIdentity [void,float*]*)

;; Sets the transform to translation matrix matrix.
(bind-lib libnanovg nvgTransformTranslate [void,float*,float,float]*)

;; Sets the transform to scale matrix.
(bind-lib libnanovg nvgTransformScale [void,float*,float,float]*)

;; Sets the transform to rotate matrix. Angle is specified in radians.
(bind-lib libnanovg nvgTransformRotate [void,float*,float]*)

;; Sets the transform to skew-x matrix. Angle is specified in radians.
(bind-lib libnanovg nvgTransformSkewX [void,float*,float]*)

;; Sets the transform to skew-y matrix. Angle is specified in radians.
(bind-lib libnanovg nvgTransformSkewY [void,float*,float]*)

;; Sets the transform to the result of multiplication of two transforms, of A = A*B.
(bind-lib libnanovg nvgTransformMultiply [void,float*,float*]*)

;; Sets the transform to the result of multiplication of two transforms, of A = B*A.
(bind-lib libnanovg nvgTransformPremultiply [void,float*,float*]*)

;; Sets the destination to inverse of specified transform.
;; Returns 1 if the inverse could be calculated, else 0.
(bind-lib libnanovg nvgTransformInverse [i32,float*,float*]*)

;; Transform a point by given transform.
(bind-lib libnanovg nvgTransformPoint [void,float*,float*,float*,float,float]*)

;; Converts degrees to radians and vice versa.
(bind-lib libnanovg nvgDegToRad [float,float]*)
(bind-lib libnanovg nvgRadToDeg [float,float]*)

;;
;; Images
;;
;; NanoVG allows you to load jpg, png, psd, tga, pic and gif files to be used for rendering.
;; In addition you can upload your own image. The image loading is provided by stb_image.
;; The parameter imageFlags is combination of flags defined in NVGimageFlags.

;; Creates image by loading it from the disk from specified file name.
;; Returns handle to the image.
(bind-lib libnanovg nvgCreateImage [i32,NVGcontext*,i8*,i32]*)

;; Creates image by loading it from the specified chunk of memory.
;; Returns handle to the image.
(bind-lib libnanovg nvgCreateImageMem [i32,NVGcontext*,i32,i8*,i32]*)

;; Creates image from specified image data.
;; Returns handle to the image.
(bind-lib libnanovg nvgCreateImageRGBA [i32,NVGcontext*,i32,i32,i32,i8*]*)

;; Updates image data specified by image handle.
(bind-lib libnanovg nvgUpdateImage [void,NVGcontext*,i32,i8*]*)

;; Returns the dimensions of a created image.
(bind-lib libnanovg nvgImageSize [void,NVGcontext*,i32,i32*,i32*]*)

;; Deletes created image.
(bind-lib libnanovg nvgDeleteImage [void,NVGcontext*,i32]*)

;;
;; Paints
;;
;; NanoVG supports four types of paints: linear gradient, box gradient, radial gradient and image pattern.
;; These can be used as paints for strokes and fills.

;; Creates and returns a linear gradient. Parameters (sx,sy)-(ex,ey) specify the start and end coordinates
;; of the linear gradient, icol specifies the start color and ocol the end color.
;; The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
(bind-lib libnanovg nvgLinearGradient [NVGpaint*,NVGcontext*,float,float,float,float,NVGcolor*,NVGcolor*]*)

;; Creates and returns a box gradient. Box gradient is a feathered rounded rectangle, it is useful for rendering
;; drop shadows or highlights for boxes. Parameters (x,y) define the top-left corner of the rectangle,
;; (w,h) define the size of the rectangle, r defines the corner radius, and f feather. Feather defines how blurry
;; the border of the rectangle is. Parameter icol specifies the inner color and ocol the outer color of the gradient.
;; The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
(bind-lib libnanovg nvgBoxGradient [NVGpaint*,NVGcontext*,float,float,float,float,float,float,NVGcolor*,NVGcolor*]*)

;; Creates and returns a radial gradient. Parameters (cx,cy) specify the center, inr and outr specify
;; the inner and outer radius of the gradient, icol specifies the start color and ocol the end color.
;; The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
(bind-lib libnanovg nvgRadialGradient [NVGpaint*,NVGcontext*,float,float,float,float,NVGcolor*,NVGcolor*]*)

;; Creates and returns an image patter. Parameters (ox,oy) specify the left-top location of the image pattern,
;; (ex,ey) the size of one image, angle rotation around the top-left corner, image is handle to the image to render.
;; The gradient is transformed by the current transform when it is passed to nvgFillPaint() or nvgStrokePaint().
(bind-lib libnanovg nvgImagePattern [NVGpaint*,NVGcontext*,float,float,float,float,float,i32,float]*)

;;
;; Scissoring
;;
;; Scissoring allows you to clip the rendering into a rectangle. This is useful for various
;; user interface cases like rendering a text edit or a timeline.

;; Sets the current scissor rectangle.
;; The scissor rectangle is transformed by the current transform.
(bind-lib libnanovg nvgScissor [void,NVGcontext*,float,float,float,float]*)

;; Intersects current scissor rectangle with the specified rectangle.
;; The scissor rectangle is transformed by the current transform.
;; Note: in case the rotation of previous scissor rect differs from
;; the current one, the intersection will be done between the specified
;; rectangle and the previous scissor rectangle transformed in the current
;; transform space. The resulting shape is always rectangle.
(bind-lib libnanovg nvgIntersectScissor [void,NVGcontext*,float,float,float,float]*)

;; Reset and disables scissoring.
(bind-lib libnanovg nvgResetScissor [void,NVGcontext*]*)

;;
;; Paths
;;
;; Drawing a new shape starts with nvgBeginPath(), it clears all the currently defined paths.
;; Then you define one or more paths and sub-paths which describe the shape. The are functions
;; to draw common shapes like rectangles and circles, and lower level step-by-step functions,
;; which allow to define a path curve by curve.
;;
;; NanoVG uses even-odd fill rule to draw the shapes. Solid shapes should have counter clockwise
;; winding and holes should have counter clockwise order. To specify winding of a path you can
;; call nvgPathWinding(). This is useful especially for the common shapes, which are drawn CCW.
;;
;; Finally you can fill the path using current fill style by calling nvgFill(), and stroke it
;; with current stroke style by calling nvgStroke().
;;
;; The curve segments and sub-paths are transformed by the current transform.

;; Clears the current path and sub-paths.
(bind-lib libnanovg nvgBeginPath [void,NVGcontext*]*)

;; Starts new sub-path with specified point as first point.
(bind-lib libnanovg nvgMoveTo [void,NVGcontext*,float,float]*)

;; Adds line segment from the last point in the path to the specified point.
(bind-lib libnanovg nvgLineTo [void,NVGcontext*,float,float]*)

;; Adds cubic bezier segment from last point in the path via two control points to the specified point.
(bind-lib libnanovg nvgBezierTo [void,NVGcontext*,float,float,float,float,float,float]*)

;; Adds quadratic bezier segment from last point in the path via a control point to the specified point.
(bind-lib libnanovg nvgQuadTo [void,NVGcontext*,float,float,float,float]*)

;; Adds an arc segment at the corner defined by the last path point, and two specified points.
(bind-lib libnanovg nvgArcTo [void,NVGcontext*,float,float,float,float,float]*)

;; Closes current sub-path with a line segment.
(bind-lib libnanovg nvgClosePath [void,NVGcontext*]*)

;; Sets the current sub-path winding, see NVGwinding and NVGsolidity.
(bind-lib libnanovg nvgPathWinding [void,NVGcontext*,i32]*)

;; Creates new circle arc shaped sub-path. The arc center is at cx,cy, the arc radius is r,
;; and the arc is drawn from angle a0 to a1, and swept in direction dir (NVG_CCW, or NVG_CW).
;; Angles are specified in radians.
(bind-lib libnanovg nvgArc [void,NVGcontext*,float,float,float,float,float,i32]*)

;; Creates new rectangle shaped sub-path.
(bind-lib libnanovg nvgRect [void,NVGcontext*,float,float,float,float]*)

;; Creates new rounded rectangle shaped sub-path.
(bind-lib libnanovg nvgRoundedRect [void,NVGcontext*,float,float,float,float,float]*)

(bind-lib libnanovg nvgRoundedRectVarying [void,NVGcontext*,float,float,float,float,float,float,float,float]*
"@param ctx - index 0
@param x - index 1
@param y - index 2
@param w - index 3
@param h - index 4
@param radTopLeft - index 5
@param radTopRight - index 6
@param radBottomRight - index 7
@param radBottomLeft - index 8")

;; Creates new ellipse shaped sub-path.
(bind-lib libnanovg nvgEllipse [void,NVGcontext*,float,float,float,float]*)

;; Creates new circle shaped sub-path.
(bind-lib libnanovg nvgCircle [void,NVGcontext*,float,float,float]*)

;; Fills the current path with current fill style.
(bind-lib libnanovg nvgFill [void,NVGcontext*]*)

;; Fills the current path with current stroke style.
(bind-lib libnanovg nvgStroke [void,NVGcontext*]*)


;;
;; Text
;;
;; NanoVG allows you to load .ttf files and use the font to render text.
;;
;; The appearance of the text can be defined by setting the current text style
;; and by specifying the fill color. Common text and font settings such as
;; font size, letter spacing and text align are supported. Font blur allows you
;; to create simple text effects such as drop shadows.
;;
;; At render time the font face can be set based on the font handles or name.
;;
;; Font measure functions return values in local space, the calculations are
;; carried in the same resolution as the final rendering. This is done because
;; the text glyph positions are snapped to the nearest pixels sharp rendering.
;;
;; The local space means that values are not rotated or scale as per the current
;; transformation. For example if you set font size to 12, which would mean that
;; line height is 16, then regardless of the current scaling and rotation, the
;; returned line height is always 16. Some measures may vary because of the scaling
;; since aforementioned pixel snapping.
;;
;; While this may sound a little odd, the setup allows you to always render the
;; same way regardless of scaling. I.e. following works regardless of scaling:
;;
;;  const char* txt = "Text me up.";
;;  nvgTextBounds(vg, x,y, txt, NULL, bounds);
;;  nvgBeginPath(vg);
;;  nvgRoundedRect(vg, bounds[0],bounds[1], bounds[2]-bounds[0], bounds[3]-bounds[1]);
;;  nvgFill(vg);
;;
;; Note: currently only solid color fill is supported for text.

;; Creates font by loading it from the disk from specified file name.
;; Returns handle to the font.
(bind-lib libnanovg nvgCreateFont [i32,NVGcontext*,i8*,i8*]*)

;; Creates image by loading it from the specified memory chunk.
;; Returns handle to the font.
(bind-lib libnanovg nvgCreateFontMem [i32,NVGcontext*,i8*,i8*,i32,i32]*)

;; Finds a loaded font of specified name, and returns handle to it, or -1 if the font is not found.
(bind-lib libnanovg nvgFindFont [i32,NVGcontext*,i8*]*)

;; Sets the font size of current text style.
(bind-lib libnanovg nvgFontSize [void,NVGcontext*,float]*)

;; Sets the blur of current text style.
(bind-lib libnanovg nvgFontBlur [void,NVGcontext*,float]*)

;; Sets the letter spacing of current text style.
(bind-lib libnanovg nvgTextLetterSpacing [void,NVGcontext*,float]*)

;; Sets the proportional line height of current text style. The line height is specified as multiple of font size.
(bind-lib libnanovg nvgTextLineHeight [void,NVGcontext*,float]*)

;; Sets the text align of current text style, see NVGalign for options.
(bind-lib libnanovg nvgTextAlign [void,NVGcontext*,i32]*)

;; Sets the font face based on specified id of current text style.
(bind-lib libnanovg nvgFontFaceId [void,NVGcontext*,i32]*)

;; Sets the font face based on specified name of current text style.
(bind-lib libnanovg nvgFontFace [void,NVGcontext*,i8*]*)

(bind-lib libnanovg nvgAddFallbackFontId [i32,NVGcontext*,i32,i32]*
  "@param ctx - index 0
@param baseFont - index 1
@param fallbackFont - index 2")

(bind-lib libnanovg nvgAddFallbackFont [i32,NVGcontext*,i8*,i8*]*
"@param ctx - index 0
@param baseFont - index 1
@param fallbackFont - index 2")

;; Draws text string at specified location. If end is specified only the sub-string up to the end is drawn.
(bind-lib libnanovg nvgText [float,NVGcontext*,float,float,i8*,i8*]*)

;; Draws multi-line text string at specified location wrapped at the specified width. If end is specified only the sub-string up to the end is drawn.
;; White space is stripped at the beginning of the rows, the text is split at word boundaries or when new-line characters are encountered.
;; Words longer than the max width are slit at nearest character (i.e. no hyphenation).
(bind-lib libnanovg nvgTextBox [void,NVGcontext*,float,float,float,i8*,i8*]*)

;; Measures the specified text string. Parameter bounds should be a pointer to float[4],
;; if the bounding box of the text should be returned. The bounds value are [xmin,ymin, xmax,ymax]
;; Returns the horizontal advance of the measured text (i.e. where the next character should drawn).
;; Measured values are returned in local coordinate space.
(bind-lib libnanovg nvgTextBounds [float,NVGcontext*,float,float,i8*,i8*,float*]*)

;; Measures the specified multi-text string. Parameter bounds should be a pointer to float[4],
;; if the bounding box of the text should be returned. The bounds value are [xmin,ymin, xmax,ymax]
;; Measured values are returned in local coordinate space.
(bind-lib libnanovg nvgTextBoxBounds [void,NVGcontext*,float,float,float,i8*,i8*,float*]*)

;; Calculates the glyph x positions of the specified text. If end is specified only the sub-string will be used.
;; Measured values are returned in local coordinate space.
(bind-lib libnanovg nvgTextGlyphPositions [i32,NVGcontext*,float,float,i8*,i8*,NVGglyphPosition*,i32]*)

;; Returns the vertical metrics based on the current text style.
;; Measured values are returned in local coordinate space.
(bind-lib libnanovg nvgTextMetrics [void,NVGcontext*,float*,float*,float*]*)

;; Breaks the specified text into lines. If end is specified only the sub-string will be used.
;; White space is stripped at the beginning of the rows, the text is split at word boundaries or when new-line characters are encountered.
;; Words longer than the max width are slit at nearest character (i.e. no hyphenation).
(bind-lib libnanovg nvgTextBreakLines [i32,NVGcontext*,i8*,i8*,float,NVGtextRow*,i32]*)

;;
;; Internal Render API
;;

(bind-alias NVGtexture enum)
(bind-val NVG_TEXTURE_ALPHA NVGtexture #x01)
(bind-val NVG_TEXTURE_RGBA NVGtexture #x02)

;; struct NVGscissor {
;;  float xform[6];
;;  float extent[2];
;; };
(bind-type NVGscissor <float,float>)

;; struct NVGvertex {
;;  float x,y,u,v;
;; };
(bind-type NVGvertex <float,float,float,float>)

;; struct NVGpath {
;;  int first;
;;  int count;
;;  unsigned char closed;
;;  int nbevel;
;;  NVGvertex* fill;
;;  int nfill;
;;  NVGvertex* stroke;
;;  int nstroke;
;;  int winding;
;;  int convex;
;; };
(bind-type NVGpath <i32,i32,i8,i32,NVGvertex*,i32,NVGvertex*,i32,i32,i32>)

;; struct NVGparams {
;;  void* userPtr;
;;  int edgeAntiAlias;
;;  int (*renderCreate)(void* uptr);
;;  int (*renderCreateTexture)(void* uptr, int type, int w, int h, int imageFlags, const unsigned char* data);
;;  int (*renderDeleteTexture)(void* uptr, int image);
;;  int (*renderUpdateTexture)(void* uptr, int image, int x, int y, int w, int h, const unsigned char* data);
;;  int (*renderGetTextureSize)(void* uptr, int image, int* w, int* h);
;;  void (*renderViewport)(void* uptr, int width, int height, float devicePixelRatio);
;;  void (*renderCancel)(void* uptr);
;;  void (*renderFlush)(void* uptr, NVGcompositeOperationState compositeOperation);
;;  void (*renderFill)(void* uptr, NVGpaint* paint, NVGscissor* scissor, float fringe, const float* bounds, const NVGpath* paths, int npaths);
;;  void (*renderStroke)(void* uptr, NVGpaint* paint, NVGscissor* scissor, float fringe, float strokeWidth, const NVGpath* paths, int npaths);
;;  void (*renderTriangles)(void* uptr, NVGpaint* paint, NVGscissor* scissor, const NVGvertex* verts, int nverts);
;;  void (*renderDelete)(void* uptr);
;; };
;; typedef struct NVGparams NVGparams;

;; opaque pointer
(bind-alias NVGparams i8*)

;; Constructor and destructor, called by the render back-end.
(bind-lib libnanovg nvgCreateInternal [NVGcontext*,NVGparams*]*)
(bind-lib libnanovg nvgDeleteInternal [void,NVGcontext*]*)

(bind-lib libnanovg nvgInternalParams [NVGparams*,NVGcontext*]*)

;; Debug function to dump cached path data.
(bind-lib libnanovg nvgDebugDumpPathCache [void,NVGcontext*]*)

;;;;;;;;;;;;;;;;;
;; nanovg_gl.h ;;
;;;;;;;;;;;;;;;;;

(bind-alias NVGcreateFlags enum)
;; Flag indicating if geometry based anti-aliasing is used (may not be needed when using MSAA).
(bind-val NVG_ANTIALIAS NVGcreateFlags (<< 1 0))
;; Flag indicating if strokes should be drawn using stencil buffer. The rendering will be a little
;; slower, but path overlaps (i.e. self-intersecting or sharp turns) will be drawn just once.
(bind-val NVG_STENCIL_STROKES NVGcreateFlags (<< 1 1))
;; Flag indicating that additional debug checks are done.
(bind-val NVG_DEBUG  NVGcreateFlags (<< 1 2))

;; if built with NANOVG_GL2
;; (bind-lib libnanovg nvgCreateGL2 [NVGcontext*,i32]*)
;; (bind-lib libnanovg nvgDeleteGL2 [void,NVGcontext*]*)

;; ;; if built with NANOVG_GL3
(bind-lib libnanovg nvgCreateGL3 [NVGcontext*,i32]*)
(bind-lib libnanovg nvgDeleteGL3 [void,NVGcontext*]*)

;; ;; if built with NANOVG_GLES2
;; (bind-lib libnanovg nvgCreateGLES2 [NVGcontext*,i32]*)
;; (bind-lib libnanovg nvgDeleteGLES2 [void,NVGcontext*]*)

;; ;; if built with NANOVG_GLES3
;; (bind-lib libnanovg nvgCreateGLES3 [NVGcontext*,i32]*)
;; (bind-lib libnanovg nvgDeleteGLES3 [void,NVGcontext*]*)

;; initialisation

(bind-lib libnanovg nvgInit [i32]*)

(bind-func nvg_init
  (lambda ()
    (nvgInit)))

(bind-func nvg_create_font
  (lambda (vg font_name font_path)
    (nvgCreateFont vg font_name font_path)))

;;;;;;;;;;;;;;;;;
;; xtlang code ;;
;;;;;;;;;;;;;;;;;

(bind-func nvg_create_context
  (lambda ()
    (glEnable GL_STENCIL_TEST)
    (nvgCreateGL3 (+ NVG_ANTIALIAS NVG_STENCIL_STROKES NVG_DEBUG))))

(bind-func nvg_clear
  (lambda ()
    (glClear (bitwise-or GL_COLOR_BUFFER_BIT
                         GL_DEPTH_BUFFER_BIT
                         GL_STENCIL_BUFFER_BIT))))

;; Rect type

;; <x,y,w,h>
(bind-type Rect <float,float,float,float> (printer? . #f))

(bind-func print
  "specialised print function for Rect*"
  (lambda (rct:Rect*)
    (if (null? rct)
        (printf "<Rect 0x0>")
        (printf "<Rect: x=%.3f y=%.3f w=%.3f h=%.3f>"
                (convert (tref rct 0) double)
                (convert (tref rct 1) double)
                (convert (tref rct 2) double)
                (convert (tref rct 3) double)))
    void))


(bind-func toString
  "specialised toString function for Rect*"
  (lambda (rct:Rect*)
    (let ((str:i8* (salloc 256)))
      (if (null? rct)
          (sprintf str "<Rect 0x0>")
          (sprintf str "<Rect: x=%.3f y=%.3f w=%.3f h=%.3f>"
                   (convert (tref rct 0) double)
                   (convert (tref rct 1) double)
                   (convert (tref rct 2) double)
                   (convert (tref rct 3) double)))
      (Str str))))


;; fonts

(bind-func nvg_load_opensans_fonts
  "Load OpenSans .ttf fonts in opensans_dir

If you don't have OpenSans on your system, you can download it for free from http://www.fontsquirrel.com/fonts/open-sans"
  (lambda (vg opensans_dir:i8*)
    (let ((path:i8* (zalloc 256))
          (create_font (lambda (name:i8*)
                         (sprintf path "%s/OpenSans-%s.ttf" opensans_dir name)
                         (nvgCreateFont vg name path))))
      (cond ((< (create_font "Bold") 0)
             (println "couldn't load font OpenSans-Bold.ttf")
             0:i1)
            ((< (create_font "BoldItalic") 0)
             (println "couldn't load font OpenSans-BoldItalic.ttf")
             0:i1)
            ((< (create_font "ExtraBold") 0)
             (println "couldn't load font OpenSans-ExtraBold.ttf")
             0:i1)
            ((< (create_font "ExtraBoldItalic") 0)
             (println "couldn't load font OpenSans-ExtraBoldItalic.ttf")
             0:i1)
            ((< (create_font "Italic") 0)
             (println "couldn't load font OpenSans-Italic.ttf")
             0:i1)
            ((< (create_font "Light") 0)
             (println "couldn't load font OpenSans-Light.ttf")
             0:i1)
            ((< (create_font "LightItalic") 0)
             (println "couldn't load font OpenSans-LightItalic.ttf")
             0:i1)
            ((< (create_font "Regular") 0)
             (println "couldn't load font OpenSans-Regular.ttf")
             0:i1)
            ((< (create_font "Semibold") 0)
             (println "couldn't load font OpenSans-Semibold.ttf")
             0:i1)
            ((< (create_font "SemiboldItalic") 0)
             (println "couldn't load font OpenSans-SemiboldItalic.ttf")
             0:i1)
            (else
             (println "OpenSans fonts successfully loaded")
             1:i1)))))

(bind-func nvg_draw_text
  (lambda (vg text:String* bounds:Rect* face:String* font_size)
    ;; find bounds
    (let ((h (tref bounds 3))
          (textbox_height font_size)
          (b_ptr:float* (salloc 4)))
      (nvgTextAlign vg (bor NVG_ALIGN_BOTTOM NVG_ALIGN_CENTER))
      (nvgFontFace vg (cstring face))
      (nvgFontSize vg font_size)
      (nvgTextBoxBounds vg
                        (tref bounds 0)
                        (tref bounds 1)
                        (tref bounds 2)
                        (cstring text) null
                        b_ptr)
      (set! textbox_height (- (pref b_ptr 3) (pref b_ptr 1)))
      ;; draw text
      (nvgTextBox vg
                  (tref bounds 0)
                  (+ (tref bounds 1) (/ (+ (tref bounds 3) textbox_height) 2.0))
                  (tref bounds 2)
                  (cstring text) null))))


;; run the init code
;; (impc:aot:do-and-emit
;;  (if (not (impc:aot:currently-compiling?))
;;      (nvg_init)))

(impc:aot:insert-footer "xtmnanovg")
(define *xtmlib-nanovg-loaded* #t)
