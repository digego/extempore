;;; ceph.xtm --

;; Author: Sorensen
;; Keywords: extempore ceph
;; Required dylibs: librados

;;; Commentary:

;; Extempore connection to the Ceph distributed object share

;;; Code:

;; Ceph rados library
;; set up the current dylib name and path (for AOT compilation)
(bind-dylib librados
  (cond ((string=? (sys:platform) "OSX")
         "librados.dylib")
        ((string=? (sys:platform) "Linux")
         "librados.so")))

;; opaque
(bind-alias rados_t i8*)
(bind-alias rados_config_t i8*)
(bind-alias rados_ioctx_t i8*)
(bind-alias rados_list_ctx_t i8*)
(bind-alias rados_xattrs_iter_t i8*)
(bind-alias rados_completion_t i8*)
(bind-alias rados_snap_t i64)
(bind-alias ui64 i64)
(bind-alias ui32 i32)
(bind-alias ui8 i8)

;; callbacks
(bind-alias rados_watchcb_t [void,ui8,ui64,i8*]*)
(bind-alias rados_callback_t [void,rados_completion_t,i8*]*)

;; structs
(bind-type rados_cluster_stat_t <i64,i64,i64,i64>)
(bind-type rados_pool_stat_t <i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64,i64>)

(bind-lib librados rados_create [i32,rados_t*,i8*]*)
(bind-lib librados rados_connect [i32,rados_t]*)
(bind-lib librados rados_shutdown [void,rados_t]*)
(bind-lib librados rados_conf_read_file [i32,rados_t,i8*]*)
(bind-lib librados rados_conf_get [i32,rados_t,i8*,i8*,size_t]*)
(bind-lib librados rados_cluster_stat [i32,rados_t,rados_cluster_stat_t*]*)
(bind-lib librados rados_pool_list [i32,rados_t,i8*,size_t]*)
(bind-lib librados rados_cct [rados_config_t,rados_t]*)
(bind-lib librados rados_get_instance_id [i64,rados_t]*)
(bind-lib librados rados_ioctx_create [i32,rados_t,i8*,rados_ioctx_t*]*)
(bind-lib librados rados_ioctx_destroy [void,rados_ioctx_t]*)
(bind-lib librados rados_ioctx_cct [rados_config_t,rados_ioctx_t]*)
(bind-lib librados rados_ioctx_pool_stat [i32,rados_ioctx_t,rados_pool_stat_t*]*)
(bind-lib librados rados_pool_lookup [i64,rados_t,i8*]*)
(bind-lib librados rados_pool_create [i32,rados_t,i8*]*)
(bind-lib librados rados_pool_create_with_auid [i32,rados_t,i8*,i64]*)
(bind-lib librados rados_pool_create_with_crush_rule [i32,rados_t,i8*,i8]*)
(bind-lib librados rados_pool_create_with_all [i32,rados_t,i8*,i64,i8]*)
(bind-lib librados rados_pool_delete [i32,rados_t,i8*]*)
(bind-lib librados rados_ioctx_pool_set_auid [i32,rados_ioctx_t,i64]*)
(bind-lib librados rados_ioctx_pool_get_auid [i32,rados_ioctx_t,*i64]*)
(bind-lib librados rados_ioctx_get_id [i64,rados_ioctx_t]*)
(bind-lib librados rados_ioctx_get_pool_name [i32,rados_ioctx_t,i8*,i32]*)
(bind-lib librados rados_ioctx_locator_set_key [void,rados_ioctx_t,i8*]*)
(bind-lib librados rados_objects_list_open [i32,rados_ioctx_t,rados_list_ctx_t*]*)
(bind-lib librados rados_objects_list_next [i32,rados_list_ctx_t,i8**,i8**]*)
(bind-lib librados rados_objects_list_close [void,rados_list_ctx_t]*)
(bind-lib librados rados_ioctx_snap_create [i32,rados_ioctx_t,i8*]*)
(bind-lib librados rados_ioctx_snap_remove [i32,rados_ioctx_t,i8*]*)
(bind-lib librados rados_rollback [i32,rados_ioctx_t,i8*,i8*]*)
(bind-lib librados rados_ioctx_snap_set_read [void,rados_ioctx_t,rados_snap_t]*)
(bind-lib librados rados_ioctx_selfmanaged_snap_create [i32,rados_ioctx_t,rados_snap_t*]*)
(bind-lib librados rados_ioctx_selfmanaged_snap_remove [i32,rados_ioctx_t,rados_snap_t]*)
(bind-lib librados rados_ioctx_selfmanaged_snap_rollback [i32,rados_ioctx_t,i8*,rados_snap_t]*)
(bind-lib librados rados_ioctx_selfmanaged_snap_set_write_ctx [i32,rados_ioctx_t,rados_snap_t,rados_snap_t*,i32]*)
(bind-lib librados rados_ioctx_snap_list [i32,rados_ioctx_t,rados_snap_t*,i32]*)
(bind-lib librados rados_ioctx_snap_lookup [i32,rados_ioctx_t,i8*,rados_snap_t*]*)
(bind-lib librados rados_ioctx_snap_get_name [i32,rados_ioctx_t,rados_snap_t,i8*,i32]*)
;; (bind-lib librados rados_ioctx_snap_get_stamp [i32,rados_ioctx_t,rados_snap_t,time_t*]*)
(bind-lib librados rados_get_last_version [ui64,rados_ioctx_t]*)
(bind-lib librados rados_write [i32,rados_ioctx_t,i8*,i8*,size_t,ui64]*)
(bind-lib librados rados_write_full [i32,rados_ioctx_t,i8*,i8*,size_t]*)
(bind-lib librados rados_clone_range [i32,rados_ioctx_t,i8*,ui64,i8*,ui64,size_t]*)
(bind-lib librados rados_append [i32,rados_ioctx_t,i8*,i8*,size_t]*)
(bind-lib librados rados_read [i32,rados_ioctx_t,i8*,i8*,i64,ui64]*)
(bind-lib librados rados_remove [i32,rados_ioctx_t,i8*]*)
(bind-lib librados rados_trunc [i32,rados_ioctx_t,i8*,i64]*)
(bind-lib librados rados_getxattr [i32,rados_ioctx_t,i8*,i8*,i8*,size_t]*)
(bind-lib librados rados_setxattr [i32,rados_ioctx_t,i8*,i8*,i8*,size_t]*)
(bind-lib librados rados_rmxattr [i32,rados_ioctx_t,i8*,i8*]*)
(bind-lib librados rados_getxattrs [i32,rados_ioctx_t,i8*,rados_xattrs_iter_t*]*)
(bind-lib librados rados_getxattrs_next [i32,rados_xattrs_iter_t,i8**,i8**,size_t*]*)
(bind-lib librados rados_getxattrs_end [void,rados_xattrs_iter_t]*)
;; (bind-lib librados rados_stat [i32,rados_ioctx_t,i8*,ui64,time_t*]*)
(bind-lib librados rados_tmap_update [i32,rados_ioctx_t,i8*,i8*,size_t]*)
(bind-lib librados rados_aio_create_completion [i32,i8*,rados_callback_t,rados_callback_t,rados_completion_t*]*)
(bind-lib librados rados_aio_wait_for_complete [i32,rados_completion_t]*)
(bind-lib librados rados_aio_wait_for_safe [i32,rados_completion_t]*)
(bind-lib librados rados_aio_is_complete [i32,rados_completion_t]*)
(bind-lib librados rados_aio_is_safe [i32,rados_completion_t]*)
(bind-lib librados rados_aio_wait_for_complete_and_cb [i32,rados_completion_t]*)
(bind-lib librados rados_aio_wait_for_safe_and_cb [i32,rados_completion_t]*)
(bind-lib librados rados_aio_is_complete_and_cb [i32,rados_completion_t]*)
(bind-lib librados rados_aio_is_safe_and_cb [i32,rados_completion_t]*)
(bind-lib librados rados_aio_get_return_value [i32,rados_completion_t]*)
(bind-lib librados rados_aio_release [void,rados_completion_t]*)
(bind-lib librados rados_aio_write [i32,rados_ioctx_t,i8*,rados_completion_t,i8*,size_t,ui64]*)
(bind-lib librados rados_aio_append [i32,rados_ioctx_t,i8*,rados_completion_t,i8*,size_t]*)
(bind-lib librados rados_aio_write_full [i32,rados_ioctx_t,i8*,rados_completion_t,i8*,size_t]*)
(bind-lib librados rados_aio_read [i32,rados_ioctx_t,i8*,rados_completion_t,i8*,size_t,ui64]*)
(bind-lib librados rados_aio_flush [i32,rados_ioctx_t]*)
(bind-lib librados rados_watch [i32,rados_ioctx_t,i8*,ui64,ui64*,rados_watchcb_t,i8*]*)
(bind-lib librados rados_unwatch [i32,rados_ioctx_t,i8*,ui64]*)
(bind-lib librados rados_notify [i32,rados_ioctx_t,i8*,ui64,i8*,i32]*)

(bind-func rados-connect-to-cluster
  (lambda ()
    (let ((ctx:rados_t* (salloc)))
      (if (< (rados_create ctx null) 0)
          (begin (printf "[rados] error creating context")
                 (cast null rados_t))
          (if (< (rados_conf_read_file (pref ctx 0) null) 0)
              (begin (printf "[rados] error reading config file")
                     (cast null rados_t))
              (if (< (rados_connect (pref ctx 0)) 0)
                  (begin (printf "[rados] error connecting")
                         (cast null rados_t))
                  (pref ctx 0)))))))

(bind-func rados-disconnect-cluster
  (lambda (cluster)
    (rados_shutdown cluster)))

(bind-func rados-pool-create
  (lambda (cluster name)
    (let ((res:i32 (rados_pool_create cluster name)))
      (if (< res 0)
          (begin (printf "[rados] error creating pool %d" res)
                 res)
          res))))

(bind-func rados-connect-to-pool
  (lambda (cluster poolname)
    (let ((io:rados_ioctx_t* (salloc)))
      (if (< (rados_ioctx_create cluster poolname io) 0)
          (begin (printf "[rados] error connecting to pool")
                 (cast null rados_ioctx_t))
          (pref io 0)))))


(bind-wrapper rados-disconnect-pool rados_ioctx_destroy)
(bind-wrapper rados-write-full rados_write_full)
(bind-wrapper rados-pool-delete rados_pool_delete)
(bind-wrapper rados-read rados_read)
(bind-wrapper rados-write rados_write)
(bind-wrapper rados-append rados_append)
(bind-wrapper rados-remove rados_remove)
(bind-wrapper rados-trunc rados_trunc)
(bind-wrapper rados-getxattr rados_getxattr)
(bind-wrapper rados-setxattr rados_setxattr)
(bind-wrapper rados-rmxattr rados_rmxattr)
