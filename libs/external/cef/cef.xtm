;;; cef.xtm

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libcef

;;; Commentary:

;; Chromium Embedded Framework

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/cef.xtm" 'quiet))
(sys:load-preload-check 'cef)
(define *xtmlib-cef-loaded* #t)

(impc:aot:insert-header "xtmcef")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libcef
  (cond ((string=? (sys:platform) "OSX")
         "Chromium_Embedded_Framework.dylib")
        ((string=? (sys:platform) "Linux")
         "libcef.so")
        ((string=? (sys:platform) "Windows")
         (list "libcef.dll" "chromium_embedded_framework.dll"))))

(impc:aot:import-ll "xtmcef")


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF GLOBAL
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 64bit or 32bit
(bind-val CEF_PTR_SIZE i64 8)
(bind-val CEF_BASE_SIZE i64 (* CEF_PTR_SIZE 4))
(bind-val CEF_APP_SIZE i64 (+ CEF_BASE_SIZE (* CEF_PTR_SIZE 5)))
(bind-val CEF_BROWSER_SIZE i64 (+ CEF_BASE_SIZE (* CEF_PTR_SIZE 21)))
(bind-val CEF_CLIENT_SIZE i64 (+ CEF_BASE_SIZE (* CEF_PTR_SIZE 15)))

(bind-alias CEF_FPTR i8*)

(bind-alias cef_process_id_t i32)
(bind-val PID_BROWSER cef_process_id_t 0)
(bind-val PID_RENDERER cef_process_id_t 1)

;; unsigned 32bit ARGB
(bind-alias cef_color_t i32)

(bind-func CefColorSetARGB
  (lambda (a:i8 r:i8 g:i8 b:i8)
    (bor (bor (bor (<< (i8toi32 a) 24) (<< (i8toi32 r) 16)) (<< (i8toi32 g) 8)) (<< (i8toi32 b) 0))))

(bind-func CefColorGetA
  (lambda (color:cef_color_t)
    (i32toi8 (& (>> color 24) #xFF))))

(bind-func CefColorGetR
  (lambda (color:cef_color_t)
    (i32toi8 (& (>> color 16) #xFF))))

(bind-func CefColorGetG
  (lambda (color:cef_color_t)
    (i32toi8 (& (>> color 8) #xFF))))

(bind-func CefColorGetB
  (lambda (color:cef_color_t)
    (i32toi8 (& (>> color 0) #xFF))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF STRINGS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-alias wchar_t i16)
(bind-alias char16 i16)
(bind-alias char i8)

;; str, length, dtor
(bind-type cef_string_utf8_t <i8*,size_t,[void,i8*]*>)
;; str, length, dtor
(bind-type cef_string_wide_t <wchar_t*,size_t,[void,wchar_t*]*>)
;; str, length, dtor
(bind-type cef_string_utf16_t <char16*,size_t,[void,char16*]*>)
;; utf8 default
(bind-alias cef_string_t cef_string_utf8_t)

(bind-lib libcef cef_string_wide_set [i32,wchar_t*,size_t,cef_string_wide_t*,i32]*)
(bind-lib libcef cef_string_utf8_set [i32,char*,size_t,cef_string_utf8_t*,i32]*)
(bind-lib libcef cef_string_utf16_set [i32,char16*,size_t,cef_string_utf16_t*,i32]*)
;; default
(bind-func cef_string_set
  (lambda (src src_len output copy)
    (cef_string_utf8_set src src_len output copy)))

(bind-func cef_string
  (lambda (str:String*)
    (let ((cefstr:cef_string_t* (alloc)))
      (cef_string_utf8_set (tref str 1) (tref str 0) cefstr 1)
      cefstr)))

(bind-func cef_string
  (lambda (str:Symbol*)
    (let ((cefstr:cef_string_t* (alloc)))
      (cef_string_utf8_set (tref str 1) (tref str 0) cefstr 1)
      cefstr)))

(bind-func cef_string_val
  (lambda (str:String*)
    (let ((cefstr:cef_string_t* (salloc)))
      (cef_string_utf8_set (tref str 1) (tref str 0) cefstr 1)
      cefstr)))

(bind-func cef_string_val
  (lambda (str:Symbol*)
    (let ((cefstr:cef_string_t* (salloc)))
      (cef_string_utf8_set (tref str 1) (tref str 0) cefstr 1)
      cefstr)))

(bind-lib libcef cef_string_wide_clear [void,cef_string_wide_t*]*)
(bind-lib libcef cef_string_utf8_clear [void,cef_string_utf8_t*]*)
(bind-lib libcef cef_string_utf16_clear [void,cef_string_utf16_t*]*)
;; default
(bind-func cef_string_clear
  (lambda (str)
    (cef_string_utf8_clear str)))

(bind-lib libcef cef_string_wide_cmp [void,cef_string_wide_t*,cef_string_wide_t*]*)
(bind-lib libcef cef_string_utf8_cmp [void,cef_string_utf8_t*,cef_string_utf8_t*]*)
(bind-lib libcef cef_string_utf16_cmp [void,cef_string_utf16_t*,cef_string_utf16_t*]*)
;; default
(bind-func cef_string_cmp
  (lambda (str1 str2)
    (cef_string_utf8_cmp str1 str2)))

(bind-lib libcef cef_string_wide_to_utf8 [i32,wchar_t*,size_t,cef_string_utf8_t*]*)
(bind-lib libcef cef_string_utf8_to_wide [i32,char*,size_t,cef_string_wide_t*]*)
(bind-lib libcef cef_string_wide_to_utf16 [i32,wchar_t*,size_t,cef_string_utf16_t*]*)
(bind-lib libcef cef_string_utf16_to_wide [i32,char16*,size_t,cef_string_wide_t*]*)
(bind-lib libcef cef_string_utf8_to_utf16 [i32,char*,size_t,cef_string_utf16_t*]*)
(bind-lib libcef cef_string_utf16_to_utf8 [i32,char16*,size_t,cef_string_utf8_t*]*)

(bind-lib libcef cef_string_ascii_to_wide [i32,char*,size_t,cef_string_wide_t*]*)
(bind-lib libcef cef_string_ascii_to_utf16 [i32,char*,size_t,cef_string_utf16_t*]*)

(bind-alias cef_string_userfree_wide_t cef_string_wide_t*)
(bind-alias cef_string_userfree_utf8_t cef_string_utf8_t*)
(bind-alias cef_string_userfree_utf16_t cef_string_utf16_t*)
;; default
(bind-alias cef_string_userfree_t cef_string_utf8_t*)

(bind-lib libcef cef_string_userfree_wide_alloc [cef_string_userfree_wide_t]*)
(bind-lib libcef cef_string_userfree_utf8_alloc [cef_string_userfree_utf8_t]*)
(bind-lib libcef cef_string_userfree_utf16_alloc [cef_string_userfree_utf16_t]*)
;; default
(bind-func cef_string_userfree_alloc
  (lambda ()
    (cef_string_userfree_utf8_alloc)))

(bind-lib libcef cef_string_userfree_wide_free [void,cef_string_userfree_wide_t]*)
(bind-lib libcef cef_string_userfree_utf8_free [void,cef_string_userfree_utf8_t]*)
(bind-lib libcef cef_string_userfree_utf16_free [void,cef_string_userfree_utf16_t]*)
;; default
(bind-func cef_string_userfree_free
  (lambda (str)
    (cef_string_userfree_utf8_free str)))


;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF STRING LISTS
;;
;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-alias cef_string_list_t i8*)

(bind-lib libcef cef_string_list_alloc [cef_string_list_t]*)
(bind-lib libcef cef_string_list_size [i32,cef_string_list_t]*)
;; list index value
(bind-lib libcef cef_string_list_value [i32,cef_string_list_t,i32,cef_string_t*]*)
;; list value
(bind-lib libcef cef_string_list_append [void,cef_string_list_t,cef_string_t*]*)
(bind-lib libcef cef_string_list_clear [void,cef_string_list_t]*)
(bind-lib libcef cef_string_list_free [void,cef_string_list_t]*)
(bind-lib libcef cef_string_list_copy [cef_string_list_t,cef_string_list_t]*)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF BASE
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;

;; size, add_ref, release, has_one_ref
;; (bind-type cef_base_t <size_t,[void,cef_base_t*]*,[i32,cef_base_t*]*,[i32,cef_base_t*]*>)
(bind-type cef_base_t <size_t,i8*,i8*,i8*>)


;; called to increment object
(bind-func add_ref:[void,cef_base_t*]*
  (lambda (obj)
    (println "inc:" obj)
    void))

;; called to decrement object
;; if references fall to zero should delete obj
;; should return 1 if object is deleted
(bind-func release:[i32,cef_base_t*]*
  (lambda (obj)
    (println "dec:" obj)
    0))

;; returns true if obj has 1 reference
(bind-func has_one_ref:[i32,cef_base_t*]*
  (lambda (obj)
    (println "has one?" obj)
    1))

(bind-func cef_init_base
  (lambda (obj:cef_base_t*)
    (tset! obj 1 (convert add_ref))
    (tset! obj 2 (convert release))
    (tset! obj 3 (convert has_one_ref))
    (println "initialized base")
    obj))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF APP
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; log severity
(bind-alias cef_log_severity_t i32)
(bind-val LOGSEVERITY_DEFAULT i32 0)
(bind-val LOGSEVERITY_VERBOSE i32 1)
(bind-val LOGSEVERITY_INFO i32 2)
(bind-val LOGSEVERITY_WARNING i32 3)
(bind-val LOGSEVERITY_ERROR i32 4)
(bind-val LOGSEVERITY_DISABLE i32 99)

;; state of a setting
(bind-alias cef_state_t i32)
(bind-val STATE_DEFAULT i32 0)
(bind-val STATE_ENABLED i32 1)
(bind-val STATE_DISABLED i32 2)

;; argc, argv
(bind-type cef_main_args_t <i32,i8**>)

;;(bind-type cef_app_t <cef_base_t,[void,cef_app_t*,cef_string_t*,cef_command_line_t*]*,[void,cef_app_t*,cef_scheme_registrar_t*]*,[cef_resource_bundle_handler_t*,cef_app_t*]*,[cef_browser_process_handler_t*,cef_app_t*]*,[cef_render_process_handler_t*,cef_app_t*]*>)
(bind-type cef_app_t <cef_base_t,i8*,i8*,i8*,i8*,i8*>)


  ;; ///
  ;; // Size of this structure.
  ;; ///
  ;; size_t size;

  ;; ///
  ;; // Set to true (1) to use a single process for the browser and renderer. This
  ;; // run mode is not officially supported by Chromium and is less stable than
  ;; // the multi-process default. Also configurable using the "single-process"
  ;; // command-line switch.
  ;; ///
  ;; int single_process;

  ;; ///
  ;; // Set to true (1) to disable the sandbox for sub-processes. See
  ;; // cef_sandbox_win.h for requirements to enable the sandbox on Windows. Also
  ;; // configurable using the "no-sandbox" command-line switch.
  ;; ///
  ;; int no_sandbox;

  ;; ///
  ;; // The path to a separate executable that will be launched for sub-processes.
  ;; // By default the browser process executable is used. See the comments on
  ;; // CefExecuteProcess() for details. Also configurable using the
  ;; // "browser-subprocess-path" command-line switch.
  ;; ///
  ;; cef_string_t browser_subprocess_path;

  ;; ///
  ;; // Set to true (1) to have the browser process message loop run in a separate
  ;; // thread. If false (0) than the CefDoMessageLoopWork() function must be
  ;; // called from your application message loop. This option is only supported on
  ;; // Windows.
  ;; ///
  ;; int multi_threaded_message_loop;

  ;; ///
  ;; // Set to true (1) to enable windowless (off-screen) rendering support. Do not
  ;; // enable this value if the application does not use windowless rendering as
  ;; // it may reduce rendering performance on some systems.
  ;; ///
  ;; int windowless_rendering_enabled;

  ;; ///
  ;; // Set to true (1) to disable configuration of browser process features using
  ;; // standard CEF and Chromium command-line arguments. Configuration can still
  ;; // be specified using CEF data structures or via the
  ;; // CefApp::OnBeforeCommandLineProcessing() method.
  ;; ///
  ;; int command_line_args_disabled;

  ;; ///
  ;; // The location where cache data will be stored on disk. If empty then
  ;; // browsers will be created in "incognito mode" where in-memory caches are
  ;; // used for storage and no data is persisted to disk. HTML5 databases such as
  ;; // localStorage will only persist across sessions if a cache path is
  ;; // specified. Can be overridden for individual CefRequestContext instances via
  ;; // the CefRequestContextSettings.cache_path value.
  ;; ///
  ;; cef_string_t cache_path;

  ;; ///
  ;; // The location where user data such as spell checking dictionary files will
  ;; // be stored on disk. If empty then the default platform-specific user data
  ;; // directory will be used ("~/.cef_user_data" directory on Linux,
  ;; // "~/Library/Application Support/CEF/User Data" directory on Mac OS X,
  ;; // "Local Settings\Application Data\CEF\User Data" directory under the user
  ;; // profile directory on Windows).
  ;; ///
  ;; cef_string_t user_data_path;

  ;; ///
  ;; // To persist session cookies (cookies without an expiry date or validity
  ;; // interval) by default when using the global cookie manager set this value to
  ;; // true (1). Session cookies are generally intended to be transient and most
  ;; // Web browsers do not persist them. A |cache_path| value must also be
  ;; // specified to enable this feature. Also configurable using the
  ;; // "persist-session-cookies" command-line switch. Can be overridden for
  ;; // individual CefRequestContext instances via the
  ;; // CefRequestContextSettings.persist_session_cookies value.
  ;; ///
  ;; int persist_session_cookies;

  ;; ///
  ;; // To persist user preferences as a JSON file in the cache path directory set
  ;; // this value to true (1). A |cache_path| value must also be specified
  ;; // to enable this feature. Also configurable using the
  ;; // "persist-user-preferences" command-line switch. Can be overridden for
  ;; // individual CefRequestContext instances via the
  ;; // CefRequestContextSettings.persist_user_preferences value.
  ;; ///
  ;; int persist_user_preferences;

  ;; ///
  ;; // Value that will be returned as the User-Agent HTTP header. If empty the
  ;; // default User-Agent string will be used. Also configurable using the
  ;; // "user-agent" command-line switch.
  ;; ///
  ;; cef_string_t user_agent;

  ;; ///
  ;; // Value that will be inserted as the product portion of the default
  ;; // User-Agent string. If empty the Chromium product version will be used. If
  ;; // |userAgent| is specified this value will be ignored. Also configurable
  ;; // using the "product-version" command-line switch.
  ;; ///
  ;; cef_string_t product_version;

  ;; ///
  ;; // The locale string that will be passed to WebKit. If empty the default
  ;; // locale of "en-US" will be used. This value is ignored on Linux where locale
  ;; // is determined using environment variable parsing with the precedence order:
  ;; // LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also configurable using the "lang"
  ;; // command-line switch.
  ;; ///
  ;; cef_string_t locale;

  ;; ///
  ;; // The directory and file name to use for the debug log. If empty a default
  ;; // log file name and location will be used. On Windows and Linux a "debug.log"
  ;; // file will be written in the main executable directory. On Mac OS X a
  ;; // "~/Library/Logs/<app name>_debug.log" file will be written where <app name>
  ;; // is the name of the main app executable. Also configurable using the
  ;; // "log-file" command-line switch.
  ;; ///
  ;; cef_string_t log_file;

  ;; ///
  ;; // The log severity. Only messages of this severity level or higher will be
  ;; // logged. Also configurable using the "log-severity" command-line switch with
  ;; // a value of "verbose", "info", "warning", "error", "error-report" or
  ;; // "disable".
  ;; ///
  ;; cef_log_severity_t log_severity;

  ;; ///
  ;; // Custom flags that will be used when initializing the V8 JavaScript engine.
  ;; // The consequences of using custom flags may not be well tested. Also
  ;; // configurable using the "js-flags" command-line switch.
  ;; ///
  ;; cef_string_t javascript_flags;

  ;; ///
  ;; // The fully qualified path for the resources directory. If this value is
  ;; // empty the cef.pak and/or devtools_resources.pak files must be located in
  ;; // the module directory on Windows/Linux or the app bundle Resources directory
  ;; // on Mac OS X. Also configurable using the "resources-dir-path" command-line
  ;; // switch.
  ;; ///
  ;; cef_string_t resources_dir_path;

  ;; ///
  ;; // The fully qualified path for the locales directory. If this value is empty
  ;; // the locales directory must be located in the module directory. This value
  ;; // is ignored on Mac OS X where pack files are always loaded from the app
  ;; // bundle Resources directory. Also configurable using the "locales-dir-path"
  ;; // command-line switch.
  ;; ///
  ;; cef_string_t locales_dir_path;

  ;; ///
  ;; // Set to true (1) to disable loading of pack files for resources and locales.
  ;; // A resource bundle handler must be provided for the browser and render
  ;; // processes via CefApp::GetResourceBundleHandler() if loading of pack files
  ;; // is disabled. Also configurable using the "disable-pack-loading" command-
  ;; // line switch.
  ;; ///
  ;; int pack_loading_disabled;

  ;; ///
  ;; // Set to a value between 1024 and 65535 to enable remote debugging on the
  ;; // specified port. For example, if 8080 is specified the remote debugging URL
  ;; // will be http://localhost:8080. CEF can be remotely debugged from any CEF or
  ;; // Chrome browser window. Also configurable using the "remote-debugging-port"
  ;; // command-line switch.
  ;; ///
  ;; int remote_debugging_port;

  ;; ///
  ;; // The number of stack trace frames to capture for uncaught exceptions.
  ;; // Specify a positive value to enable the CefRenderProcessHandler::
  ;; // OnUncaughtException() callback. Specify 0 (default value) and
  ;; // OnUncaughtException() will not be called. Also configurable using the
  ;; // "uncaught-exception-stack-size" command-line switch.
  ;; ///
  ;; int uncaught_exception_stack_size;

  ;; ///
  ;; // By default CEF V8 references will be invalidated (the IsValid() method will
  ;; // return false) after the owning context has been released. This reduces the
  ;; // need for external record keeping and avoids crashes due to the use of V8
  ;; // references after the associated context has been released.
  ;; //
  ;; // CEF currently offers two context safety implementations with different
  ;; // performance characteristics. The default implementation (value of 0) uses a
  ;; // map of hash values and should provide better performance in situations with
  ;; // a small number contexts. The alternate implementation (value of 1) uses a
  ;; // hidden value attached to each context and should provide better performance
  ;; // in situations with a large number of contexts.
  ;; //
  ;; // If you need better performance in the creation of V8 references and you
  ;; // plan to manually track context lifespan you can disable context safety by
  ;; // specifying a value of -1.
  ;; //
  ;; // Also configurable using the "context-safety-implementation" command-line
  ;; // switch.
  ;; ///
  ;; int context_safety_implementation;

  ;; ///
  ;; // Set to true (1) to ignore errors related to invalid SSL certificates.
  ;; // Enabling this setting can lead to potential security vulnerabilities like
  ;; // "man in the middle" attacks. Applications that load content from the
  ;; // internet should not enable this setting. Also configurable using the
  ;; // "ignore-certificate-errors" command-line switch. Can be overridden for
  ;; // individual CefRequestContext instances via the
  ;; // CefRequestContextSettings.ignore_certificate_errors value.
  ;; ///
  ;; int ignore_certificate_errors;

  ;; ///
  ;; // Opaque background color used for accelerated content. By default the
  ;; // background color will be white. Only the RGB compontents of the specified
  ;; // value will be used. The alpha component must greater than 0 to enable use
  ;; // of the background color but will be otherwise ignored.
  ;; ///
  ;; cef_color_t background_color;

  ;; ///
  ;; // Comma delimited ordered list of language codes without any whitespace that
  ;; // will be used in the "Accept-Language" HTTP header. May be overridden on a
  ;; // per-browser basis using the CefBrowserSettings.accept_language_list value.
  ;; // If both values are empty then "en-US,en" will be used. Can be overridden
  ;; // for individual CefRequestContext instances via the
  ;; // CefRequestContextSettings.accept_language_list value.
  ;; ///
  ;; cef_string_t accept_language_list;


;; size(0), single_process(1), no_sandbox(2), browser_subprocess_path(3), multi_threaded_message_loop(4), windowless_rendering_enabled(5), command_line_args_disabled(6), cache_path(7), user_data_path(8), persist_session_cookies(9), persist_user_preferences(10), user_agent(11), product_version(12), locale(13), log_file(14), log_severity(15), javascript_flags(16), resources_dir_path(17), locales_dir_path(18), pack_loading_disabled(19), remove_debugging_port(20), uncaught_exception_stack_size(21), context_safety_implementation(22), ignore_certificate_errors(23), background_color(24), accept_language_list(25)
(bind-type cef_settings_t <size_t,i32,i32,cef_string_t,i32,i32,i32,cef_string_t,cef_string_t,i32,i32,cef_string_t,cef_string_t,cef_string_t,cef_string_t,cef_log_severity_t,cef_string_t,cef_string_t,cef_string_t,i32,i32,i32,i32,i32,cef_color_t,cef_string_t> #f #f)

  ;; ///
  ;; // Size of this structure.
  ;; ///
  ;; size_t size;

  ;; ///
  ;; // The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
  ;; // will be called for a windowless browser. The actual fps may be lower if
  ;; // the browser cannot generate frames at the requested rate. The minimum
  ;; // value is 1 and the maximum value is 60 (default 30). This value can also be
  ;; // changed dynamically via CefBrowserHost::SetWindowlessFrameRate.
  ;; ///
  ;; int windowless_frame_rate;

  ;; // The below values map to WebPreferences settings.

  ;; ///
  ;; // Font settings.
  ;; ///
  ;; cef_string_t standard_font_family;
  ;; cef_string_t fixed_font_family;
  ;; cef_string_t serif_font_family;
  ;; cef_string_t sans_serif_font_family;
  ;; cef_string_t cursive_font_family;
  ;; cef_string_t fantasy_font_family;
  ;; int default_font_size;
  ;; int default_fixed_font_size;
  ;; int minimum_font_size;
  ;; int minimum_logical_font_size;

  ;; ///
  ;; // Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
  ;; // configurable using the "default-encoding" command-line switch.
  ;; ///
  ;; cef_string_t default_encoding;

  ;; ///
  ;; // Controls the loading of fonts from remote sources. Also configurable using
  ;; // the "disable-remote-fonts" command-line switch.
  ;; ///
  ;; cef_state_t remote_fonts;

  ;; ///
  ;; // Controls whether JavaScript can be executed. Also configurable using the
  ;; // "disable-javascript" command-line switch.
  ;; ///
  ;; cef_state_t javascript;

  ;; ///
  ;; // Controls whether JavaScript can be used for opening windows. Also
  ;; // configurable using the "disable-javascript-open-windows" command-line
  ;; // switch.
  ;; ///
  ;; cef_state_t javascript_open_windows;

  ;; ///
  ;; // Controls whether JavaScript can be used to close windows that were not
  ;; // opened via JavaScript. JavaScript can still be used to close windows that
  ;; // were opened via JavaScript or that have no back/forward history. Also
  ;; // configurable using the "disable-javascript-close-windows" command-line
  ;; // switch.
  ;; ///
  ;; cef_state_t javascript_close_windows;

  ;; ///
  ;; // Controls whether JavaScript can access the clipboard. Also configurable
  ;; // using the "disable-javascript-access-clipboard" command-line switch.
  ;; ///
  ;; cef_state_t javascript_access_clipboard;

  ;; ///
  ;; // Controls whether DOM pasting is supported in the editor via
  ;; // execCommand("paste"). The |javascript_access_clipboard| setting must also
  ;; // be enabled. Also configurable using the "disable-javascript-dom-paste"
  ;; // command-line switch.
  ;; ///
  ;; cef_state_t javascript_dom_paste;

  ;; ///
  ;; // Controls whether the caret position will be drawn. Also configurable using
  ;; // the "enable-caret-browsing" command-line switch.
  ;; ///
  ;; cef_state_t caret_browsing;

  ;; ///
  ;; // Controls whether any plugins will be loaded. Also configurable using the
  ;; // "disable-plugins" command-line switch.
  ;; ///
  ;; cef_state_t plugins;

  ;; ///
  ;; // Controls whether file URLs will have access to all URLs. Also configurable
  ;; // using the "allow-universal-access-from-files" command-line switch.
  ;; ///
  ;; cef_state_t universal_access_from_file_urls;

  ;; ///
  ;; // Controls whether file URLs will have access to other file URLs. Also
  ;; // configurable using the "allow-access-from-files" command-line switch.
  ;; ///
  ;; cef_state_t file_access_from_file_urls;

  ;; ///
  ;; // Controls whether web security restrictions (same-origin policy) will be
  ;; // enforced. Disabling this setting is not recommend as it will allow risky
  ;; // security behavior such as cross-site scripting (XSS). Also configurable
  ;; // using the "disable-web-security" command-line switch.
  ;; ///
  ;; cef_state_t web_security;

  ;; ///
  ;; // Controls whether image URLs will be loaded from the network. A cached image
  ;; // will still be rendered if requested. Also configurable using the
  ;; // "disable-image-loading" command-line switch.
  ;; ///
  ;; cef_state_t image_loading;

  ;; ///
  ;; // Controls whether standalone images will be shrunk to fit the page. Also
  ;; // configurable using the "image-shrink-standalone-to-fit" command-line
  ;; // switch.
  ;; ///
  ;; cef_state_t image_shrink_standalone_to_fit;

  ;; ///
  ;; // Controls whether text areas can be resized. Also configurable using the
  ;; // "disable-text-area-resize" command-line switch.
  ;; ///
  ;; cef_state_t text_area_resize;

  ;; ///
  ;; // Controls whether the tab key can advance focus to links. Also configurable
  ;; // using the "disable-tab-to-links" command-line switch.
  ;; ///
  ;; cef_state_t tab_to_links;

  ;; ///
  ;; // Controls whether local storage can be used. Also configurable using the
  ;; // "disable-local-storage" command-line switch.
  ;; ///
  ;; cef_state_t local_storage;

  ;; ///
  ;; // Controls whether databases can be used. Also configurable using the
  ;; // "disable-databases" command-line switch.
  ;; ///
  ;; cef_state_t databases;

  ;; ///
  ;; // Controls whether the application cache can be used. Also configurable using
  ;; // the "disable-application-cache" command-line switch.
  ;; ///
  ;; cef_state_t application_cache;

  ;; ///
  ;; // Controls whether WebGL can be used. Note that WebGL requires hardware
  ;; // support and may not work on all systems even when enabled. Also
  ;; // configurable using the "disable-webgl" command-line switch.
  ;; ///
  ;; cef_state_t webgl;

  ;; ///
  ;; // Opaque background color used for the browser before a document is loaded
  ;; // and when no document color is specified. By default the background color
  ;; // will be the same as CefSettings.background_color. Only the RGB compontents
  ;; // of the specified value will be used. The alpha component must greater than
  ;; // 0 to enable use of the background color but will be otherwise ignored.
  ;; ///
  ;; cef_color_t background_color;

  ;; ///
  ;; // Comma delimited ordered list of language codes without any whitespace that
  ;; // will be used in the "Accept-Language" HTTP header. May be set globally
  ;; // using the CefBrowserSettings.accept_language_list value. If both values are
  ;; // empty then "en-US,en" will be used.
  ;; ///
  ;; cef_string_t accept_language_list;

;; size(0), windowloess_frame_rate(1), standard_font_family(2),fixed_font_family(3),serif_font_family(4),sans_serif_font_family(5),cursive_font_family(6),fantasy_font_family(7),defaul_font_size(8),default_fixed_font_size(9),minimum_font_size(10),minimum_logical_font_size(11),default_encoding(12),remote_fonts(13),javascript(14),javascript_open_windows(15),javascript_close_windows(16),javascript_access_clipboard(17),javascript_com_paste(18),caret_browsing(19),plugins(20),universal_access_from_file_urls(21),file_access_from_file_urls(22), web_security(23), image_loading(24), image_shink_standalone_to_fit(25),text_area_resize(26),tab_to_links(27),local_storage(28), databases(29), application_cache(30), webgl(31), background_color(32),accept_language_list(33)
(bind-type cef_browser_settings_t <size_t,i32,cef_string_t,cef_string_t,cef_string_t,cef_string_t,cef_string_t,cef_string_t,i32,i32,i32,i32,cef_string_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_state_t,cef_color_t,cef_string_t> #f #f)

;; This function should be called from the application entry point function to
;; execute a secondary process. It can be used to run secondary processes from
;; the browser client executable (default behavior) or from a separate
;; executable specified by the CefSettings.browser_subprocess_path value. If
;; called for the browser process (identified by no "type" command-line value)
;; it will return immediately with a value of -1. If called for a recognized
;; secondary process it will block until the process should exit and then return
;; the process exit code. The |application| parameter may be NULL. The
;; |windows_sandbox_info| parameter is only used on Windows and may be NULL (see
;; cef_sandbox_win.h for details).
(bind-lib libcef cef_execute_process [i32,cef_main_args_t*,cef_app_t*,i8*]*)

;; This function should be called on the main application thread to initialize
;; the CEF browser process. The |application| parameter may be NULL. A return
;; value of true (1) indicates that it succeeded and false (0) indicates that it
;; failed. The |windows_sandbox_info| parameter is only used on Windows and may
;; be NULL (see cef_sandbox_win.h for details).
(bind-lib libcef cef_initialize [i32,cef_main_args_t*,cef_settings_t*,cef_app_t*,i8*]*)

;;This function should be called on the main application thread to shut down
;;the CEF browser process before the application exits.
(bind-lib libcef cef_shutdown [void]*)

;; Perform a single iteration of CEF message loop processing. This function is
;; used to integrate the CEF message loop into an existing application message
;; loop. Care must be taken to balance performance against excessive CPU usage.
;; This function should only be called on the main application thread and only
;; if cef_initialize() is called with a CefSettings.multi_threaded_message_loop
;; value of false (0). This function will not block.
(bind-lib libcef cef_do_message_loop_work [void]*)

;; Run the CEF message loop. Use this function instead of an application-
;; provided message loop to get the best balance between performance and CPU
;; usage. This function should only be called on the main application thread and
;; only if cef_initialize() is called with a
;; CefSettings.multi_threaded_message_loop value of false (0). This function
;; will block until a quit message is received by the system.
(bind-lib libcef cef_run_message_loop [void]*)

;; Quit the CEF message loop that was started by calling cef_run_message_loop().
;; This function should only be called on the main application thread and only
;; if cef_run_message_loop() was used.
(bind-lib libcef cef_quit_message_loop [void]*)

;; Set to true (1) before calling Windows APIs like TrackPopupMenu that enter a
;; modal message loop. Set to false (0) after exiting the modal message loop.
(bind-lib libcef cef_set_osmodal_loop [void,i32]*)

;; Call during process startup to enable High-DPI support on Windows 7 or newer.
;; Older versions of Windows should be left DPI-unaware because they do not
;; support DirectWrite and GDI fonts are kerned very badly.
(bind-lib libcef cef_enable_highdpi_support [void]*)


;; Provides an opportunity to view and/or modify command-line arguments before
;; processing by CEF and Chromium. The |process_type| value will be NULL for
;; the browser process. Do not keep a reference to the cef_command_line_t
;; object passed to this function. The CefSettings.command_line_args_disabled
;; value can be used to start with an NULL command-line object. Any values
;; specified in CefSettings that equate to command-line arguments will be set
;; before this function is called. Be cautious when using this function to
;; modify command-line arguments for non-browser processes as this may result
;; in undefined behavior including crashes.

(bind-alias cef_command_line_t i8)

(bind-func on_before_command_line_processing:[void,cef_app_t*,cef_string_t*,cef_command_line_t*]*
  (lambda (app str command)
    (println "on_before_command_line_processing")
    void))

;; Provides an opportunity to register custom schemes. Do not keep a reference
;; to the |registrar| object. This function is called on the main thread for
;; each process and the registered schemes should be the same across all
;; processes.

(bind-alias cef_scheme_registrar_t i8)

(bind-func on_register_custom_schemes:[void,cef_app_t*,cef_scheme_registrar_t*]*
  (lambda (app registrar)
    (println "on_register_custom_schemes")
    void))

;; Return the handler for resource bundle events. If
;; CefSettings.pack_loading_disabled is true (1) a handler must be returned.
;; If no handler is returned resources will be loaded from pack files. This
;; function is called by the browser and render processes on multiple threads.

(bind-alias cef_resource_bundle_handler_t i8)

(bind-func get_resource_bundle_handler:[cef_resource_bundle_handler_t*,cef_app_t*]*
  (lambda (app)
    (println "get_resource_bundle_handler")
    null))


;; Return the handler for functionality specific to the browser process. This
;; function is called on multiple threads in the browser process.

(bind-alias cef_browser_process_handler_t i8)

(bind-func get_browser_process_handler:[cef_browser_process_handler_t*,cef_app_t*]*
  (lambda (app)
    (println "get_browser_process_handler")
    null))


;; Return the handler for functionality specific to the render process. This
;; function is called on the render process main thread.

(bind-alias cef_render_process_handler_t i8)

(bind-func get_render_process_handler:[cef_render_process_handler_t*,cef_app_t*]*
  (lambda (app)
    (println "get_render_process_handler")
    null))

(bind-func cef_init_app
  (lambda (obj:cef_app_t*)
    (let ((base (tref-ptr obj 0)))
      (tset! base 0 CEF_APP_SIZE)
      (cef_init_base base)
      (tset! obj 1 (convert on_before_command_line_processing))
      (tset! obj 2 (convert on_register_custom_schemes))
      (tset! obj 3 (convert get_resource_bundle_handler))
      (tset! obj 4 (convert get_browser_process_handler))
      (tset! obj 5 (convert get_render_process_handler))
      (println "initialized app")
      obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF WINDOW INFO
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-alias cef_window_handle_t i8*)

;; for windowless_rendering_enabled
;;
;; Set to true (1) to create the browser using windowless (off-screen)
;; rendering. No view will be created for the browser and all rendering will
;; occur via the CefRenderHandler interface. The |parent_view| value will be
;; used to identify monitor info and to act as the parent view for dialogs,
;; context menus, etc. If |parent_view| is not provided then the main screen
;; monitor will be used and some functionality that requires a parent view
;; may not function correctly. In order to create windowless browsers the
;; CefSettings.windowless_rendering_enabled value must be set to true.

;; window_name(0), x(1), y(2), width(3), height(4), hidden(5), parent_view(6), windowless_rendering_enabled(7), transparent_painting_enabled(8), view(9)
(bind-type cef_window_info_t <cef_string_t,i32,i32,i32,i32,i32,cef_window_handle_t,i32,i32,cef_window_handle_t>)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF BROWSER
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; host, can_go_back, go_back, can_go_forward, go_forward, is_loading, reload, reload_ignore_cache, stop_load, get_identifier, is_same, is_popup, has_document, get_main_frame, get_focused_frame, get_frame_byindent, get_frame, get_frame_count, get_frame_identifiers, get_frame_names, send_process_message
(bind-type cef_browser_t <cef_base_t,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*>)

(bind-alias cef_frame_t i8)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get host

(bind-alias cef_browser_host_t i8)

;; Returns the browser host object. This function can only be called in the
;; browser process.
(bind-func get_host:[cef_browser_host_t*,cef_browser_t*]*
  (lambda (self)
    (println "get_host")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; can go back

(bind-func can_go_back:[i32,cef_browser_t*]*
  (lambda (self)
    (println "can go back")
    0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; go back

(bind-func go_back:[void,cef_browser_t*]*
  (lambda (self)
    (println "go back")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; can go forward

(bind-func can_go_forward:[i32,cef_browser_t*]*
  (lambda (self)
    (println "can go forward")
    0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; go forward

(bind-func go_forward:[void,cef_browser_t*]*
  (lambda (self)
    (println "go forward")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; is loading

(bind-func is_loading:[i32,cef_browser_t*]*
  (lambda (self)
    (println "is loading")
    0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; reload

(bind-func reload:[void,cef_browser_t*]*
  (lambda (self)
    (println "reload")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; reload ignore cache

(bind-func reload_ignore_cache:[void,cef_browser_t*]*
  (lambda (self)
    (println "reload ignore cache")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; stop load

(bind-func stop_load:[void,cef_browser_t*]*
  (lambda (self)
    (println "stop load")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  get identifier

(bind-func get_identifier:[i32,cef_browser_t*]*
  (lambda (self)
    (println "get identifier")
    0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; is same

(bind-func is_same:[i32,cef_browser_t*]*
  (lambda (self)
    (println "is same")
    1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; is popup

(bind-func is_popup:[i32,cef_browser_t*]*
  (lambda (self)
    (println "is popup")
    1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; is same

(bind-func has_document:[i32,cef_browser_t*]*
  (lambda (self)
    (println "has document")
    1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get main frame

(bind-func get_main_frame:[cef_frame_t*,cef_browser_t*]*
  (lambda (self)
    (println "get main frame")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get focused frame

(bind-func get_focused_frame:[cef_frame_t*,cef_browser_t*]*
  (lambda (self)
    (println "get focused frame")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get frame byident

(bind-func get_frame_byident:[cef_frame_t*,cef_browser_t*]*
  (lambda (self)
    (println "get frame byident")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get frame

(bind-func get_frame:[cef_frame_t*,cef_browser_t*,cef_string_t*]*
  (lambda (self name)
    (println "get frame")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get frame count

(bind-func get_frame_count:[size_t,cef_browser_t*]*
  (lambda (self)
    (println "get frame count")
    0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get frame indentifiers

(bind-func get_frame_identifiers:[void,cef_browser_t*,size_t*,i64*]*
  (lambda (self identifiersCount identifiers)
    (println "get indentifiers")
    (pset! identifiersCount 0 0)
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; get frame names

(bind-func get_frame_names:[void,cef_browser_t*,cef_string_list_t]*
  (lambda (self names)
    (println "get frame names")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; send process message

(bind-alias cef_process_message_t i8)

(bind-func send_process_message:[i32,cef_browser_t*,cef_process_id_t,cef_process_message_t*]*
  (lambda (self target_process message)
    (println "send process message")
    0))

;;;;;;;; init

(bind-func cef_init_browser
  (lambda (obj:cef_browser_t*)
    (println "init browser handler")
    (let ((base (tref-ptr obj 0)))
      (tset! base 0 CEF_BROWSER_SIZE)
      (cef_init_base base)
      (tset! obj 1 (convert get_host))
      (tset! obj 2 (convert can_go_back))
      (tset! obj 3 (convert go_back))
      (tset! obj 4 (convert can_go_forward))
      (tset! obj 5 (convert go_forward))
      (tset! obj 6 (convert is_loading))
      (tset! obj 7 (convert reload))
      (tset! obj 8 (convert reload_ignore_cache))
      (tset! obj 9 (convert stop_load))
      (tset! obj 10 (convert get_identifier))
      (tset! obj 11 (convert is_same))
      (tset! obj 12 (convert is_popup))
      (tset! obj 13 (convert has_document))
      (tset! obj 14 (convert get_main_frame))
      (tset! obj 15 (convert get_focused_frame))
      (tset! obj 16 (convert get_frame_byident))
      (tset! obj 17 (convert get_frame))
      (tset! obj 18 (convert get_frame_count))
      (tset! obj 19 (convert get_frame_identifiers))
      (tset! obj 20 (convert get_frame_names))
      (tset! obj 21 (convert send_process_message))
      obj)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; CEF CLIENT
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; context_menu, dialog, display, download, drag, find, focus, geolocation, jsdialog, keyboard, life_span, load, render, request, on_process_message_received
(bind-type cef_client_t <cef_base_t,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*,i8*>)

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; context_menu handler

(bind-alias cef_context_menu_handler_t i8)

(bind-func get_context_menu_handler:[cef_context_menu_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_context_menu_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; dialog handler

(bind-alias cef_dialog_handler_t i8)

(bind-func get_dialog_handler:[cef_dialog_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_dialog_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; display handler

(bind-alias cef_display_handler_t i8)

(bind-func get_display_handler:[cef_display_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_display_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; download hanlder

(bind-alias cef_download_handler_t i8)

(bind-func get_download_handler:[cef_download_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_download_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; drag handler

(bind-alias cef_drag_handler_t i8)

(bind-func get_drag_handler:[cef_drag_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_drag_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; find handler

(bind-alias cef_find_handler_t i8)

(bind-func get_find_handler:[cef_find_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_find_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; focus handler

(bind-alias cef_focus_handler_t i8)

(bind-func get_focus_handler:[cef_focus_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_focus_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; geolocation handler

(bind-alias cef_geolocation_handler_t i8)

(bind-func get_geolocation_handler:[cef_geolocation_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_geolocation_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jsdialog handler

(bind-alias cef_jsdialog_handler_t i8)

(bind-func get_jsdialog_handler:[cef_jsdialog_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_jsdialog_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; keyboard handler

(bind-alias cef_keyboard_handler_t i8)

(bind-func get_keyboard_handler:[cef_keyboard_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_keyboard_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; life_span handler

(bind-alias cef_life_span_handler_t i8)

(bind-func get_life_span_handler:[cef_life_span_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_life_span_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load handler

(bind-alias cef_load_handler_t i8)

(bind-func get_load_handler:[cef_load_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_load_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; render handler

(bind-alias cef_render_handler_t i8)

(bind-func get_render_handler:[cef_render_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_render_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; request handler

(bind-alias cef_request_handler_t i8)

(bind-func get_request_handler:[cef_request_handler_t*,cef_client_t*]*
  (lambda (self)
    (println "get_request_handler")
    null))

;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Called when a new message is received from a different process. Return true
;; (1) if the message was handled or false (0) otherwise. Do not keep a
;; reference to or attempt to access the message outside of this callback.
(bind-func on_process_message_received:[i32,cef_client_t*,cef_browser_t*,cef_process_id_t,cef_process_message_t*]*
  (lambda (self browser source_process message)
    0))

;; init client

(bind-func cef_init_client
  (lambda (obj:cef_client_t*)
    (let ((base (tref-ptr obj 0)))
      (tset! base 0 CEF_CLIENT_SIZE)
      (cef_init_base base)
      (tset! obj 1 (convert get_context_menu_handler))
      (tset! obj 2 (convert get_dialog_handler))
      (tset! obj 3 (convert get_display_handler))
      (tset! obj 4 (convert get_download_handler))
      (tset! obj 5 (convert get_drag_handler))
      (tset! obj 6 (convert get_find_handler))
      (tset! obj 7 (convert get_focus_handler))
      (tset! obj 8 (convert get_geolocation_handler))
      (tset! obj 9 (convert get_jsdialog_handler))
      (tset! obj 10 (convert get_keyboard_handler))
      (tset! obj 11 (convert get_life_span_handler))
      (tset! obj 12 (convert get_load_handler))
      (tset! obj 13 (convert get_render_handler))
      (tset! obj 14 (convert get_request_handler))
      (tset! obj 15 (convert on_process_message_received))
      (println "initialized client")
      obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; extras
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;


(bind-alias cef_request_context_t i8)

(bind-lib libcef cef_browser_host_create_browser [i32,cef_window_info_t*,cef_client_t*,cef_string_t*,cef_browser_settings_t*,cef_request_context_t*]*)



(impc:aot:insert-footer "xtmcef")
(define *xtmlib-cef-loaded* #t)
