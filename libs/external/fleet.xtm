;;; fleet.xtm -- (CoreOS) fleet management

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libnanomsg, libghttp

;;; Commentary:

;; basically, you should load libs/external/fleet-node.xtm on each
;; node, this file on the 'master' node

;; See examples/external/fleet.xtm for more info

;;; Code:

(sys:load-preload-check 'fleet)
(define *xtmlib-fleet-loaded* #t)

(sys:load "libs/external/ghttp.xtm")
(sys:load "libs/external/nanomsg.xtm")
(sys:load "libs/core/adt.xtm")

(bind-val FLEET_API_VERSION i8* "v1-alpha")

;; (ghttp_print_get_response "http://localhost:8080/v1-alpha/discovery.json")

(bind-func fleet_response_error_p
  (lambda (response:json_t* print_p:i1)
    (let ((err (json_object_get response "error")))
      (if (not (null? err))
          (begin (printf "Fleet error code %lld: %s\n"
                         (json_integer_value (json_object_get err "code"))
                         (json_string_value (json_object_get err "error")))
                 #t)
          #f))))

(bind-func fleet_get_api
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/discovery.json" host port FLEET_API_VERSION)
      (let ((response (ghttp_request_body_as_json (ghttp_perform_GET url))))
        (if (fleet_response_error_p response #t)
            null
            response)))))

(bind-func fleet_get_machines
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/machines" host port FLEET_API_VERSION)
      (let ((response (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url)) "machines")))
        (if (fleet_response_error_p response #t)
            null
            response)))))

(bind-func fleet_get_ip_list
  (lambda (host port)
    (let ((machines (fleet_get_machines host port))
          (iplist (list)))
      (if (and (not (null? machines)) (> (json_array_size machines) 0))
          (set! iplist
                (map (lambda (i) (String (json_string_value (json_object_get (json_array_get machines i) "primaryIP"))))
                     (range 0 (json_array_size machines)))))
      iplist)))

(bind-func fleet_print_machines
  (lambda (host:i8* port:i32)
    (let ((machines (fleet_get_machines host port)))
      (if (not (null? machines))
          (begin
            (println "Fleet machines:\n")
            (doloop (i (json_array_size machines))
              (let ((mchn (json_array_get machines i)))
                (printf "[%lld] id: %s\n" i (json_string_value (json_object_get mchn "id")))
                (printf "    IP: %s\n" (json_string_value (json_object_get mchn "primaryIP")))
                (println)))
            (json_decref machines))
          (println "Fleet: no machines found.")))))

(bind-func fleet_get_units
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/units" host port FLEET_API_VERSION)
      (let ((response (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url)) "units")))
        (if (fleet_response_error_p response #t)
            null
            response)))))

(bind-func fleet_print_unit
  (lambda (unit:json_t*)
    (printf "             name: %s\n" (json_string_value (json_object_get unit "name")))
    (printf "    current state: %s\n" (json_string_value (json_object_get unit "currentState")))
    (printf "    desired state: %s\n" (json_string_value (json_object_get unit "desiredState")))
    void))

(bind-func fleet_print_units
  (lambda (host:i8* port:i32)
    (let ((units (fleet_get_units host port)))
      (if (not (null? units))
          (begin
            (println "Fleet units:\n")
            (doloop (i (json_array_size units))
              (let ((unit (json_array_get units i)))
                (printf "[%lld]\n" i)
                (fleet_print_unit unit)))
            (json_decref units))
          (println "Fleet: no units found.")))))

(bind-func fleet_get_state
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32 unit_name:i8*)
      (sprintf url "http://%s:%d/%s/state?unitName=%s" host port FLEET_API_VERSION unit_name)
      (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url))
                       "states"))))

(bind-func fleet_get_state
  "get state of all units: see fleet_get_state_for_unit to get the state of a specific unit"
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/state" host port FLEET_API_VERSION)
      (let ((response (json_object_get (ghttp_request_body_as_json (ghttp_perform_GET url)) "states")))
        (if (fleet_response_error_p response #t)
            null
            response)))))

(bind-func fleet_print_unit_state
  (lambda (state:json_t*)
     (printf "                  name: %s\n\n" (json_string_value (json_object_get state "name")))
     (printf "             machineID: %s\n" (json_string_value (json_object_get state "machineID")))
     (printf "    systemdActiveState: %s\n" (json_string_value (json_object_get state "systemdActiveState")))
     (printf "      systemdLoadState: %s\n" (json_string_value (json_object_get state "systemdLoadState")))
     (printf "       systemdSubState: %s\n" (json_string_value (json_object_get state "systemdSubState")))
     (println)))

(bind-func fleet_print_state
  (lambda (host:i8* port:i32 unit_name:i8*)
    (let ((states (fleet_get_state_for_unit host port unit_name)))
      (if (or (null? states) (= (json_array_size states) 0))
          (println "Fleet: no states available.")
          (doloop (i (json_array_size states))
            (let ((state (json_array_get states i)))
              (printf "[%lld]\n" i)
              (fleet_print_unit_state state))))
      (if (not (null? states))
          (json_decref states))
      void)))

(bind-func fleet_print_state
  (lambda (host:i8* port:i32)
    (let ((states (fleet_get_state_all_units host port)))
      (if (or (null? states) (= (json_array_size states) 0))
          (println "Fleet: no states available.")
          (doloop (i (json_array_size states))
            (let ((state (json_array_get states i)))
              (printf "[%lld]\n" i)
              (fleet_print_unit_state state))))
      (if (not (null? states))
          (json_decref states))
      void)))

(bind-func fleet_delete_unit
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32 unit:i8*)
      (sprintf url "http://%s:%d/%s/units/%s" host port FLEET_API_VERSION unit)
      (let ((response (ghttp_request_body_as_json (ghttp_perform_DELETE url))))
        (if (not (fleet_response_error_p response #t))
            (println "Fleet: successfully deleted unit"))
        (json_decref response)))))

(bind-func fleet_set_unit_state
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32 unit_name:i8* unit:json_t*)
      (sprintf url "http://%s:%d/%s/units/%s" host port FLEET_API_VERSION unit_name)
      (let ((response (ghttp_request_body_as_json (ghttp_perform_PUT url unit))))
        (if (not (fleet_response_error_p response #t))
            (println "Fleet: successfully modified unit"))
        (json_decref response)))))

(bind-func fleet_set_unit_state
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32 unit_name:i8* desired_state:i8*)
      (if (or (= 0:i32 (strncmp "inactive" desired_state 9))
              (= 0:i32 (strncmp "loaded" desired_state 7))
              (= 0:i32 (strncmp "launched" desired_state 9)))
          (begin
            (sprintf url "http://%s:%d/%s/units/%s" host port FLEET_API_VERSION unit_name)
            (let ((state_json (json_object))
                  (res (json_object_set_new state_json "desiredState" (json_string desired_state))))
              (fleet_modify_unit host port "extempore.service" state_json)
              (json_decref state_json)))
          (println "Error: desired state must be either inactive, loaded or launched")))))

(bind-func fleet_submit_extempore_service
  (let ((url:i8* (zalloc 256)))
    (lambda (host:i8* port:i32)
      (sprintf url "http://%s:%d/%s/units/extempore.service" host port FLEET_API_VERSION)
      (let ((body (json_object))
            ;; (options (json_array))
            (err:json_error_t* (zalloc)))
        ;; create the extempore unit (JSON version)
        (json_object_set_new body "desiredState" (json_string "inactive"))
        ;; set the options
        (json_object_set_new
         body
         "options"
         (json_loads
          "[{\\22section\\22: \\22Unit\\22, \\22name\\22: \\22After\\22, \\22value\\22: \\22docker.service\\22}
            {\\22section\\22: \\22Unit\\22, \\22name\\22: \\22Requires\\22, \\22value\\22: \\22docker.service\\22}

            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22TimeoutStartSec\\22, \\22value\\22: \\220\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStartPre\\22, \\22value\\22: \\22-/usr/bin/docker kill benswift/extempore\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStartPre\\22, \\22value\\22: \\22-/usr/bin/docker pull benswift/extempore\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStart\\22, \\22value\\22: \\22/usr/bin/docker run --rm -p 7099:7099 -p 7098:7098 --privileged benswift/extempore --noaudio\\22}
            {\\22section\\22: \\22Service\\22, \\22name\\22: \\22ExecStop\\22, \\22value\\22: \\22/usr/bin/docker stop benswift/extempore\\22}

            {\\22section\\22: \\22X-Fleet\\22, \\22name\\22: \\22Global\\22, \\22value\\22: \\22true\\22}]"
          0 ;;flags
          err))
        (fleet_modify_unit host port "extempore.service" body)))))

(bind-val FLEET_NODE_SOCKET_LIST List:<i32,List*>*)
;; max number of nodes you can connect to at once
(bind-val FLEET_NODE_MAX i64 4)

(bind-func fleet_connect_to_nodes
  "creates new sockets each call - TODO: it should re-use existing ones"
  (lambda (host port)
    (set! FLEET_NODE_SOCKET_LIST
          (copy_h ;; copy the list to the heap - it's a global list
           (map (lambda (ip)
                  (printf "Connecting to node at %s ..." (cstring ip))
                  (let ((sock (create_socket NN_REQ))
                        (addr:i8* (salloc 32)))
                    (sprintf addr "tcp://%s:7199" (cstring ip))
                    (if (or (< sock 0)
                            (< (connect_socket sock addr) 0))
                        (nn_println_strerror "error in fleet_connect_to_nodes"))
                    (printf "sock = %d\n" sock)
                    sock))
                (fleet_get_ip_list host port))))))

(bind-val FLEET_NANOMSG_CLIENT_BUFLEN size_t 10000)

(bind-func fleet_message_node_sync
  (let ((buf:i8* (zalloc FLEET_NANOMSG_CLIENT_BUFLEN)))
    (lambda (msg:i8* sock:i32)
      (let ((sz_msg (+ (strlen msg) 1))
            (bytes (nn_send sock msg sz_msg 0)))
        (nn_sock_set_timeout sock 1000)
        (if (= bytes (convert sz_msg)) ;; should also check (< bytes (convert sz_msg))
            (let ((rbytes (nn_recv sock buf FLEET_NANOMSG_CLIENT_BUFLEN 0)))
              (if (> rbytes 0)
                  (begin (printf "%s\n" buf)
                         void)))
            (nn_println_strerror "error in request"))))))

(bind-func fleet_message_all_nodes_sync
  (let ((buf:i8* (zalloc (* FLEET_NODE_MAX FLEET_NANOMSG_CLIENT_BUFLEN))))
    (lambda (msg:i8*)
      (if (null? FLEET_NODE_SOCKET_LIST)
          (println "Error: FLEET_NODE_SOCKET_LIST is null.")
          (let ((sz_msg (+ (strlen msg) 1)))
            ;; send out the messages (scatter)
            (for-each (lambda (sock)
                        (nn_sock_set_timeout sock 1000)
                        (nn_send sock msg sz_msg NN_DONTWAIT))
                      FLEET_NODE_SOCKET_LIST)
            ;; wait to recieve on all sockets (gather)
            (for-each (lambda (sock)
                        (let ((offset (* (index_of sock FLEET_NODE_SOCKET_LIST)
                                         FLEET_NANOMSG_CLIENT_BUFLEN))
                              (rbytes (nn_recv sock (pref-ptr buf offset) FLEET_NANOMSG_CLIENT_BUFLEN 0)))
                          (if (> rbytes 0)
                              (begin (printf "[%d] %s\n" sock (pref-ptr buf offset))
                                     void))))
                      FLEET_NODE_SOCKET_LIST))))))

;; a high-level scheme api: requires *fleet-process-list* to be
;; defined

(define fleet-connect
  (lambda ()
    (if (not (defined? '*fleet-process-list*))
        (print "Error: *fleet-process-list* not defined\n")
        (begin (for-each (lambda (procinfo)
                           (ipc:connect (cadr procinfo) (car procinfo) (caddr procinfo))
                           (ipc:load (car procinfo) "libs/external/fleet-node.xtm"))
                         *fleet-process-list*)
               (fleet_connect_to_nodes (cadar *fleet-process-list*) 8080)))))

(define fleet-killemall
  (lambda (exit-code)
    (if (not (defined? '*fleet-process-list*))
        (print "Error: *fleet-process-list* not defined\n")
        (for-each (lambda (procinfo)
                    (ipc:call-async (car procinfo) 'quit exit-code))
                  *fleet-process-list*))))

(define fleet-eval
  (lambda (form)
    (cond ((not (defined? '*fleet-process-list*))
           (print "Error: *fleet-process-list* not defined\n"))
          (else
           (for-each (lambda (procinfo)
                       (ipc:eval-string (car procinfo)
                                        (if (string? form)
                                            form
                                            (sexpr->string form))))
                     *fleet-process-list*)))))

;; this is just for the coreos-vagrant demo
(define *fleet-process-list*
  '(("core-01-primary" "172.17.8.101" 7099)
    ("core-02-primary" "172.17.8.102" 7099)
    ("core-03-primary" "172.17.8.103" 7099)))

(define *xtmlib-fleet-loaded* #t)
