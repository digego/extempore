;;; hidapi.xtm -- HIDAPI library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: hidapi

;;; Commentary:

;; hidapi: https://github.com/signal11/hidapi

;;; Code:

;; SHOULD NOT NEED TO AOT-COMPILE THIS!

(sys:load-preload-check 'hibapi)

(define *xtmlib-hibapi-loaded* #t)

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libhidapi
  (cond ((string=? (sys:platform) "OSX")
         "hidapi.dylib")
        ((string=? (sys:platform) "Linux")
         "hidapi.so")
        ((string=? (sys:platform) "Windows")
         "hidapi.dll")))

;; bind the required types and function signatures (see kiss_fft.h)

;; type of kiss_fft_should be whatever the kiss_fft shared library was
;; been built with (check kiss_fft.h:47)

(bind-alias hid_device i8) ;; opaque type
(bind-alias wchar_t i16)

;; path(0), vendor_id(1), product_id(2), serial_number(3), release_number(4), manufacturer_string(5), product_string(6), usage_path(7), usage(8), interface_number(9), next(10)
(bind-type hid_device_info <i8*,i16,i16,wchar_t*,i16,wchar_t*,wchar_t*,i16,i16,i32,hid_device_info*>)

;; initialize hidapi
(bind-lib libhidapi hid_init [i32]*)
;; exit hidapi
(bind-lib libhidapi hid_exit [i32]*)

;; @brief Enumerate the HID Devices.

;; This function returns a linked list of all the HID devices
;; attached to the system which match vendor_id and product_id.
;; If @p vendor_id is set to 0 then any vendor matches.
;; If @p product_id is set to 0 then any product matches.
;; If @p vendor_id and @p product_id are both set to 0, then
;; all HID devices will be returned.

;; @ingroup API
;; @param vendor_id The Vendor ID (VID) of the types of device
;;  to open.
;; @param product_id The Product ID (PID) of the types of
;;  device to open.

;;   @returns
;;    This function returns a pointer to a linked list of type
;;    struct #hid_device, containing information about the HID devices
;;    attached to the system, or NULL in the case of failure. Free
;;    this linked list by calling hid_free_enumeration().

;; use #x0 #x0 for all devices
(bind-lib libhidapi hid_enumerate [hid_device_info*,i16,i16]*)
(bind-lib libhidapi hid_free_enumeration [void,hid_device_info*]*)

;; @brief Open a HID device using a Vendor ID (VID), Product ID
;; (PID) and optionally a serial number.

;; If @p serial_number is NULL, the first device with the
;; specified VID and PID is opened.

;; @ingroup API
;; @param vendor_id The Vendor ID (VID) of the device to open.
;; @param product_id The Product ID (PID) of the device to open.
;; @param serial_number The Serial Number of the device to open
;;                 (Optionally NULL).

;; @returns
;;  This function returns a pointer to a #hid_device object on
;;  success or NULL on failure.
(bind-lib libhidapi hid_open [hid_device*,i16,i16,i8*]*)

;; @brief Open a HID device by its path name.

;; The path name be determined by calling hid_enumerate(), or a
;; platform-specific path name can be used (eg: /dev/hidraw0 on
;; Linux).

;; @ingroup API
;;   @param path The path name of the device to open

;; @returns
;;  This function returns a pointer to a #hid_device object on
;;  success or NULL on failure.
(bind-lib libhidapi hid_open_path [hid_device*,i8*]*)

;; @brief Write an Output report to a HID device.

;; The first byte of @p data[] must contain the Report ID. For
;; devices which only support a single report, this must be set
;; to 0x0. The remaining bytes contain the report data. Since
;; the Report ID is mandatory, calls to hid_write() will always
;; contain one more byte than the report contains. For example,
;; if a hid report is 16 bytes long, 17 bytes must be passed to
;; hid_write(), the Report ID (or 0x0, for devices with a
;; single report), followed by the report data (16 bytes). In
;; this example, the length passed in would be 17.

;; hid_write() will send the data on the first OUT endpoint, if
;; one exists. If it does not, it will send the data through
;; the Control Endpoint (Endpoint 0).

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param data The data to send, including the report number as
;;  the first byte.
;; @param length The length in bytes of the data to send.

;; @returns
;;  This function returns the actual number of bytes written and
;;  -1 on error.
(bind-lib libhidapi hid_write [i32,hid_device*,i8*,size_t]*)


;; @brief Read an Input report from a HID device with timeout.

;; Input reports are returned
;; to the host through the INTERRUPT IN endpoint. The first byte will
;; contain the Report number if the device uses numbered reports.

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param data A buffer to put the read data into.
;; @param length The number of bytes to read. For devices with
;;  multiple reports, make sure to read an extra byte for
;;  the report number.
;; @param milliseconds timeout in milliseconds or -1 for blocking wait.

;; @returns
;;  This function returns the actual number of bytes read and
;;  -1 on error. If no packet was available to be read within
;;  the timeout period, this function returns 0.
(bind-lib libhidapi hid_read_timeout [i32,hid_device*,i16,size_t,i32]*)

;; @brief Read an Input report from a HID device.

;; Input reports are returned
;;   to the host through the INTERRUPT IN endpoint. The first byte will
;; contain the Report number if the device uses numbered reports.

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param data A buffer to put the read data into.
;; @param length The number of bytes to read. For devices with
;;  multiple reports, make sure to read an extra byte for
;;  the report number.

;; @returns
;;  This function returns the actual number of bytes read and
;;  -1 on error. If no packet was available to be read and
;;  the handle is in non-blocking mode, this function returns 0.
(bind-lib libhidapi hid_read [i32,hid_device*,i8*,size_t]*)

;; @brief Set the device handle to be non-blocking.

;; In non-blocking mode calls to hid_read() will return
;; immediately with a value of 0 if there is no data to be
;; read. In blocking mode, hid_read() will wait (block) until
;; there is data to read before returning.

;; Nonblocking can be turned on and off at any time.

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param nonblock enable or not the nonblocking reads
;;  - 1 to enable nonblocking
;;  - 0 to disable nonblocking.

;; @returns
;;  This function returns 0 on success and -1 on error.
(bind-lib libhidapi hid_set_nonblocking [i32,hid_device*,i32]*)

;; @brief Send a Feature report to the device.

;; Feature reports are sent over the Control endpoint as a
;; Set_Report transfer.  The first byte of @p data[] must
;; contain the Report ID. For devices which only support a
;; single report, this must be set to 0x0. The remaining bytes
;; contain the report data. Since the Report ID is mandatory,
;; calls to hid_send_feature_report() will always contain one
;; more byte than the report contains. For example, if a hid
;; report is 16 bytes long, 17 bytes must be passed to
;; hid_send_feature_report(): the Report ID (or 0x0, for
;; devices which do not use numbered reports), followed by the
;; report data (16 bytes). In this example, the length passed
;; in would be 17.

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param data The data to send, including the report number as
;;  the first byte.
;; @param length The length in bytes of the data to send, including
;;  the report number.

;; @returns
;;  This function returns the actual number of bytes written and
;;  -1 on error.
(bind-lib libhidapi hid_send_feature_report [i32,hid_device*,i8*,size_t]*)

;; @brief Get a feature report from a HID device.

;; Set the first byte of @p data[] to the Report ID of the
;; report to be read.  Make sure to allow space for this
;; extra byte in @p data[]. Upon return, the first byte will
;; still contain the Report ID, and the report data will
;; start in data[1].

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param data A buffer to put the read data into, including
;;  the Report ID. Set the first byte of @p data[] to the
;;  Report ID of the report to be read, or set it to zero
;;  if your device does not use numbered reports.
;; @param length The number of bytes to read, including an
;;  extra byte for the report ID. The buffer can be longer
;;  than the actual report.

;; @returns
;;  This function returns the number of bytes read plus
;;  one for the report ID (which is still in the first
;;  byte), or -1 on error.
(bind-lib libhidapi hid_get_feature_report [i32,hid_device*,i8*,size_t]*)

;; @brief Close a HID device
(bind-lib libhidapi hid_close [void,hid_device*]*)

;; @brief Get The Manufacturer String from a HID device.

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param string A wide string buffer to put the data into.
;; @param maxlen The length of the buffer in multiples of wchar_t.

;; @returns
;; This function returns 0 on success and -1 on error.
(bind-lib libhidapi hid_get_manufacturer_string [i32,hid_device*,wchar_t*,size_t]*)

;; @brief Get The Product String from a HID device.

;; @ingroup API
;; @param device A device handle returned from hid_open().
;; @param string A wide string buffer to put the data into.
;; @param maxlen The length of the buffer in multiples of wchar_t.

;; @returns
;; This function returns 0 on success and -1 on error.
(bind-lib libhidapi hid_get_product_string [i32,hid_device*,wchar_t*,size_t]*)

(bind-lib libhidapi hid_get_serial_number_string [i32,hid_device*,wchar_t*,size_t]*)

(bind-lib libhidapi hid_get_indexed_string [i32,hid_device*,i32,wchar_t*,size_t]*)

;; @brief Get a string describing the last error which occurred.

;; @ingroup API
;; @param device A device handle returned from hid_open().

;; @returns
;;  This function returns a string containing the last error
;;  which occurred or NULL if none has occurred.
(bind-lib libhidapi hid_error [wchar_t*,hid_device*]*)

(define *xtmlib-hidapi-loaded* #t)
