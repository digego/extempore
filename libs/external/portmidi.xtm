;;; portmidi.xtm -- cross-platform MIDI library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libportmidi

;;; Commentary:

;; OSX (with Homebrew): brew install portmidi
;; Debian/Ubuntu: sudo apt-get libportmidi-dev

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/portmidi.xtm" 'quiet))
(sys:load-preload-check 'portmidi)
(define *xtmlib-portmidi-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmportmidi")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libportmidi
  (cond ((string=? (sys:platform) "OSX")
         "libportmidi.dylib")
        ((string=? (sys:platform) "Linux")
         "libportmidi.so")
        ((string=? (sys:platform) "Windows")
         "portmidi.dll"))
  "xtmportmidi")

(impc:aot:import-ll "xtmportmidi")

;;;;;;;;;;;;;;;;;;;;;;
;; begin portmidi.h ;;
;;;;;;;;;;;;;;;;;;;;;;

;; #define FALSE 0
;; #define TRUE 1

;; /* default size of buffers for sysex transmission: */
(bind-val PM_DEFAULT_SYSEX_BUFFER_SIZE i32 1024)

;; ;; /** List of portmidi errors.*/
;; typedef enum {
;;     pmNoError = 0,
;;     pmNoData = 0, ;; /**< A "no error" return that also indicates no data avail. */
;;     pmGotData = 1, ;; /**< A "no error" return that also indicates data available */
;;     pmHostError = -10000,
;;     pmInvalidDeviceId, ;; /** out of range or
;;                        ;;  * output device when input is requested or
;;                        ;;  * input device when output is requested or
;;                        ;;  * device is already opened
;;                        ;;  */
;;     pmInsufficientMemory,
;;     pmBufferTooSmall,
;;     pmBufferOverflow,
;;     pmBadPtr, ;; /* PortMidiStream parameter is NULL or
;;               ;;  * stream is not opened or
;;               ;;  * stream is output when input is required or
;;               ;;  * stream is input when output is required */
;;     pmBadData, ;; /** illegal midi data, e.g. missing EOX */
;;     pmInternalError,
;;     pmBufferMaxSize ;; /** buffer is already as large as it can be */
;;     ;; /* NOTE: If you add a new error type, be sure to update Pm_GetErrorText() */
;; } PmError;

(bind-alias PmError enum)
(bind-val pmNoError PmError 0)
(bind-val pmNoData PmError 0)
(bind-val pmGotData PmError 1)
(bind-val pmHostError PmError -10000)
(bind-val pmInvalidDeviceId PmError -9999)
(bind-val pmInsufficientMemory PmError -9998)
(bind-val pmBufferTooSmall PmError -9997)
(bind-val pmBufferOverflow PmError -9996)
(bind-val pmBadPtr PmError -9995)
(bind-val pmBadData PmError -9994)
(bind-val pmInternalError PmError -9993)
(bind-val pmBufferMaxSize PmError -9992)

;; /**
;;     Pm_Initialize() is the library initialisation function - call this before
;;     using the library.
;; */
(bind-lib libportmidi Pm_Initialize [PmError]*)

;; /**
;;     Pm_Terminate() is the library termination function - call this after
;;     using the library.
;; */
(bind-lib libportmidi Pm_Terminate [PmError]*)

;; /**  A single PortMidiStream is a descriptor for an open MIDI device.
;; */
(bind-alias PortMidiStream i8)  ;; used as void pointer
(bind-alias PmStream PortMidiStream)

;; /**
;;     Test whether stream has a pending host error. Normally, the client finds
;;     out about errors through returned error codes, but some errors can occur
;;     asynchronously where the client does not
;;     explicitly call a function, and therefore cannot receive an error code.
;;     The client can test for a pending error using Pm_HasHostError(). If true,
;;     the error can be accessed and cleared by calling Pm_GetErrorText().
;;     Errors are also cleared by calling other functions that can return
;;     errors, e.g. Pm_OpenInput(), Pm_OpenOutput(), Pm_Read(), Pm_Write(). The
;;     client does not need to call Pm_HasHostError(). Any pending error will be
;;     reported the next time the client performs an explicit function call on
;;     the stream, e.g. an input or output operation. Until the error is cleared,
;;     no new error codes will be obtained, even for a different stream.
;; */
(bind-lib libportmidi Pm_HasHostError [i32,PortMidiStream*]*)


;; /**  Translate portmidi error number into human readable message.
;;     These strings are constants (set at compile time) so client has
;;     no need to allocate storage
;; */
(bind-lib libportmidi Pm_GetErrorText [i8*,PmError]*)

;; /**  Translate portmidi host error into human readable message.
;;     These strings are computed at run time, so client has to allocate storage.
;;     After this routine executes, the host error is cleared.
;; */
(bind-lib libportmidi Pm_GetHostErrorText [void,i8*,i32]*)

(bind-val HDRLENGTH i32 50)
(bind-val PM_HOST_ERROR_MSG_LEN i32 256)

;; /**
;;     Device enumeration mechanism.

;;     Device ids range from 0 to Pm_CountDevices()-1.

;; */
(bind-alias PmDeviceID i32)

(bind-val pmNoDevice i32 -1)

;; typedef struct {
;;     int structVersion; ;; /**< this internal structure version */

;;     const char *interf; ;; /**< underlying MIDI API, e.g. MMSystem or DirectX */
;;     const char *name;   ;; /**< device name, e.g. USB MidiSport 1x1 */
;;     int input; ;; /**< true iff input is available */
;;     int output; ;; /**< true iff output is available */
;;     int opened; ;; /**< used by generic PortMidi code to do error checking on arguments */

;; } PmDeviceInfo;

(bind-type PmDeviceInfo <i32,i8*,i8*,i32,i32,i32> (printer? . #f))

(bind-func print
  (lambda (pmdi:PmDeviceInfo*)
    (printf "<PmDeviceInfo: interface=%s name=%s I/O?:"
            (tref pmdi 1)
            (tref pmdi 2))
    (if (= (tref pmdi 3) 1)
        (printf "I"))
    (if (= (tref pmdi 4) 1)
        (printf "O"))
    (printf ">")
    void))

(bind-func toString
  (lambda (pmdi:PmDeviceInfo*)
    (let ((str:i8* (zalloc 256)))
      (sprintf str "<PmDeviceInfo: interface=%s name=%s I/O?:"
               (tref pmdi 1)
               (tref pmdi 2))
      (if (= (tref pmdi 3) 1)
          (sprintf str "I"))
      (if (= (tref pmdi 4) 1)
          (sprintf str "O"))
      (sprintf str ">")
      (String str))))

;; /**  Get devices count, ids range from 0 to Pm_CountDevices()-1. */
(bind-lib libportmidi Pm_CountDevices [i32]*)
;; /**
;;     Pm_GetDefaultInputDeviceID(), Pm_GetDefaultOutputDeviceID()

;;     Return the default device ID or pmNoDevice if there are no devices.
;;     The result (but not pmNoDevice) can be passed to Pm_OpenMidi().

;;     The default device can be specified using a small application
;;     named pmdefaults that is part of the PortMidi distribution. This
;;     program in turn uses the Java Preferences object created by
;;     java.util.prefs.Preferences.userRoot().node("/PortMidi"); the
;;     preference is set by calling
;;         prefs.put("PM_RECOMMENDED_OUTPUT_DEVICE", prefName);
;;     or  prefs.put("PM_RECOMMENDED_INPUT_DEVICE", prefName);

;;     In the statements above, prefName is a string describing the
;;     MIDI device in the form "interf, name" where interf identifies
;;     the underlying software system or API used by PortMdi to access
;;     devices and name is the name of the device. These correspond to
;;     the interf and name fields of a PmDeviceInfo. (Currently supported
;;     interfaces are "MMSystem" for Win32, "ALSA" for Linux, and
;;     "CoreMIDI" for OS X, so in fact, there is no choice of interface.)
;;     In "interf, name", the strings are actually substrings of
;;     the full interface and name strings. For example, the preference
;;     "Core, Sport" will match a device with interface "CoreMIDI"
;;     and name "In USB MidiSport 1x1". It will also match "CoreMIDI"
;;     and "In USB MidiSport 2x2". The devices are enumerated in device
;;     ID order, so the lowest device ID that matches the pattern becomes
;;     the default device. Finally, if the comma-space (", ") separator
;;     between interface and name parts of the preference is not found,
;;     the entire preference string is interpreted as a name, and the
;;     interface part is the empty string, which matches anything.

;;     On the MAC, preferences are stored in
;;       /Users/$NAME/Library/Preferences/com.apple.java.util.prefs.plist
;;     which is a binary file. In addition to the pmdefaults program,
;;     there are utilities that can read and edit this preference file.

;;     On the PC,

;;     On Linux,

;; */
(bind-lib libportmidi Pm_GetDefaultInputDeviceID [PmDeviceID]*)
;; /** see PmDeviceID Pm_GetDefaultInputDeviceID() */
(bind-lib libportmidi Pm_GetDefaultOutputDeviceID [PmDeviceID]*)

(bind-func pm_default_in
  "an xtlang wrapper around Pm_GetDefaultInputDeviceID"
  (lambda ()
    (Pm_GetDefaultInputDeviceID)))

(bind-func pm_default_out
  "an xtlang wrapper around Pm_GetDefaultOutputDeviceID"
  (lambda ()
    (Pm_GetDefaultOutputDeviceID)))

;; /**
;;     PmTimestamp is used to represent a millisecond clock with arbitrary
;;     start time. The type is used for all MIDI timestampes and clocks.
;; */
(bind-alias PmTimestamp i32)
(bind-alias PmTimeProcPtr [PmTimestamp,i8*]*)

;; /** TRUE if t1 before t2 */
;; #define PmBefore(t1,t2) ((t1-t2) < 0)

(bind-func PmBefore
  (lambda (t1:PmTimestamp t2:PmTimestamp)
    (< t1 t2)))
;; /**
;;     \defgroup grp_device Input/Output Devices Handling
;;     @{
;; */
;; /**
;;     Pm_GetDeviceInfo() returns a pointer to a PmDeviceInfo structure
;;     referring to the device specified by id.
;;     If id is out of range the function returns NULL.

;;     The returned structure is owned by the PortMidi implementation and must
;;     not be manipulated or freed. The pointer is guaranteed to be valid
;;     between calls to Pm_Initialize() and Pm_Terminate().
;; */
(bind-lib libportmidi Pm_GetDeviceInfo [PmDeviceInfo*,PmDeviceID]*)

;; /**
;;     Pm_OpenInput() and Pm_OpenOutput() open devices.

;;     stream is the address of a PortMidiStream pointer which will receive
;;     a pointer to the newly opened stream.

;;     inputDevice is the id of the device used for input (see PmDeviceID above).

;;     inputDriverInfo is a pointer to an optional driver specific data structure
;;     containing additional information for device setup or handle processing.
;;     inputDriverInfo is never required for correct operation. If not used
;;     inputDriverInfo should be NULL.

;;     outputDevice is the id of the device used for output (see PmDeviceID above.)

;;     outputDriverInfo is a pointer to an optional driver specific data structure
;;     containing additional information for device setup or handle processing.
;;     outputDriverInfo is never required for correct operation. If not used
;;     outputDriverInfo should be NULL.

;;     For input, the buffersize specifies the number of input events to be
;;     buffered waiting to be read using Pm_Read(). For output, buffersize
;;     specifies the number of output events to be buffered waiting for output.
;;     (In some cases -- see below -- PortMidi does not buffer output at all
;;     and merely passes data to a lower-level API, in which case buffersize
;;     is ignored.)

;;     latency is the delay in milliseconds applied to timestamps to determine
;;     when the output should actually occur. (If latency is < 0, 0 is assumed.)
;;     If latency is zero, timestamps are ignored and all output is delivered
;;     immediately. If latency is greater than zero, output is delayed until the
;;     message timestamp plus the latency. (NOTE: the time is measured relative
;;     to the time source indicated by time_proc. Timestamps are absolute,
;;     not relative delays or offsets.) In some cases, PortMidi can obtain
;;     better timing than your application by passing timestamps along to the
;;     device driver or hardware. Latency may also help you to synchronize midi
;;     data to audio data by matching midi latency to the audio buffer latency.

;;     time_proc is a pointer to a procedure that returns time in milliseconds. It
;;     may be NULL, in which case a default millisecond timebase (PortTime) is
;;     used. If the application wants to use PortTime, it should start the timer
;;     (call Pt_Start) before calling Pm_OpenInput or Pm_OpenOutput. If the
;;     application tries to start the timer *after* Pm_OpenInput or Pm_OpenOutput,
;;     it may get a ptAlreadyStarted error from Pt_Start, and the application's
;;     preferred time resolution and callback function will be ignored.
;;     time_proc result values are appended to incoming MIDI data, and time_proc
;;     times are used to schedule outgoing MIDI data (when latency is non-zero).

;;     time_info is a pointer passed to time_proc.

;;     Example: If I provide a timestamp of 5000, latency is 1, and time_proc
;;     returns 4990, then the desired output time will be when time_proc returns
;;     timestamp+latency = 5001. This will be 5001-4990 = 11ms from now.

;;     return value:
;;     Upon success Pm_Open() returns PmNoError and places a pointer to a
;;     valid PortMidiStream in the stream argument.
;;     If a call to Pm_Open() fails a nonzero error code is returned (see
;;     PMError above) and the value of port is invalid.

;;     Any stream that is successfully opened should eventually be closed
;;     by calling Pm_Close().

;; */
(bind-lib libportmidi Pm_OpenInput [PmError,PortMidiStream**,PmDeviceID,i8*,i32,PmTimeProcPtr,i8*]*)

(bind-lib libportmidi Pm_OpenOutput [PmError,PortMidiStream**,PmDeviceID,i8*,i32,PmTimeProcPtr,i8*,i32]*)

;; /**
;;    \defgroup grp_events_filters Events and Filters Handling
;;    @{
;; */

;; /*  \function PmError Pm_SetFilter(PortMidiStream* stream, i32 filters)
;;     Pm_SetFilter() sets filters on an open input stream to drop selected
;;     input types. By default, only active sensing messages are filtered.
;;     To prohibit, say, active sensing and sysex messages, call
;;     Pm_SetFilter(stream, PM_FILT_ACTIVE | PM_FILT_SYSEX);

;;     Filtering is useful when midi routing or midi thru functionality is being
;;     provided by the user application.
;;     For example, you may want to exclude timing messages (clock, MTC, start/stop/continue),
;;     while allowing note-related messages to pass.
;;     Or you may be using a sequencer or drum-machine for MIDI clock information but want to
;;     exclude any notes it may play.
;;  */

;; /* Filter bit-mask definitions */
;; /** filter active sensing messages (0xFE): */
(bind-val PM_FILT_ACTIVE i32 (<< 1 #x0E))
;; /** filter system exclusive messages (0xF0): */
(bind-val PM_FILT_SYSEX i32 (<< 1 #x00))
;; /** filter MIDI clock message (0xF8) */
(bind-val PM_FILT_CLOCK i32 (<< 1 #x08))
;; /** filter play messages (start 0xFA, stop 0xFC, continue 0xFB) */
(bind-val PM_FILT_PLAY i32 (+ (<< 1 #x0A) (<< 1 #x0C) (<< 1 #x0B)))
;; ;; /** filter tick messages (0xF9) */
(bind-val PM_FILT_TICK i32 (<< 1 #x09))
;; /** filter undefined FD messages */
(bind-val PM_FILT_FD i32 (<< 1 #x0D))
;; /** filter undefined real-time messages */
(bind-val PM_FILT_UNDEFINED i32 PM_FILT_FD)
;; /** filter reset messages (0xFF) */
(bind-val PM_FILT_RESET i32 (<< 1 #x0F))
;; /** filter all real-time messages */
(bind-val PM_FILT_REALTIME i32 (+ PM_FILT_ACTIVE PM_FILT_SYSEX PM_FILT_CLOCK PM_FILT_PLAY PM_FILT_UNDEFINED PM_FILT_RESET PM_FILT_TICK))
;; /** filter note-on and note-off (0x90-0x9F and 0x80-0x8F */
(bind-val PM_FILT_NOTE i32 (+ (<< 1 #x19) (<< 1 #x18)))
;; /** filter channel aftertouch (most midi controllers use this) (0xD0-0xDF)*/
(bind-val PM_FILT_CHANNEL_AFTERTOUCH i32 (<< 1 #x1D))
;; /** per-note aftertouch (0xA0-0xAF) */
(bind-val PM_FILT_POLY_AFTERTOUCH i32 (<< 1 #x1A))
;; /** filter both channel and poly aftertouch */
(bind-val PM_FILT_AFTERTOUCH i32 (+ PM_FILT_CHANNEL_AFTERTOUCH PM_FILT_POLY_AFTERTOUCH))
;; /** Program changes (0xC0-0xCF) */
(bind-val PM_FILT_PROGRAM i32 (<< 1 #x1C))
;; /** Control Changes (CC's) (0xB0-0xBF)*/
(bind-val PM_FILT_CONTROL i32 (<< 1 #x1B))
;; /** Pitch Bender (0xE0-0xEF*/
(bind-val PM_FILT_PITCHBEND i32 (<< 1 #x1E))
;; /** MIDI Time Code (0xF1)*/
(bind-val PM_FILT_MTC i32 (<< 1 #x01))
;; /** Song Position (0xF2) */
(bind-val PM_FILT_SONG_POSITION i32 (<< 1 #x02))
;; /** Song Select (0xF3)*/
(bind-val PM_FILT_SONG_SELECT i32 (<< 1 #x03))
;; /** Tuning request (0xF6)*/
(bind-val PM_FILT_TUNE i32 (<< 1 #x06))
;; /** All System Common messages (mtc, song position, song select, tune request) */
(bind-val PM_FILT_SYSTEMCOMMON i32 (+ PM_FILT_MTC PM_FILT_SONG_POSITION PM_FILT_SONG_SELECT PM_FILT_TUNE))

(bind-lib libportmidi Pm_SetFilter [PmError,PortMidiStream*,i32]*)

;; /**
;;     Pm_SetChannelMask() filters incoming messages based on channel.
;;     The mask is a 16-bit bitfield corresponding to appropriate channels.
;;     The Pm_Channel macro can assist in calling this function.
;;     i.e. to set receive only input on channel 1, call with
;;     Pm_SetChannelMask(Pm_Channel(1));
;;     Multiple channels should be OR'd together, like
;;     Pm_SetChannelMask(Pm_Channel(10) | Pm_Channel(11))

;;     Note that channels are numbered 0 to 15 (not 1 to 16). Most
;;     synthesizer and interfaces number channels starting at 1, but
;;     PortMidi numbers channels starting at 0.

;;     All channels are allowed by default
;; */
(bind-lib libportmidi Pm_SetChannelMask [PmError,PortMidiStream*,i32]*)

;; /**
;;     Pm_Abort() terminates outgoing messages immediately
;;     The caller should immediately close the output port;
;;     this call may result in transmission of a partial midi message.
;;     There is no abort for Midi input because the user can simply
;;     ignore messages in the buffer and close an input device at
;;     any time.
;;  */
(bind-lib libportmidi Pm_Abort [PmError,PortMidiStream*]*)

;; /**
;;     Pm_Close() closes a midi stream, flushing any pending buffers.
;;     (PortMidi attempts to close open streams when the application
;;     exits -- this is particularly difficult under Windows.)
;; */
(bind-lib libportmidi Pm_Close [PmError,PortMidiStream*]*)

;; /**
;;     Pm_Message() encodes a short Midi message into a 32-bit word. If data1
;;     and/or data2 are not present, use zero.

;;     Pm_MessageStatus(), Pm_MessageData1(), and
;;     Pm_MessageData2() extract fields from a 32-bit midi message.
;; */
(bind-alias PmMessage i32) ;; /**< see PmEvent */
;; #define Pm_Message(status, data1, data2) ((((data2) << 16) & 0xFF0000) | (((data1) << 8) & 0xFF00) | ((status) & 0xFF))
(bind-func Pm_Message
  (lambda (status:PmMessage data1:PmMessage data2:PmMessage)
    (+ (& (<< data2 16) #xFF0000)
       (& (<< data1 8) #xFF00)
       (& status #xFF))))

;; #define Pm_MessageStatus(msg) ((msg) & 0xFF)
(bind-func Pm_Message_Status
  (lambda (msg:PmMessage)
    (& msg #xFF)))

(bind-func Pm_Message_Channel
  (lambda (msg:PmMessage)
    (& msg #x0F)))

(bind-func Pm_Message_Type
  (lambda (msg:PmMessage)
    (& msg #xF0)))

;; #define Pm_MessageData1(msg) (((msg) >> 8) & 0xFF)
(bind-func Pm_Message_Data1
  (lambda (msg:PmMessage)
    (& (>> msg 8) #xFF)))

;; #define Pm_MessageData2(msg) (((msg) >> 16) & 0xFF)
(bind-func Pm_Message_Data2
  (lambda (msg:PmMessage)
    (& (>> msg 16) #xFF)))

;; /**
;;    All midi data comes in the form of PmEvent structures. A sysex
;;    message is encoded as a sequence of PmEvent structures, with each
;;    structure carrying 4 bytes of the message, i.e. only the first
;;    PmEvent carries the status byte.

;;    Note that MIDI allows nested messages: the so-called "real-time" MIDI
;;    messages can be inserted into the MIDI byte stream at any location,
;;    including within a sysex message. MIDI real-time messages are one-byte
;;    messages used mainly for timing (see the MIDI spec). PortMidi retains
;;    the order of non-real-time MIDI messages on both input and output, but
;;    it does not specify exactly how real-time messages are processed. This
;;    is particulary problematic for MIDI input, because the input parser
;;    must either prepare to buffer an unlimited number of sysex message
;;    bytes or to buffer an unlimited number of real-time messages that
;;    arrive embedded in a long sysex message. To simplify things, the input
;;    parser is allowed to pass real-time MIDI messages embedded within a
;;    sysex message, and it is up to the client to detect, process, and
;;    remove these messages as they arrive.

;;    When receiving sysex messages, the sysex message is terminated
;;    by either an EOX status byte (anywhere in the 4 byte messages) or
;;    by a non-real-time status byte in the low order byte of the message.
;;    If you get a non-real-time status byte but there was no EOX byte, it
;;    means the sysex message was somehow truncated. This is not
;;    considered an error; e.g., a missing EOX can result from the user
;;    disconnecting a MIDI cable during sysex transmission.

;;    A real-time message can occur within a sysex message. A real-time
;;    message will always occupy a full PmEvent with the status byte in
;;    the low-order byte of the PmEvent message field. (This implies that
;;    the byte-order of sysex bytes and real-time message bytes may not
;;    be preserved -- for example, if a real-time message arrives after
;;    3 bytes of a sysex message, the real-time message will be delivered
;;    first. The first word of the sysex message will be delivered only
;;    after the 4th byte arrives, filling the 4-byte PmEvent message field.

;;    The timestamp field is observed when the output port is opened with
;;    a non-zero latency. A timestamp of zero means "use the current time",
;;    which in turn means to deliver the message with a delay of
;;    latency (the latency parameter used when opening the output port.)
;;    Do not expect PortMidi to sort data according to timestamps --
;;    messages should be sent in the correct order, and timestamps MUST
;;    be non-decreasing. See also "Example" for Pm_OpenOutput() above.

;;    A sysex message will generally fill many PmEvent structures. On
;;    output to a PortMidiStream with non-zero latency, the first timestamp
;;    on sysex message data will determine the time to begin sending the
;;    message. PortMidi implementations may ignore timestamps for the
;;    remainder of the sysex message.

;;    On input, the timestamp ideally denotes the arrival time of the
;;    status byte of the message. The first timestamp on sysex message
;;    data will be valid. Subsequent timestamps may denote
;;    when message bytes were actually received, or they may be simply
;;    copies of the first timestamp.

;;    Timestamps for nested messages: If a real-time message arrives in
;;    the middle of some other message, it is enqueued immediately with
;;    the timestamp corresponding to its arrival time. The interrupted
;;    non-real-time message or 4-byte packet of sysex data will be enqueued
;;    later. The timestamp of interrupted data will be equal to that of
;;    the interrupting real-time message to insure that timestamps are
;;    non-decreasing.
;;  */
;; typedef struct {
;;     PmMessage      message;
;;     PmTimestamp    timestamp;
;; } PmEvent;
(bind-type PmEvent <PmMessage,PmTimestamp> (printer? . #f))

(bind-func Pm_Event_Message
  (lambda (event:PmEvent*)
    (tref event 0)))

(bind-func Pm_Event_Timestamp
  (lambda (event:PmEvent*)
    (tref event 1)))

(bind-func print
  "specialised print function for PmEvent*"
  (lambda (pmevent:PmEvent*)
    (printf "<PmEvent: type=%d chan=%d data1=%d data2=%d timestamp=%d>"
            (Pm_Message_Type (tref pmevent 0))
            (Pm_Message_Channel (tref pmevent 0))
            (Pm_Message_Data1 (tref pmevent 0))
            (Pm_Message_Data2 (tref pmevent 0))
            (tref pmevent 1))
    void))


(bind-func toString
  "specialised toString function for PmEvent*"
  (lambda (pmevent:PmEvent*)
    (let ((str:i8* (salloc 256)))
      (sprintf str "<PmEvent: type=%d chan=%d data1=%d data2=%d timestamp=%d>"
              (Pm_Message_Type (tref pmevent 0))
              (Pm_Message_Channel (tref pmevent 0))
              (Pm_Message_Data1 (tref pmevent 0))
              (Pm_Message_Data2 (tref pmevent 0))
               (tref pmevent 1))
      (String str))))


;; a few more useful functions for pulling data out of PmEvent

(bind-func Pm_Event_Channel
  (lambda (event:PmEvent*)
    (& (tref event 0) #x0F)))

(bind-func Pm_Event_Type
  (lambda (event:PmEvent*)
    (& (tref event 0) #xF0)))

(bind-func Pm_Event_Data1
  (lambda (event:PmEvent*)
    (& (>> (tref event 0) 8) #xFF)))

(bind-func Pm_Event_Data2
  (lambda (event:PmEvent*)
    (& (>> (tref event 0) 16) #xFF)))

;; /**
;;     @}
;; */
;; /** \defgroup grp_io Reading and Writing Midi Messages
;;     @{
;; */
;; /**
;;     Pm_Read() retrieves midi data into a buffer, and returns the number
;;     of events read. Result is a non-negative number unless an error occurs,
;;     in which case a PmError value will be returned.

;;     Buffer Overflow

;;     The problem: if an input overflow occurs, data will be lost, ultimately
;;     because there is no flow control all the way back to the data source.
;;     When data is lost, the receiver should be notified and some sort of
;;     graceful recovery should take place, e.g. you shouldn't resume receiving
;;     in the middle of a long sysex message.

;;     With a lock-free fifo, which is pretty much what we're stuck with to
;;     enable portability to the Mac, it's tricky for the producer and consumer
;;     to synchronously reset the buffer and resume normal operation.

;;     Solution: the buffer managed by PortMidi will be flushed when an overflow
;;     occurs. The consumer (Pm_Read()) gets an error message (pmBufferOverflow)
;;     and ordinary processing resumes as soon as a new message arrives. The
;;     remainder of a partial sysex message is not considered to be a "new
;;     message" and will be flushed as well.

;; */
(bind-lib libportmidi Pm_Read [i32,PortMidiStream*,PmEvent*,i32]*)

;; /**
;;     Pm_Poll() tests whether input is available,
;;     returning TRUE, FALSE, or an error value.
;; */
(bind-lib libportmidi Pm_Poll [PmError,PortMidiStream*]*)

;; /**
;;     Pm_Write() writes midi data from a buffer. This may contain:
;;         - short messages
;;     or
;;         - sysex messages that are converted into a sequence of PmEvent
;;           structures, e.g. sending data from a file or forwarding them
;;           from midi input.

;;     Use Pm_WriteSysEx() to write a sysex message stored as a contiguous
;;     array of bytes.

;;     Sysex data may contain embedded real-time messages.
;; */
(bind-lib libportmidi Pm_Write [PmError,PortMidiStream*,PmEvent*,i32]*)

;; /**
;;     Pm_WriteShort() writes a timestamped non-system-exclusive midi message.
;;     Messages are delivered in order as received, and timestamps must be
;;     non-decreasing. (But timestamps are ignored if the stream was opened
;;     with latency = 0.)
;; */
(bind-lib libportmidi Pm_WriteShort [PmError,PortMidiStream*,PmTimestamp,i32]*)

(bind-func pm_write
  "a wrapper around Pm_WriteShort with timestamp == 0

most of the time this is what you'll want to call (especially from
Scheme)"
  (lambda (stream message)
    (Pm_WriteShort stream 0 message)))

(bind-func pm_send
  "a wrapper around Pm_WriteShort with timestamp == 0

most of the time this is what you'll want to call (especially from
Scheme)"
  (lambda (stream type chan a b)
    (Pm_WriteShort stream 0 (Pm_Message (+ type chan) a b))))

;; /**
;;     Pm_WriteSysEx() writes a timestamped system-exclusive midi message.
;; */
(bind-lib libportmidi Pm_WriteSysEx [PmError,PortMidiStream*,PmTimestamp,i8*]*)

;;;;;;;;;;;;;;;;;;;;
;; end portmidi.h ;;
;;;;;;;;;;;;;;;;;;;;

;; the message flags

(bind-val MIDI_NOTE_ON i32 #x90 "args: key, velocity")
(bind-val MIDI_NOTE_OFF i32 #x80 "args: key, velocity")
(bind-val MIDI_CHANNEL_AFTERTOUCH i32 #xD0)
(bind-val MIDI_POLY_AFTERTOUCH i32 #xA0)
(bind-val MIDI_PROGRAM_CHANGE i32 #xC0 "args: value, ignored")
(bind-val MIDI_CONTROL_CHANGE i32 #xB0 "args: controller, value")
(bind-val MIDI_CC i32 #xB0 "args: controller, value")
(bind-val MIDI_PITCH_BEND i32 #xE0 "args: lsb (7 bits), msb (7 bits)")

(bind-val MIDI_SYSEX i32 #xF0)
(bind-val MIDI_TIME_CODE i32 #xF1)
(bind-val MIDI_SONG_POSITION i32 #xF2)
(bind-val MIDI_SONG_SELECT i32 #xF3)
(bind-val MIDI_TUNE i32 #xF6)
(bind-val MIDI_SYSEX_END i32 #xF7)
(bind-val MIDI_TIMIING_CLOCK i32 #xF8)
(bind-val MIDI_START i32 #xFA)
(bind-val MIDI_CONTINUE i32 #xFB)
(bind-val MIDI_STOP i32 #xFC)
(bind-val MIDI_ACTIVE_SENSING i32 #xFE)
(bind-val MIDI_RESET i32 #xFF)

;; bind them in scheme, too

(impc:aot:do-or-emit (define *midi-note-on* #x90))
(impc:aot:do-or-emit (define *midi-note-off* #x80))
(impc:aot:do-or-emit (define *midi-channel-aftertouch* #xD0))
(impc:aot:do-or-emit (define *midi-poly-aftertouch* #xA0))
(impc:aot:do-or-emit (define *midi-program-change* #xC0))
(impc:aot:do-or-emit (define *midi-control-change* #xB0))
(impc:aot:do-or-emit (define *midi-cc* #xB0))
(impc:aot:do-or-emit (define *midi-pitch-bend* #xE0))

(impc:aot:do-or-emit (define *midi-sysex* #xF0))
(impc:aot:do-or-emit (define *midi-time-code* #xF1))
(impc:aot:do-or-emit (define *midi-song-position* #xF2))
(impc:aot:do-or-emit (define *midi-song-select* #xF3))
(impc:aot:do-or-emit (define *midi-tune* #xF6))
(impc:aot:do-or-emit (define *midi-sysex-end* #xF7))
(impc:aot:do-or-emit (define *midi-timiing-clock* #xF8))
(impc:aot:do-or-emit (define *midi-start* #xFA))
(impc:aot:do-or-emit (define *midi-continue* #xFB))
(impc:aot:do-or-emit (define *midi-stop* #xFC))
(impc:aot:do-or-emit (define *midi-active-sensing* #xFE))
(impc:aot:do-or-emit (define *midi-reset* #xFF))

;; xtlang wrapper functions

(bind-func pm_initialize
  (lambda ()
    (if (<> (Pm_Initialize) pmNoError)
        (println "Error initialising Portmidi")
        (println "Portmidi successfully initialised."))))

(bind-func pm_print_devices
  (lambda ()
    (let ((ndev (Pm_CountDevices)))
      (if (= ndev 0)
          (println "No MIDI devices found")
          (begin
            (println "\n-- MIDI input devices --\n")
            (doloop (i ndev)
              (if (= (tref (Pm_GetDeviceInfo i) 3) 1)
                  (println "  device id" i ":" (Pm_GetDeviceInfo i))))
            (println "\n-- MIDI output devices --\n")
            (doloop (i ndev)
              (if (= (tref (Pm_GetDeviceInfo i) 4) 1)
                  (println "  device id" i ":" (Pm_GetDeviceInfo i)))))))))

(bind-func pm_input_device_with_name
  "return device ID for input device with NAME

returns -1 if no input device with that name is found"
  (lambda (name:i8*)
    (let ((ndev (Pm_CountDevices))
          (dev -1))
      (doloop (i ndev)
        (if (and (= (strncmp (tref (Pm_GetDeviceInfo i) 2) name 1024) 0)
                 (= (tref (Pm_GetDeviceInfo i) 3) 1))
            (set! dev i)))
      dev)))

(bind-func pm_output_device_with_name
  "return device ID for output device with NAME

returns -1 if no output device with that name is found"
  (lambda (name)
    (let ((ndev (Pm_CountDevices))
          (dev -1))
      (doloop (i ndev)
        (if (and (= (strncmp (tref (Pm_GetDeviceInfo i) 2) name 1024) 0)
                 (= (tref (Pm_GetDeviceInfo i) 4) 1))
            (set! dev i)))
      dev)))

(bind-func pm_current_time_in_ms
  "return current time in ms - required for the portmidi API

@param time_info - ignored
@return - current time (ms), retrieved through call to (now)"
  (lambda (time_info:i8*)
    (convert (* 1000.:f (/ (convert (now) float) 44100.:f)) i32)))

(bind-val PM_MIDI_BUFFER_SIZE i32 256
  "default size of the MIDI input/output buffers")

(bind-func pm_create_input_stream
  "create a midi *input* PmStream pointer for device

Check the output of pm_print_devices to see the device id of your
input device(s)

@paran dev - device id of a midi input device"
  (lambda (dev)
    (let ((stream_ptr:PmStream** (salloc))
          (res (Pm_OpenInput stream_ptr dev null PM_MIDI_BUFFER_SIZE
                             (convert (get_native_fptr pm_current_time_in_ms)) null)))
      (if (<> res pmNoError)
          (println "PortMIDI error opening input port:" (String (Pm_GetErrorText res))))
      (pref stream_ptr 0))))

(bind-func pm_create_output_stream
  "create a midi *output* PmStream pointer for device

Check the output of pm_print_devices to see the device id of your
output device(s)

@paran dev - device id of a midi output device"
  (lambda (dev)
    (let ((stream_ptr:PmStream** (salloc))
          (res (Pm_OpenOutput stream_ptr dev null PM_MIDI_BUFFER_SIZE
                              (convert (get_native_fptr pm_current_time_in_ms)) null 0)))
      (if (<> res pmNoError)
          (println "PortMIDI error opening output port:" (String (Pm_GetErrorText res))))
      (pref stream_ptr 0))))

;; these functions work with

(bind-func PmEvent_note_on_p
  (lambda (event:PmEvent*)
    (= (& (tref event 0) #xF0) MIDI_NOTE_ON)))

(bind-func PmEvent_note_off_p
  (lambda (event:PmEvent*)
    (= (& (tref event 0) #xF0) MIDI_NOTE_OFF)))

(bind-func PmEvent_cc_p
  (lambda (event:PmEvent*)
    (= (& (tref event 0) #xF0) MIDI_CONTROL_CHANGE)))

;; here are some defaults (globalvars); handy for use with the shared system

;; define a default output stream globalvar
(bind-val midi_out PmStream*) ;;(pm_create_output_stream (pm_default_out)))

;; OVERRIDE default midi out
(bind-func set_midi_out
  (lambda (idx)
     (set! midi_out (pm_create_output_stream idx))
     midi_out))

(bind-func get_midi_out
  (lambda ()
    midi_out))

;; start with a default midi stream
(bind-val midi_in PmStream*) ;; (pm_create_input_stream (pm_default_in)))

;; OVERRIDE default midi in
(bind-func set_midi_in
  (lambda (idx)
     (set! midi_in (pm_create_input_stream idx))
     midi_in))

(bind-func get_midi_in
  (lambda ()
    midi_in))

(bind-func print_midi_devices
  (lambda ()
    (pm_print_devices)))

(bind-func start_midi
  (lambda ()
    (pm_initialize)))

;; scheme helper functions

(impc:aot:do-or-emit
 (define play-midi-note
   (lambda (time device pitch velocity duration channel)
     (callback time 'pm_send device *midi-note-on* channel pitch velocity)
     (callback (+ time duration) 'pm_send device *midi-note-off* channel pitch velocity))))

(impc:aot:do-or-emit
 (define send-midi-cc
   (lambda (time device cc val channel)
     (callback time 'pm_send device *midi-cc* channel (real->integer cc) (real->integer val)))))

;; homophonic playnote
(impc:aot:do-or-emit
 (define homo-play-midi-note
   (let ((notes (make-vector 127 0)))
     (lambda (time device pitch velocity duration channel)
       (if (> time (vector-ref notes pitch))
           (let ((dur (- duration (* 2 *au:block-size*))))
             (vector-set! notes pitch (+ time dur))
             (callback time 'pm_send device *midi-note-on* channel pitch velocity)
             (callback (+ time duration) 'pm_send device *midi-note-off* channel pitch velocity)))))))

;; A midi-specific play macro
(impc:aot:do-or-emit
  (define *midioffset* 0))

(impc:aot:do-or-emit
 (define-macro (mplay . args)
   (if (symbol? (car args))
       `(if (list? ,(cadr args))
            (map (lambda (p)
                  (play-midi-note (+ (*metro* beat) *midioffset*) ,(car args)
                    (real->integer p)
                    (real->integer ,(caddr args))
                    (*metro* 'dur ,(car (cdddr args)))
                    (real->integer , (car (cddddr args)))))
              ,(cadr args))
            (play-midi-note (+ (*metro* beat) *midioffset*) ,(car args)
                              (real->integer ,(cadr args))
                              (real->integer ,(caddr args))
                              (*metro* 'dur ,(car (cdddr args)))
                              (real->integer , (car (cddddr args)))))
        `(if (list? ,(caddr args))
             (map (lambda (p)
              (play-midi-note (+ (*metro* (+ beat ,(car args))) *midioffset*) ,(cadr args)
                                (real->integer p)
                                (real->integer ,(car (cdddr args)))
                                (*metro* 'dur ,(cadr (cdddr args)))
                                (real->integer , (cadr (cddddr args)))))
                  ,(caddr args))
              (play-midi-note (+ (*metro* (+ beat ,(car args))) *midioffset*) ,(cadr args)
                                (real->integer ,(caddr args))
                                (real->integer ,(car (cdddr args)))
                                (*metro* 'dur ,(cadr (cdddr args)))
                                (real->integer , (cadr (cddddr args))))))))

(impc:aot:do-or-emit
  (define-macro (mcc . args)
    (if (symbol? (car args))
        `(send-midi-cc (+ (*metro* beat) *midioffset*) ,(car args)
                        (real->integer ,(cadr args))
                        (real->integer ,(caddr args))
                        (real->integer ,(car (cdddr args))))
        `(send-midi-cc (+ (*metro* (+ beat ,(car args))) *midioffset*) ,(cadr args)
                        (real->integer ,(caddr args))
                        (real->integer ,(car (cdddr args)))
                        (real->integer ,(car (cddddr args)))))))


(impc:aot:do-or-emit
 (define-macro (mplayob o b . args)
   `(if (= 0 (modulo (+ ,o beat) ,b))
        (mplay ,@args)
        #f)))

(impc:aot:do-or-emit
 (define-macro (mplayobs l b . args)
   `(if (member (modulo beat ,b) ,l)
        (mplay ,@args)
        #f)))

;; ;; uncomment if you want to use play instead of mplay
;; (impc:aot:do-or-emit
;;  (define-macro (play . args)
;;    (if (symbol? (car args))
;;        `(play-midi-note (*metro* beat) ,(car args)
;;                         (real->integer ,(cadr args))
;;                         (real->integer ,(caddr args))
;;                         (*metro* 'dur ,(car (cdddr args)))
;;                         (real->integer , (car (cddddr args))))
;;        `(play-midi-note (*metro* (+ beat ,(car args))) ,(cadr args)
;;                         (real->integer ,(caddr args))
;;                         (real->integer ,(car (cdddr args)))
;;                         (*metro* 'dur ,(cadr (cdddr args)))
;;                         (real->integer , (cadr (cddddr args)))))))

(impc:aot:insert-footer "xtmportmidi")
(define *xtmlib-portmidi-loaded* #t)
