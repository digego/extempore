;;; gl-objects.xtm -- xtlang types for dealing with modern OpenGL "objects"

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL

;;; Commentary:

;; Helper types for working with Vertex Buffer Objects (VBOs), Vertex
;; Array Objects (VAOs), Framebuffer Objects (FBOs) and OpenGL shaders
;; in general.

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/gl-objects.xtm" 'quiet))
(sys:load-preload-check 'gl-objects)
(define *xtmlib-gl-objects-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/external/gl.xtm")
 (sys:load "libs/external/stb_image.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet)
 (sys:load "libs/external/gl.xtm" 'quiet)
 (sys:load "libs/external/stb_image.xtm" 'quiet))

(impc:aot:insert-header "xtmgl-objects")
(impc:aot:import-ll "xtmgl-objects")


;; gl print helper

(bind-func gl_print_error
  (lambda (msg:i8*)
    (let ((err (glGetError)))
      (cond
       ((= err GL_INVALID_ENUM)
        (printf "%s: Invalid Enum\n" msg))
       ((= err GL_INVALID_VALUE)
        (printf "%s: Invalid Value\n" msg))
       ((= err GL_INVALID_OPERATION)
        (printf "%s: Invalid Operation\n" msg))
       ((= err GL_OUT_OF_MEMORY)
        (printf "%s: Out Of Memory\n" msg))
       ((= err GL_INVALID_FRAMEBUFFER_OPERATION)
        (printf "%s: Invalid Framebuffer Operation\n" msg))
       ((= err GL_NO_ERROR)
        1:i32)
       (else
        (printf "%s\n" msg)))
      void)))

(bind-func gl_print_error
  (lambda ()
    (gl_print_error:[void,i8*]* "OpenGL Error")))

(bind-func gl_print_driver_info
  (lambda ()
    (println "--------------------------------------------------")
    (println "Extempore OpenGL driver info")
    (println "--------------------------------------------------")
    (printf "  Vendor:  %s\n" (glGetString GL_VENDOR))
    (printf "Renderer:  %s\n" (glGetString GL_RENDERER))
    (printf " Version:  %s\n" (glGetString GL_VERSION))
    (println "--------------------------------------------------")
    void))

;; Vertex Buffer Object

;; id, type, size (bytes), data
(bind-type VBO <GLuint,GLenum,GLsizeiptr,GLvoid*> (printer? . #f))

;; accessors

(bind-func VBO_id
  (lambda (vbo:VBO*)
    (tref vbo 0)))

(bind-func VBO_type
  (lambda (vbo:VBO*)
    (tref vbo 1)))

(bind-func VBO_size
  (lambda (vbo:VBO*)
    (tref vbo 2)))

(bind-func VBO_data
  (lambda (vbo:VBO*)
    (tref vbo 3)))

(bind-func print
  (lambda (vbo:VBO*)
    (if (null? vbo)
        (printf "<VBO: 0x0>")
        (printf "<VBO: id=%d type=%s nbytes=%d data=%p>"
                (tref vbo 0)
                (let ((type (VBO_type vbo)))
                  (cond ((= type GL_BYTE) "byte")
                        ((= type GL_SHORT) "short")
                        ((= type GL_INT) "int")
                        ((= type GL_FLOAT) "float")
                        (else "unknown")))
                (tref vbo 2)
                (tref vbo 3)))
    void))

(bind-func toString
  (lambda (vbo:VBO*)
    (let ((s:i8* (salloc 256)))
      (if (null? vbo)
          (sprintf s "<VBO: 0x0>")
          (sprintf s "<VBO: id=%d type=%s nbytes=%d data=%p>"
                   (tref vbo 0)
                   (let ((type (VBO_type vbo)))
                     (cond ((= type GL_BYTE) "byte")
                           ((= type GL_SHORT) "short")
                           ((= type GL_INT) "int")
                           ((= type GL_FLOAT) "float")
                           (else "unknown")))
                   (tref vbo 2)
                   (tref vbo 3)))
      (String s))))

(bind-func VBO_create
  (lambda (buf:float* buflen)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_FLOAT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      (printf "Created ") (print vbo) (printf "\n")
      vbo)))

(bind-func VBO_create
  (lambda (buf:i32* buflen)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_INT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) GL_STREAM_DRAW)
      (gl_print_error "Error setting VBO data")
      (printf "Created ") (print vbo) (printf "\n")
      vbo)))

(bind-func VBO_create
  (lambda (buf:float* buflen usage)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_FLOAT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) usage)
      (gl_print_error "Error setting VBO data")
      (printf "Created ") (print vbo) (printf "\n")
      vbo)))

(bind-func VBO_create
  (lambda (buf:i32* buflen usage)
    (let ((vbo:VBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenBuffers 1 id)
      (gl_print_error "Error creating VBO")
      (tfill! vbo
              (pref id 0)
              GL_INT
              (* buflen 4) ;; sizeof(float)
              (cast buf GLvoid*))
      (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
      (glBufferData GL_ARRAY_BUFFER (VBO_size vbo) (VBO_data vbo) usage)
      (gl_print_error "Error setting VBO data")
      (printf "Created ") (print vbo) (printf "\n")
      vbo)))

(bind-func VBO_update_data
  "update the full buffer"
  (lambda (vbo:VBO*)
    (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
    (gl_print_error "Error binding VBO")
    (glBufferSubData GL_ARRAY_BUFFER 0 (VBO_size vbo) (VBO_data vbo))
    (gl_print_error "Error updating VBO subdata")
    (glBindBuffer GL_ARRAY_BUFFER 0)))

(bind-func VBO_delete
  (lambda (vbo:VBO*)
    (let ((id:GLuint* (salloc)))
      (pset! id 0 (VBO_id vbo))
      (glDeleteBuffers 1 id)
      (gl_print_error "Error deleting VBO")
      (free vbo))))

;; Vertex Array Object

(bind-type VAO <GLuint> (printer? . #f))

(bind-func VAO_id
  (lambda (vao:VAO*)
    (tref vao 0)))

(bind-func print
  (lambda (vao:VAO*)
    (if (null? vao)
        (printf "<VAO: 0x0>")
        (printf "<VAO: id %d>" (tref vao 0)))
    void))


(bind-func toString
  (lambda (vao:VAO*)
    (let ((s:i8* (salloc 256)))
      (if (null? vao)
          (sprintf s "<VAO: 0x0>")
          (sprintf s "<VAO: id %d>" (tref vao 0)))
      (String s))))


(bind-func VAO_create
  (lambda ()
    (let ((vao:VAO* (halloc))
          (id:GLuint* (salloc)))
      (glGenVertexArrays 1 id)
      (gl_print_error "Error creating VAO")
      (tset! vao 0 (pref id 0))
      vao)))

(bind-func VAO_bind_attribute
  (lambda (vao:VAO* vbo:VBO* index size stride offset)
    (glBindVertexArray (VAO_id vao))
    (gl_print_error "Error binding VAO")
    (glBindBuffer GL_ARRAY_BUFFER (VBO_id vbo))
    (gl_print_error "Error binding VBO")
    (let ((component_size 4)) ;; for for GL_FLOAT and GL_INT
      (glVertexAttribPointer index
                             size
                             (VBO_type vbo)
                             GL_FALSE
                             (* component_size stride)
                             (pref-ptr (cast null GLvoid*) (* component_size offset))))
    (gl_print_error "Error binding VAO attribute")
    (glEnableVertexAttribArray index)
    (gl_print_error "Error enabling VAO attribute")
    (glBindVertexArray 0)))

(bind-func VAO_bind_attribute
  (lambda (vao vbo index size)
    (VAO_bind_attribute:[void,VAO*,VBO*,i32,i32,i32,i32]* vao vbo index size 0 0)))


(bind-func VAO_bind_and_draw_arrays
  (lambda (vao:VAO* draw_mode first_element count)
    (glBindVertexArray (VAO_id vao))
    (gl_print_error "Error binding vertex array")
    (glDrawArrays draw_mode first_element count)
    (gl_print_error "Error drawing vertex array")
    (glBindVertexArray 0)))

(bind-func VAO_delete
  (lambda (vao:VAO*)
    (let ((id:GLuint* (salloc)))
      (pset! id 0 (VAO_id vao))
      (glDeleteVertexArrays 1 id)
      (gl_print_error "Error deleting VAO")
      (free vao))))

;; helper functions for drawing a screen-space quad

(bind-func VAO_create_ss_quad
  (lambda ()
    (let ((ss_quad_pos_st:float* (salloc 16)))
      (pfill! ss_quad_pos_st
              ;; pos     tex_coord
              -1. -1.    0. 0.
              -1.  1.    0. 1.
              1. -1.    1. 0.
              1.  1.    1. 1.
              )
      (let ((vbo (VBO_create ss_quad_pos_st 16))
            (vao (VAO_create)))
        (VAO_bind_attribute vao vbo 0 2 4 0) ;; position
        (VAO_bind_attribute vao vbo 1 2 4 2) ;; tex_coord
        vao))))

;; GL Texture

(bind-alias Texture GLuint)

(bind-func Texture_create
  (lambda ()
    (let ((id:GLuint* (salloc)))
      (glGenTextures 1 id)
      (gl_print_error "Error creating Texture")
      (pref id 0))))

;; (bind-func Texture_bind
;;   (lambda (tex:Texture data:GLvoid*)
;;     (glBindTexture GL_TEXTURE_2D (Texture_id tex))
;;     (glTexImage2D GL_TEXTURE_2D 0 GL_RGB 2 2 0 GL_RGB GL_FLOAT data)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
;;     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
;;     void))

(bind-func Texture_delete
  (lambda (tex:Texture)
    (let ((id:GLuint* (salloc)))
      (pset! id 0 tex)
      (glDeleteTextures 1 id)
      (gl_print_error "Error deleting Texture"))))

(bind-func Texture_bind_data
  "this just uses texture slot 0 (GL_TEXTURE0) - it should probably
allow the texture slot to be specified"
  (lambda (tex:Texture data:float* width height chan:i32 wrap filter)
    (if (null? data)
        (begin (println "Error: data is null.")
               #f)
        (let ((format (cond ((= chan 1) GL_RED)
                            ((= chan 3) GL_RGB)
                            ((= chan 4) GL_RGBA)
                            (else 0:i32))))
          (if (= format 0)
              (begin (println "Error: only chan must be 1, 3 or 4.")
                     #f)
              (begin (glActiveTexture GL_TEXTURE0)
                     (glBindTexture GL_TEXTURE_2D tex)
                     (glTexImage2D GL_TEXTURE_2D 0
                                   format
                                   width height
                                   0
                                   format
                                   GL_FLOAT
                                   (convert data))
                     ;; set some parameters
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S wrap)
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T wrap)
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER filter)
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER filter)
                     (gl_print_error "couldn't Texture_bind_image")
                     #t))))))

(bind-func Texture_bind_data
  "this just uses texture slot 0 (GL_TEXTURE0) - it should probably
allow the texture slot to be specified"
  (lambda (tex:Texture data:i8* width height chan:i32 wrap filter)
    (if (null? data)
        (begin (println "Error: data is null.")
               #f)
        (let ((format (cond ((= chan 1) GL_RED)
                            ((= chan 3) GL_RGB)
                            ((= chan 4) GL_RGBA)
                            (else 0:i32))))
          (if (= format 0)
              (begin (println "Error: only chan must be 1, 3 or 4.")
                     #f)
              (begin (glActiveTexture GL_TEXTURE0)
                     (glBindTexture GL_TEXTURE_2D tex)
                     (glTexImage2D GL_TEXTURE_2D 0
                                   format
                                   width height
                                   0
                                   format
                                   GL_UNSIGNED_BYTE
                                   data)
                     ;; set some parameters
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S wrap)
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T wrap)
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER filter)
                     (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER filter)
                     (gl_print_error "couldn't Texture_bind_image")
                     #t))))))

(bind-func Texture_bind_image
  (lambda (tex:Texture filename)
    ;; seems to need to be set
    (stbi_set_flip_vertically_on_load 1)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (data (stbi_load filename width_ptr height_ptr comp_ptr 4)))
      (if (null? data)
          (begin (println (stbi_failure_reason))
                 -1)
          (begin
            (glActiveTexture GL_TEXTURE0)
            (glBindTexture GL_TEXTURE_2D tex)
            (glTexImage2D GL_TEXTURE_2D 0
                          GL_RGBA
                          (pref width_ptr 0)
                          (pref height_ptr 0)
                          0
                          GL_RGBA
                          GL_UNSIGNED_BYTE
                          data)
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "couldn't Texture_bind_image")
            tex)))))

;; OpenGL shaders

;;                <id    ,type  >
(bind-type Shader <GLuint,GLenum>)
(bind-alias ShaderProgram GLuint)

(bind-func Shader_id
  (lambda (shader:Shader*)
    (tref shader 0)))

(bind-func Shader_type
  (lambda (shader:Shader*)
    (tref shader 1)))

(bind-func Shader_print_info_log
  (let ((max_log_length 4096)
        (logbuf:i8* (zalloc max_log_length)))
    (lambda (shader:Shader*)
      (let ((len_ptr (salloc 1 i32)))
        (glGetShaderInfoLog (Shader_id shader)
                            max_log_length
                            len_ptr
                            logbuf)
        (printf "%sShader: %s\n"
                (cond ((= (Shader_type shader) GL_VERTEX_SHADER)
                       "Vert")
                      ((= (Shader_type shader) GL_FRAGMENT_SHADER)
                       "Frag")
                      ((= (Shader_type shader) GL_GEOMETRY_SHADER)
                       "Geom")
                      (else ""))
                (if (= (pref len_ptr 0) 0)
                    "OK"
                    logbuf))
        (if (= (pref len_ptr 0) 0) 0 1)))))

(bind-func ShaderProgram_print_info_log
  (let ((max_log_length 4096)
        (logbuf:i8* (zalloc max_log_length)))
    (lambda (program:ShaderProgram)
      (let ((len_ptr (salloc 1 i32)))
        (glGetProgramInfoLog program
                             max_log_length
                             len_ptr
                             logbuf)
        (printf "   Program: %s\n"
                (if (= (pref len_ptr 0) 0)
                    "OK"
                    logbuf))
        (if (= (pref len_ptr 0) 0) 0 1)))))

(bind-func Shader_create
  "create (and compile) an OpenGL shader"
  (lambda (source:i8* type:GLenum)
    (if (not (or (= type GL_VERTEX_SHADER)
                 (= type GL_FRAGMENT_SHADER)
                 (= type GL_GEOMETRY_SHADER)))
        (begin (println "Error: shader type must be one of GL_VERTEX_SHADER, GL_FRAGMENT_SHADER or GL_GEOMETRY_SHADER")
               null)
        (let ((shader_id (glCreateShader type))
              (source_ptr:i8** (salloc))
              (shader (Shader shader_id type)))
          (pset! source_ptr 0 source)
          (glShaderSource shader_id 1 source_ptr (cast null i32*))
          (glCompileShader shader_id)
          (Shader_print_info_log shader)
          shader))))

(bind-func ShaderProgram_create
  "compile and link shader program (vert and frag shader)"
  (lambda (vert:Shader* frag:Shader*)
    (if (not (and (= (Shader_type vert) GL_VERTEX_SHADER)
                  (= (Shader_type frag) GL_FRAGMENT_SHADER)))
        (begin (println "Error: input shader types must be vert and frag respectively.")
               -1)
        (let ((program (glCreateProgram)))
          (glAttachShader program (Shader_id vert))
          (glAttachShader program (Shader_id frag))
          (glLinkProgram program)
          (ShaderProgram_print_info_log program)
          program))))

(bind-func ShaderProgram_create
  "compile and link shader program (vert and frag shader)"
  (lambda (vert:Shader* geom:Shader* frag:Shader*)
    (if (not (and (= (Shader_type vert) GL_VERTEX_SHADER)
                  (= (Shader_type geom) GL_GEOMETRY_SHADER)
                  (= (Shader_type frag) GL_FRAGMENT_SHADER)))
        (begin (println "Error: input shader types must be vert and frag respectively.")
               -1)
        (let ((program (glCreateProgram)))
          (glAttachShader program (Shader_id vert))
          (glAttachShader program (Shader_id geom))
          (glAttachShader program (Shader_id frag))
          (glLinkProgram program)
          (ShaderProgram_print_info_log program)
          program))))

;; these ones are handy when you want to create a new shader program
;; directly from the sources

(bind-func ShaderProgram_create
  "compile and link shader program (vert and frag shader source)"
  (lambda (vsource:i8* fsource:i8*)
    (let ((vert (Shader_create vsource GL_VERTEX_SHADER))
          (frag (Shader_create fsource GL_FRAGMENT_SHADER)))
      (if (or (null? vert) (null? frag))
          -1
          (ShaderProgram_create:[i32,Shader*,Shader*]* vert frag)))))

(bind-func ShaderProgram_create
  "compile and link shader program (vert and frag shader source)"
  (lambda (vsource:i8* gsource:i8* fsource:i8*)
    (let ((vert (Shader_create vsource GL_VERTEX_SHADER))
          (geom (Shader_create vsource GL_GEOMETRY_SHADER))
          (frag (Shader_create fsource GL_FRAGMENT_SHADER)))
      (if (or (null? vert) (null? geom) (null? frag))
          -1
          (ShaderProgram_create:[i32,Shader*,Shader*,Shader*]* vert geom frag)))))

;; Framebuffer Object

;; fbo id          0
;; texture id      1
;; depth buffer id 2
;; width           3
;; height          4
(bind-type FBO <GLuint,GLuint,GLuint,GLsizei,GLsizei> (printer? . #f))

;; accessor functions

(bind-func FBO_id
  (lambda (fbo:FBO*)
    (tref fbo 0)))

(bind-func FBO_color_texture
  (lambda (fbo:FBO*)
    (tref fbo 1)))

(bind-func FBO_depth_texture
  (lambda (fbo:FBO*)
    (tref fbo 2)))

(bind-func FBO_width
  (lambda (fbo:FBO*)
    (tref fbo 3)))

(bind-func FBO_height
  (lambda (fbo:FBO*)
    (tref fbo 4)))

(bind-func print
  (lambda (fbo:FBO*)
    (if (null? fbo)
        (printf "<FBO: 0x0>")
        (printf "<FBO: id=%d color_tex=%d depth_tex=%d width=%d height=%d>"
                (FBO_id fbo)
                (FBO_color_texture fbo)
                (FBO_depth_texture fbo)
                (FBO_width fbo)
                (FBO_height fbo)))
    void))

(bind-func toString
  (lambda (fbo:FBO*)
    (let ((str:i8* (zalloc 256)))
      (if (null? fbo)
          (sprintf str "<FBO: 0x0>")
          (sprintf str "<FBO: id=%d color_tex=%d depth_tex=%d width=%d height=%d>"
                   (FBO_id fbo)
                   (FBO_color_texture fbo)
                   (FBO_depth_texture fbo)
                   (FBO_width fbo)
                   (FBO_height fbo)))
      (String str))))


;; create FBOs

(bind-func FBO_create
  (lambda ()
    (let ((fbo:FBO* (halloc))
          (id:GLuint* (salloc)))
      (glGenFramebuffers 1 id)
      (gl_print_error "Error creating FBO")
      (tset! fbo 0 (pref id 0))
      fbo)))

(bind-func Texture_create_FBO_depth_texture
  (lambda (width height)
    (let ((depth_tex (Texture_create)))
      (glActiveTexture GL_TEXTURE0)
      (glBindTexture GL_TEXTURE_2D depth_tex)
      (glTexImage2D GL_TEXTURE_2D 0 GL_DEPTH_COMPONENT width height 0 GL_DEPTH_COMPONENT GL_UNSIGNED_BYTE null)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      ;; attach depth texture to framebuffer
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_2D depth_tex 0)
      (gl_print_error "Error creating FBO depth texture")
      depth_tex)))

(bind-func FBO_create_with_textures
  (lambda (width height depth_p:i1)
    (let ((fbo (FBO_create))
          (color_tex (Texture_create))
          (depth_tex -1))
      (glBindTexture GL_TEXTURE_2D color_tex)
      (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_REPEAT)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_REPEAT)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glBindFramebuffer GL_FRAMEBUFFER (FBO_id fbo))
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D color_tex 0)
      (if depth_p
          (set! depth_tex (Texture_create_FBO_depth_texture width height)))
      (if (<> (glCheckFramebufferStatus GL_FRAMEBUFFER) GL_FRAMEBUFFER_COMPLETE)
          (begin
            (println "Error creating framebuffer")
            (gl_print_error "Error creating FBO & backing textures")
            ;; return null pointer for fbo
            null)
          ;; fill the FBO tuple with metadata
          (begin
            (tfill! fbo
                    (FBO_id fbo)
                    color_tex
                    depth_tex
                    width
                    height)
            ;; unbind the frame buffer
            (glBindFramebuffer GL_FRAMEBUFFER 0)
            fbo)))))

(impc:aot:insert-footer "xtmgl-objects")
(define *xtmlib-gl-objects-loaded* #t)
