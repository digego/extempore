;;; glcore-directbind.xtm -- OpenGL bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libGL.dylib

;;; Commentary:

;; A modern (core profile) OpenGL API, supporting OpenGL 3.2+.
;; If you need older (fixed-function pipeline) OpenGL functionality,
;; look at gl-compatibility in this same directory.

;; The C header on which this is based is available from
;; https://www.opengl.org/registry/api/GL/glcorearb.h

;; This file is the "direct bind" version - we assume that libGL
;; exposes all the symbols, so we just bind-lib them directly.

;; This definitely won't work on Windows for OpenGL version > 1.1, and
;; won't necessarily work on Linux. In that case, you can use
;; glcore-getprocaddress.xtm in this same folder.

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/glcore-directbind.xtm" 'quiet))
(sys:load-preload-check 'gl)
(define *xtmlib-glcore-directbind-loaded* #t)
(define *xtmlib-gl-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmglcore-directbind")

(bind-dylib libGL
  (cond ((string=? (sys:platform) "Linux")
         "libGL.so")
        ((string=? (sys:platform) "Windows")
         "opengl32.dll")
        ((string=? (sys:platform) "OSX")
         "/System/Library/Frameworks/OpenGL.framework/OpenGL")))

(impc:aot:import-ll "xtmglcore-directbind")

;; this version doesn't really do anything, bit in the getprocaddress
;; OpenGL code path it's important, so having it here allows us to
;; include it in the examples
(impc:aot:do-and-emit
 (define gl_init
   (lambda (gl-lib . warn?)
     (if (not gl-lib)
         (print "Error: libGL not loaded\n")))))

;; /*
;; ** Copyright (c) 2013-2015 The Khronos Group Inc.
;; **
;; ** Permission is hereby granted, free of charge, to any person obtaining a
;; ** copy of this software and/or associated documentation files (the
;; ** "Materials"), to deal in the Materials without restriction, including
;; ** without limitation the rights to use, copy, modify, merge, publish,
;; ** distribute, sublicense, and/or sell copies of the Materials, and to
;; ** permit persons to whom the Materials are furnished to do so, subject to
;; ** the following conditions:
;; **
;; ** The above copyright notice and this permission notice shall be included
;; ** in all copies or substantial portions of the Materials.
;; **
;; ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
;; ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;; ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;; ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;; ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;; ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
;; */
;; /*
;; ** This header is generated from the Khronos OpenGL / OpenGL ES XML
;; ** API Registry. The current version of the Registry, generator scripts
;; ** used to make the header, and the header can be found at
;; **   http://www.opengl.org/registry/
;; **
;; ** Khronos $Revision: 31597 $ on $Date: 2015-06-25 16:32:35 -0400 (Thu, 25 Jun 2015) $
;; */

;; /* glcorearb.h is for use with OpenGL core profile implementations.
;; ** It should should be placed in the same directory as gl.h and
;; ** included as <GL/glcorearb.h>.
;; **
;; ** glcorearb.h includes only APIs in the latest OpenGL core profile
;; ** implementation together with APIs in newer ARB extensions which
;; ** can be supported by the core profile. It does not, and never will
;; ** include functionality removed from the core profile, such as
;; ** fixed-function vertex and fragment processing.
;; **
;; ** Do not #include both <GL/glcorearb.h> and either of <GL/gl.h> or
;; ** <GL/glext.h> in the same source file.
;; */

;; /* Generated C header for:
;;  * API: gl
;;  * Profile: core
;;  * Versions considered: .*
;;  * Versions emitted: .*
;;  * Default extensions included: glcore
;;  * Additional extensions included: _nomatch_^
;;  * Extensions removed: _nomatch_^
;;  */

;; #ifndef GL_VERSION_1_0
(bind-val GL_VERSION_1_0 i32 1)
(bind-alias GLvoid i8)
(bind-alias GLenum i32)
(bind-alias GLfloat float)
(bind-alias GLint i32)
(bind-alias GLsizei i32)
(bind-alias GLbitfield i32)
(bind-alias GLdouble double)
(bind-alias GLuint i32)
(bind-alias GLboolean i8)
(bind-alias GLubyte i8)

;; void glCullFace(GLenum mode);
(bind-lib libGL glCullFace [void,GLenum]*)
;; void glFrontFace(GLenum mode);
(bind-lib libGL glFrontFace [void,GLenum]*)
;; void glHint(GLenum target, GLenum mode);
(bind-lib libGL glHint [void,GLenum,GLenum]*)
;; void glLineWidth(GLfloat width);
(bind-lib libGL glLineWidth [void,GLfloat]*)
;; void glPointSize(GLfloat size);
(bind-lib libGL glPointSize [void,GLfloat]*)
;; void glPolygonMode(GLenum face, GLenum mode);
(bind-lib libGL glPolygonMode [void,GLenum,GLenum]*)
;; void glScissor(GLint x, GLint y, GLsizei width, GLsizei height);
(bind-lib libGL glScissor [void,GLint,GLint,GLsizei,GLsizei]*)
;; void glTexParameterf(GLenum target, GLenum pname, GLfloat param);
(bind-lib libGL glTexParameterf [void,GLenum,GLenum,GLfloat]*)
;; void glTexParameterfv(GLenum target, GLenum pname, GLfloat* params);
(bind-lib libGL glTexParameterfv [void,GLenum,GLenum,GLfloat*]*)
;; void glTexParameteri(GLenum target, GLenum pname, GLint param);
(bind-lib libGL glTexParameteri [void,GLenum,GLenum,GLint]*)
;; void glTexParameteriv(GLenum target, GLenum pname, GLint* params);
(bind-lib libGL glTexParameteriv [void,GLenum,GLenum,GLint*]*)
;; void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, void* pixels);
(bind-lib libGL glTexImage1D [void,GLenum,GLint,GLint,GLsizei,GLint,GLenum,GLenum,i8*]*)
;; void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, void* pixels);
(bind-lib libGL glTexImage2D [void,GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,i8*]*)
;; void glDrawBuffer(GLenum buf);
(bind-lib libGL glDrawBuffer [void,GLenum]*)
;; void glClear(GLbitfield mask);
(bind-lib libGL glClear [void,GLbitfield]*)
;; void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
(bind-lib libGL glClearColor [void,GLfloat,GLfloat,GLfloat,GLfloat]*)
;; void glClearStencil(GLint s);
(bind-lib libGL glClearStencil [void,GLint]*)
;; void glClearDepth(GLdouble depth);
(bind-lib libGL glClearDepth [void,GLdouble]*)
;; void glStencilMask(GLuint mask);
(bind-lib libGL glStencilMask [void,GLuint]*)
;; void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
(bind-lib libGL glColorMask [void,GLboolean,GLboolean,GLboolean,GLboolean]*)
;; void glDepthMask(GLboolean flag);
(bind-lib libGL glDepthMask [void,GLboolean]*)
;; void glDisable(GLenum cap);
(bind-lib libGL glDisable [void,GLenum]*)
;; void glEnable(GLenum cap);
(bind-lib libGL glEnable [void,GLenum]*)
;; void glFinish(void);
(bind-lib libGL glFinish [void]*)
;; void glFlush(void);
(bind-lib libGL glFlush [void]*)
;; void glBlendFunc(GLenum sfactor, GLenum dfactor);
(bind-lib libGL glBlendFunc [void,GLenum,GLenum]*)
;; void glLogicOp(GLenum opcode);
(bind-lib libGL glLogicOp [void,GLenum]*)
;; void glStencilFunc(GLenum func, GLint ref, GLuint mask);
(bind-lib libGL glStencilFunc [void,GLenum,GLint,GLuint]*)
;; void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass);
(bind-lib libGL glStencilOp [void,GLenum,GLenum,GLenum]*)
;; void glDepthFunc(GLenum func);
(bind-lib libGL glDepthFunc [void,GLenum]*)
;; void glPixelStoref(GLenum pname, GLfloat param);
(bind-lib libGL glPixelStoref [void,GLenum,GLfloat]*)
;; void glPixelStorei(GLenum pname, GLint param);
(bind-lib libGL glPixelStorei [void,GLenum,GLint]*)
;; void glReadBuffer(GLenum src);
(bind-lib libGL glReadBuffer [void,GLenum]*)
;; void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
(bind-lib libGL glReadPixels [void,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,i8*]*)
;; void glGetBooleanv(GLenum pname, GLboolean *data);
(bind-lib libGL glGetBooleanv [void,GLenum,GLboolean*]*)
;; void glGetDoublev(GLenum pname, GLdouble *data);
(bind-lib libGL glGetDoublev [void,GLenum,GLdouble*]*)
;; GLenum glGetError(void);
(bind-lib libGL glGetError [GLenum]*)
;; void glGetFloatv(GLenum pname, GLfloat *data);
(bind-lib libGL glGetFloatv [void,GLenum,GLfloat*]*)
;; void glGetIntegerv(GLenum pname, GLint *data);
(bind-lib libGL glGetIntegerv [void,GLenum,GLint*]*)
;; GLubyte*  glGetString(GLenum name);
(bind-lib libGL glGetString [GLubyte*,GLenum]*)
;; void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
(bind-lib libGL glGetTexImage [void,GLenum,GLint,GLenum,GLenum,i8*]*)
;; void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params);
(bind-lib libGL glGetTexParameterfv [void,GLenum,GLenum,GLfloat*]*)
;; void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params);
(bind-lib libGL glGetTexParameteriv [void,GLenum,GLenum,GLint*]*)
;; void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params);
(bind-lib libGL glGetTexLevelParameterfv [void,GLenum,GLint,GLenum,GLfloat*]*)
;; void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params);
(bind-lib libGL glGetTexLevelParameteriv [void,GLenum,GLint,GLenum,GLint*]*)
;; GLboolean glIsEnabled(GLenum cap);
(bind-lib libGL glIsEnabled [GLboolean,GLenum]*)
;; void glDepthRange(GLdouble near, GLdouble far);
(bind-lib libGL glDepthRange [void,GLdouble,GLdouble]*)
;; void glViewport(GLint x, GLint y, GLsizei width, GLsizei height);
(bind-lib libGL glViewport [void,GLint,GLint,GLsizei,GLsizei]*)
;; #endif /* GL_VERSION_1_0 */

;; #ifndef GL_VERSION_1_1
(bind-val GL_VERSION_1_1 i32 1)
(bind-alias GLclampf float)
(bind-alias GLclampd double)
(bind-val GL_DEPTH_BUFFER_BIT i32 #x00000100)
(bind-val GL_STENCIL_BUFFER_BIT i32 #x00000400)
(bind-val GL_COLOR_BUFFER_BIT i32 #x00004000)
(bind-val GL_FALSE GLboolean 0)
(bind-val GL_TRUE GLboolean 1)
(bind-val GL_POINTS i32 #x0000)
(bind-val GL_LINES i32 #x0001)
(bind-val GL_LINE_LOOP i32 #x0002)
(bind-val GL_LINE_STRIP i32 #x0003)
(bind-val GL_TRIANGLES i32 #x0004)
(bind-val GL_TRIANGLE_STRIP i32 #x0005)
(bind-val GL_TRIANGLE_FAN i32 #x0006)
(bind-val GL_QUADS i32 #x0007)
(bind-val GL_NEVER i32 #x0200)
(bind-val GL_LESS i32 #x0201)
(bind-val GL_EQUAL i32 #x0202)
(bind-val GL_LEQUAL i32 #x0203)
(bind-val GL_GREATER i32 #x0204)
(bind-val GL_NOTEQUAL i32 #x0205)
(bind-val GL_GEQUAL i32 #x0206)
(bind-val GL_ALWAYS i32 #x0207)
(bind-val GL_ZERO i32 0)
(bind-val GL_ONE i32 1)
(bind-val GL_SRC_COLOR i32 #x0300)
(bind-val GL_ONE_MINUS_SRC_COLOR i32 #x0301)
(bind-val GL_SRC_ALPHA i32 #x0302)
(bind-val GL_ONE_MINUS_SRC_ALPHA i32 #x0303)
(bind-val GL_DST_ALPHA i32 #x0304)
(bind-val GL_ONE_MINUS_DST_ALPHA i32 #x0305)
(bind-val GL_DST_COLOR i32 #x0306)
(bind-val GL_ONE_MINUS_DST_COLOR i32 #x0307)
(bind-val GL_SRC_ALPHA_SATURATE i32 #x0308)
(bind-val GL_NONE i32 0)
(bind-val GL_FRONT_LEFT i32 #x0400)
(bind-val GL_FRONT_RIGHT i32 #x0401)
(bind-val GL_BACK_LEFT i32 #x0402)
(bind-val GL_BACK_RIGHT i32 #x0403)
(bind-val GL_FRONT i32 #x0404)
(bind-val GL_BACK i32 #x0405)
(bind-val GL_LEFT i32 #x0406)
(bind-val GL_RIGHT i32 #x0407)
(bind-val GL_FRONT_AND_BACK i32 #x0408)
(bind-val GL_NO_ERROR i32 0)
(bind-val GL_INVALID_ENUM i32 #x0500)
(bind-val GL_INVALID_VALUE i32 #x0501)
(bind-val GL_INVALID_OPERATION i32 #x0502)
(bind-val GL_OUT_OF_MEMORY i32 #x0505)
(bind-val GL_CW i32 #x0900)
(bind-val GL_CCW i32 #x0901)
(bind-val GL_POINT_SIZE i32 #x0B11)
(bind-val GL_POINT_SIZE_RANGE i32 #x0B12)
(bind-val GL_POINT_SIZE_GRANULARITY i32 #x0B13)
(bind-val GL_LINE_SMOOTH i32 #x0B20)
(bind-val GL_LINE_WIDTH i32 #x0B21)
(bind-val GL_LINE_WIDTH_RANGE i32 #x0B22)
(bind-val GL_LINE_WIDTH_GRANULARITY i32 #x0B23)
(bind-val GL_POLYGON_MODE i32 #x0B40)
(bind-val GL_POLYGON_SMOOTH i32 #x0B41)
(bind-val GL_CULL_FACE i32 #x0B44)
(bind-val GL_CULL_FACE_MODE i32 #x0B45)
(bind-val GL_FRONT_FACE i32 #x0B46)
(bind-val GL_DEPTH_RANGE i32 #x0B70)
(bind-val GL_DEPTH_TEST i32 #x0B71)
(bind-val GL_DEPTH_WRITEMASK i32 #x0B72)
(bind-val GL_DEPTH_CLEAR_VALUE i32 #x0B73)
(bind-val GL_DEPTH_FUNC i32 #x0B74)
(bind-val GL_STENCIL_TEST i32 #x0B90)
(bind-val GL_STENCIL_CLEAR_VALUE i32 #x0B91)
(bind-val GL_STENCIL_FUNC i32 #x0B92)
(bind-val GL_STENCIL_VALUE_MASK i32 #x0B93)
(bind-val GL_STENCIL_FAIL i32 #x0B94)
(bind-val GL_STENCIL_PASS_DEPTH_FAIL i32 #x0B95)
(bind-val GL_STENCIL_PASS_DEPTH_PASS i32 #x0B96)
(bind-val GL_STENCIL_REF i32 #x0B97)
(bind-val GL_STENCIL_WRITEMASK i32 #x0B98)
(bind-val GL_VIEWPORT i32 #x0BA2)
(bind-val GL_DITHER i32 #x0BD0)
(bind-val GL_BLEND_DST i32 #x0BE0)
(bind-val GL_BLEND_SRC i32 #x0BE1)
(bind-val GL_BLEND i32 #x0BE2)
(bind-val GL_LOGIC_OP_MODE i32 #x0BF0)
(bind-val GL_COLOR_LOGIC_OP i32 #x0BF2)
(bind-val GL_DRAW_BUFFER i32 #x0C01)
(bind-val GL_READ_BUFFER i32 #x0C02)
(bind-val GL_SCISSOR_BOX i32 #x0C10)
(bind-val GL_SCISSOR_TEST i32 #x0C11)
(bind-val GL_COLOR_CLEAR_VALUE i32 #x0C22)
(bind-val GL_COLOR_WRITEMASK i32 #x0C23)
(bind-val GL_DOUBLEBUFFER i32 #x0C32)
(bind-val GL_STEREO i32 #x0C33)
(bind-val GL_LINE_SMOOTH_HINT i32 #x0C52)
(bind-val GL_POLYGON_SMOOTH_HINT i32 #x0C53)
(bind-val GL_UNPACK_SWAP_BYTES i32 #x0CF0)
(bind-val GL_UNPACK_LSB_FIRST i32 #x0CF1)
(bind-val GL_UNPACK_ROW_LENGTH i32 #x0CF2)
(bind-val GL_UNPACK_SKIP_ROWS i32 #x0CF3)
(bind-val GL_UNPACK_SKIP_PIXELS i32 #x0CF4)
(bind-val GL_UNPACK_ALIGNMENT i32 #x0CF5)
(bind-val GL_PACK_SWAP_BYTES i32 #x0D00)
(bind-val GL_PACK_LSB_FIRST i32 #x0D01)
(bind-val GL_PACK_ROW_LENGTH i32 #x0D02)
(bind-val GL_PACK_SKIP_ROWS i32 #x0D03)
(bind-val GL_PACK_SKIP_PIXELS i32 #x0D04)
(bind-val GL_PACK_ALIGNMENT i32 #x0D05)
(bind-val GL_MAX_TEXTURE_SIZE i32 #x0D33)
(bind-val GL_MAX_VIEWPORT_DIMS i32 #x0D3A)
(bind-val GL_SUBPIXEL_BITS i32 #x0D50)
(bind-val GL_TEXTURE_1D i32 #x0DE0)
(bind-val GL_TEXTURE_2D i32 #x0DE1)
(bind-val GL_POLYGON_OFFSET_UNITS i32 #x2A00)
(bind-val GL_POLYGON_OFFSET_POINT i32 #x2A01)
(bind-val GL_POLYGON_OFFSET_LINE i32 #x2A02)
(bind-val GL_POLYGON_OFFSET_FILL i32 #x8037)
(bind-val GL_POLYGON_OFFSET_FACTOR i32 #x8038)
(bind-val GL_TEXTURE_BINDING_1D i32 #x8068)
(bind-val GL_TEXTURE_BINDING_2D i32 #x8069)
(bind-val GL_TEXTURE_WIDTH i32 #x1000)
(bind-val GL_TEXTURE_HEIGHT i32 #x1001)
(bind-val GL_TEXTURE_INTERNAL_FORMAT i32 #x1003)
(bind-val GL_TEXTURE_BORDER_COLOR i32 #x1004)
(bind-val GL_TEXTURE_RED_SIZE i32 #x805C)
(bind-val GL_TEXTURE_GREEN_SIZE i32 #x805D)
(bind-val GL_TEXTURE_BLUE_SIZE i32 #x805E)
(bind-val GL_TEXTURE_ALPHA_SIZE i32 #x805F)
(bind-val GL_DONT_CARE i32 #x1100)
(bind-val GL_FASTEST i32 #x1101)
(bind-val GL_NICEST i32 #x1102)
(bind-val GL_BYTE i32 #x1400)
(bind-val GL_UNSIGNED_BYTE i32 #x1401)
(bind-val GL_SHORT i32 #x1402)
(bind-val GL_UNSIGNED_SHORT i32 #x1403)
(bind-val GL_INT i32 #x1404)
(bind-val GL_UNSIGNED_INT i32 #x1405)
(bind-val GL_FLOAT i32 #x1406)
(bind-val GL_DOUBLE i32 #x140A)
(bind-val GL_STACK_OVERFLOW i32 #x0503)
(bind-val GL_STACK_UNDERFLOW i32 #x0504)
(bind-val GL_CLEAR i32 #x1500)
(bind-val GL_AND i32 #x1501)
(bind-val GL_AND_REVERSE i32 #x1502)
(bind-val GL_COPY i32 #x1503)
(bind-val GL_AND_INVERTED i32 #x1504)
(bind-val GL_NOOP i32 #x1505)
(bind-val GL_XOR i32 #x1506)
(bind-val GL_OR i32 #x1507)
(bind-val GL_NOR i32 #x1508)
(bind-val GL_EQUIV i32 #x1509)
(bind-val GL_INVERT i32 #x150A)
(bind-val GL_OR_REVERSE i32 #x150B)
(bind-val GL_COPY_INVERTED i32 #x150C)
(bind-val GL_OR_INVERTED i32 #x150D)
(bind-val GL_NAND i32 #x150E)
(bind-val GL_SET i32 #x150F)
(bind-val GL_TEXTURE i32 #x1702)
(bind-val GL_COLOR i32 #x1800)
(bind-val GL_DEPTH i32 #x1801)
(bind-val GL_STENCIL i32 #x1802)
(bind-val GL_STENCIL_INDEX i32 #x1901)
(bind-val GL_DEPTH_COMPONENT i32 #x1902)
(bind-val GL_RED i32 #x1903)
(bind-val GL_GREEN i32 #x1904)
(bind-val GL_BLUE i32 #x1905)
(bind-val GL_ALPHA i32 #x1906)
(bind-val GL_RGB i32 #x1907)
(bind-val GL_RGBA i32 #x1908)
(bind-val GL_POINT i32 #x1B00)
(bind-val GL_LINE i32 #x1B01)
(bind-val GL_FILL i32 #x1B02)
(bind-val GL_KEEP i32 #x1E00)
(bind-val GL_REPLACE i32 #x1E01)
(bind-val GL_INCR i32 #x1E02)
(bind-val GL_DECR i32 #x1E03)
(bind-val GL_VENDOR i32 #x1F00)
(bind-val GL_RENDERER i32 #x1F01)
(bind-val GL_VERSION i32 #x1F02)
(bind-val GL_EXTENSIONS i32 #x1F03)
(bind-val GL_NEAREST i32 #x2600)
(bind-val GL_LINEAR i32 #x2601)
(bind-val GL_NEAREST_MIPMAP_NEAREST i32 #x2700)
(bind-val GL_LINEAR_MIPMAP_NEAREST i32 #x2701)
(bind-val GL_NEAREST_MIPMAP_LINEAR i32 #x2702)
(bind-val GL_LINEAR_MIPMAP_LINEAR i32 #x2703)
(bind-val GL_TEXTURE_MAG_FILTER i32 #x2800)
(bind-val GL_TEXTURE_MIN_FILTER i32 #x2801)
(bind-val GL_TEXTURE_WRAP_S i32 #x2802)
(bind-val GL_TEXTURE_WRAP_T i32 #x2803)
(bind-val GL_PROXY_TEXTURE_1D i32 #x8063)
(bind-val GL_PROXY_TEXTURE_2D i32 #x8064)
(bind-val GL_REPEAT i32 #x2901)
(bind-val GL_R3_G3_B2 i32 #x2A10)
(bind-val GL_RGB4 i32 #x804F)
(bind-val GL_RGB5 i32 #x8050)
(bind-val GL_RGB8 i32 #x8051)
(bind-val GL_RGB10 i32 #x8052)
(bind-val GL_RGB12 i32 #x8053)
(bind-val GL_RGB16 i32 #x8054)
(bind-val GL_RGBA2 i32 #x8055)
(bind-val GL_RGBA4 i32 #x8056)
(bind-val GL_RGB5_A1 i32 #x8057)
(bind-val GL_RGBA8 i32 #x8058)
(bind-val GL_RGB10_A2 i32 #x8059)
(bind-val GL_RGBA12 i32 #x805A)
(bind-val GL_RGBA16 i32 #x805B)
(bind-val GL_VERTEX_ARRAY i32 #x8074)

;; void glDrawArrays(GLenum mode, GLint first, GLsizei count);
(bind-lib libGL glDrawArrays [void,GLenum,GLint,GLsizei]*)
;; void glDrawElements(GLenum mode, GLsizei count, GLenum type, void* indices);
(bind-lib libGL glDrawElements [void,GLenum,GLsizei,GLenum,i8*]*)
;; void glGetPointerv(GLenum pname, void **params);
(bind-lib libGL glGetPointerv [void,GLenum,GLvoid**]*)
;; void glPolygonOffset(GLfloat factor, GLfloat units);
(bind-lib libGL glPolygonOffset [void,GLfloat,GLfloat]*)
;; void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
(bind-lib libGL glCopyTexImage1D [void,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLint]*)
;; void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
(bind-lib libGL glCopyTexImage2D [void,GLenum,GLint,GLenum,GLint,GLint,GLsizei,GLsizei,GLint]*)
;; void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
(bind-lib libGL glCopyTexSubImage1D [void,GLenum,GLint,GLint,GLint,GLint,GLsizei]*)
;; void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
(bind-lib libGL glCopyTexSubImage2D [void,GLenum,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
;; void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
(bind-lib libGL glTexSubImage1D [void,GLenum,GLint,GLint,GLsizei,GLenum,GLenum,i8*]*)
;; void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
(bind-lib libGL glTexSubImage2D [void,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,i8*]*)
;; void glBindTexture(GLenum target, GLuint texture);
(bind-lib libGL glBindTexture [void,GLenum,GLuint]*)
;; void glDeleteTextures(GLsizei n, GLuint* textures);
(bind-lib libGL glDeleteTextures [void,GLsizei,GLuint*]*)
;; void glGenTextures(GLsizei n, GLuint *textures);
(bind-lib libGL glGenTextures [void,GLsizei,GLuint*]*)
;; GLboolean glIsTexture(GLuint texture);
(bind-lib libGL glIsTexture [GLboolean,GLuint]*)
;; #endif /* GL_VERSION_1_1 */

;; #ifndef GL_VERSION_1_2
(bind-val GL_VERSION_1_2 i32 1)
(bind-val GL_UNSIGNED_BYTE_3_3_2 i32 #x8032)
(bind-val GL_UNSIGNED_SHORT_4_4_4_4 i32 #x8033)
(bind-val GL_UNSIGNED_SHORT_5_5_5_1 i32 #x8034)
(bind-val GL_UNSIGNED_INT_8_8_8_8 i32 #x8035)
(bind-val GL_UNSIGNED_INT_10_10_10_2 i32 #x8036)
(bind-val GL_TEXTURE_BINDING_3D i32 #x806A)
(bind-val GL_PACK_SKIP_IMAGES i32 #x806B)
(bind-val GL_PACK_IMAGE_HEIGHT i32 #x806C)
(bind-val GL_UNPACK_SKIP_IMAGES i32 #x806D)
(bind-val GL_UNPACK_IMAGE_HEIGHT i32 #x806E)
(bind-val GL_TEXTURE_3D i32 #x806F)
(bind-val GL_PROXY_TEXTURE_3D i32 #x8070)
(bind-val GL_TEXTURE_DEPTH i32 #x8071)
(bind-val GL_TEXTURE_WRAP_R i32 #x8072)
(bind-val GL_MAX_3D_TEXTURE_SIZE i32 #x8073)
(bind-val GL_UNSIGNED_BYTE_2_3_3_REV i32 #x8362)
(bind-val GL_UNSIGNED_SHORT_5_6_5 i32 #x8363)
(bind-val GL_UNSIGNED_SHORT_5_6_5_REV i32 #x8364)
(bind-val GL_UNSIGNED_SHORT_4_4_4_4_REV i32 #x8365)
(bind-val GL_UNSIGNED_SHORT_1_5_5_5_REV i32 #x8366)
(bind-val GL_UNSIGNED_INT_8_8_8_8_REV i32 #x8367)
(bind-val GL_UNSIGNED_INT_2_10_10_10_REV i32 #x8368)
(bind-val GL_BGR i32 #x80E0)
(bind-val GL_BGRA i32 #x80E1)
(bind-val GL_MAX_ELEMENTS_VERTICES i32 #x80E8)
(bind-val GL_MAX_ELEMENTS_INDICES i32 #x80E9)
(bind-val GL_CLAMP_TO_EDGE i32 #x812F)
(bind-val GL_TEXTURE_MIN_LOD i32 #x813A)
(bind-val GL_TEXTURE_MAX_LOD i32 #x813B)
(bind-val GL_TEXTURE_BASE_LEVEL i32 #x813C)
(bind-val GL_TEXTURE_MAX_LEVEL i32 #x813D)
(bind-val GL_SMOOTH_POINT_SIZE_RANGE i32 #x0B12)
(bind-val GL_SMOOTH_POINT_SIZE_GRANULARITY i32 #x0B13)
(bind-val GL_SMOOTH_LINE_WIDTH_RANGE i32 #x0B22)
(bind-val GL_SMOOTH_LINE_WIDTH_GRANULARITY i32 #x0B23)
(bind-val GL_ALIASED_LINE_WIDTH_RANGE i32 #x846E)

;; void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices);
(bind-lib libGL glDrawRangeElements [void,GLenum,GLuint,GLuint,GLsizei,GLenum,i8*]*)
;; void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, void* pixels);
(bind-lib libGL glTexImage3D [void,GLenum,GLint,GLint,GLsizei,GLsizei,GLsizei,GLint,GLenum,GLenum,i8*]*)
;; void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
(bind-lib libGL glTexSubImage3D [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,i8*]*)
;; void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
(bind-lib libGL glCopyTexSubImage3D [void,GLenum,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
;; #endif /* GL_VERSION_1_2 */

;; #ifndef GL_VERSION_1_3
(bind-val GL_VERSION_1_3 i32 1)
(bind-val GL_TEXTURE0 i32 #x84C0)
(bind-val GL_TEXTURE1 i32 #x84C1)
(bind-val GL_TEXTURE2 i32 #x84C2)
(bind-val GL_TEXTURE3 i32 #x84C3)
(bind-val GL_TEXTURE4 i32 #x84C4)
(bind-val GL_TEXTURE5 i32 #x84C5)
(bind-val GL_TEXTURE6 i32 #x84C6)
(bind-val GL_TEXTURE7 i32 #x84C7)
(bind-val GL_TEXTURE8 i32 #x84C8)
(bind-val GL_TEXTURE9 i32 #x84C9)
(bind-val GL_TEXTURE10 i32 #x84CA)
(bind-val GL_TEXTURE11 i32 #x84CB)
(bind-val GL_TEXTURE12 i32 #x84CC)
(bind-val GL_TEXTURE13 i32 #x84CD)
(bind-val GL_TEXTURE14 i32 #x84CE)
(bind-val GL_TEXTURE15 i32 #x84CF)
(bind-val GL_TEXTURE16 i32 #x84D0)
(bind-val GL_TEXTURE17 i32 #x84D1)
(bind-val GL_TEXTURE18 i32 #x84D2)
(bind-val GL_TEXTURE19 i32 #x84D3)
(bind-val GL_TEXTURE20 i32 #x84D4)
(bind-val GL_TEXTURE21 i32 #x84D5)
(bind-val GL_TEXTURE22 i32 #x84D6)
(bind-val GL_TEXTURE23 i32 #x84D7)
(bind-val GL_TEXTURE24 i32 #x84D8)
(bind-val GL_TEXTURE25 i32 #x84D9)
(bind-val GL_TEXTURE26 i32 #x84DA)
(bind-val GL_TEXTURE27 i32 #x84DB)
(bind-val GL_TEXTURE28 i32 #x84DC)
(bind-val GL_TEXTURE29 i32 #x84DD)
(bind-val GL_TEXTURE30 i32 #x84DE)
(bind-val GL_TEXTURE31 i32 #x84DF)
(bind-val GL_ACTIVE_TEXTURE i32 #x84E0)
(bind-val GL_MULTISAMPLE i32 #x809D)
(bind-val GL_SAMPLE_ALPHA_TO_COVERAGE i32 #x809E)
(bind-val GL_SAMPLE_ALPHA_TO_ONE i32 #x809F)
(bind-val GL_SAMPLE_COVERAGE i32 #x80A0)
(bind-val GL_SAMPLE_BUFFERS i32 #x80A8)
(bind-val GL_SAMPLES i32 #x80A9)
(bind-val GL_SAMPLE_COVERAGE_VALUE i32 #x80AA)
(bind-val GL_SAMPLE_COVERAGE_INVERT i32 #x80AB)
(bind-val GL_TEXTURE_CUBE_MAP i32 #x8513)
(bind-val GL_TEXTURE_BINDING_CUBE_MAP i32 #x8514)
(bind-val GL_TEXTURE_CUBE_MAP_POSITIVE_X i32 #x8515)
(bind-val GL_TEXTURE_CUBE_MAP_NEGATIVE_X i32 #x8516)
(bind-val GL_TEXTURE_CUBE_MAP_POSITIVE_Y i32 #x8517)
(bind-val GL_TEXTURE_CUBE_MAP_NEGATIVE_Y i32 #x8518)
(bind-val GL_TEXTURE_CUBE_MAP_POSITIVE_Z i32 #x8519)
(bind-val GL_TEXTURE_CUBE_MAP_NEGATIVE_Z i32 #x851A)
(bind-val GL_PROXY_TEXTURE_CUBE_MAP i32 #x851B)
(bind-val GL_MAX_CUBE_MAP_TEXTURE_SIZE i32 #x851C)
(bind-val GL_COMPRESSED_RGB i32 #x84ED)
(bind-val GL_COMPRESSED_RGBA i32 #x84EE)
(bind-val GL_TEXTURE_COMPRESSION_HINT i32 #x84EF)
(bind-val GL_TEXTURE_COMPRESSED_IMAGE_SIZE i32 #x86A0)
(bind-val GL_TEXTURE_COMPRESSED i32 #x86A1)
(bind-val GL_NUM_COMPRESSED_TEXTURE_FORMATS i32 #x86A2)
(bind-val GL_COMPRESSED_TEXTURE_FORMATS i32 #x86A3)
(bind-val GL_CLAMP_TO_BORDER i32 #x812D)

;; void glActiveTexture(GLenum texture);
(bind-lib libGL glActiveTexture [void,GLenum]*)
;; void glSampleCoverage(GLfloat value, GLboolean invert);
(bind-lib libGL glSampleCoverage [void,GLfloat,GLboolean]*)
;; void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, void* data);
(bind-lib libGL glCompressedTexImage3D [void,GLenum,GLint,GLenum,GLsizei,GLsizei,GLsizei,GLint,GLsizei,i8*]*)
;; void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void* data);
(bind-lib libGL glCompressedTexImage2D [void,GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,i8*]*)
;; void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, void* data);
(bind-lib libGL glCompressedTexImage1D [void,GLenum,GLint,GLenum,GLsizei,GLint,GLsizei,i8*]*)
;; void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* data);
(bind-lib libGL glCompressedTexSubImage3D [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,i8*]*)
;; void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* data);
(bind-lib libGL glCompressedTexSubImage2D [void,GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,i8*]*)
;; void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* data);
(bind-lib libGL glCompressedTexSubImage1D [void,GLenum,GLint,GLint,GLsizei,GLenum,GLsizei,i8*]*)
;; void glGetCompressedTexImage(GLenum target, GLint level, void *img);
(bind-lib libGL glGetCompressedTexImage [void,GLenum,GLint,i8*]*)
;; #endif /* GL_VERSION_1_3 */

;; #ifndef GL_VERSION_1_4
(bind-val GL_VERSION_1_4 i32 1)
(bind-val GL_BLEND_DST_RGB i32 #x80C8)
(bind-val GL_BLEND_SRC_RGB i32 #x80C9)
(bind-val GL_BLEND_DST_ALPHA i32 #x80CA)
(bind-val GL_BLEND_SRC_ALPHA i32 #x80CB)
(bind-val GL_POINT_FADE_THRESHOLD_SIZE i32 #x8128)
(bind-val GL_DEPTH_COMPONENT16 i32 #x81A5)
(bind-val GL_DEPTH_COMPONENT24 i32 #x81A6)
(bind-val GL_DEPTH_COMPONENT32 i32 #x81A7)
(bind-val GL_MIRRORED_REPEAT i32 #x8370)
(bind-val GL_MAX_TEXTURE_LOD_BIAS i32 #x84FD)
(bind-val GL_TEXTURE_LOD_BIAS i32 #x8501)
(bind-val GL_INCR_WRAP i32 #x8507)
(bind-val GL_DECR_WRAP i32 #x8508)
(bind-val GL_TEXTURE_DEPTH_SIZE i32 #x884A)
(bind-val GL_TEXTURE_COMPARE_MODE i32 #x884C)
(bind-val GL_TEXTURE_COMPARE_FUNC i32 #x884D)
(bind-val GL_FUNC_ADD i32 #x8006)
(bind-val GL_FUNC_SUBTRACT i32 #x800A)
(bind-val GL_FUNC_REVERSE_SUBTRACT i32 #x800B)
(bind-val GL_MIN i32 #x8007)
(bind-val GL_MAX i32 #x8008)
(bind-val GL_CONSTANT_COLOR i32 #x8001)
(bind-val GL_ONE_MINUS_CONSTANT_COLOR i32 #x8002)
(bind-val GL_CONSTANT_ALPHA i32 #x8003)
(bind-val GL_ONE_MINUS_CONSTANT_ALPHA i32 #x8004)

;; void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
(bind-lib libGL glBlendFuncSeparate [void,GLenum,GLenum,GLenum,GLenum]*)
;; void glMultiDrawArrays(GLenum mode, GLint* first, GLsizei* count, GLsizei drawcount);
(bind-lib libGL glMultiDrawArrays [void,GLenum,GLint*,GLsizei*,GLsizei]*)
;; void glMultiDrawElements(GLenum mode, GLsizei* count, GLenum type, void** indices, GLsizei drawcount);
(bind-lib libGL glMultiDrawElements [void,GLenum,GLsizei*,GLenum,GLvoid**,GLsizei]*)
;; void glPointParameterf(GLenum pname, GLfloat param);
(bind-lib libGL glPointParameterf [void,GLenum,GLfloat]*)
;; void glPointParameterfv(GLenum pname, GLfloat* params);
(bind-lib libGL glPointParameterfv [void,GLenum,GLfloat*]*)
;; void glPointParameteri(GLenum pname, GLint param);
(bind-lib libGL glPointParameteri [void,GLenum,GLint]*)
;; void glPointParameteriv(GLenum pname, GLint* params);
(bind-lib libGL glPointParameteriv [void,GLenum,GLint*]*)
;; void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
(bind-lib libGL glBlendColor [void,GLfloat,GLfloat,GLfloat,GLfloat]*)
;; void glBlendEquation(GLenum mode);
(bind-lib libGL glBlendEquation [void,GLenum]*)
;; #endif /* GL_VERSION_1_4 */

;; #ifndef GL_VERSION_1_5
(bind-val GL_VERSION_1_5 i32 1)
(bind-alias GLsizeiptr i64) ;; ptrdiff_t
(bind-alias GLintptr i64) ;; ptrdiff_t
(bind-val GL_BUFFER_SIZE i32 #x8764)
(bind-val GL_BUFFER_USAGE i32 #x8765)
(bind-val GL_QUERY_COUNTER_BITS i32 #x8864)
(bind-val GL_CURRENT_QUERY i32 #x8865)
(bind-val GL_QUERY_RESULT i32 #x8866)
(bind-val GL_QUERY_RESULT_AVAILABLE i32 #x8867)
(bind-val GL_ARRAY_BUFFER i32 #x8892)
(bind-val GL_ELEMENT_ARRAY_BUFFER i32 #x8893)
(bind-val GL_ARRAY_BUFFER_BINDING i32 #x8894)
(bind-val GL_ELEMENT_ARRAY_BUFFER_BINDING i32 #x8895)
(bind-val GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING i32 #x889F)
(bind-val GL_READ_ONLY i32 #x88B8)
(bind-val GL_WRITE_ONLY i32 #x88B9)
(bind-val GL_READ_WRITE i32 #x88BA)
(bind-val GL_BUFFER_ACCESS i32 #x88BB)
(bind-val GL_BUFFER_MAPPED i32 #x88BC)
(bind-val GL_BUFFER_MAP_POINTER i32 #x88BD)
(bind-val GL_STREAM_DRAW i32 #x88E0)
(bind-val GL_STREAM_READ i32 #x88E1)
(bind-val GL_STREAM_COPY i32 #x88E2)
(bind-val GL_STATIC_DRAW i32 #x88E4)
(bind-val GL_STATIC_READ i32 #x88E5)
(bind-val GL_STATIC_COPY i32 #x88E6)
(bind-val GL_DYNAMIC_DRAW i32 #x88E8)
(bind-val GL_DYNAMIC_READ i32 #x88E9)
(bind-val GL_DYNAMIC_COPY i32 #x88EA)
(bind-val GL_SAMPLES_PASSED i32 #x8914)
(bind-val GL_SRC1_ALPHA i32 #x8589)

;; void glGenQueries(GLsizei n, GLuint *ids);
(bind-lib libGL glGenQueries [void,GLsizei,GLuint*]*)
;; void glDeleteQueries(GLsizei n, GLuint* ids);
(bind-lib libGL glDeleteQueries [void,GLsizei,GLuint*]*)
;; GLboolean glIsQuery(GLuint id);
(bind-lib libGL glIsQuery [GLboolean,GLuint]*)
;; void glBeginQuery(GLenum target, GLuint id);
(bind-lib libGL glBeginQuery [void,GLenum,GLuint]*)
;; void glEndQuery(GLenum target);
(bind-lib libGL glEndQuery [void,GLenum]*)
;; void glGetQueryiv(GLenum target, GLenum pname, GLint *params);
(bind-lib libGL glGetQueryiv [void,GLenum,GLenum,GLint*]*)
;; void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params);
(bind-lib libGL glGetQueryObjectiv [void,GLuint,GLenum,GLint*]*)
;; void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params);
(bind-lib libGL glGetQueryObjectuiv [void,GLuint,GLenum,GLuint*]*)
;; void glBindBuffer(GLenum target, GLuint buffer);
(bind-lib libGL glBindBuffer [void,GLenum,GLuint]*)
;; void glDeleteBuffers(GLsizei n, GLuint* buffers);
(bind-lib libGL glDeleteBuffers [void,GLsizei,GLuint*]*)
;; void glGenBuffers(GLsizei n, GLuint *buffers);
(bind-lib libGL glGenBuffers [void,GLsizei,GLuint*]*)
;; GLboolean glIsBuffer(GLuint buffer);
(bind-lib libGL glIsBuffer [GLboolean,GLuint]*)
;; void glBufferData(GLenum target, GLsizeiptr size, void* data, GLenum usage);
(bind-lib libGL glBufferData [void,GLenum,GLsizeiptr,i8*,GLenum]*)
;; void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void* data);
(bind-lib libGL glBufferSubData [void,GLenum,GLintptr,GLsizeiptr,i8*]*)
;; void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
(bind-lib libGL glGetBufferSubData [void,GLenum,GLintptr,GLsizeiptr,i8*]*)
;; void* glMapBuffer(GLenum target, GLenum access);
(bind-lib libGL glMapBuffer [i8*,GLenum,GLenum]*)
;; GLboolean glUnmapBuffer(GLenum target);
(bind-lib libGL glUnmapBuffer [GLboolean,GLenum]*)
;; void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params);
(bind-lib libGL glGetBufferParameteriv [void,GLenum,GLenum,GLint*]*)
;; void glGetBufferPointerv(GLenum target, GLenum pname, void **params);
(bind-lib libGL glGetBufferPointerv [void,GLenum,GLenum,GLvoid**]*)
;; #endif /* GL_VERSION_1_5 */

;; #ifndef GL_VERSION_2_0
(bind-val GL_VERSION_2_0 i32 1)
(bind-alias GLchar i8)
(bind-alias GLshort i16)
(bind-alias GLbyte i8)
(bind-alias GLushort i16)
(bind-val GL_BLEND_EQUATION_RGB i32 #x8009)
(bind-val GL_VERTEX_ATTRIB_ARRAY_ENABLED i32 #x8622)
(bind-val GL_VERTEX_ATTRIB_ARRAY_SIZE i32 #x8623)
(bind-val GL_VERTEX_ATTRIB_ARRAY_STRIDE i32 #x8624)
(bind-val GL_VERTEX_ATTRIB_ARRAY_TYPE i32 #x8625)
(bind-val GL_CURRENT_VERTEX_ATTRIB i32 #x8626)
(bind-val GL_VERTEX_PROGRAM_POINT_SIZE i32 #x8642)
(bind-val GL_VERTEX_ATTRIB_ARRAY_POINTER i32 #x8645)
(bind-val GL_STENCIL_BACK_FUNC i32 #x8800)
(bind-val GL_STENCIL_BACK_FAIL i32 #x8801)
(bind-val GL_STENCIL_BACK_PASS_DEPTH_FAIL i32 #x8802)
(bind-val GL_STENCIL_BACK_PASS_DEPTH_PASS i32 #x8803)
(bind-val GL_MAX_DRAW_BUFFERS i32 #x8824)
(bind-val GL_DRAW_BUFFER0 i32 #x8825)
(bind-val GL_DRAW_BUFFER1 i32 #x8826)
(bind-val GL_DRAW_BUFFER2 i32 #x8827)
(bind-val GL_DRAW_BUFFER3 i32 #x8828)
(bind-val GL_DRAW_BUFFER4 i32 #x8829)
(bind-val GL_DRAW_BUFFER5 i32 #x882A)
(bind-val GL_DRAW_BUFFER6 i32 #x882B)
(bind-val GL_DRAW_BUFFER7 i32 #x882C)
(bind-val GL_DRAW_BUFFER8 i32 #x882D)
(bind-val GL_DRAW_BUFFER9 i32 #x882E)
(bind-val GL_DRAW_BUFFER10 i32 #x882F)
(bind-val GL_DRAW_BUFFER11 i32 #x8830)
(bind-val GL_DRAW_BUFFER12 i32 #x8831)
(bind-val GL_DRAW_BUFFER13 i32 #x8832)
(bind-val GL_DRAW_BUFFER14 i32 #x8833)
(bind-val GL_DRAW_BUFFER15 i32 #x8834)
(bind-val GL_BLEND_EQUATION_ALPHA i32 #x883D)
(bind-val GL_MAX_VERTEX_ATTRIBS i32 #x8869)
(bind-val GL_VERTEX_ATTRIB_ARRAY_NORMALIZED i32 #x886A)
(bind-val GL_MAX_TEXTURE_IMAGE_UNITS i32 #x8872)
(bind-val GL_FRAGMENT_SHADER i32 #x8B30)
(bind-val GL_VERTEX_SHADER i32 #x8B31)
(bind-val GL_MAX_FRAGMENT_UNIFORM_COMPONENTS i32 #x8B49)
(bind-val GL_MAX_VERTEX_UNIFORM_COMPONENTS i32 #x8B4A)
(bind-val GL_MAX_VARYING_FLOATS i32 #x8B4B)
(bind-val GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS i32 #x8B4C)
(bind-val GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS i32 #x8B4D)
(bind-val GL_SHADER_TYPE i32 #x8B4F)
(bind-val GL_FLOAT_VEC2 i32 #x8B50)
(bind-val GL_FLOAT_VEC3 i32 #x8B51)
(bind-val GL_FLOAT_VEC4 i32 #x8B52)
(bind-val GL_INT_VEC2 i32 #x8B53)
(bind-val GL_INT_VEC3 i32 #x8B54)
(bind-val GL_INT_VEC4 i32 #x8B55)
(bind-val GL_BOOL i32 #x8B56)
(bind-val GL_BOOL_VEC2 i32 #x8B57)
(bind-val GL_BOOL_VEC3 i32 #x8B58)
(bind-val GL_BOOL_VEC4 i32 #x8B59)
(bind-val GL_FLOAT_MAT2 i32 #x8B5A)
(bind-val GL_FLOAT_MAT3 i32 #x8B5B)
(bind-val GL_FLOAT_MAT4 i32 #x8B5C)
(bind-val GL_SAMPLER_1D i32 #x8B5D)
(bind-val GL_SAMPLER_2D i32 #x8B5E)
(bind-val GL_SAMPLER_3D i32 #x8B5F)
(bind-val GL_SAMPLER_CUBE i32 #x8B60)
(bind-val GL_SAMPLER_1D_SHADOW i32 #x8B61)
(bind-val GL_SAMPLER_2D_SHADOW i32 #x8B62)
(bind-val GL_DELETE_STATUS i32 #x8B80)
(bind-val GL_COMPILE_STATUS i32 #x8B81)
(bind-val GL_LINK_STATUS i32 #x8B82)
(bind-val GL_VALIDATE_STATUS i32 #x8B83)
(bind-val GL_INFO_LOG_LENGTH i32 #x8B84)
(bind-val GL_ATTACHED_SHADERS i32 #x8B85)
(bind-val GL_ACTIVE_UNIFORMS i32 #x8B86)
(bind-val GL_ACTIVE_UNIFORM_MAX_LENGTH i32 #x8B87)
(bind-val GL_SHADER_SOURCE_LENGTH i32 #x8B88)
(bind-val GL_ACTIVE_ATTRIBUTES i32 #x8B89)
(bind-val GL_ACTIVE_ATTRIBUTE_MAX_LENGTH i32 #x8B8A)
(bind-val GL_FRAGMENT_SHADER_DERIVATIVE_HINT i32 #x8B8B)
(bind-val GL_SHADING_LANGUAGE_VERSION i32 #x8B8C)
(bind-val GL_CURRENT_PROGRAM i32 #x8B8D)
(bind-val GL_POINT_SPRITE_COORD_ORIGIN i32 #x8CA0)
(bind-val GL_LOWER_LEFT i32 #x8CA1)
(bind-val GL_UPPER_LEFT i32 #x8CA2)
(bind-val GL_STENCIL_BACK_REF i32 #x8CA3)
(bind-val GL_STENCIL_BACK_VALUE_MASK i32 #x8CA4)
(bind-val GL_STENCIL_BACK_WRITEMASK i32 #x8CA5)

;; void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
(bind-lib libGL glBlendEquationSeparate [void,GLenum,GLenum]*)
;; void glDrawBuffers(GLsizei n, GLenum* bufs);
(bind-lib libGL glDrawBuffers [void,GLsizei,GLenum*]*)
;; void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
(bind-lib libGL glStencilOpSeparate [void,GLenum,GLenum,GLenum,GLenum]*)
;; void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
(bind-lib libGL glStencilFuncSeparate [void,GLenum,GLenum,GLint,GLuint]*)
;; void glStencilMaskSeparate(GLenum face, GLuint mask);
(bind-lib libGL glStencilMaskSeparate [void,GLenum,GLuint]*)
;; void glAttachShader(GLuint program, GLuint shader);
(bind-lib libGL glAttachShader [void,GLuint,GLuint]*)
;; void glBindAttribLocation(GLuint program, GLuint index, GLchar* name);
(bind-lib libGL glBindAttribLocation [void,GLuint,GLuint,GLchar*]*)
;; void glCompileShader(GLuint shader);
(bind-lib libGL glCompileShader [void,GLuint]*)
;; GLuint glCreateProgram(void);
(bind-lib libGL glCreateProgram [GLuint]*)
;; GLuint glCreateShader(GLenum type);
(bind-lib libGL glCreateShader [GLuint,GLenum]*)
;; void glDeleteProgram(GLuint program);
(bind-lib libGL glDeleteProgram [void,GLuint]*)
;; void glDeleteShader(GLuint shader);
(bind-lib libGL glDeleteShader [void,GLuint]*)
;; void glDetachShader(GLuint program, GLuint shader);
(bind-lib libGL glDetachShader [void,GLuint,GLuint]*)
;; void glDisableVertexAttribArray(GLuint index);
(bind-lib libGL glDisableVertexAttribArray [void,GLuint]*)
;; void glEnableVertexAttribArray(GLuint index);
(bind-lib libGL glEnableVertexAttribArray [void,GLuint]*)
;; void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
(bind-lib libGL glGetActiveAttrib [void,GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*]*)
;; void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
(bind-lib libGL glGetActiveUniform [void,GLuint,GLuint,GLsizei,GLsizei*,GLint*,GLenum*,GLchar*]*)
;; void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
(bind-lib libGL glGetAttachedShaders [void,GLuint,GLsizei,GLsizei*,GLuint*]*)
;; GLint glGetAttribLocation(GLuint program, GLchar* name);
(bind-lib libGL glGetAttribLocation [GLint,GLuint,GLchar*]*)
;; void glGetProgramiv(GLuint program, GLenum pname, GLint *params);
(bind-lib libGL glGetProgramiv [void,GLuint,GLenum,GLint*]*)
;; void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
(bind-lib libGL glGetProgramInfoLog [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; void glGetShaderiv(GLuint shader, GLenum pname, GLint *params);
(bind-lib libGL glGetShaderiv [void,GLuint,GLenum,GLint*]*)
;; void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
(bind-lib libGL glGetShaderInfoLog [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
(bind-lib libGL glGetShaderSource [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; GLint glGetUniformLocation(GLuint program, GLchar* name);
(bind-lib libGL glGetUniformLocation [GLint,GLuint,GLchar*]*)
;; void glGetUniformfv(GLuint program, GLint location, GLfloat *params);
(bind-lib libGL glGetUniformfv [void,GLuint,GLint,GLfloat*]*)
;; void glGetUniformiv(GLuint program, GLint location, GLint *params);
(bind-lib libGL glGetUniformiv [void,GLuint,GLint,GLint*]*)
;; void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params);
(bind-lib libGL glGetVertexAttribdv [void,GLuint,GLenum,GLdouble*]*)
;; void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params);
(bind-lib libGL glGetVertexAttribfv [void,GLuint,GLenum,GLfloat*]*)
;; void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params);
(bind-lib libGL glGetVertexAttribiv [void,GLuint,GLenum,GLint*]*)
;; void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer);
(bind-lib libGL glGetVertexAttribPointerv [void,GLuint,GLenum,GLvoid**]*)
;; GLboolean glIsProgram(GLuint program);
(bind-lib libGL glIsProgram [GLboolean,GLuint]*)
;; GLboolean glIsShader(GLuint shader);
(bind-lib libGL glIsShader [GLboolean,GLuint]*)
;; void glLinkProgram(GLuint program);
(bind-lib libGL glLinkProgram [void,GLuint]*)
;; void glShaderSource(GLuint shader, GLsizei count, GLchar** string, GLint* length);
(bind-lib libGL glShaderSource [void,GLuint,GLsizei,GLchar**,GLint*]*)
;; void glUseProgram(GLuint program);
(bind-lib libGL glUseProgram [void,GLuint]*)
;; void glUniform1f(GLint location, GLfloat v0);
(bind-lib libGL glUniform1f [void,GLint,GLfloat]*)
;; void glUniform2f(GLint location, GLfloat v0, GLfloat v1);
(bind-lib libGL glUniform2f [void,GLint,GLfloat,GLfloat]*)
;; void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
(bind-lib libGL glUniform3f [void,GLint,GLfloat,GLfloat,GLfloat]*)
;; void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
(bind-lib libGL glUniform4f [void,GLint,GLfloat,GLfloat,GLfloat,GLfloat]*)
;; void glUniform1i(GLint location, GLint v0);
(bind-lib libGL glUniform1i [void,GLint,GLint]*)
;; void glUniform2i(GLint location, GLint v0, GLint v1);
(bind-lib libGL glUniform2i [void,GLint,GLint,GLint]*)
;; void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2);
(bind-lib libGL glUniform3i [void,GLint,GLint,GLint,GLint]*)
;; void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
(bind-lib libGL glUniform4i [void,GLint,GLint,GLint,GLint,GLint]*)
;; void glUniform1fv(GLint location, GLsizei count, GLfloat* value);
(bind-lib libGL glUniform1fv [void,GLint,GLsizei,GLfloat*]*)
;; void glUniform2fv(GLint location, GLsizei count, GLfloat* value);
(bind-lib libGL glUniform2fv [void,GLint,GLsizei,GLfloat*]*)
;; void glUniform3fv(GLint location, GLsizei count, GLfloat* value);
(bind-lib libGL glUniform3fv [void,GLint,GLsizei,GLfloat*]*)
;; void glUniform4fv(GLint location, GLsizei count, GLfloat* value);
(bind-lib libGL glUniform4fv [void,GLint,GLsizei,GLfloat*]*)
;; void glUniform1iv(GLint location, GLsizei count, GLint* value);
(bind-lib libGL glUniform1iv [void,GLint,GLsizei,GLint*]*)
;; void glUniform2iv(GLint location, GLsizei count, GLint* value);
(bind-lib libGL glUniform2iv [void,GLint,GLsizei,GLint*]*)
;; void glUniform3iv(GLint location, GLsizei count, GLint* value);
(bind-lib libGL glUniform3iv [void,GLint,GLsizei,GLint*]*)
;; void glUniform4iv(GLint location, GLsizei count, GLint* value);
(bind-lib libGL glUniform4iv [void,GLint,GLsizei,GLint*]*)
;; void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix2fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix3fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix4fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glValidateProgram(GLuint program);
(bind-lib libGL glValidateProgram [void,GLuint]*)
;; void glVertexAttrib1d(GLuint index, GLdouble x);
(bind-lib libGL glVertexAttrib1d [void,GLuint,GLdouble]*)
;; void glVertexAttrib1dv(GLuint index, const GLdouble *v);
(bind-lib libGL glVertexAttrib1dv [void,GLuint,GLdouble*]*)
;; void glVertexAttrib1f(GLuint index, GLfloat x);
(bind-lib libGL glVertexAttrib1f [void,GLuint,GLfloat]*)
;; void glVertexAttrib1fv(GLuint index, GLfloat* v);
(bind-lib libGL glVertexAttrib1fv [void,GLuint,GLfloat*]*)
;; void glVertexAttrib1s(GLuint index, GLshort x);
(bind-lib libGL glVertexAttrib1s [void,GLuint,GLshort]*)
;; void glVertexAttrib1sv(GLuint index, const GLshort *v);
(bind-lib libGL glVertexAttrib1sv [void,GLuint,GLshort*]*)
;; void glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y);
(bind-lib libGL glVertexAttrib2d [void,GLuint,GLdouble,GLdouble]*)
;; void glVertexAttrib2dv(GLuint index, const GLdouble *v);
(bind-lib libGL glVertexAttrib2dv [void,GLuint,GLdouble*]*)
;; void glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y);
(bind-lib libGL glVertexAttrib2f [void,GLuint,GLfloat,GLfloat]*)
;; void glVertexAttrib2fv(GLuint index, GLfloat* v);
(bind-lib libGL glVertexAttrib2fv [void,GLuint,GLfloat*]*)
;; void glVertexAttrib2s(GLuint index, GLshort x, GLshort y);
(bind-lib libGL glVertexAttrib2s [void,GLuint,GLshort,GLshort]*)
;; void glVertexAttrib2sv(GLuint index, const GLshort *v);
(bind-lib libGL glVertexAttrib2sv [void,GLuint,GLshort*]*)
;; void glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
(bind-lib libGL glVertexAttrib3d [void,GLuint,GLdouble,GLdouble,GLdouble]*)
;; void glVertexAttrib3dv(GLuint index, const GLdouble *v);
(bind-lib libGL glVertexAttrib3dv [void,GLuint,GLdouble*]*)
;; void glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z);
(bind-lib libGL glVertexAttrib3f [void,GLuint,GLfloat,GLfloat,GLfloat]*)
;; void glVertexAttrib3fv(GLuint index, GLfloat* v);
(bind-lib libGL glVertexAttrib3fv [void,GLuint,GLfloat*]*)
;; void glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z);
(bind-lib libGL glVertexAttrib3s [void,GLuint,GLshort,GLshort,GLshort]*)
;; void glVertexAttrib3sv(GLuint index, const GLshort *v);
(bind-lib libGL glVertexAttrib3sv [void,GLuint,GLshort*]*)
;; void glVertexAttrib4Nbv(GLuint index, const GLbyte *v);
(bind-lib libGL glVertexAttrib4Nbv [void,GLuint,GLbyte*]*)
;; void glVertexAttrib4Niv(GLuint index, GLint* v);
(bind-lib libGL glVertexAttrib4Niv [void,GLuint,GLint*]*)
;; void glVertexAttrib4Nsv(GLuint index, const GLshort *v);
(bind-lib libGL glVertexAttrib4Nsv [void,GLuint,GLshort*]*)
;; void glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
(bind-lib libGL glVertexAttrib4Nub [void,GLuint,GLubyte,GLubyte,GLubyte,GLubyte]*)
;; void glVertexAttrib4Nubv(GLuint index, const GLubyte *v);
(bind-lib libGL glVertexAttrib4Nubv [void,GLuint,GLubyte*]*)
;; void glVertexAttrib4Nuiv(GLuint index, GLuint* v);
(bind-lib libGL glVertexAttrib4Nuiv [void,GLuint,GLuint*]*)
;; void glVertexAttrib4Nusv(GLuint index, const GLushort *v);
(bind-lib libGL glVertexAttrib4Nusv [void,GLuint,GLushort*]*)
;; void glVertexAttrib4bv(GLuint index, const GLbyte *v);
(bind-lib libGL glVertexAttrib4bv [void,GLuint,GLbyte*]*)
;; void glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
(bind-lib libGL glVertexAttrib4d [void,GLuint,GLdouble,GLdouble,GLdouble,GLdouble]*)
;; void glVertexAttrib4dv(GLuint index, const GLdouble *v);
(bind-lib libGL glVertexAttrib4dv [void,GLuint,GLdouble*]*)
;; void glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
(bind-lib libGL glVertexAttrib4f [void,GLuint,GLfloat,GLfloat,GLfloat,GLfloat]*)
;; void glVertexAttrib4fv(GLuint index, GLfloat* v);
(bind-lib libGL glVertexAttrib4fv [void,GLuint,GLfloat*]*)
;; void glVertexAttrib4iv(GLuint index, GLint* v);
(bind-lib libGL glVertexAttrib4iv [void,GLuint,GLint*]*)
;; void glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
(bind-lib libGL glVertexAttrib4s [void,GLuint,GLshort,GLshort,GLshort,GLshort]*)
;; void glVertexAttrib4sv(GLuint index, const GLshort *v);
(bind-lib libGL glVertexAttrib4sv [void,GLuint,GLshort*]*)
;; void glVertexAttrib4ubv(GLuint index, const GLubyte *v);
(bind-lib libGL glVertexAttrib4ubv [void,GLuint,GLubyte*]*)
;; void glVertexAttrib4uiv(GLuint index, GLuint* v);
(bind-lib libGL glVertexAttrib4uiv [void,GLuint,GLuint*]*)
;; void glVertexAttrib4usv(GLuint index, const GLushort *v);
(bind-lib libGL glVertexAttrib4usv [void,GLuint,GLushort*]*)
;; void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void* pointer);
(bind-lib libGL glVertexAttribPointer [void,GLuint,GLint,GLenum,GLboolean,GLsizei,i8*]*)
;; #endif /* GL_VERSION_2_0 */

;; #ifndef GL_VERSION_2_1
(bind-val GL_VERSION_2_1 i32 1)
(bind-val GL_PIXEL_PACK_BUFFER i32 #x88EB)
(bind-val GL_PIXEL_UNPACK_BUFFER i32 #x88EC)
(bind-val GL_PIXEL_PACK_BUFFER_BINDING i32 #x88ED)
(bind-val GL_PIXEL_UNPACK_BUFFER_BINDING i32 #x88EF)
(bind-val GL_FLOAT_MAT2x3 i32 #x8B65)
(bind-val GL_FLOAT_MAT2x4 i32 #x8B66)
(bind-val GL_FLOAT_MAT3x2 i32 #x8B67)
(bind-val GL_FLOAT_MAT3x4 i32 #x8B68)
(bind-val GL_FLOAT_MAT4x2 i32 #x8B69)
(bind-val GL_FLOAT_MAT4x3 i32 #x8B6A)
(bind-val GL_SRGB i32 #x8C40)
(bind-val GL_SRGB8 i32 #x8C41)
(bind-val GL_SRGB_ALPHA i32 #x8C42)
(bind-val GL_SRGB8_ALPHA8 i32 #x8C43)
(bind-val GL_COMPRESSED_SRGB i32 #x8C48)
(bind-val GL_COMPRESSED_SRGB_ALPHA i32 #x8C49)

;; void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix2x3fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix3x2fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix2x4fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix4x2fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix3x4fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
(bind-lib libGL glUniformMatrix4x3fv [void,GLint,GLsizei,GLboolean,GLfloat*]*)
;; #endif /* GL_VERSION_2_1 */

;; #ifndef GL_VERSION_3_0
(bind-val GL_VERSION_3_0 i32 1)
(bind-alias GLhalf i16)
(bind-val GL_COMPARE_REF_TO_TEXTURE i32 #x884E)
(bind-val GL_CLIP_DISTANCE0 i32 #x3000)
(bind-val GL_CLIP_DISTANCE1 i32 #x3001)
(bind-val GL_CLIP_DISTANCE2 i32 #x3002)
(bind-val GL_CLIP_DISTANCE3 i32 #x3003)
(bind-val GL_CLIP_DISTANCE4 i32 #x3004)
(bind-val GL_CLIP_DISTANCE5 i32 #x3005)
(bind-val GL_CLIP_DISTANCE6 i32 #x3006)
(bind-val GL_CLIP_DISTANCE7 i32 #x3007)
(bind-val GL_MAX_CLIP_DISTANCES i32 #x0D32)
(bind-val GL_MAJOR_VERSION i32 #x821B)
(bind-val GL_MINOR_VERSION i32 #x821C)
(bind-val GL_NUM_EXTENSIONS i32 #x821D)
(bind-val GL_CONTEXT_FLAGS i32 #x821E)
(bind-val GL_COMPRESSED_RED i32 #x8225)
(bind-val GL_COMPRESSED_RG i32 #x8226)
(bind-val GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT i32 #x00000001)
(bind-val GL_RGBA32F i32 #x8814)
(bind-val GL_RGB32F i32 #x8815)
(bind-val GL_RGBA16F i32 #x881A)
(bind-val GL_RGB16F i32 #x881B)
(bind-val GL_VERTEX_ATTRIB_ARRAY_INTEGER i32 #x88FD)
(bind-val GL_MAX_ARRAY_TEXTURE_LAYERS i32 #x88FF)
(bind-val GL_MIN_PROGRAM_TEXEL_OFFSET i32 #x8904)
(bind-val GL_MAX_PROGRAM_TEXEL_OFFSET i32 #x8905)
(bind-val GL_CLAMP_READ_COLOR i32 #x891C)
(bind-val GL_FIXED_ONLY i32 #x891D)
(bind-val GL_MAX_VARYING_COMPONENTS i32 #x8B4B)
(bind-val GL_TEXTURE_1D_ARRAY i32 #x8C18)
(bind-val GL_PROXY_TEXTURE_1D_ARRAY i32 #x8C19)
(bind-val GL_TEXTURE_2D_ARRAY i32 #x8C1A)
(bind-val GL_PROXY_TEXTURE_2D_ARRAY i32 #x8C1B)
(bind-val GL_TEXTURE_BINDING_1D_ARRAY i32 #x8C1C)
(bind-val GL_TEXTURE_BINDING_2D_ARRAY i32 #x8C1D)
(bind-val GL_R11F_G11F_B10F i32 #x8C3A)
(bind-val GL_UNSIGNED_INT_10F_11F_11F_REV i32 #x8C3B)
(bind-val GL_RGB9_E5 i32 #x8C3D)
(bind-val GL_UNSIGNED_INT_5_9_9_9_REV i32 #x8C3E)
(bind-val GL_TEXTURE_SHARED_SIZE i32 #x8C3F)
(bind-val GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH i32 #x8C76)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_MODE i32 #x8C7F)
(bind-val GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS i32 #x8C80)
(bind-val GL_TRANSFORM_FEEDBACK_VARYINGS i32 #x8C83)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_START i32 #x8C84)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_SIZE i32 #x8C85)
(bind-val GL_PRIMITIVES_GENERATED i32 #x8C87)
(bind-val GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN i32 #x8C88)
(bind-val GL_RASTERIZER_DISCARD i32 #x8C89)
(bind-val GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS i32 #x8C8A)
(bind-val GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS i32 #x8C8B)
(bind-val GL_INTERLEAVED_ATTRIBS i32 #x8C8C)
(bind-val GL_SEPARATE_ATTRIBS i32 #x8C8D)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER i32 #x8C8E)
(bind-val GL_TRANSFORM_FEEDBACK_BUFFER_BINDING i32 #x8C8F)
(bind-val GL_RGBA32UI i32 #x8D70)
(bind-val GL_RGB32UI i32 #x8D71)
(bind-val GL_RGBA16UI i32 #x8D76)
(bind-val GL_RGB16UI i32 #x8D77)
(bind-val GL_RGBA8UI i32 #x8D7C)
(bind-val GL_RGB8UI i32 #x8D7D)
(bind-val GL_RGBA32I i32 #x8D82)
(bind-val GL_RGB32I i32 #x8D83)
(bind-val GL_RGBA16I i32 #x8D88)
(bind-val GL_RGB16I i32 #x8D89)
(bind-val GL_RGBA8I i32 #x8D8E)
(bind-val GL_RGB8I i32 #x8D8F)
(bind-val GL_RED_INTEGER i32 #x8D94)
(bind-val GL_GREEN_INTEGER i32 #x8D95)
(bind-val GL_BLUE_INTEGER i32 #x8D96)
(bind-val GL_RGB_INTEGER i32 #x8D98)
(bind-val GL_RGBA_INTEGER i32 #x8D99)
(bind-val GL_BGR_INTEGER i32 #x8D9A)
(bind-val GL_BGRA_INTEGER i32 #x8D9B)
(bind-val GL_SAMPLER_1D_ARRAY i32 #x8DC0)
(bind-val GL_SAMPLER_2D_ARRAY i32 #x8DC1)
(bind-val GL_SAMPLER_1D_ARRAY_SHADOW i32 #x8DC3)
(bind-val GL_SAMPLER_2D_ARRAY_SHADOW i32 #x8DC4)
(bind-val GL_SAMPLER_CUBE_SHADOW i32 #x8DC5)
(bind-val GL_UNSIGNED_INT_VEC2 i32 #x8DC6)
(bind-val GL_UNSIGNED_INT_VEC3 i32 #x8DC7)
(bind-val GL_UNSIGNED_INT_VEC4 i32 #x8DC8)
(bind-val GL_INT_SAMPLER_1D i32 #x8DC9)
(bind-val GL_INT_SAMPLER_2D i32 #x8DCA)
(bind-val GL_INT_SAMPLER_3D i32 #x8DCB)
(bind-val GL_INT_SAMPLER_CUBE i32 #x8DCC)
(bind-val GL_INT_SAMPLER_1D_ARRAY i32 #x8DCE)
(bind-val GL_INT_SAMPLER_2D_ARRAY i32 #x8DCF)
(bind-val GL_UNSIGNED_INT_SAMPLER_1D i32 #x8DD1)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D i32 #x8DD2)
(bind-val GL_UNSIGNED_INT_SAMPLER_3D i32 #x8DD3)
(bind-val GL_UNSIGNED_INT_SAMPLER_CUBE i32 #x8DD4)
(bind-val GL_UNSIGNED_INT_SAMPLER_1D_ARRAY i32 #x8DD6)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_ARRAY i32 #x8DD7)
(bind-val GL_QUERY_WAIT i32 #x8E13)
(bind-val GL_QUERY_NO_WAIT i32 #x8E14)
(bind-val GL_QUERY_BY_REGION_WAIT i32 #x8E15)
(bind-val GL_QUERY_BY_REGION_NO_WAIT i32 #x8E16)
(bind-val GL_BUFFER_ACCESS_FLAGS i32 #x911F)
(bind-val GL_BUFFER_MAP_LENGTH i32 #x9120)
(bind-val GL_BUFFER_MAP_OFFSET i32 #x9121)
(bind-val GL_DEPTH_COMPONENT32F i32 #x8CAC)
(bind-val GL_DEPTH32F_STENCIL8 i32 #x8CAD)
(bind-val GL_FLOAT_32_UNSIGNED_INT_24_8_REV i32 #x8DAD)
(bind-val GL_INVALID_FRAMEBUFFER_OPERATION i32 #x0506)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING i32 #x8210)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE i32 #x8211)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE i32 #x8212)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE i32 #x8213)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE i32 #x8214)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE i32 #x8215)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE i32 #x8216)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE i32 #x8217)
(bind-val GL_FRAMEBUFFER_DEFAULT i32 #x8218)
(bind-val GL_FRAMEBUFFER_UNDEFINED i32 #x8219)
(bind-val GL_DEPTH_STENCIL_ATTACHMENT i32 #x821A)
(bind-val GL_MAX_RENDERBUFFER_SIZE i32 #x84E8)
(bind-val GL_DEPTH_STENCIL i32 #x84F9)
(bind-val GL_UNSIGNED_INT_24_8 i32 #x84FA)
(bind-val GL_DEPTH24_STENCIL8 i32 #x88F0)
(bind-val GL_TEXTURE_STENCIL_SIZE i32 #x88F1)
(bind-val GL_TEXTURE_RED_TYPE i32 #x8C10)
(bind-val GL_TEXTURE_GREEN_TYPE i32 #x8C11)
(bind-val GL_TEXTURE_BLUE_TYPE i32 #x8C12)
(bind-val GL_TEXTURE_ALPHA_TYPE i32 #x8C13)
(bind-val GL_TEXTURE_DEPTH_TYPE i32 #x8C16)
(bind-val GL_UNSIGNED_NORMALIZED i32 #x8C17)
(bind-val GL_FRAMEBUFFER_BINDING i32 #x8CA6)
(bind-val GL_DRAW_FRAMEBUFFER_BINDING i32 #x8CA6)
(bind-val GL_RENDERBUFFER_BINDING i32 #x8CA7)
(bind-val GL_READ_FRAMEBUFFER i32 #x8CA8)
(bind-val GL_DRAW_FRAMEBUFFER i32 #x8CA9)
(bind-val GL_READ_FRAMEBUFFER_BINDING i32 #x8CAA)
(bind-val GL_RENDERBUFFER_SAMPLES i32 #x8CAB)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE i32 #x8CD0)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME i32 #x8CD1)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL i32 #x8CD2)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE i32 #x8CD3)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER i32 #x8CD4)
(bind-val GL_FRAMEBUFFER_COMPLETE i32 #x8CD5)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT i32 #x8CD6)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT i32 #x8CD7)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER i32 #x8CDB)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER i32 #x8CDC)
(bind-val GL_FRAMEBUFFER_UNSUPPORTED i32 #x8CDD)
(bind-val GL_MAX_COLOR_ATTACHMENTS i32 #x8CDF)
(bind-val GL_COLOR_ATTACHMENT0 i32 #x8CE0)
(bind-val GL_COLOR_ATTACHMENT1 i32 #x8CE1)
(bind-val GL_COLOR_ATTACHMENT2 i32 #x8CE2)
(bind-val GL_COLOR_ATTACHMENT3 i32 #x8CE3)
(bind-val GL_COLOR_ATTACHMENT4 i32 #x8CE4)
(bind-val GL_COLOR_ATTACHMENT5 i32 #x8CE5)
(bind-val GL_COLOR_ATTACHMENT6 i32 #x8CE6)
(bind-val GL_COLOR_ATTACHMENT7 i32 #x8CE7)
(bind-val GL_COLOR_ATTACHMENT8 i32 #x8CE8)
(bind-val GL_COLOR_ATTACHMENT9 i32 #x8CE9)
(bind-val GL_COLOR_ATTACHMENT10 i32 #x8CEA)
(bind-val GL_COLOR_ATTACHMENT11 i32 #x8CEB)
(bind-val GL_COLOR_ATTACHMENT12 i32 #x8CEC)
(bind-val GL_COLOR_ATTACHMENT13 i32 #x8CED)
(bind-val GL_COLOR_ATTACHMENT14 i32 #x8CEE)
(bind-val GL_COLOR_ATTACHMENT15 i32 #x8CEF)
(bind-val GL_COLOR_ATTACHMENT16 i32 #x8CF0)
(bind-val GL_COLOR_ATTACHMENT17 i32 #x8CF1)
(bind-val GL_COLOR_ATTACHMENT18 i32 #x8CF2)
(bind-val GL_COLOR_ATTACHMENT19 i32 #x8CF3)
(bind-val GL_COLOR_ATTACHMENT20 i32 #x8CF4)
(bind-val GL_COLOR_ATTACHMENT21 i32 #x8CF5)
(bind-val GL_COLOR_ATTACHMENT22 i32 #x8CF6)
(bind-val GL_COLOR_ATTACHMENT23 i32 #x8CF7)
(bind-val GL_COLOR_ATTACHMENT24 i32 #x8CF8)
(bind-val GL_COLOR_ATTACHMENT25 i32 #x8CF9)
(bind-val GL_COLOR_ATTACHMENT26 i32 #x8CFA)
(bind-val GL_COLOR_ATTACHMENT27 i32 #x8CFB)
(bind-val GL_COLOR_ATTACHMENT28 i32 #x8CFC)
(bind-val GL_COLOR_ATTACHMENT29 i32 #x8CFD)
(bind-val GL_COLOR_ATTACHMENT30 i32 #x8CFE)
(bind-val GL_COLOR_ATTACHMENT31 i32 #x8CFF)
(bind-val GL_DEPTH_ATTACHMENT i32 #x8D00)
(bind-val GL_STENCIL_ATTACHMENT i32 #x8D20)
(bind-val GL_FRAMEBUFFER i32 #x8D40)
(bind-val GL_RENDERBUFFER i32 #x8D41)
(bind-val GL_RENDERBUFFER_WIDTH i32 #x8D42)
(bind-val GL_RENDERBUFFER_HEIGHT i32 #x8D43)
(bind-val GL_RENDERBUFFER_INTERNAL_FORMAT i32 #x8D44)
(bind-val GL_STENCIL_INDEX1 i32 #x8D46)
(bind-val GL_STENCIL_INDEX4 i32 #x8D47)
(bind-val GL_STENCIL_INDEX8 i32 #x8D48)
(bind-val GL_STENCIL_INDEX16 i32 #x8D49)
(bind-val GL_RENDERBUFFER_RED_SIZE i32 #x8D50)
(bind-val GL_RENDERBUFFER_GREEN_SIZE i32 #x8D51)
(bind-val GL_RENDERBUFFER_BLUE_SIZE i32 #x8D52)
(bind-val GL_RENDERBUFFER_ALPHA_SIZE i32 #x8D53)
(bind-val GL_RENDERBUFFER_DEPTH_SIZE i32 #x8D54)
(bind-val GL_RENDERBUFFER_STENCIL_SIZE i32 #x8D55)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE i32 #x8D56)
(bind-val GL_MAX_SAMPLES i32 #x8D57)
(bind-val GL_FRAMEBUFFER_SRGB i32 #x8DB9)
(bind-val GL_HALF_FLOAT i32 #x140B)
(bind-val GL_MAP_READ_BIT i32 #x0001)
(bind-val GL_MAP_WRITE_BIT i32 #x0002)
(bind-val GL_MAP_INVALIDATE_RANGE_BIT i32 #x0004)
(bind-val GL_MAP_INVALIDATE_BUFFER_BIT i32 #x0008)
(bind-val GL_MAP_FLUSH_EXPLICIT_BIT i32 #x0010)
(bind-val GL_MAP_UNSYNCHRONIZED_BIT i32 #x0020)
(bind-val GL_COMPRESSED_RED_RGTC1 i32 #x8DBB)
(bind-val GL_COMPRESSED_SIGNED_RED_RGTC1 i32 #x8DBC)
(bind-val GL_COMPRESSED_RG_RGTC2 i32 #x8DBD)
(bind-val GL_COMPRESSED_SIGNED_RG_RGTC2 i32 #x8DBE)
(bind-val GL_RG i32 #x8227)
(bind-val GL_RG_INTEGER i32 #x8228)
(bind-val GL_R8 i32 #x8229)
(bind-val GL_R16 i32 #x822A)
(bind-val GL_RG8 i32 #x822B)
(bind-val GL_RG16 i32 #x822C)
(bind-val GL_R16F i32 #x822D)
(bind-val GL_R32F i32 #x822E)
(bind-val GL_RG16F i32 #x822F)
(bind-val GL_RG32F i32 #x8230)
(bind-val GL_R8I i32 #x8231)
(bind-val GL_R8UI i32 #x8232)
(bind-val GL_R16I i32 #x8233)
(bind-val GL_R16UI i32 #x8234)
(bind-val GL_R32I i32 #x8235)
(bind-val GL_R32UI i32 #x8236)
(bind-val GL_RG8I i32 #x8237)
(bind-val GL_RG8UI i32 #x8238)
(bind-val GL_RG16I i32 #x8239)
(bind-val GL_RG16UI i32 #x823A)
(bind-val GL_RG32I i32 #x823B)
(bind-val GL_RG32UI i32 #x823C)
(bind-val GL_VERTEX_ARRAY_BINDING i32 #x85B5)

;; void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
(bind-lib libGL glColorMaski [void,GLuint,GLboolean,GLboolean,GLboolean,GLboolean]*)
;; void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data);
(bind-lib libGL glGetBooleani_v [void,GLenum,GLuint,GLboolean*]*)
;; void glGetIntegeri_v(GLenum target, GLuint index, GLint *data);
(bind-lib libGL glGetIntegeri_v [void,GLenum,GLuint,GLint*]*)
;; void glEnablei(GLenum target, GLuint index);
(bind-lib libGL glEnablei [void,GLenum,GLuint]*)
;; void glDisablei(GLenum target, GLuint index);
(bind-lib libGL glDisablei [void,GLenum,GLuint]*)
;; GLboolean glIsEnabledi(GLenum target, GLuint index);
(bind-lib libGL glIsEnabledi [GLboolean,GLenum,GLuint]*)
;; void glBeginTransformFeedback(GLenum primitiveMode);
(bind-lib libGL glBeginTransformFeedback [void,GLenum]*)
;; void glEndTransformFeedback(void);
(bind-lib libGL glEndTransformFeedback [void]*)
;; void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
(bind-lib libGL glBindBufferRange [void,GLenum,GLuint,GLuint,GLintptr,GLsizeiptr]*)
;; void glBindBufferBase(GLenum target, GLuint index, GLuint buffer);
(bind-lib libGL glBindBufferBase [void,GLenum,GLuint,GLuint]*)
;; void glTransformFeedbackVaryings(GLuint program, GLsizei count, GLchar** varyings, GLenum bufferMode);
(bind-lib libGL glTransformFeedbackVaryings [void,GLuint,GLsizei,GLchar**,GLenum]*)
;; void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
(bind-lib libGL glGetTransformFeedbackVarying [void,GLuint,GLuint,GLsizei,GLsizei*,GLsizei*,GLenum*,GLchar*]*)
;; void glClampColor(GLenum target, GLenum clamp);
(bind-lib libGL glClampColor [void,GLenum,GLenum]*)
;; void glBeginConditionalRender(GLuint id, GLenum mode);
(bind-lib libGL glBeginConditionalRender [void,GLuint,GLenum]*)
;; void glEndConditionalRender(void);
(bind-lib libGL glEndConditionalRender [void]*)
;; void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, void* pointer);
(bind-lib libGL glVertexAttribIPointer [void,GLuint,GLint,GLenum,GLsizei,i8*]*)
;; void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params);
(bind-lib libGL glGetVertexAttribIiv [void,GLuint,GLenum,GLint*]*)
;; void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params);
(bind-lib libGL glGetVertexAttribIuiv [void,GLuint,GLenum,GLuint*]*)
;; void glVertexAttribI1i(GLuint index, GLint x);
(bind-lib libGL glVertexAttribI1i [void,GLuint,GLint]*)
;; void glVertexAttribI2i(GLuint index, GLint x, GLint y);
(bind-lib libGL glVertexAttribI2i [void,GLuint,GLint,GLint]*)
;; void glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z);
(bind-lib libGL glVertexAttribI3i [void,GLuint,GLint,GLint,GLint]*)
;; void glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w);
(bind-lib libGL glVertexAttribI4i [void,GLuint,GLint,GLint,GLint,GLint]*)
;; void glVertexAttribI1ui(GLuint index, GLuint x);
(bind-lib libGL glVertexAttribI1ui [void,GLuint,GLuint]*)
;; void glVertexAttribI2ui(GLuint index, GLuint x, GLuint y);
(bind-lib libGL glVertexAttribI2ui [void,GLuint,GLuint,GLuint]*)
;; void glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z);
(bind-lib libGL glVertexAttribI3ui [void,GLuint,GLuint,GLuint,GLuint]*)
;; void glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
(bind-lib libGL glVertexAttribI4ui [void,GLuint,GLuint,GLuint,GLuint,GLuint]*)
;; void glVertexAttribI1iv(GLuint index, GLint* v);
(bind-lib libGL glVertexAttribI1iv [void,GLuint,GLint*]*)
;; void glVertexAttribI2iv(GLuint index, GLint* v);
(bind-lib libGL glVertexAttribI2iv [void,GLuint,GLint*]*)
;; void glVertexAttribI3iv(GLuint index, GLint* v);
(bind-lib libGL glVertexAttribI3iv [void,GLuint,GLint*]*)
;; void glVertexAttribI4iv(GLuint index, GLint* v);
(bind-lib libGL glVertexAttribI4iv [void,GLuint,GLint*]*)
;; void glVertexAttribI1uiv(GLuint index, GLuint* v);
(bind-lib libGL glVertexAttribI1uiv [void,GLuint,GLuint*]*)
;; void glVertexAttribI2uiv(GLuint index, GLuint* v);
(bind-lib libGL glVertexAttribI2uiv [void,GLuint,GLuint*]*)
;; void glVertexAttribI3uiv(GLuint index, GLuint* v);
(bind-lib libGL glVertexAttribI3uiv [void,GLuint,GLuint*]*)
;; void glVertexAttribI4uiv(GLuint index, GLuint* v);
(bind-lib libGL glVertexAttribI4uiv [void,GLuint,GLuint*]*)
;; void glVertexAttribI4bv(GLuint index, const GLbyte *v);
(bind-lib libGL glVertexAttribI4bv [void,GLuint,GLbyte*]*)
;; void glVertexAttribI4sv(GLuint index, const GLshort *v);
(bind-lib libGL glVertexAttribI4sv [void,GLuint,GLshort*]*)
;; void glVertexAttribI4ubv(GLuint index, const GLubyte *v);
(bind-lib libGL glVertexAttribI4ubv [void,GLuint,GLubyte*]*)
;; void glVertexAttribI4usv(GLuint index, const GLushort *v);
(bind-lib libGL glVertexAttribI4usv [void,GLuint,GLushort*]*)
;; void glGetUniformuiv(GLuint program, GLint location, GLuint *params);
(bind-lib libGL glGetUniformuiv [void,GLuint,GLint,GLuint*]*)
;; void glBindFragDataLocation(GLuint program, GLuint color, GLchar* name);
(bind-lib libGL glBindFragDataLocation [void,GLuint,GLuint,GLchar*]*)
;; GLint glGetFragDataLocation(GLuint program, GLchar* name);
(bind-lib libGL glGetFragDataLocation [GLint,GLuint,GLchar*]*)
;; void glUniform1ui(GLint location, GLuint v0);
(bind-lib libGL glUniform1ui [void,GLint,GLuint]*)
;; void glUniform2ui(GLint location, GLuint v0, GLuint v1);
(bind-lib libGL glUniform2ui [void,GLint,GLuint,GLuint]*)
;; void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2);
(bind-lib libGL glUniform3ui [void,GLint,GLuint,GLuint,GLuint]*)
;; void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
(bind-lib libGL glUniform4ui [void,GLint,GLuint,GLuint,GLuint,GLuint]*)
;; void glUniform1uiv(GLint location, GLsizei count, GLuint* value);
(bind-lib libGL glUniform1uiv [void,GLint,GLsizei,GLuint*]*)
;; void glUniform2uiv(GLint location, GLsizei count, GLuint* value);
(bind-lib libGL glUniform2uiv [void,GLint,GLsizei,GLuint*]*)
;; void glUniform3uiv(GLint location, GLsizei count, GLuint* value);
(bind-lib libGL glUniform3uiv [void,GLint,GLsizei,GLuint*]*)
;; void glUniform4uiv(GLint location, GLsizei count, GLuint* value);
(bind-lib libGL glUniform4uiv [void,GLint,GLsizei,GLuint*]*)
;; void glTexParameterIiv(GLenum target, GLenum pname, GLint* params);
(bind-lib libGL glTexParameterIiv [void,GLenum,GLenum,GLint*]*)
;; void glTexParameterIuiv(GLenum target, GLenum pname, GLuint* params);
(bind-lib libGL glTexParameterIuiv [void,GLenum,GLenum,GLuint*]*)
;; void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
(bind-lib libGL glGetTexParameterIiv [void,GLenum,GLenum,GLint*]*)
;; void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
(bind-lib libGL glGetTexParameterIuiv [void,GLenum,GLenum,GLuint*]*)
;; void glClearBufferiv(GLenum buffer, GLint drawbuffer, GLint* value);
(bind-lib libGL glClearBufferiv [void,GLenum,GLint,GLint*]*)
;; void glClearBufferuiv(GLenum buffer, GLint drawbuffer, GLuint* value);
(bind-lib libGL glClearBufferuiv [void,GLenum,GLint,GLuint*]*)
;; void glClearBufferfv(GLenum buffer, GLint drawbuffer, GLfloat* value);
(bind-lib libGL glClearBufferfv [void,GLenum,GLint,GLfloat*]*)
;; void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
(bind-lib libGL glClearBufferfi [void,GLenum,GLint,GLfloat,GLint]*)
;; const *APIENTRY glGetStringi(GLenum name, GLuint index);
(bind-lib libGL glGetStringi [GLubyte*,GLenum,GLuint]*)
;; GLboolean glIsRenderbuffer(GLuint renderbuffer);
(bind-lib libGL glIsRenderbuffer [GLboolean,GLuint]*)
;; void glBindRenderbuffer(GLenum target, GLuint renderbuffer);
(bind-lib libGL glBindRenderbuffer [void,GLenum,GLuint]*)
;; void glDeleteRenderbuffers(GLsizei n, GLuint* renderbuffers);
(bind-lib libGL glDeleteRenderbuffers [void,GLsizei,GLuint*]*)
;; void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers);
(bind-lib libGL glGenRenderbuffers [void,GLsizei,GLuint*]*)
;; void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
(bind-lib libGL glRenderbufferStorage [void,GLenum,GLenum,GLsizei,GLsizei]*)
;; void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params);
(bind-lib libGL glGetRenderbufferParameteriv [void,GLenum,GLenum,GLint*]*)
;; GLboolean glIsFramebuffer(GLuint framebuffer);
(bind-lib libGL glIsFramebuffer [GLboolean,GLuint]*)
;; void glBindFramebuffer(GLenum target, GLuint framebuffer);
(bind-lib libGL glBindFramebuffer [void,GLenum,GLuint]*)
;; void glDeleteFramebuffers(GLsizei n, GLuint* framebuffers);
(bind-lib libGL glDeleteFramebuffers [void,GLsizei,GLuint*]*)
;; void glGenFramebuffers(GLsizei n, GLuint *framebuffers);
(bind-lib libGL glGenFramebuffers [void,GLsizei,GLuint*]*)
;; GLenum glCheckFramebufferStatus(GLenum target);
(bind-lib libGL glCheckFramebufferStatus [GLenum,GLenum]*)
;; void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
(bind-lib libGL glFramebufferTexture1D [void,GLenum,GLenum,GLenum,GLuint,GLint]*)
;; void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
(bind-lib libGL glFramebufferTexture2D [void,GLenum,GLenum,GLenum,GLuint,GLint]*)
;; void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
(bind-lib libGL glFramebufferTexture3D [void,GLenum,GLenum,GLenum,GLuint,GLint,GLint]*)
;; void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
(bind-lib libGL glFramebufferRenderbuffer [void,GLenum,GLenum,GLenum,GLuint]*)
;; void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params);
(bind-lib libGL glGetFramebufferAttachmentParameteriv [void,GLenum,GLenum,GLenum,GLint*]*)
;; void glGenerateMipmap(GLenum target);
(bind-lib libGL glGenerateMipmap [void,GLenum]*)
;; void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
(bind-lib libGL glBlitFramebuffer [void,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum]*)
;; void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
(bind-lib libGL glRenderbufferStorageMultisample [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei]*)
;; void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
(bind-lib libGL glFramebufferTextureLayer [void,GLenum,GLenum,GLuint,GLint,GLint]*)
;; void glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
(bind-lib libGL glMapBufferRange [void*,GLenum,GLintptr,GLsizeiptr,GLbitfield]*)
;; void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length);
(bind-lib libGL glFlushMappedBufferRange [void,GLenum,GLintptr,GLsizeiptr]*)
;; void glBindVertexArray(GLuint array);
(bind-lib libGL glBindVertexArray [void,GLuint]*)
;; void glDeleteVertexArrays(GLsizei n, GLuint* arrays);
(bind-lib libGL glDeleteVertexArrays [void,GLsizei,GLuint*]*)
;; void glGenVertexArrays(GLsizei n, GLuint *arrays);
(bind-lib libGL glGenVertexArrays [void,GLsizei,GLuint*]*)
;; GLboolean glIsVertexArray(GLuint array);
(bind-lib libGL glIsVertexArray [GLboolean,GLuint]*)
;; #endif /* GL_VERSION_3_0 */

;; #ifndef GL_VERSION_3_1
(bind-val GL_VERSION_3_1 i32 1)
(bind-val GL_SAMPLER_2D_RECT i32 #x8B63)
(bind-val GL_SAMPLER_2D_RECT_SHADOW i32 #x8B64)
(bind-val GL_SAMPLER_BUFFER i32 #x8DC2)
(bind-val GL_INT_SAMPLER_2D_RECT i32 #x8DCD)
(bind-val GL_INT_SAMPLER_BUFFER i32 #x8DD0)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_RECT i32 #x8DD5)
(bind-val GL_UNSIGNED_INT_SAMPLER_BUFFER i32 #x8DD8)
(bind-val GL_TEXTURE_BUFFER i32 #x8C2A)
(bind-val GL_MAX_TEXTURE_BUFFER_SIZE i32 #x8C2B)
(bind-val GL_TEXTURE_BINDING_BUFFER i32 #x8C2C)
(bind-val GL_TEXTURE_BUFFER_DATA_STORE_BINDING i32 #x8C2D)
(bind-val GL_TEXTURE_RECTANGLE i32 #x84F5)
(bind-val GL_TEXTURE_BINDING_RECTANGLE i32 #x84F6)
(bind-val GL_PROXY_TEXTURE_RECTANGLE i32 #x84F7)
(bind-val GL_MAX_RECTANGLE_TEXTURE_SIZE i32 #x84F8)
(bind-val GL_R8_SNORM i32 #x8F94)
(bind-val GL_RG8_SNORM i32 #x8F95)
(bind-val GL_RGB8_SNORM i32 #x8F96)
(bind-val GL_RGBA8_SNORM i32 #x8F97)
(bind-val GL_R16_SNORM i32 #x8F98)
(bind-val GL_RG16_SNORM i32 #x8F99)
(bind-val GL_RGB16_SNORM i32 #x8F9A)
(bind-val GL_RGBA16_SNORM i32 #x8F9B)
(bind-val GL_SIGNED_NORMALIZED i32 #x8F9C)
(bind-val GL_PRIMITIVE_RESTART i32 #x8F9D)
(bind-val GL_PRIMITIVE_RESTART_INDEX i32 #x8F9E)
(bind-val GL_COPY_READ_BUFFER i32 #x8F36)
(bind-val GL_COPY_WRITE_BUFFER i32 #x8F37)
(bind-val GL_UNIFORM_BUFFER i32 #x8A11)
(bind-val GL_UNIFORM_BUFFER_BINDING i32 #x8A28)
(bind-val GL_UNIFORM_BUFFER_START i32 #x8A29)
(bind-val GL_UNIFORM_BUFFER_SIZE i32 #x8A2A)
(bind-val GL_MAX_VERTEX_UNIFORM_BLOCKS i32 #x8A2B)
(bind-val GL_MAX_GEOMETRY_UNIFORM_BLOCKS i32 #x8A2C)
(bind-val GL_MAX_FRAGMENT_UNIFORM_BLOCKS i32 #x8A2D)
(bind-val GL_MAX_COMBINED_UNIFORM_BLOCKS i32 #x8A2E)
(bind-val GL_MAX_UNIFORM_BUFFER_BINDINGS i32 #x8A2F)
(bind-val GL_MAX_UNIFORM_BLOCK_SIZE i32 #x8A30)
(bind-val GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS i32 #x8A31)
(bind-val GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS i32 #x8A32)
(bind-val GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS i32 #x8A33)
(bind-val GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT i32 #x8A34)
(bind-val GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH i32 #x8A35)
(bind-val GL_ACTIVE_UNIFORM_BLOCKS i32 #x8A36)
(bind-val GL_UNIFORM_TYPE i32 #x8A37)
(bind-val GL_UNIFORM_SIZE i32 #x8A38)
(bind-val GL_UNIFORM_NAME_LENGTH i32 #x8A39)
(bind-val GL_UNIFORM_BLOCK_INDEX i32 #x8A3A)
(bind-val GL_UNIFORM_OFFSET i32 #x8A3B)
(bind-val GL_UNIFORM_ARRAY_STRIDE i32 #x8A3C)
(bind-val GL_UNIFORM_MATRIX_STRIDE i32 #x8A3D)
(bind-val GL_UNIFORM_IS_ROW_MAJOR i32 #x8A3E)
(bind-val GL_UNIFORM_BLOCK_BINDING i32 #x8A3F)
(bind-val GL_UNIFORM_BLOCK_DATA_SIZE i32 #x8A40)
(bind-val GL_UNIFORM_BLOCK_NAME_LENGTH i32 #x8A41)
(bind-val GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS i32 #x8A42)
(bind-val GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES i32 #x8A43)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER i32 #x8A44)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER i32 #x8A45)
(bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER i32 #x8A46)
(bind-val GL_INVALID_INDEX i32 #xFFFFFFFF)

;; void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
(bind-lib libGL glDrawArraysInstanced [void,GLenum,GLint,GLsizei,GLsizei]*)
;; void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount);
(bind-lib libGL glDrawElementsInstanced [void,GLenum,GLsizei,GLenum,i8*,GLsizei]*)
;; void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
(bind-lib libGL glTexBuffer [void,GLenum,GLenum,GLuint]*)
;; void glPrimitiveRestartIndex(GLuint index);
(bind-lib libGL glPrimitiveRestartIndex [void,GLuint]*)
;; void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
(bind-lib libGL glCopyBufferSubData [void,GLenum,GLenum,GLintptr,GLintptr,GLsizeiptr]*)
;; void glGetUniformIndices(GLuint program, GLsizei uniformCount, GLchar** uniformNames, GLuint *uniformIndices);
(bind-lib libGL glGetUniformIndices [void,GLuint,GLsizei,GLchar**,GLuint*]*)
;; void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, GLuint* uniformIndices, GLenum pname, GLint *params);
(bind-lib libGL glGetActiveUniformsiv [void,GLuint,GLsizei,GLuint*,GLenum,GLint*]*)
;; void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
(bind-lib libGL glGetActiveUniformName [void,GLuint,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; GLuint glGetUniformBlockIndex(GLuint program, GLchar* uniformBlockName);
(bind-lib libGL glGetUniformBlockIndex [GLuint,GLuint,GLchar*]*)
;; void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
(bind-lib libGL glGetActiveUniformBlockiv [void,GLuint,GLuint,GLenum,GLint*]*)
;; void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
(bind-lib libGL glGetActiveUniformBlockName [void,GLuint,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
(bind-lib libGL glUniformBlockBinding [void,GLuint,GLuint,GLuint]*)
;; #endif /* GL_VERSION_3_1 */

;; #ifndef GL_VERSION_3_2
(bind-val GL_VERSION_3_2 i32 1)
(bind-alias GLsync i8) ;; used as opaque pointer
(bind-alias GLuint64 i64)
(bind-alias GLint64 i64)
(bind-val GL_CONTEXT_CORE_PROFILE_BIT i32 #x00000001)
(bind-val GL_CONTEXT_COMPATIBILITY_PROFILE_BIT i32 #x00000002)
(bind-val GL_LINES_ADJACENCY i32 #x000A)
(bind-val GL_LINE_STRIP_ADJACENCY i32 #x000B)
(bind-val GL_TRIANGLES_ADJACENCY i32 #x000C)
(bind-val GL_TRIANGLE_STRIP_ADJACENCY i32 #x000D)
(bind-val GL_PROGRAM_POINT_SIZE i32 #x8642)
(bind-val GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS i32 #x8C29)
(bind-val GL_FRAMEBUFFER_ATTACHMENT_LAYERED i32 #x8DA7)
(bind-val GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS i32 #x8DA8)
(bind-val GL_GEOMETRY_SHADER i32 #x8DD9)
(bind-val GL_GEOMETRY_VERTICES_OUT i32 #x8916)
(bind-val GL_GEOMETRY_INPUT_TYPE i32 #x8917)
(bind-val GL_GEOMETRY_OUTPUT_TYPE i32 #x8918)
(bind-val GL_MAX_GEOMETRY_UNIFORM_COMPONENTS i32 #x8DDF)
(bind-val GL_MAX_GEOMETRY_OUTPUT_VERTICES i32 #x8DE0)
(bind-val GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS i32 #x8DE1)
(bind-val GL_MAX_VERTEX_OUTPUT_COMPONENTS i32 #x9122)
(bind-val GL_MAX_GEOMETRY_INPUT_COMPONENTS i32 #x9123)
(bind-val GL_MAX_GEOMETRY_OUTPUT_COMPONENTS i32 #x9124)
(bind-val GL_MAX_FRAGMENT_INPUT_COMPONENTS i32 #x9125)
(bind-val GL_CONTEXT_PROFILE_MASK i32 #x9126)
(bind-val GL_DEPTH_CLAMP i32 #x864F)
(bind-val GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION i32 #x8E4C)
(bind-val GL_FIRST_VERTEX_CONVENTION i32 #x8E4D)
(bind-val GL_LAST_VERTEX_CONVENTION i32 #x8E4E)
(bind-val GL_PROVOKING_VERTEX i32 #x8E4F)
(bind-val GL_TEXTURE_CUBE_MAP_SEAMLESS i32 #x884F)
(bind-val GL_MAX_SERVER_WAIT_TIMEOUT i32 #x9111)
(bind-val GL_OBJECT_TYPE i32 #x9112)
(bind-val GL_SYNC_CONDITION i32 #x9113)
(bind-val GL_SYNC_STATUS i32 #x9114)
(bind-val GL_SYNC_FLAGS i32 #x9115)
(bind-val GL_SYNC_FENCE i32 #x9116)
(bind-val GL_SYNC_GPU_COMMANDS_COMPLETE i32 #x9117)
(bind-val GL_UNSIGNALED i32 #x9118)
(bind-val GL_SIGNALED i32 #x9119)
(bind-val GL_ALREADY_SIGNALED i32 #x911A)
(bind-val GL_TIMEOUT_EXPIRED i32 #x911B)
(bind-val GL_CONDITION_SATISFIED i32 #x911C)
(bind-val GL_WAIT_FAILED i32 #x911D)
(bind-val GL_TIMEOUT_IGNORED i64 #xFFFFFFFFFFFFFFFF)
(bind-val GL_SYNC_FLUSH_COMMANDS_BIT i32 #x00000001)
(bind-val GL_SAMPLE_POSITION i32 #x8E50)
(bind-val GL_SAMPLE_MASK i32 #x8E51)
(bind-val GL_SAMPLE_MASK_VALUE i32 #x8E52)
(bind-val GL_MAX_SAMPLE_MASK_WORDS i32 #x8E59)
(bind-val GL_TEXTURE_2D_MULTISAMPLE i32 #x9100)
(bind-val GL_PROXY_TEXTURE_2D_MULTISAMPLE i32 #x9101)
(bind-val GL_TEXTURE_2D_MULTISAMPLE_ARRAY i32 #x9102)
(bind-val GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY i32 #x9103)
(bind-val GL_TEXTURE_BINDING_2D_MULTISAMPLE i32 #x9104)
(bind-val GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY i32 #x9105)
(bind-val GL_TEXTURE_SAMPLES i32 #x9106)
(bind-val GL_TEXTURE_FIXED_SAMPLE_LOCATIONS i32 #x9107)
(bind-val GL_SAMPLER_2D_MULTISAMPLE i32 #x9108)
(bind-val GL_INT_SAMPLER_2D_MULTISAMPLE i32 #x9109)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE i32 #x910A)
(bind-val GL_SAMPLER_2D_MULTISAMPLE_ARRAY i32 #x910B)
(bind-val GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY i32 #x910C)
(bind-val GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY i32 #x910D)
(bind-val GL_MAX_COLOR_TEXTURE_SAMPLES i32 #x910E)
(bind-val GL_MAX_DEPTH_TEXTURE_SAMPLES i32 #x910F)
(bind-val GL_MAX_INTEGER_SAMPLES i32 #x9110)

;; void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, void* indices, GLint basevertex);
(bind-lib libGL glDrawElementsBaseVertex [void,GLenum,GLsizei,GLenum,i8*,GLint]*)
;; void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, void* indices, GLint basevertex);
(bind-lib libGL glDrawRangeElementsBaseVertex [void,GLenum,GLuint,GLuint,GLsizei,GLenum,i8*,GLint]*)
;; void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex);
(bind-lib libGL glDrawElementsInstancedBaseVertex [void,GLenum,GLsizei,GLenum,i8*,GLsizei,GLint]*)
;; void glMultiDrawElementsBaseVertex(GLenum mode, GLsizei* count, GLenum type, void** indices, GLsizei drawcount, GLint* basevertex);
(bind-lib libGL glMultiDrawElementsBaseVertex [void,GLenum,GLsizei*,GLenum,GLvoid**,GLsizei,GLint*]*)
;; void glProvokingVertex(GLenum mode);
(bind-lib libGL glProvokingVertex [void,GLenum]*)
;; GLsync glFenceSync(GLenum condition, GLbitfield flags);
(bind-lib libGL glFenceSync [GLsync,GLenum,GLbitfield]*)
;; GLboolean glIsSync(GLsync sync);
(bind-lib libGL glIsSync [GLboolean,GLsync]*)
;; void glDeleteSync(GLsync sync);
(bind-lib libGL glDeleteSync [void,GLsync]*)
;; GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
(bind-lib libGL glClientWaitSync [GLenum,GLsync,GLbitfield,GLuint64]*)
;; void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout);
(bind-lib libGL glWaitSync [void,GLsync,GLbitfield,GLuint64]*)
;; void glGetInteger64v(GLenum pname, GLint64 *data);
(bind-lib libGL glGetInteger64v [void,GLenum,GLint64*]*)
;; void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
(bind-lib libGL glGetSynciv [void,GLsync,GLenum,GLsizei,GLsizei*,GLint*]*)
;; void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data);
(bind-lib libGL glGetInteger64i_v [void,GLenum,GLuint,GLint64*]*)
;; void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params);
(bind-lib libGL glGetBufferParameteri64v [void,GLenum,GLenum,GLint64*]*)
;; void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level);
(bind-lib libGL glFramebufferTexture [void,GLenum,GLenum,GLuint,GLint]*)
;; void glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
(bind-lib libGL glTexImage2DMultisample [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean]*)
;; void glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
(bind-lib libGL glTexImage3DMultisample [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean]*)
;; void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val);
(bind-lib libGL glGetMultisamplefv [void,GLenum,GLuint,GLfloat*]*)
;; void glSampleMaski(GLuint maskNumber, GLbitfield mask);
(bind-lib libGL glSampleMaski [void,GLuint,GLbitfield]*)
;; #endif /* GL_VERSION_3_2 */

;; #ifndef GL_VERSION_3_3
(bind-val GL_VERSION_3_3 i32 1)
(bind-val GL_VERTEX_ATTRIB_ARRAY_DIVISOR i32 #x88FE)
(bind-val GL_SRC1_COLOR i32 #x88F9)
(bind-val GL_ONE_MINUS_SRC1_COLOR i32 #x88FA)
(bind-val GL_ONE_MINUS_SRC1_ALPHA i32 #x88FB)
(bind-val GL_MAX_DUAL_SOURCE_DRAW_BUFFERS i32 #x88FC)
(bind-val GL_ANY_SAMPLES_PASSED i32 #x8C2F)
(bind-val GL_SAMPLER_BINDING i32 #x8919)
(bind-val GL_RGB10_A2UI i32 #x906F)
(bind-val GL_TEXTURE_SWIZZLE_R i32 #x8E42)
(bind-val GL_TEXTURE_SWIZZLE_G i32 #x8E43)
(bind-val GL_TEXTURE_SWIZZLE_B i32 #x8E44)
(bind-val GL_TEXTURE_SWIZZLE_A i32 #x8E45)
(bind-val GL_TEXTURE_SWIZZLE_RGBA i32 #x8E46)
(bind-val GL_TIME_ELAPSED i32 #x88BF)
(bind-val GL_TIMESTAMP i32 #x8E28)
(bind-val GL_INT_2_10_10_10_REV i32 #x8D9F)

;; void glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, GLchar* name);
(bind-lib libGL glBindFragDataLocationIndexed [void,GLuint,GLuint,GLuint,GLchar*]*)
;; GLint glGetFragDataIndex(GLuint program, GLchar* name);
(bind-lib libGL glGetFragDataIndex [GLint,GLuint,GLchar*]*)
;; void glGenSamplers(GLsizei count, GLuint *samplers);
(bind-lib libGL glGenSamplers [void,GLsizei,GLuint*]*)
;; void glDeleteSamplers(GLsizei count, GLuint* samplers);
(bind-lib libGL glDeleteSamplers [void,GLsizei,GLuint*]*)
;; GLboolean glIsSampler(GLuint sampler);
(bind-lib libGL glIsSampler [GLboolean,GLuint]*)
;; void glBindSampler(GLuint unit, GLuint sampler);
(bind-lib libGL glBindSampler [void,GLuint,GLuint]*)
;; void glSamplerParameteri(GLuint sampler, GLenum pname, GLint param);
(bind-lib libGL glSamplerParameteri [void,GLuint,GLenum,GLint]*)
;; void glSamplerParameteriv(GLuint sampler, GLenum pname, GLint* param);
(bind-lib libGL glSamplerParameteriv [void,GLuint,GLenum,GLint*]*)
;; void glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param);
(bind-lib libGL glSamplerParameterf [void,GLuint,GLenum,GLfloat]*)
;; void glSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat* param);
(bind-lib libGL glSamplerParameterfv [void,GLuint,GLenum,GLfloat*]*)
;; void glSamplerParameterIiv(GLuint sampler, GLenum pname, GLint* param);
(bind-lib libGL glSamplerParameterIiv [void,GLuint,GLenum,GLint*]*)
;; void glSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint* param);
(bind-lib libGL glSamplerParameterIuiv [void,GLuint,GLenum,GLuint*]*)
;; void glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params);
(bind-lib libGL glGetSamplerParameteriv [void,GLuint,GLenum,GLint*]*)
;; void glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
(bind-lib libGL glGetSamplerParameterIiv [void,GLuint,GLenum,GLint*]*)
;; void glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params);
(bind-lib libGL glGetSamplerParameterfv [void,GLuint,GLenum,GLfloat*]*)
;; void glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
(bind-lib libGL glGetSamplerParameterIuiv [void,GLuint,GLenum,GLuint*]*)
;; void glQueryCounter(GLuint id, GLenum target);
;; (bind-lib libGL glQueryCounter [void,GLuint,GLenum]*)
;; void glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params);
;; (bind-lib libGL glGetQueryObjecti64v [void,GLuint,GLenum,GLint64*]*)
;; void glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params);
;; (bind-lib libGL glGetQueryObjectui64v [void,GLuint,GLenum,GLuint64*]*)
;; void glVertexAttribDivisor(GLuint index, GLuint divisor);
(bind-lib libGL glVertexAttribDivisor [void,GLuint,GLuint]*)
;; void glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
(bind-lib libGL glVertexAttribP1ui [void,GLuint,GLenum,GLboolean,GLuint]*)
;; void glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
(bind-lib libGL glVertexAttribP1uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
;; void glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
(bind-lib libGL glVertexAttribP2ui [void,GLuint,GLenum,GLboolean,GLuint]*)
;; void glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
(bind-lib libGL glVertexAttribP2uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
;; void glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
(bind-lib libGL glVertexAttribP3ui [void,GLuint,GLenum,GLboolean,GLuint]*)
;; void glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
(bind-lib libGL glVertexAttribP3uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
;; void glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value);
(bind-lib libGL glVertexAttribP4ui [void,GLuint,GLenum,GLboolean,GLuint]*)
;; void glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, GLuint* value);
(bind-lib libGL glVertexAttribP4uiv [void,GLuint,GLenum,GLboolean,GLuint*]*)
;; #endif /* GL_VERSION_3_3 */

;; ;; #ifndef GL_VERSION_4_0
;; (bind-val GL_VERSION_4_0 i32 1)
;; (bind-val GL_SAMPLE_SHADING i32 #x8C36)
;; (bind-val GL_MIN_SAMPLE_SHADING_VALUE i32 #x8C37)
;; (bind-val GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET i32 #x8E5E)
;; (bind-val GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET i32 #x8E5F)
;; (bind-val GL_TEXTURE_CUBE_MAP_ARRAY i32 #x9009)
;; (bind-val GL_TEXTURE_BINDING_CUBE_MAP_ARRAY i32 #x900A)
;; (bind-val GL_PROXY_TEXTURE_CUBE_MAP_ARRAY i32 #x900B)
;; (bind-val GL_SAMPLER_CUBE_MAP_ARRAY i32 #x900C)
;; (bind-val GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW i32 #x900D)
;; (bind-val GL_INT_SAMPLER_CUBE_MAP_ARRAY i32 #x900E)
;; (bind-val GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY i32 #x900F)
;; (bind-val GL_DRAW_INDIRECT_BUFFER i32 #x8F3F)
;; (bind-val GL_DRAW_INDIRECT_BUFFER_BINDING i32 #x8F43)
;; (bind-val GL_GEOMETRY_SHADER_INVOCATIONS i32 #x887F)
;; (bind-val GL_MAX_GEOMETRY_SHADER_INVOCATIONS i32 #x8E5A)
;; (bind-val GL_MIN_FRAGMENT_INTERPOLATION_OFFSET i32 #x8E5B)
;; (bind-val GL_MAX_FRAGMENT_INTERPOLATION_OFFSET i32 #x8E5C)
;; (bind-val GL_FRAGMENT_INTERPOLATION_OFFSET_BITS i32 #x8E5D)
;; (bind-val GL_MAX_VERTEX_STREAMS i32 #x8E71)
;; (bind-val GL_DOUBLE_VEC2 i32 #x8FFC)
;; (bind-val GL_DOUBLE_VEC3 i32 #x8FFD)
;; (bind-val GL_DOUBLE_VEC4 i32 #x8FFE)
;; (bind-val GL_DOUBLE_MAT2 i32 #x8F46)
;; (bind-val GL_DOUBLE_MAT3 i32 #x8F47)
;; (bind-val GL_DOUBLE_MAT4 i32 #x8F48)
;; (bind-val GL_DOUBLE_MAT2x3 i32 #x8F49)
;; (bind-val GL_DOUBLE_MAT2x4 i32 #x8F4A)
;; (bind-val GL_DOUBLE_MAT3x2 i32 #x8F4B)
;; (bind-val GL_DOUBLE_MAT3x4 i32 #x8F4C)
;; (bind-val GL_DOUBLE_MAT4x2 i32 #x8F4D)
;; (bind-val GL_DOUBLE_MAT4x3 i32 #x8F4E)
;; (bind-val GL_ACTIVE_SUBROUTINES i32 #x8DE5)
;; (bind-val GL_ACTIVE_SUBROUTINE_UNIFORMS i32 #x8DE6)
;; (bind-val GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS i32 #x8E47)
;; (bind-val GL_ACTIVE_SUBROUTINE_MAX_LENGTH i32 #x8E48)
;; (bind-val GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH i32 #x8E49)
;; (bind-val GL_MAX_SUBROUTINES i32 #x8DE7)
;; (bind-val GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS i32 #x8DE8)
;; (bind-val GL_NUM_COMPATIBLE_SUBROUTINES i32 #x8E4A)
;; (bind-val GL_COMPATIBLE_SUBROUTINES i32 #x8E4B)
;; (bind-val GL_PATCHES i32 #x000E)
;; (bind-val GL_PATCH_VERTICES i32 #x8E72)
;; (bind-val GL_PATCH_DEFAULT_INNER_LEVEL i32 #x8E73)
;; (bind-val GL_PATCH_DEFAULT_OUTER_LEVEL i32 #x8E74)
;; (bind-val GL_TESS_CONTROL_OUTPUT_VERTICES i32 #x8E75)
;; (bind-val GL_TESS_GEN_MODE i32 #x8E76)
;; (bind-val GL_TESS_GEN_SPACING i32 #x8E77)
;; (bind-val GL_TESS_GEN_VERTEX_ORDER i32 #x8E78)
;; (bind-val GL_TESS_GEN_POINT_MODE i32 #x8E79)
;; (bind-val GL_ISOLINES i32 #x8E7A)
;; (bind-val GL_FRACTIONAL_ODD i32 #x8E7B)
;; (bind-val GL_FRACTIONAL_EVEN i32 #x8E7C)
;; (bind-val GL_MAX_PATCH_VERTICES i32 #x8E7D)
;; (bind-val GL_MAX_TESS_GEN_LEVEL i32 #x8E7E)
;; (bind-val GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS i32 #x8E7F)
;; (bind-val GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS i32 #x8E80)
;; (bind-val GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS i32 #x8E81)
;; (bind-val GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS i32 #x8E82)
;; (bind-val GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS i32 #x8E83)
;; (bind-val GL_MAX_TESS_PATCH_COMPONENTS i32 #x8E84)
;; (bind-val GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS i32 #x8E85)
;; (bind-val GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS i32 #x8E86)
;; (bind-val GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS i32 #x8E89)
;; (bind-val GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS i32 #x8E8A)
;; (bind-val GL_MAX_TESS_CONTROL_INPUT_COMPONENTS i32 #x886C)
;; (bind-val GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS i32 #x886D)
;; (bind-val GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS i32 #x8E1E)
;; (bind-val GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS i32 #x8E1F)
;; (bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER i32 #x84F0)
;; (bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER i32 #x84F1)
;; (bind-val GL_TESS_EVALUATION_SHADER i32 #x8E87)
;; (bind-val GL_TESS_CONTROL_SHADER i32 #x8E88)
;; (bind-val GL_TRANSFORM_FEEDBACK i32 #x8E22)
;; (bind-val GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED i32 #x8E23)
;; (bind-val GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE i32 #x8E24)
;; (bind-val GL_TRANSFORM_FEEDBACK_BINDING i32 #x8E25)
;; (bind-val GL_MAX_TRANSFORM_FEEDBACK_BUFFERS i32 #x8E70)

;; ;; void glMinSampleShading(GLfloat value);
;; (bind-lib libGL glMinSampleShading [void,GLfloat]*)
;; ;; void glBlendEquationi(GLuint buf, GLenum mode);
;; (bind-lib libGL glBlendEquationi [void,GLuint,GLenum]*)
;; ;; void glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
;; (bind-lib libGL glBlendEquationSeparatei [void,GLuint,GLenum,GLenum]*)
;; ;; void glBlendFunci(GLuint buf, GLenum src, GLenum dst);
;; (bind-lib libGL glBlendFunci [void,GLuint,GLenum,GLenum]*)
;; ;; void glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
;; (bind-lib libGL glBlendFuncSeparatei [void,GLuint,GLenum,GLenum,GLenum,GLenum]*)
;; ;; void glDrawArraysIndirect(GLenum mode, void* indirect);
;; (bind-lib libGL glDrawArraysIndirect [void,GLenum,i8*]*)
;; ;; void glDrawElementsIndirect(GLenum mode, GLenum type, void* indirect);
;; (bind-lib libGL glDrawElementsIndirect [void,GLenum,GLenum,i8*]*)
;; ;; void glUniform1d(GLint location, GLdouble x);
;; (bind-lib libGL glUniform1d [void,GLint,GLdouble]*)
;; ;; void glUniform2d(GLint location, GLdouble x, GLdouble y);
;; (bind-lib libGL glUniform2d [void,GLint,GLdouble,GLdouble]*)
;; ;; void glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z);
;; (bind-lib libGL glUniform3d [void,GLint,GLdouble,GLdouble,GLdouble]*)
;; ;; void glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
;; (bind-lib libGL glUniform4d [void,GLint,GLdouble,GLdouble,GLdouble,GLdouble]*)
;; ;; void glUniform1dv(GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glUniform1dv [void,GLint,GLsizei,GLdouble*]*)
;; ;; void glUniform2dv(GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glUniform2dv [void,GLint,GLsizei,GLdouble*]*)
;; ;; void glUniform3dv(GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glUniform3dv [void,GLint,GLsizei,GLdouble*]*)
;; ;; void glUniform4dv(GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glUniform4dv [void,GLint,GLsizei,GLdouble*]*)
;; ;; void glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix2dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix3dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix4dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix2x3dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix2x4dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix3x2dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix3x4dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix4x2dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glUniformMatrix4x3dv [void,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glGetUniformdv(GLuint program, GLint location, GLdouble *params);
;; (bind-lib libGL glGetUniformdv [void,GLuint,GLint,GLdouble*]*)
;; ;; GLint glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, GLchar* name);
;; (bind-lib libGL glGetSubroutineUniformLocation [GLint,GLuint,GLenum,GLchar*]*)
;; ;; GLuint glGetSubroutineIndex(GLuint program, GLenum shadertype, GLchar* name);
;; (bind-lib libGL glGetSubroutineIndex [GLuint,GLuint,GLenum,GLchar*]*)
;; ;; void glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
;; (bind-lib libGL glGetActiveSubroutineUniformiv [void,GLuint,GLenum,GLuint,GLenum,GLint*]*)
;; ;; void glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
;; (bind-lib libGL glGetActiveSubroutineUniformName [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; ;; void glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
;; (bind-lib libGL glGetActiveSubroutineName [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; ;; void glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, GLuint* indices);
;; (bind-lib libGL glUniformSubroutinesuiv [void,GLenum,GLsizei,GLuint*]*)
;; ;; void glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params);
;; (bind-lib libGL glGetUniformSubroutineuiv [void,GLenum,GLint,GLuint*]*)
;; ;; void glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
;; (bind-lib libGL glGetProgramStageiv [void,GLuint,GLenum,GLenum,GLint*]*)
;; ;; void glPatchParameteri(GLenum pname, GLint value);
;; (bind-lib libGL glPatchParameteri [void,GLenum,GLint]*)
;; ;; void glPatchParameterfv(GLenum pname, GLfloat* values);
;; (bind-lib libGL glPatchParameterfv [void,GLenum,GLfloat*]*)
;; ;; void glBindTransformFeedback(GLenum target, GLuint id);
;; (bind-lib libGL glBindTransformFeedback [void,GLenum,GLuint]*)
;; ;; void glDeleteTransformFeedbacks(GLsizei n, GLuint* ids);
;; (bind-lib libGL glDeleteTransformFeedbacks [void,GLsizei,GLuint*]*)
;; ;; void glGenTransformFeedbacks(GLsizei n, GLuint *ids);
;; (bind-lib libGL glGenTransformFeedbacks [void,GLsizei,GLuint*]*)
;; ;; GLboolean glIsTransformFeedback(GLuint id);
;; (bind-lib libGL glIsTransformFeedback [GLboolean,GLuint]*)
;; ;; void glPauseTransformFeedback(void);
;; (bind-lib libGL glPauseTransformFeedback [void]*)
;; ;; void glResumeTransformFeedback(void);
;; (bind-lib libGL glResumeTransformFeedback [void]*)
;; ;; void glDrawTransformFeedback(GLenum mode, GLuint id);
;; (bind-lib libGL glDrawTransformFeedback [void,GLenum,GLuint]*)
;; ;; void glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream);
;; (bind-lib libGL glDrawTransformFeedbackStream [void,GLenum,GLuint,GLuint]*)
;; ;; void glBeginQueryIndexed(GLenum target, GLuint index, GLuint id);
;; (bind-lib libGL glBeginQueryIndexed [void,GLenum,GLuint,GLuint]*)
;; ;; void glEndQueryIndexed(GLenum target, GLuint index);
;; (bind-lib libGL glEndQueryIndexed [void,GLenum,GLuint]*)
;; ;; void glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params);
;; (bind-lib libGL glGetQueryIndexediv [void,GLenum,GLuint,GLenum,GLint*]*)
;; ;; #endif /* GL_VERSION_4_0 */

;; ;; #ifndef GL_VERSION_4_1
;; (bind-val GL_VERSION_4_1 i32 1)
;; (bind-val GL_FIXED i32 #x140C)
;; (bind-val GL_IMPLEMENTATION_COLOR_READ_TYPE i32 #x8B9A)
;; (bind-val GL_IMPLEMENTATION_COLOR_READ_FORMAT i32 #x8B9B)
;; (bind-val GL_LOW_FLOAT i32 #x8DF0)
;; (bind-val GL_MEDIUM_FLOAT i32 #x8DF1)
;; (bind-val GL_HIGH_FLOAT i32 #x8DF2)
;; (bind-val GL_LOW_INT i32 #x8DF3)
;; (bind-val GL_MEDIUM_INT i32 #x8DF4)
;; (bind-val GL_HIGH_INT i32 #x8DF5)
;; (bind-val GL_SHADER_COMPILER i32 #x8DFA)
;; (bind-val GL_SHADER_BINARY_FORMATS i32 #x8DF8)
;; (bind-val GL_NUM_SHADER_BINARY_FORMATS i32 #x8DF9)
;; (bind-val GL_MAX_VERTEX_UNIFORM_VECTORS i32 #x8DFB)
;; (bind-val GL_MAX_VARYING_VECTORS i32 #x8DFC)
;; (bind-val GL_MAX_FRAGMENT_UNIFORM_VECTORS i32 #x8DFD)
;; (bind-val GL_RGB565 i32 #x8D62)
;; (bind-val GL_PROGRAM_BINARY_RETRIEVABLE_HINT i32 #x8257)
;; (bind-val GL_PROGRAM_BINARY_LENGTH i32 #x8741)
;; (bind-val GL_NUM_PROGRAM_BINARY_FORMATS i32 #x87FE)
;; (bind-val GL_PROGRAM_BINARY_FORMATS i32 #x87FF)
;; (bind-val GL_VERTEX_SHADER_BIT i32 #x00000001)
;; (bind-val GL_FRAGMENT_SHADER_BIT i32 #x00000002)
;; (bind-val GL_GEOMETRY_SHADER_BIT i32 #x00000004)
;; (bind-val GL_TESS_CONTROL_SHADER_BIT i32 #x00000008)
;; (bind-val GL_TESS_EVALUATION_SHADER_BIT i32 #x00000010)
;; (bind-val GL_ALL_SHADER_BITS i32 #xFFFFFFFF)
;; (bind-val GL_PROGRAM_SEPARABLE i32 #x8258)
;; (bind-val GL_ACTIVE_PROGRAM i32 #x8259)
;; (bind-val GL_PROGRAM_PIPELINE_BINDING i32 #x825A)
;; (bind-val GL_MAX_VIEWPORTS i32 #x825B)
;; (bind-val GL_VIEWPORT_SUBPIXEL_BITS i32 #x825C)
;; (bind-val GL_VIEWPORT_BOUNDS_RANGE i32 #x825D)
;; (bind-val GL_LAYER_PROVOKING_VERTEX i32 #x825E)
;; (bind-val GL_VIEWPORT_INDEX_PROVOKING_VERTEX i32 #x825F)
;; (bind-val GL_UNDEFINED_VERTEX i32 #x8260)

;; ;; void glReleaseShaderCompiler(void);
;; (bind-lib libGL glReleaseShaderCompiler [void]*)
;; ;; void glShaderBinary(GLsizei count, GLuint* shaders, GLenum binaryformat, void* binary, GLsizei length);
;; (bind-lib libGL glShaderBinary [void,GLsizei,GLuint*,GLenum,i8*,GLsizei]*)
;; ;; void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
;; (bind-lib libGL glGetShaderPrecisionFormat [void,GLenum,GLenum,GLint*,GLint*]*)
;; ;; void glDepthRangef(GLfloat n, GLfloat f);
;; (bind-lib libGL glDepthRangef [void,GLfloat,GLfloat]*)
;; ;; void glClearDepthf(GLfloat d);
;; (bind-lib libGL glClearDepthf [void,GLfloat]*)
;; ;; void glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
;; (bind-lib libGL glGetProgramBinary [void,GLuint,GLsizei,GLsizei*,GLenum*,i8*]*)
;; ;; void glProgramBinary(GLuint program, GLenum binaryFormat, void* binary, GLsizei length);
;; (bind-lib libGL glProgramBinary [void,GLuint,GLenum,i8*,GLsizei]*)
;; ;; void glProgramParameteri(GLuint program, GLenum pname, GLint value);
;; (bind-lib libGL glProgramParameteri [void,GLuint,GLenum,GLint]*)
;; ;; void glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program);
;; (bind-lib libGL glUseProgramStages [void,GLuint,GLbitfield,GLuint]*)
;; ;; void glActiveShaderProgram(GLuint pipeline, GLuint program);
;; (bind-lib libGL glActiveShaderProgram [void,GLuint,GLuint]*)
;; ;; GLuint glCreateShaderProgramv(GLenum type, GLsizei count, GLchar** strings);
;; (bind-lib libGL glCreateShaderProgramv [GLuint,GLenum,GLsizei,GLchar**]*)
;; ;; void glBindProgramPipeline(GLuint pipeline);
;; (bind-lib libGL glBindProgramPipeline [void,GLuint]*)
;; ;; void glDeleteProgramPipelines(GLsizei n, GLuint* pipelines);
;; (bind-lib libGL glDeleteProgramPipelines [void,GLsizei,GLuint*]*)
;; ;; void glGenProgramPipelines(GLsizei n, GLuint *pipelines);
;; (bind-lib libGL glGenProgramPipelines [void,GLsizei,GLuint*]*)
;; ;; GLboolean glIsProgramPipeline(GLuint pipeline);
;; (bind-lib libGL glIsProgramPipeline [GLboolean,GLuint]*)
;; ;; void glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params);
;; (bind-lib libGL glGetProgramPipelineiv [void,GLuint,GLenum,GLint*]*)
;; ;; void glProgramUniform1i(GLuint program, GLint location, GLint v0);
;; (bind-lib libGL glProgramUniform1i [void,GLuint,GLint,GLint]*)
;; ;; void glProgramUniform1iv(GLuint program, GLint location, GLsizei count, GLint* value);
;; (bind-lib libGL glProgramUniform1iv [void,GLuint,GLint,GLsizei,GLint*]*)
;; ;; void glProgramUniform1f(GLuint program, GLint location, GLfloat v0);
;; (bind-lib libGL glProgramUniform1f [void,GLuint,GLint,GLfloat]*)
;; ;; void glProgramUniform1fv(GLuint program, GLint location, GLsizei count, GLfloat* value);
;; (bind-lib libGL glProgramUniform1fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
;; ;; void glProgramUniform1d(GLuint program, GLint location, GLdouble v0);
;; (bind-lib libGL glProgramUniform1d [void,GLuint,GLint,GLdouble]*)
;; ;; void glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glProgramUniform1dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
;; ;; void glProgramUniform1ui(GLuint program, GLint location, GLuint v0);
;; (bind-lib libGL glProgramUniform1ui [void,GLuint,GLint,GLuint]*)
;; ;; void glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, GLuint* value);
;; (bind-lib libGL glProgramUniform1uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
;; ;; void glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1);
;; (bind-lib libGL glProgramUniform2i [void,GLuint,GLint,GLint,GLint]*)
;; ;; void glProgramUniform2iv(GLuint program, GLint location, GLsizei count, GLint* value);
;; (bind-lib libGL glProgramUniform2iv [void,GLuint,GLint,GLsizei,GLint*]*)
;; ;; void glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1);
;; (bind-lib libGL glProgramUniform2f [void,GLuint,GLint,GLfloat,GLfloat]*)
;; ;; void glProgramUniform2fv(GLuint program, GLint location, GLsizei count, GLfloat* value);
;; (bind-lib libGL glProgramUniform2fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
;; ;; void glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1);
;; (bind-lib libGL glProgramUniform2d [void,GLuint,GLint,GLdouble,GLdouble]*)
;; ;; void glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glProgramUniform2dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
;; ;; void glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1);
;; (bind-lib libGL glProgramUniform2ui [void,GLuint,GLint,GLuint,GLuint]*)
;; ;; void glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, GLuint* value);
;; (bind-lib libGL glProgramUniform2uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
;; ;; void glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
;; (bind-lib libGL glProgramUniform3i [void,GLuint,GLint,GLint,GLint,GLint]*)
;; ;; void glProgramUniform3iv(GLuint program, GLint location, GLsizei count, GLint* value);
;; (bind-lib libGL glProgramUniform3iv [void,GLuint,GLint,GLsizei,GLint*]*)
;; ;; void glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
;; (bind-lib libGL glProgramUniform3f [void,GLuint,GLint,GLfloat,GLfloat,GLfloat]*)
;; ;; void glProgramUniform3fv(GLuint program, GLint location, GLsizei count, GLfloat* value);
;; (bind-lib libGL glProgramUniform3fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
;; ;; void glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
;; (bind-lib libGL glProgramUniform3d [void,GLuint,GLint,GLdouble,GLdouble,GLdouble]*)
;; ;; void glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glProgramUniform3dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
;; ;; void glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
;; (bind-lib libGL glProgramUniform3ui [void,GLuint,GLint,GLuint,GLuint,GLuint]*)
;; ;; void glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, GLuint* value);
;; (bind-lib libGL glProgramUniform3uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
;; ;; void glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
;; (bind-lib libGL glProgramUniform4i [void,GLuint,GLint,GLint,GLint,GLint,GLint]*)
;; ;; void glProgramUniform4iv(GLuint program, GLint location, GLsizei count, GLint* value);
;; (bind-lib libGL glProgramUniform4iv [void,GLuint,GLint,GLsizei,GLint*]*)
;; ;; void glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
;; (bind-lib libGL glProgramUniform4f [void,GLuint,GLint,GLfloat,GLfloat,GLfloat,GLfloat]*)
;; ;; void glProgramUniform4fv(GLuint program, GLint location, GLsizei count, GLfloat* value);
;; (bind-lib libGL glProgramUniform4fv [void,GLuint,GLint,GLsizei,GLfloat*]*)
;; ;; void glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
;; (bind-lib libGL glProgramUniform4d [void,GLuint,GLint,GLdouble,GLdouble,GLdouble,GLdouble]*)
;; ;; void glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value);
;; (bind-lib libGL glProgramUniform4dv [void,GLuint,GLint,GLsizei,GLdouble*]*)
;; ;; void glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
;; (bind-lib libGL glProgramUniform4ui [void,GLuint,GLint,GLuint,GLuint,GLuint,GLuint]*)
;; ;; void glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, GLuint* value);
;; (bind-lib libGL glProgramUniform4uiv [void,GLuint,GLint,GLsizei,GLuint*]*)
;; ;; void glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix2fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix3fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix4fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix2dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix3dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix4dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix2x3fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix3x2fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix2x4fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix4x2fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix3x4fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloat* value);
;; (bind-lib libGL glProgramUniformMatrix4x3fv [void,GLuint,GLint,GLsizei,GLboolean,GLfloat*]*)
;; ;; void glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix2x3dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix3x2dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix2x4dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix4x2dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix3x4dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
;; (bind-lib libGL glProgramUniformMatrix4x3dv [void,GLuint,GLint,GLsizei,GLboolean,GLdouble*]*)
;; ;; void glValidateProgramPipeline(GLuint pipeline);
;; (bind-lib libGL glValidateProgramPipeline [void,GLuint]*)
;; ;; void glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
;; (bind-lib libGL glGetProgramPipelineInfoLog [void,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; ;; void glVertexAttribL1d(GLuint index, GLdouble x);
;; (bind-lib libGL glVertexAttribL1d [void,GLuint,GLdouble]*)
;; ;; void glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y);
;; (bind-lib libGL glVertexAttribL2d [void,GLuint,GLdouble,GLdouble]*)
;; ;; void glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z);
;; (bind-lib libGL glVertexAttribL3d [void,GLuint,GLdouble,GLdouble,GLdouble]*)
;; ;; void glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
;; (bind-lib libGL glVertexAttribL4d [void,GLuint,GLdouble,GLdouble,GLdouble,GLdouble]*)
;; ;; void glVertexAttribL1dv(GLuint index, const GLdouble *v);
;; (bind-lib libGL glVertexAttribL1dv [void,GLuint,GLdouble*]*)
;; ;; void glVertexAttribL2dv(GLuint index, const GLdouble *v);
;; (bind-lib libGL glVertexAttribL2dv [void,GLuint,GLdouble*]*)
;; ;; void glVertexAttribL3dv(GLuint index, const GLdouble *v);
;; (bind-lib libGL glVertexAttribL3dv [void,GLuint,GLdouble*]*)
;; ;; void glVertexAttribL4dv(GLuint index, const GLdouble *v);
;; (bind-lib libGL glVertexAttribL4dv [void,GLuint,GLdouble*]*)
;; ;; void glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, void* pointer);
;; (bind-lib libGL glVertexAttribLPointer [void,GLuint,GLint,GLenum,GLsizei,i8*]*)
;; ;; void glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params);
;; (bind-lib libGL glGetVertexAttribLdv [void,GLuint,GLenum,GLdouble*]*)
;; ;; void glViewportArrayv(GLuint first, GLsizei count, GLfloat* v);
;; (bind-lib libGL glViewportArrayv [void,GLuint,GLsizei,GLfloat*]*)
;; ;; void glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
;; (bind-lib libGL glViewportIndexedf [void,GLuint,GLfloat,GLfloat,GLfloat,GLfloat]*)
;; ;; void glViewportIndexedfv(GLuint index, GLfloat* v);
;; (bind-lib libGL glViewportIndexedfv [void,GLuint,GLfloat*]*)
;; ;; void glScissorArrayv(GLuint first, GLsizei count, GLint* v);
;; (bind-lib libGL glScissorArrayv [void,GLuint,GLsizei,GLint*]*)
;; ;; void glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
;; (bind-lib libGL glScissorIndexed [void,GLuint,GLint,GLint,GLsizei,GLsizei]*)
;; ;; void glScissorIndexedv(GLuint index, GLint* v);
;; (bind-lib libGL glScissorIndexedv [void,GLuint,GLint*]*)
;; ;; void glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v);
;; (bind-lib libGL glDepthRangeArrayv [void,GLuint,GLsizei,GLdouble*]*)
;; ;; void glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f);
;; (bind-lib libGL glDepthRangeIndexed [void,GLuint,GLdouble,GLdouble]*)
;; ;; void glGetFloati_v(GLenum target, GLuint index, GLfloat *data);
;; (bind-lib libGL glGetFloati_v [void,GLenum,GLuint,GLfloat*]*)
;; ;; void glGetDoublei_v(GLenum target, GLuint index, GLdouble *data);
;; (bind-lib libGL glGetDoublei_v [void,GLenum,GLuint,GLdouble*]*)
;; ;; #endif /* GL_VERSION_4_1 */

;; ;; #ifndef GL_VERSION_4_2
;; (bind-val GL_VERSION_4_2 i32 1)
;; (bind-val GL_COPY_READ_BUFFER_BINDING i32 #x8F36)
;; (bind-val GL_COPY_WRITE_BUFFER_BINDING i32 #x8F37)
;; (bind-val GL_TRANSFORM_FEEDBACK_ACTIVE i32 #x8E24)
;; (bind-val GL_TRANSFORM_FEEDBACK_PAUSED i32 #x8E23)
;; (bind-val GL_UNPACK_COMPRESSED_BLOCK_WIDTH i32 #x9127)
;; (bind-val GL_UNPACK_COMPRESSED_BLOCK_HEIGHT i32 #x9128)
;; (bind-val GL_UNPACK_COMPRESSED_BLOCK_DEPTH i32 #x9129)
;; (bind-val GL_UNPACK_COMPRESSED_BLOCK_SIZE i32 #x912A)
;; (bind-val GL_PACK_COMPRESSED_BLOCK_WIDTH i32 #x912B)
;; (bind-val GL_PACK_COMPRESSED_BLOCK_HEIGHT i32 #x912C)
;; (bind-val GL_PACK_COMPRESSED_BLOCK_DEPTH i32 #x912D)
;; (bind-val GL_PACK_COMPRESSED_BLOCK_SIZE i32 #x912E)
;; (bind-val GL_NUM_SAMPLE_COUNTS i32 #x9380)
;; (bind-val GL_MIN_MAP_BUFFER_ALIGNMENT i32 #x90BC)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER i32 #x92C0)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_BINDING i32 #x92C1)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_START i32 #x92C2)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_SIZE i32 #x92C3)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE i32 #x92C4)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS i32 #x92C5)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES i32 #x92C6)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER i32 #x92C7)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER i32 #x92C8)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER i32 #x92C9)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER i32 #x92CA)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER i32 #x92CB)
;; (bind-val GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS i32 #x92CC)
;; (bind-val GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS i32 #x92CD)
;; (bind-val GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS i32 #x92CE)
;; (bind-val GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS i32 #x92CF)
;; (bind-val GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS i32 #x92D0)
;; (bind-val GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS i32 #x92D1)
;; (bind-val GL_MAX_VERTEX_ATOMIC_COUNTERS i32 #x92D2)
;; (bind-val GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS i32 #x92D3)
;; (bind-val GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS i32 #x92D4)
;; (bind-val GL_MAX_GEOMETRY_ATOMIC_COUNTERS i32 #x92D5)
;; (bind-val GL_MAX_FRAGMENT_ATOMIC_COUNTERS i32 #x92D6)
;; (bind-val GL_MAX_COMBINED_ATOMIC_COUNTERS i32 #x92D7)
;; (bind-val GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE i32 #x92D8)
;; (bind-val GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS i32 #x92DC)
;; (bind-val GL_ACTIVE_ATOMIC_COUNTER_BUFFERS i32 #x92D9)
;; (bind-val GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX i32 #x92DA)
;; (bind-val GL_UNSIGNED_INT_ATOMIC_COUNTER i32 #x92DB)
;; (bind-val GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT i32 #x00000001)
;; (bind-val GL_ELEMENT_ARRAY_BARRIER_BIT i32 #x00000002)
;; (bind-val GL_UNIFORM_BARRIER_BIT i32 #x00000004)
;; (bind-val GL_TEXTURE_FETCH_BARRIER_BIT i32 #x00000008)
;; (bind-val GL_SHADER_IMAGE_ACCESS_BARRIER_BIT i32 #x00000020)
;; (bind-val GL_COMMAND_BARRIER_BIT i32 #x00000040)
;; (bind-val GL_PIXEL_BUFFER_BARRIER_BIT i32 #x00000080)
;; (bind-val GL_TEXTURE_UPDATE_BARRIER_BIT i32 #x00000100)
;; (bind-val GL_BUFFER_UPDATE_BARRIER_BIT i32 #x00000200)
;; (bind-val GL_FRAMEBUFFER_BARRIER_BIT i32 #x00000400)
;; (bind-val GL_TRANSFORM_FEEDBACK_BARRIER_BIT i32 #x00000800)
;; (bind-val GL_ATOMIC_COUNTER_BARRIER_BIT i32 #x00001000)
;; (bind-val GL_ALL_BARRIER_BITS i32 #xFFFFFFFF)
;; (bind-val GL_MAX_IMAGE_UNITS i32 #x8F38)
;; (bind-val GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS i32 #x8F39)
;; (bind-val GL_IMAGE_BINDING_NAME i32 #x8F3A)
;; (bind-val GL_IMAGE_BINDING_LEVEL i32 #x8F3B)
;; (bind-val GL_IMAGE_BINDING_LAYERED i32 #x8F3C)
;; (bind-val GL_IMAGE_BINDING_LAYER i32 #x8F3D)
;; (bind-val GL_IMAGE_BINDING_ACCESS i32 #x8F3E)
;; (bind-val GL_IMAGE_1D i32 #x904C)
;; (bind-val GL_IMAGE_2D i32 #x904D)
;; (bind-val GL_IMAGE_3D i32 #x904E)
;; (bind-val GL_IMAGE_2D_RECT i32 #x904F)
;; (bind-val GL_IMAGE_CUBE i32 #x9050)
;; (bind-val GL_IMAGE_BUFFER i32 #x9051)
;; (bind-val GL_IMAGE_1D_ARRAY i32 #x9052)
;; (bind-val GL_IMAGE_2D_ARRAY i32 #x9053)
;; (bind-val GL_IMAGE_CUBE_MAP_ARRAY i32 #x9054)
;; (bind-val GL_IMAGE_2D_MULTISAMPLE i32 #x9055)
;; (bind-val GL_IMAGE_2D_MULTISAMPLE_ARRAY i32 #x9056)
;; (bind-val GL_INT_IMAGE_1D i32 #x9057)
;; (bind-val GL_INT_IMAGE_2D i32 #x9058)
;; (bind-val GL_INT_IMAGE_3D i32 #x9059)
;; (bind-val GL_INT_IMAGE_2D_RECT i32 #x905A)
;; (bind-val GL_INT_IMAGE_CUBE i32 #x905B)
;; (bind-val GL_INT_IMAGE_BUFFER i32 #x905C)
;; (bind-val GL_INT_IMAGE_1D_ARRAY i32 #x905D)
;; (bind-val GL_INT_IMAGE_2D_ARRAY i32 #x905E)
;; (bind-val GL_INT_IMAGE_CUBE_MAP_ARRAY i32 #x905F)
;; (bind-val GL_INT_IMAGE_2D_MULTISAMPLE i32 #x9060)
;; (bind-val GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY i32 #x9061)
;; (bind-val GL_UNSIGNED_INT_IMAGE_1D i32 #x9062)
;; (bind-val GL_UNSIGNED_INT_IMAGE_2D i32 #x9063)
;; (bind-val GL_UNSIGNED_INT_IMAGE_3D i32 #x9064)
;; (bind-val GL_UNSIGNED_INT_IMAGE_2D_RECT i32 #x9065)
;; (bind-val GL_UNSIGNED_INT_IMAGE_CUBE i32 #x9066)
;; (bind-val GL_UNSIGNED_INT_IMAGE_BUFFER i32 #x9067)
;; (bind-val GL_UNSIGNED_INT_IMAGE_1D_ARRAY i32 #x9068)
;; (bind-val GL_UNSIGNED_INT_IMAGE_2D_ARRAY i32 #x9069)
;; (bind-val GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY i32 #x906A)
;; (bind-val GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE i32 #x906B)
;; (bind-val GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY i32 #x906C)
;; (bind-val GL_MAX_IMAGE_SAMPLES i32 #x906D)
;; (bind-val GL_IMAGE_BINDING_FORMAT i32 #x906E)
;; (bind-val GL_IMAGE_FORMAT_COMPATIBILITY_TYPE i32 #x90C7)
;; (bind-val GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE i32 #x90C8)
;; (bind-val GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS i32 #x90C9)
;; (bind-val GL_MAX_VERTEX_IMAGE_UNIFORMS i32 #x90CA)
;; (bind-val GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS i32 #x90CB)
;; (bind-val GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS i32 #x90CC)
;; (bind-val GL_MAX_GEOMETRY_IMAGE_UNIFORMS i32 #x90CD)
;; (bind-val GL_MAX_FRAGMENT_IMAGE_UNIFORMS i32 #x90CE)
;; (bind-val GL_MAX_COMBINED_IMAGE_UNIFORMS i32 #x90CF)
;; (bind-val GL_COMPRESSED_RGBA_BPTC_UNORM i32 #x8E8C)
;; (bind-val GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM i32 #x8E8D)
;; (bind-val GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT i32 #x8E8E)
;; (bind-val GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT i32 #x8E8F)
;; (bind-val GL_TEXTURE_IMMUTABLE_FORMAT i32 #x912F)

;; ;; void glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
;; (bind-lib libGL glDrawArraysInstancedBaseInstance [void,GLenum,GLint,GLsizei,GLsizei,GLuint]*)
;; ;; void glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLuint baseinstance);
;; (bind-lib libGL glDrawElementsInstancedBaseInstance [void,GLenum,GLsizei,GLenum,i8*,GLsizei,GLuint]*)
;; ;; void glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, void* indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
;; (bind-lib libGL glDrawElementsInstancedBaseVertexBaseInstance [void,GLenum,GLsizei,GLenum,i8*,GLsizei,GLint,GLuint]*)
;; ;; void glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);
;; (bind-lib libGL glGetInternalformativ [void,GLenum,GLenum,GLenum,GLsizei,GLint*]*)
;; ;; void glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
;; (bind-lib libGL glGetActiveAtomicCounterBufferiv [void,GLuint,GLuint,GLenum,GLint*]*)
;; ;; void glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
;; (bind-lib libGL glBindImageTexture [void,GLuint,GLuint,GLint,GLboolean,GLint,GLenum,GLenum]*)
;; ;; void glMemoryBarrier(GLbitfield barriers);
;; (bind-lib libGL glMemoryBarrier [void,GLbitfield]*)
;; ;; void glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
;; (bind-lib libGL glTexStorage1D [void,GLenum,GLsizei,GLenum,GLsizei]*)
;; ;; void glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
;; (bind-lib libGL glTexStorage2D [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei]*)
;; ;; void glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
;; (bind-lib libGL glTexStorage3D [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei]*)
;; ;; void glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount);
;; (bind-lib libGL glDrawTransformFeedbackInstanced [void,GLenum,GLuint,GLsizei]*)
;; ;; void glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
;; (bind-lib libGL glDrawTransformFeedbackStreamInstanced [void,GLenum,GLuint,GLuint,GLsizei]*)
;; #endif /* GL_VERSION_4_2 */

;; ;; #ifndef GL_VERSION_4_3
;; (bind-val GL_VERSION_4_3 i32 1)
;; ;; typedef( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,GLchar* message,i8* userParam);
;; (bind-val GL_NUM_SHADING_LANGUAGE_VERSIONS i32 #x82E9)
;; (bind-val GL_VERTEX_ATTRIB_ARRAY_LONG i32 #x874E)
;; (bind-val GL_COMPRESSED_RGB8_ETC2 i32 #x9274)
;; (bind-val GL_COMPRESSED_SRGB8_ETC2 i32 #x9275)
;; (bind-val GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 i32 #x9276)
;; (bind-val GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 i32 #x9277)
;; (bind-val GL_COMPRESSED_RGBA8_ETC2_EAC i32 #x9278)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC i32 #x9279)
;; (bind-val GL_COMPRESSED_R11_EAC i32 #x9270)
;; (bind-val GL_COMPRESSED_SIGNED_R11_EAC i32 #x9271)
;; (bind-val GL_COMPRESSED_RG11_EAC i32 #x9272)
;; (bind-val GL_COMPRESSED_SIGNED_RG11_EAC i32 #x9273)
;; (bind-val GL_PRIMITIVE_RESTART_FIXED_INDEX i32 #x8D69)
;; (bind-val GL_ANY_SAMPLES_PASSED_CONSERVATIVE i32 #x8D6A)
;; (bind-val GL_MAX_ELEMENT_INDEX i32 #x8D6B)
;; (bind-val GL_COMPUTE_SHADER i32 #x91B9)
;; (bind-val GL_MAX_COMPUTE_UNIFORM_BLOCKS i32 #x91BB)
;; (bind-val GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS i32 #x91BC)
;; (bind-val GL_MAX_COMPUTE_IMAGE_UNIFORMS i32 #x91BD)
;; (bind-val GL_MAX_COMPUTE_SHARED_MEMORY_SIZE i32 #x8262)
;; (bind-val GL_MAX_COMPUTE_UNIFORM_COMPONENTS i32 #x8263)
;; (bind-val GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS i32 #x8264)
;; (bind-val GL_MAX_COMPUTE_ATOMIC_COUNTERS i32 #x8265)
;; (bind-val GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS i32 #x8266)
;; (bind-val GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS i32 #x90EB)
;; (bind-val GL_MAX_COMPUTE_WORK_GROUP_COUNT i32 #x91BE)
;; (bind-val GL_MAX_COMPUTE_WORK_GROUP_SIZE i32 #x91BF)
;; (bind-val GL_COMPUTE_WORK_GROUP_SIZE i32 #x8267)
;; (bind-val GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER i32 #x90EC)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER i32 #x90ED)
;; (bind-val GL_DISPATCH_INDIRECT_BUFFER i32 #x90EE)
;; (bind-val GL_DISPATCH_INDIRECT_BUFFER_BINDING i32 #x90EF)
;; (bind-val GL_COMPUTE_SHADER_BIT i32 #x00000020)
;; (bind-val GL_DEBUG_OUTPUT_SYNCHRONOUS i32 #x8242)
;; (bind-val GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH i32 #x8243)
;; (bind-val GL_DEBUG_CALLBACK_FUNCTION i32 #x8244)
;; (bind-val GL_DEBUG_CALLBACK_USER_PARAM i32 #x8245)
;; (bind-val GL_DEBUG_SOURCE_API i32 #x8246)
;; (bind-val GL_DEBUG_SOURCE_WINDOW_SYSTEM i32 #x8247)
;; (bind-val GL_DEBUG_SOURCE_SHADER_COMPILER i32 #x8248)
;; (bind-val GL_DEBUG_SOURCE_THIRD_PARTY i32 #x8249)
;; (bind-val GL_DEBUG_SOURCE_APPLICATION i32 #x824A)
;; (bind-val GL_DEBUG_SOURCE_OTHER i32 #x824B)
;; (bind-val GL_DEBUG_TYPE_ERROR i32 #x824C)
;; (bind-val GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR i32 #x824D)
;; (bind-val GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR i32 #x824E)
;; (bind-val GL_DEBUG_TYPE_PORTABILITY i32 #x824F)
;; (bind-val GL_DEBUG_TYPE_PERFORMANCE i32 #x8250)
;; (bind-val GL_DEBUG_TYPE_OTHER i32 #x8251)
;; (bind-val GL_MAX_DEBUG_MESSAGE_LENGTH i32 #x9143)
;; (bind-val GL_MAX_DEBUG_LOGGED_MESSAGES i32 #x9144)
;; (bind-val GL_DEBUG_LOGGED_MESSAGES i32 #x9145)
;; (bind-val GL_DEBUG_SEVERITY_HIGH i32 #x9146)
;; (bind-val GL_DEBUG_SEVERITY_MEDIUM i32 #x9147)
;; (bind-val GL_DEBUG_SEVERITY_LOW i32 #x9148)
;; (bind-val GL_DEBUG_TYPE_MARKER i32 #x8268)
;; (bind-val GL_DEBUG_TYPE_PUSH_GROUP i32 #x8269)
;; (bind-val GL_DEBUG_TYPE_POP_GROUP i32 #x826A)
;; (bind-val GL_DEBUG_SEVERITY_NOTIFICATION i32 #x826B)
;; (bind-val GL_MAX_DEBUG_GROUP_STACK_DEPTH i32 #x826C)
;; (bind-val GL_DEBUG_GROUP_STACK_DEPTH i32 #x826D)
;; (bind-val GL_BUFFER i32 #x82E0)
;; (bind-val GL_SHADER i32 #x82E1)
;; (bind-val GL_PROGRAM i32 #x82E2)
;; (bind-val GL_QUERY i32 #x82E3)
;; (bind-val GL_PROGRAM_PIPELINE i32 #x82E4)
;; (bind-val GL_SAMPLER i32 #x82E6)
;; (bind-val GL_MAX_LABEL_LENGTH i32 #x82E8)
;; (bind-val GL_DEBUG_OUTPUT i32 #x92E0)
;; (bind-val GL_CONTEXT_FLAG_DEBUG_BIT i32 #x00000002)
;; (bind-val GL_MAX_UNIFORM_LOCATIONS i32 #x826E)
;; (bind-val GL_FRAMEBUFFER_DEFAULT_WIDTH i32 #x9310)
;; (bind-val GL_FRAMEBUFFER_DEFAULT_HEIGHT i32 #x9311)
;; (bind-val GL_FRAMEBUFFER_DEFAULT_LAYERS i32 #x9312)
;; (bind-val GL_FRAMEBUFFER_DEFAULT_SAMPLES i32 #x9313)
;; (bind-val GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS i32 #x9314)
;; (bind-val GL_MAX_FRAMEBUFFER_WIDTH i32 #x9315)
;; (bind-val GL_MAX_FRAMEBUFFER_HEIGHT i32 #x9316)
;; (bind-val GL_MAX_FRAMEBUFFER_LAYERS i32 #x9317)
;; (bind-val GL_MAX_FRAMEBUFFER_SAMPLES i32 #x9318)
;; (bind-val GL_INTERNALFORMAT_SUPPORTED i32 #x826F)
;; (bind-val GL_INTERNALFORMAT_PREFERRED i32 #x8270)
;; (bind-val GL_INTERNALFORMAT_RED_SIZE i32 #x8271)
;; (bind-val GL_INTERNALFORMAT_GREEN_SIZE i32 #x8272)
;; (bind-val GL_INTERNALFORMAT_BLUE_SIZE i32 #x8273)
;; (bind-val GL_INTERNALFORMAT_ALPHA_SIZE i32 #x8274)
;; (bind-val GL_INTERNALFORMAT_DEPTH_SIZE i32 #x8275)
;; (bind-val GL_INTERNALFORMAT_STENCIL_SIZE i32 #x8276)
;; (bind-val GL_INTERNALFORMAT_SHARED_SIZE i32 #x8277)
;; (bind-val GL_INTERNALFORMAT_RED_TYPE i32 #x8278)
;; (bind-val GL_INTERNALFORMAT_GREEN_TYPE i32 #x8279)
;; (bind-val GL_INTERNALFORMAT_BLUE_TYPE i32 #x827A)
;; (bind-val GL_INTERNALFORMAT_ALPHA_TYPE i32 #x827B)
;; (bind-val GL_INTERNALFORMAT_DEPTH_TYPE i32 #x827C)
;; (bind-val GL_INTERNALFORMAT_STENCIL_TYPE i32 #x827D)
;; (bind-val GL_MAX_WIDTH i32 #x827E)
;; (bind-val GL_MAX_HEIGHT i32 #x827F)
;; (bind-val GL_MAX_DEPTH i32 #x8280)
;; (bind-val GL_MAX_LAYERS i32 #x8281)
;; (bind-val GL_MAX_COMBINED_DIMENSIONS i32 #x8282)
;; (bind-val GL_COLOR_COMPONENTS i32 #x8283)
;; (bind-val GL_DEPTH_COMPONENTS i32 #x8284)
;; (bind-val GL_STENCIL_COMPONENTS i32 #x8285)
;; (bind-val GL_COLOR_RENDERABLE i32 #x8286)
;; (bind-val GL_DEPTH_RENDERABLE i32 #x8287)
;; (bind-val GL_STENCIL_RENDERABLE i32 #x8288)
;; (bind-val GL_FRAMEBUFFER_RENDERABLE i32 #x8289)
;; (bind-val GL_FRAMEBUFFER_RENDERABLE_LAYERED i32 #x828A)
;; (bind-val GL_FRAMEBUFFER_BLEND i32 #x828B)
;; (bind-val GL_READ_PIXELS i32 #x828C)
;; (bind-val GL_READ_PIXELS_FORMAT i32 #x828D)
;; (bind-val GL_READ_PIXELS_TYPE i32 #x828E)
;; (bind-val GL_TEXTURE_IMAGE_FORMAT i32 #x828F)
;; (bind-val GL_TEXTURE_IMAGE_TYPE i32 #x8290)
;; (bind-val GL_GET_TEXTURE_IMAGE_FORMAT i32 #x8291)
;; (bind-val GL_GET_TEXTURE_IMAGE_TYPE i32 #x8292)
;; (bind-val GL_MIPMAP i32 #x8293)
;; (bind-val GL_MANUAL_GENERATE_MIPMAP i32 #x8294)
;; (bind-val GL_AUTO_GENERATE_MIPMAP i32 #x8295)
;; (bind-val GL_COLOR_ENCODING i32 #x8296)
;; (bind-val GL_SRGB_READ i32 #x8297)
;; (bind-val GL_SRGB_WRITE i32 #x8298)
;; (bind-val GL_FILTER i32 #x829A)
;; (bind-val GL_VERTEX_TEXTURE i32 #x829B)
;; (bind-val GL_TESS_CONTROL_TEXTURE i32 #x829C)
;; (bind-val GL_TESS_EVALUATION_TEXTURE i32 #x829D)
;; (bind-val GL_GEOMETRY_TEXTURE i32 #x829E)
;; (bind-val GL_FRAGMENT_TEXTURE i32 #x829F)
;; (bind-val GL_COMPUTE_TEXTURE i32 #x82A0)
;; (bind-val GL_TEXTURE_SHADOW i32 #x82A1)
;; (bind-val GL_TEXTURE_GATHER i32 #x82A2)
;; (bind-val GL_TEXTURE_GATHER_SHADOW i32 #x82A3)
;; (bind-val GL_SHADER_IMAGE_LOAD i32 #x82A4)
;; (bind-val GL_SHADER_IMAGE_STORE i32 #x82A5)
;; (bind-val GL_SHADER_IMAGE_ATOMIC i32 #x82A6)
;; (bind-val GL_IMAGE_TEXEL_SIZE i32 #x82A7)
;; (bind-val GL_IMAGE_COMPATIBILITY_CLASS i32 #x82A8)
;; (bind-val GL_IMAGE_PIXEL_FORMAT i32 #x82A9)
;; (bind-val GL_IMAGE_PIXEL_TYPE i32 #x82AA)
;; (bind-val GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST i32 #x82AC)
;; (bind-val GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST i32 #x82AD)
;; (bind-val GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE i32 #x82AE)
;; (bind-val GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE i32 #x82AF)
;; (bind-val GL_TEXTURE_COMPRESSED_BLOCK_WIDTH i32 #x82B1)
;; (bind-val GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT i32 #x82B2)
;; (bind-val GL_TEXTURE_COMPRESSED_BLOCK_SIZE i32 #x82B3)
;; (bind-val GL_CLEAR_BUFFER i32 #x82B4)
;; (bind-val GL_TEXTURE_VIEW i32 #x82B5)
;; (bind-val GL_VIEW_COMPATIBILITY_CLASS i32 #x82B6)
;; (bind-val GL_FULL_SUPPORT i32 #x82B7)
;; (bind-val GL_CAVEAT_SUPPORT i32 #x82B8)
;; (bind-val GL_IMAGE_CLASS_4_X_32 i32 #x82B9)
;; (bind-val GL_IMAGE_CLASS_2_X_32 i32 #x82BA)
;; (bind-val GL_IMAGE_CLASS_1_X_32 i32 #x82BB)
;; (bind-val GL_IMAGE_CLASS_4_X_16 i32 #x82BC)
;; (bind-val GL_IMAGE_CLASS_2_X_16 i32 #x82BD)
;; (bind-val GL_IMAGE_CLASS_1_X_16 i32 #x82BE)
;; (bind-val GL_IMAGE_CLASS_4_X_8 i32 #x82BF)
;; (bind-val GL_IMAGE_CLASS_2_X_8 i32 #x82C0)
;; (bind-val GL_IMAGE_CLASS_1_X_8 i32 #x82C1)
;; (bind-val GL_IMAGE_CLASS_11_11_10 i32 #x82C2)
;; (bind-val GL_IMAGE_CLASS_10_10_10_2 i32 #x82C3)
;; (bind-val GL_VIEW_CLASS_128_BITS i32 #x82C4)
;; (bind-val GL_VIEW_CLASS_96_BITS i32 #x82C5)
;; (bind-val GL_VIEW_CLASS_64_BITS i32 #x82C6)
;; (bind-val GL_VIEW_CLASS_48_BITS i32 #x82C7)
;; (bind-val GL_VIEW_CLASS_32_BITS i32 #x82C8)
;; (bind-val GL_VIEW_CLASS_24_BITS i32 #x82C9)
;; (bind-val GL_VIEW_CLASS_16_BITS i32 #x82CA)
;; (bind-val GL_VIEW_CLASS_8_BITS i32 #x82CB)
;; (bind-val GL_VIEW_CLASS_S3TC_DXT1_RGB i32 #x82CC)
;; (bind-val GL_VIEW_CLASS_S3TC_DXT1_RGBA i32 #x82CD)
;; (bind-val GL_VIEW_CLASS_S3TC_DXT3_RGBA i32 #x82CE)
;; (bind-val GL_VIEW_CLASS_S3TC_DXT5_RGBA i32 #x82CF)
;; (bind-val GL_VIEW_CLASS_RGTC1_RED i32 #x82D0)
;; (bind-val GL_VIEW_CLASS_RGTC2_RG i32 #x82D1)
;; (bind-val GL_VIEW_CLASS_BPTC_UNORM i32 #x82D2)
;; (bind-val GL_VIEW_CLASS_BPTC_FLOAT i32 #x82D3)
;; (bind-val GL_UNIFORM i32 #x92E1)
;; (bind-val GL_UNIFORM_BLOCK i32 #x92E2)
;; (bind-val GL_PROGRAM_INPUT i32 #x92E3)
;; (bind-val GL_PROGRAM_OUTPUT i32 #x92E4)
;; (bind-val GL_BUFFER_VARIABLE i32 #x92E5)
;; (bind-val GL_SHADER_STORAGE_BLOCK i32 #x92E6)
;; (bind-val GL_VERTEX_SUBROUTINE i32 #x92E8)
;; (bind-val GL_TESS_CONTROL_SUBROUTINE i32 #x92E9)
;; (bind-val GL_TESS_EVALUATION_SUBROUTINE i32 #x92EA)
;; (bind-val GL_GEOMETRY_SUBROUTINE i32 #x92EB)
;; (bind-val GL_FRAGMENT_SUBROUTINE i32 #x92EC)
;; (bind-val GL_COMPUTE_SUBROUTINE i32 #x92ED)
;; (bind-val GL_VERTEX_SUBROUTINE_UNIFORM i32 #x92EE)
;; (bind-val GL_TESS_CONTROL_SUBROUTINE_UNIFORM i32 #x92EF)
;; (bind-val GL_TESS_EVALUATION_SUBROUTINE_UNIFORM i32 #x92F0)
;; (bind-val GL_GEOMETRY_SUBROUTINE_UNIFORM i32 #x92F1)
;; (bind-val GL_FRAGMENT_SUBROUTINE_UNIFORM i32 #x92F2)
;; (bind-val GL_COMPUTE_SUBROUTINE_UNIFORM i32 #x92F3)
;; (bind-val GL_TRANSFORM_FEEDBACK_VARYING i32 #x92F4)
;; (bind-val GL_ACTIVE_RESOURCES i32 #x92F5)
;; (bind-val GL_MAX_NAME_LENGTH i32 #x92F6)
;; (bind-val GL_MAX_NUM_ACTIVE_VARIABLES i32 #x92F7)
;; (bind-val GL_MAX_NUM_COMPATIBLE_SUBROUTINES i32 #x92F8)
;; (bind-val GL_NAME_LENGTH i32 #x92F9)
;; (bind-val GL_TYPE i32 #x92FA)
;; (bind-val GL_ARRAY_SIZE i32 #x92FB)
;; (bind-val GL_OFFSET i32 #x92FC)
;; (bind-val GL_BLOCK_INDEX i32 #x92FD)
;; (bind-val GL_ARRAY_STRIDE i32 #x92FE)
;; (bind-val GL_MATRIX_STRIDE i32 #x92FF)
;; (bind-val GL_IS_ROW_MAJOR i32 #x9300)
;; (bind-val GL_ATOMIC_COUNTER_BUFFER_INDEX i32 #x9301)
;; (bind-val GL_BUFFER_BINDING i32 #x9302)
;; (bind-val GL_BUFFER_DATA_SIZE i32 #x9303)
;; (bind-val GL_NUM_ACTIVE_VARIABLES i32 #x9304)
;; (bind-val GL_ACTIVE_VARIABLES i32 #x9305)
;; (bind-val GL_REFERENCED_BY_VERTEX_SHADER i32 #x9306)
;; (bind-val GL_REFERENCED_BY_TESS_CONTROL_SHADER i32 #x9307)
;; (bind-val GL_REFERENCED_BY_TESS_EVALUATION_SHADER i32 #x9308)
;; (bind-val GL_REFERENCED_BY_GEOMETRY_SHADER i32 #x9309)
;; (bind-val GL_REFERENCED_BY_FRAGMENT_SHADER i32 #x930A)
;; (bind-val GL_REFERENCED_BY_COMPUTE_SHADER i32 #x930B)
;; (bind-val GL_TOP_LEVEL_ARRAY_SIZE i32 #x930C)
;; (bind-val GL_TOP_LEVEL_ARRAY_STRIDE i32 #x930D)
;; (bind-val GL_LOCATION i32 #x930E)
;; (bind-val GL_LOCATION_INDEX i32 #x930F)
;; (bind-val GL_IS_PER_PATCH i32 #x92E7)
;; (bind-val GL_SHADER_STORAGE_BUFFER i32 #x90D2)
;; (bind-val GL_SHADER_STORAGE_BUFFER_BINDING i32 #x90D3)
;; (bind-val GL_SHADER_STORAGE_BUFFER_START i32 #x90D4)
;; (bind-val GL_SHADER_STORAGE_BUFFER_SIZE i32 #x90D5)
;; (bind-val GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS i32 #x90D6)
;; (bind-val GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS i32 #x90D7)
;; (bind-val GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS i32 #x90D8)
;; (bind-val GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS i32 #x90D9)
;; (bind-val GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS i32 #x90DA)
;; (bind-val GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS i32 #x90DB)
;; (bind-val GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS i32 #x90DC)
;; (bind-val GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS i32 #x90DD)
;; (bind-val GL_MAX_SHADER_STORAGE_BLOCK_SIZE i32 #x90DE)
;; (bind-val GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT i32 #x90DF)
;; (bind-val GL_SHADER_STORAGE_BARRIER_BIT i32 #x00002000)
;; (bind-val GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES i32 #x8F39)
;; (bind-val GL_DEPTH_STENCIL_TEXTURE_MODE i32 #x90EA)
;; (bind-val GL_TEXTURE_BUFFER_OFFSET i32 #x919D)
;; (bind-val GL_TEXTURE_BUFFER_SIZE i32 #x919E)
;; (bind-val GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT i32 #x919F)
;; (bind-val GL_TEXTURE_VIEW_MIN_LEVEL i32 #x82DB)
;; (bind-val GL_TEXTURE_VIEW_NUM_LEVELS i32 #x82DC)
;; (bind-val GL_TEXTURE_VIEW_MIN_LAYER i32 #x82DD)
;; (bind-val GL_TEXTURE_VIEW_NUM_LAYERS i32 #x82DE)
;; (bind-val GL_TEXTURE_IMMUTABLE_LEVELS i32 #x82DF)
;; (bind-val GL_VERTEX_ATTRIB_BINDING i32 #x82D4)
;; (bind-val GL_VERTEX_ATTRIB_RELATIVE_OFFSET i32 #x82D5)
;; (bind-val GL_VERTEX_BINDING_DIVISOR i32 #x82D6)
;; (bind-val GL_VERTEX_BINDING_OFFSET i32 #x82D7)
;; (bind-val GL_VERTEX_BINDING_STRIDE i32 #x82D8)
;; (bind-val GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET i32 #x82D9)
;; (bind-val GL_MAX_VERTEX_ATTRIB_BINDINGS i32 #x82DA)
;; (bind-val GL_VERTEX_BINDING_BUFFER i32 #x8F4F)

;; ;; void glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, void* data);
;; (bind-lib libGL glClearBufferData [void,GLenum,GLenum,GLenum,GLenum,i8*]*)
;; ;; void glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, void* data);
;; (bind-lib libGL glClearBufferSubData [void,GLenum,GLenum,GLintptr,GLsizeiptr,GLenum,GLenum,i8*]*)
;; ;; void glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
;; (bind-lib libGL glDispatchCompute [void,GLuint,GLuint,GLuint]*)
;; ;; void glDispatchComputeIndirect(GLintptr indirect);
;; (bind-lib libGL glDispatchComputeIndirect [void,GLintptr]*)
;; ;; void glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
;; (bind-lib libGL glCopyImageSubData [void,GLuint,GLenum,GLint,GLint,GLint,GLint,GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei]*)
;; ;; void glFramebufferParameteri(GLenum target, GLenum pname, GLint param);
;; (bind-lib libGL glFramebufferParameteri [void,GLenum,GLenum,GLint]*)
;; ;; void glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params);
;; (bind-lib libGL glGetFramebufferParameteriv [void,GLenum,GLenum,GLint*]*)
;; ;; void glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);
;; (bind-lib libGL glGetInternalformati64v [void,GLenum,GLenum,GLenum,GLsizei,GLint64*]*)
;; ;; void glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
;; (bind-lib libGL glInvalidateTexSubImage [void,GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei]*)
;; ;; void glInvalidateTexImage(GLuint texture, GLint level);
;; (bind-lib libGL glInvalidateTexImage [void,GLuint,GLint]*)
;; ;; void glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length);
;; (bind-lib libGL glInvalidateBufferSubData [void,GLuint,GLintptr,GLsizeiptr]*)
;; ;; void glInvalidateBufferData(GLuint buffer);
;; (bind-lib libGL glInvalidateBufferData [void,GLuint]*)
;; ;; void glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, GLenum* attachments);
;; (bind-lib libGL glInvalidateFramebuffer [void,GLenum,GLsizei,GLenum*]*)
;; ;; void glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
;; (bind-lib libGL glInvalidateSubFramebuffer [void,GLenum,GLsizei,GLenum*,GLint,GLint,GLsizei,GLsizei]*)
;; ;; void glMultiDrawArraysIndirect(GLenum mode, void* indirect, GLsizei drawcount, GLsizei stride);
;; (bind-lib libGL glMultiDrawArraysIndirect [void,GLenum,i8*,GLsizei,GLsizei]*)
;; ;; void glMultiDrawElementsIndirect(GLenum mode, GLenum type, void* indirect, GLsizei drawcount, GLsizei stride);
;; (bind-lib libGL glMultiDrawElementsIndirect [void,GLenum,GLenum,i8*,GLsizei,GLsizei]*)
;; ;; void glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
;; (bind-lib libGL glGetProgramInterfaceiv [void,GLuint,GLenum,GLenum,GLint*]*)
;; ;; GLuint glGetProgramResourceIndex(GLuint program, GLenum programInterface, GLchar* name);
;; (bind-lib libGL glGetProgramResourceIndex [GLuint,GLuint,GLenum,GLchar*]*)
;; ;; void glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
;; (bind-lib libGL glGetProgramResourceName [void,GLuint,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; ;; void glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, GLenum* props, GLsizei bufSize, GLsizei *length, GLint *params);
;; (bind-lib libGL glGetProgramResourceiv [void,GLuint,GLenum,GLuint,GLsizei,GLenum*,GLsizei,GLsizei*,GLint*]*)
;; ;; GLint glGetProgramResourceLocation(GLuint program, GLenum programInterface, GLchar* name);
;; (bind-lib libGL glGetProgramResourceLocation [GLint,GLuint,GLenum,GLchar*]*)
;; ;; GLint glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, GLchar* name);
;; (bind-lib libGL glGetProgramResourceLocationIndex [GLint,GLuint,GLenum,GLchar*]*)
;; ;; void glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
;; (bind-lib libGL glShaderStorageBlockBinding [void,GLuint,GLuint,GLuint]*)
;; ;; void glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
;; (bind-lib libGL glTexBufferRange [void,GLenum,GLenum,GLuint,GLintptr,GLsizeiptr]*)
;; ;; void glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
;; (bind-lib libGL glTexStorage2DMultisample [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLboolean]*)
;; ;; void glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
;; (bind-lib libGL glTexStorage3DMultisample [void,GLenum,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean]*)
;; ;; void glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
;; (bind-lib libGL glTextureView [void,GLuint,GLenum,GLuint,GLenum,GLuint,GLuint,GLuint,GLuint]*)
;; ;; void glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
;; (bind-lib libGL glBindVertexBuffer [void,GLuint,GLuint,GLintptr,GLsizei]*)
;; ;; void glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
;; (bind-lib libGL glVertexAttribFormat [void,GLuint,GLint,GLenum,GLboolean,GLuint]*)
;; ;; void glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
;; (bind-lib libGL glVertexAttribIFormat [void,GLuint,GLint,GLenum,GLuint]*)
;; ;; void glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
;; (bind-lib libGL glVertexAttribLFormat [void,GLuint,GLint,GLenum,GLuint]*)
;; ;; void glVertexAttribBinding(GLuint attribindex, GLuint bindingindex);
;; (bind-lib libGL glVertexAttribBinding [void,GLuint,GLuint]*)
;; ;; void glVertexBindingDivisor(GLuint bindingindex, GLuint divisor);
;; (bind-lib libGL glVertexBindingDivisor [void,GLuint,GLuint]*)
;; ;; void glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
;; (bind-lib libGL glDebugMessageControl [void,GLenum,GLenum,GLenum,GLsizei,GLuint*,GLboolean]*)
;; ;; void glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* buf);
;; (bind-lib libGL glDebugMessageInsert [void,GLenum,GLenum,GLuint,GLenum,GLsizei,GLchar*]*)
;; ;; void glDebugMessageCallback(GLDEBUGPROC callback, void* userParam);
;; (bind-lib libGL glDebugMessageCallback [void,GLDEBUGPROC,i8*]*)
;; ;; GLuint glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
;; (bind-lib libGL glGetDebugMessageLog [GLuint,GLuint,GLsizei,GLenum*,GLenum*,GLuint*,GLenum*,GLsizei*,GLchar*]*)
;; ;; void glPushDebugGroup(GLenum source, GLuint id, GLsizei length, GLchar* message);
;; (bind-lib libGL glPushDebugGroup [void,GLenum,GLuint,GLsizei,GLchar*]*)
;; ;; void glPopDebugGroup(void);
;; (bind-lib libGL glPopDebugGroup [void]*)
;; ;; void glObjectLabel(GLenum identifier, GLuint name, GLsizei length, GLchar* label);
;; (bind-lib libGL glObjectLabel [void,GLenum,GLuint,GLsizei,GLchar*]*)
;; ;; void glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
;; (bind-lib libGL glGetObjectLabel [void,GLenum,GLuint,GLsizei,GLsizei*,GLchar*]*)
;; ;; void glObjectPtrLabel(void* ptr, GLsizei length, GLchar* label);
;; (bind-lib libGL glObjectPtrLabel [void,i8*,GLsizei,GLchar*]*)
;; ;; void glGetObjectPtrLabel(void* ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
;; (bind-lib libGL glGetObjectPtrLabel [void,i8*,GLsizei,GLsizei*,GLchar*]*)
;; ;; #endif /* GL_VERSION_4_3 */

;; ;; #ifndef GL_VERSION_4_4
;; (bind-val GL_VERSION_4_4 i32 1)
;; (bind-val GL_MAX_VERTEX_ATTRIB_STRIDE i32 #x82E5)
;; (bind-val GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED i32 #x8221)
;; (bind-val GL_TEXTURE_BUFFER_BINDING i32 #x8C2A)
;; (bind-val GL_MAP_PERSISTENT_BIT i32 #x0040)
;; (bind-val GL_MAP_COHERENT_BIT i32 #x0080)
;; (bind-val GL_DYNAMIC_STORAGE_BIT i32 #x0100)
;; (bind-val GL_CLIENT_STORAGE_BIT i32 #x0200)
;; (bind-val GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT i32 #x00004000)
;; (bind-val GL_BUFFER_IMMUTABLE_STORAGE i32 #x821F)
;; (bind-val GL_BUFFER_STORAGE_FLAGS i32 #x8220)
;; (bind-val GL_CLEAR_TEXTURE i32 #x9365)
;; (bind-val GL_LOCATION_COMPONENT i32 #x934A)
;; (bind-val GL_TRANSFORM_FEEDBACK_BUFFER_INDEX i32 #x934B)
;; (bind-val GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE i32 #x934C)
;; (bind-val GL_QUERY_BUFFER i32 #x9192)
;; (bind-val GL_QUERY_BUFFER_BARRIER_BIT i32 #x00008000)
;; (bind-val GL_QUERY_BUFFER_BINDING i32 #x9193)
;; (bind-val GL_QUERY_RESULT_NO_WAIT i32 #x9194)
;; (bind-val GL_MIRROR_CLAMP_TO_EDGE i32 #x8743)

;; ;; void glBufferStorage(GLenum target, GLsizeiptr size, void* data, GLbitfield flags);
;; (bind-lib libGL glBufferStorage [void,GLenum,GLsizeiptr,i8*,GLbitfield]*)
;; ;; void glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, void* data);
;; (bind-lib libGL glClearTexImage [void,GLuint,GLint,GLenum,GLenum,i8*]*)
;; ;; void glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* data);
;; (bind-lib libGL glClearTexSubImage [void,GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,i8*]*)
;; ;; void glBindBuffersBase(GLenum target, GLuint first, GLsizei count, GLuint* buffers);
;; (bind-lib libGL glBindBuffersBase [void,GLenum,GLuint,GLsizei,GLuint*]*)
;; ;; void glBindBuffersRange(GLenum target, GLuint first, GLsizei count, GLuint* buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
;; (bind-lib libGL glBindBuffersRange [void,GLenum,GLuint,GLsizei,GLuint*,GLintptr*,GLsizeiptr*]*)
;; ;; void glBindTextures(GLuint first, GLsizei count, GLuint* textures);
;; (bind-lib libGL glBindTextures [void,GLuint,GLsizei,GLuint*]*)
;; ;; void glBindSamplers(GLuint first, GLsizei count, GLuint* samplers);
;; (bind-lib libGL glBindSamplers [void,GLuint,GLsizei,GLuint*]*)
;; ;; void glBindImageTextures(GLuint first, GLsizei count, GLuint* textures);
;; (bind-lib libGL glBindImageTextures [void,GLuint,GLsizei,GLuint*]*)
;; ;; void glBindVertexBuffers(GLuint first, GLsizei count, GLuint* buffers, const GLintptr *offsets, GLsizei* strides);
;; (bind-lib libGL glBindVertexBuffers [void,GLuint,GLsizei,GLuint*,GLintptr*,GLsizei*]*)
;; ;; #endif /* GL_VERSION_4_4 */

;; ;; #ifndef GL_VERSION_4_5
;; (bind-val GL_VERSION_4_5 i32 1)
;; (bind-val GL_CONTEXT_LOST i32 #x0507)
;; (bind-val GL_NEGATIVE_ONE_TO_ONE i32 #x935E)
;; (bind-val GL_ZERO_TO_ONE i32 #x935F)
;; (bind-val GL_CLIP_ORIGIN i32 #x935C)
;; (bind-val GL_CLIP_DEPTH_MODE i32 #x935D)
;; (bind-val GL_QUERY_WAIT_INVERTED i32 #x8E17)
;; (bind-val GL_QUERY_NO_WAIT_INVERTED i32 #x8E18)
;; (bind-val GL_QUERY_BY_REGION_WAIT_INVERTED i32 #x8E19)
;; (bind-val GL_QUERY_BY_REGION_NO_WAIT_INVERTED i32 #x8E1A)
;; (bind-val GL_MAX_CULL_DISTANCES i32 #x82F9)
;; (bind-val GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES i32 #x82FA)
;; (bind-val GL_TEXTURE_TARGET i32 #x1006)
;; (bind-val GL_QUERY_TARGET i32 #x82EA)
;; (bind-val GL_GUILTY_CONTEXT_RESET i32 #x8253)
;; (bind-val GL_INNOCENT_CONTEXT_RESET i32 #x8254)
;; (bind-val GL_UNKNOWN_CONTEXT_RESET i32 #x8255)
;; (bind-val GL_RESET_NOTIFICATION_STRATEGY i32 #x8256)
;; (bind-val GL_LOSE_CONTEXT_ON_RESET i32 #x8252)
;; (bind-val GL_NO_RESET_NOTIFICATION i32 #x8261)
;; (bind-val GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT i32 #x00000004)
;; (bind-val GL_CONTEXT_RELEASE_BEHAVIOR i32 #x82FB)
;; (bind-val GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH i32 #x82FC)

;; ;; void glClipControl(GLenum origin, GLenum depth);
;; (bind-lib libGL glClipControl [void,GLenum,GLenum]*)
;; ;; void glCreateTransformFeedbacks(GLsizei n, GLuint *ids);
;; (bind-lib libGL glCreateTransformFeedbacks [void,GLsizei,GLuint*]*)
;; ;; void glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer);
;; (bind-lib libGL glTransformFeedbackBufferBase [void,GLuint,GLuint,GLuint]*)
;; ;; void glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
;; (bind-lib libGL glTransformFeedbackBufferRange [void,GLuint,GLuint,GLuint,GLintptr,GLsizeiptr]*)
;; ;; void glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param);
;; (bind-lib libGL glGetTransformFeedbackiv [void,GLuint,GLenum,GLint*]*)
;; ;; void glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param);
;; (bind-lib libGL glGetTransformFeedbacki_v [void,GLuint,GLenum,GLuint,GLint*]*)
;; ;; void glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
;; (bind-lib libGL glGetTransformFeedbacki64_v [void,GLuint,GLenum,GLuint,GLint64*]*)
;; ;; void glCreateBuffers(GLsizei n, GLuint *buffers);
;; (bind-lib libGL glCreateBuffers [void,GLsizei,GLuint*]*)
;; ;; void glNamedBufferStorage(GLuint buffer, GLsizeiptr size, void* data, GLbitfield flags);
;; (bind-lib libGL glNamedBufferStorage [void,GLuint,GLsizeiptr,i8*,GLbitfield]*)
;; ;; void glNamedBufferData(GLuint buffer, GLsizeiptr size, void* data, GLenum usage);
;; (bind-lib libGL glNamedBufferData [void,GLuint,GLsizeiptr,i8*,GLenum]*)
;; ;; void glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void* data);
;; (bind-lib libGL glNamedBufferSubData [void,GLuint,GLintptr,GLsizeiptr,i8*]*)
;; ;; void glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
;; (bind-lib libGL glCopyNamedBufferSubData [void,GLuint,GLuint,GLintptr,GLintptr,GLsizeiptr]*)
;; ;; void glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, void* data);
;; (bind-lib libGL glClearNamedBufferData [void,GLuint,GLenum,GLenum,GLenum,i8*]*)
;; ;; void glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, void* data);
;; (bind-lib libGL glClearNamedBufferSubData [void,GLuint,GLenum,GLintptr,GLsizeiptr,GLenum,GLenum,i8*]*)
;; ;; void glMapNamedBuffer(GLuint buffer, GLenum access);
;; (bind-lib libGL glMapNamedBuffer [void*,GLuint,GLenum]*)
;; ;; void glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
;; (bind-lib libGL glMapNamedBufferRange [void*,GLuint,GLintptr,GLsizeiptr,GLbitfield]*)
;; ;; GLboolean glUnmapNamedBuffer(GLuint buffer);
;; (bind-lib libGL glUnmapNamedBuffer [GLboolean,GLuint]*)
;; ;; void glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length);
;; (bind-lib libGL glFlushMappedNamedBufferRange [void,GLuint,GLintptr,GLsizeiptr]*)
;; ;; void glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params);
;; (bind-lib libGL glGetNamedBufferParameteriv [void,GLuint,GLenum,GLint*]*)
;; ;; void glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params);
;; (bind-lib libGL glGetNamedBufferParameteri64v [void,GLuint,GLenum,GLint64*]*)
;; ;; void glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params);
;; (bind-lib libGL glGetNamedBufferPointerv [void,GLuint,GLenum,GLvoid**]*)
;; ;; void glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
;; (bind-lib libGL glGetNamedBufferSubData [void,GLuint,GLintptr,GLsizeiptr,i8*]*)
;; ;; void glCreateFramebuffers(GLsizei n, GLuint *framebuffers);
;; (bind-lib libGL glCreateFramebuffers [void,GLsizei,GLuint*]*)
;; ;; void glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
;; (bind-lib libGL glNamedFramebufferRenderbuffer [void,GLuint,GLenum,GLenum,GLuint]*)
;; ;; void glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param);
;; (bind-lib libGL glNamedFramebufferParameteri [void,GLuint,GLenum,GLint]*)
;; ;; void glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
;; (bind-lib libGL glNamedFramebufferTexture [void,GLuint,GLenum,GLuint,GLint]*)
;; ;; void glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
;; (bind-lib libGL glNamedFramebufferTextureLayer [void,GLuint,GLenum,GLuint,GLint,GLint]*)
;; ;; void glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf);
;; (bind-lib libGL glNamedFramebufferDrawBuffer [void,GLuint,GLenum]*)
;; ;; void glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, GLenum* bufs);
;; (bind-lib libGL glNamedFramebufferDrawBuffers [void,GLuint,GLsizei,GLenum*]*)
;; ;; void glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src);
;; (bind-lib libGL glNamedFramebufferReadBuffer [void,GLuint,GLenum]*)
;; ;; void glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, GLenum* attachments);
;; (bind-lib libGL glInvalidateNamedFramebufferData [void,GLuint,GLsizei,GLenum*]*)
;; ;; void glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, GLenum* attachments, GLint x, GLint y, GLsizei width, GLsizei height);
;; (bind-lib libGL glInvalidateNamedFramebufferSubData [void,GLuint,GLsizei,GLenum*,GLint,GLint,GLsizei,GLsizei]*)
;; ;; void glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLint* value);
;; (bind-lib libGL glClearNamedFramebufferiv [void,GLuint,GLenum,GLint,GLint*]*)
;; ;; void glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLuint* value);
;; (bind-lib libGL glClearNamedFramebufferuiv [void,GLuint,GLenum,GLint,GLuint*]*)
;; ;; void glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat* value);
;; (bind-lib libGL glClearNamedFramebufferfv [void,GLuint,GLenum,GLint,GLfloat*]*)
;; ;; void glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, const GLfloat depth, GLint stencil);
;; (bind-lib libGL glClearNamedFramebufferfi [void,GLuint,GLenum,GLfloat,GLint]*)
;; ;; void glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
;; (bind-lib libGL glBlitNamedFramebuffer [void,GLuint,GLuint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum]*)
;; ;; GLenum glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target);
;; (bind-lib libGL glCheckNamedFramebufferStatus [GLenum,GLuint,GLenum]*)
;; ;; void glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param);
;; (bind-lib libGL glGetNamedFramebufferParameteriv [void,GLuint,GLenum,GLint*]*)
;; ;; void glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
;; (bind-lib libGL glGetNamedFramebufferAttachmentParameteriv [void,GLuint,GLenum,GLenum,GLint*]*)
;; ;; void glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers);
;; (bind-lib libGL glCreateRenderbuffers [void,GLsizei,GLuint*]*)
;; ;; void glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
;; (bind-lib libGL glNamedRenderbufferStorage [void,GLuint,GLenum,GLsizei,GLsizei]*)
;; ;; void glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
;; (bind-lib libGL glNamedRenderbufferStorageMultisample [void,GLuint,GLsizei,GLenum,GLsizei,GLsizei]*)
;; ;; void glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params);
;; (bind-lib libGL glGetNamedRenderbufferParameteriv [void,GLuint,GLenum,GLint*]*)
;; ;; void glCreateTextures(GLenum target, GLsizei n, GLuint *textures);
;; (bind-lib libGL glCreateTextures [void,GLenum,GLsizei,GLuint*]*)
;; ;; void glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer);
;; (bind-lib libGL glTextureBuffer [void,GLuint,GLenum,GLuint]*)
;; ;; void glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
;; (bind-lib libGL glTextureBufferRange [void,GLuint,GLenum,GLuint,GLintptr,GLsizeiptr]*)
;; ;; void glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
;; (bind-lib libGL glTextureStorage1D [void,GLuint,GLsizei,GLenum,GLsizei]*)
;; ;; void glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
;; (bind-lib libGL glTextureStorage2D [void,GLuint,GLsizei,GLenum,GLsizei,GLsizei]*)
;; ;; void glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
;; (bind-lib libGL glTextureStorage3D [void,GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLsizei]*)
;; ;; void glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
;; (bind-lib libGL glTextureStorage2DMultisample [void,GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLboolean]*)
;; ;; void glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
;; (bind-lib libGL glTextureStorage3DMultisample [void,GLuint,GLsizei,GLenum,GLsizei,GLsizei,GLsizei,GLboolean]*)
;; ;; void glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, void* pixels);
;; (bind-lib libGL glTextureSubImage1D [void,GLuint,GLint,GLint,GLsizei,GLenum,GLenum,i8*]*)
;; ;; void glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels);
;; (bind-lib libGL glTextureSubImage2D [void,GLuint,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,i8*]*)
;; ;; void glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, void* pixels);
;; (bind-lib libGL glTextureSubImage3D [void,GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,i8*]*)
;; ;; void glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, void* data);
;; (bind-lib libGL glCompressedTextureSubImage1D [void,GLuint,GLint,GLint,GLsizei,GLenum,GLsizei,i8*]*)
;; ;; void glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void* data);
;; (bind-lib libGL glCompressedTextureSubImage2D [void,GLuint,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,i8*]*)
;; ;; void glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, void* data);
;; (bind-lib libGL glCompressedTextureSubImage3D [void,GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLsizei,i8*]*)
;; ;; void glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
;; (bind-lib libGL glCopyTextureSubImage1D [void,GLuint,GLint,GLint,GLint,GLint,GLsizei]*)
;; ;; void glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
;; (bind-lib libGL glCopyTextureSubImage2D [void,GLuint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
;; ;; void glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
;; (bind-lib libGL glCopyTextureSubImage3D [void,GLuint,GLint,GLint,GLint,GLint,GLint,GLint,GLsizei,GLsizei]*)
;; ;; void glTextureParameterf(GLuint texture, GLenum pname, GLfloat param);
;; (bind-lib libGL glTextureParameterf [void,GLuint,GLenum,GLfloat]*)
;; ;; void glTextureParameterfv(GLuint texture, GLenum pname, GLfloat* param);
;; (bind-lib libGL glTextureParameterfv [void,GLuint,GLenum,GLfloat*]*)
;; ;; void glTextureParameteri(GLuint texture, GLenum pname, GLint param);
;; (bind-lib libGL glTextureParameteri [void,GLuint,GLenum,GLint]*)
;; ;; void glTextureParameterIiv(GLuint texture, GLenum pname, GLint* params);
;; (bind-lib libGL glTextureParameterIiv [void,GLuint,GLenum,GLint*]*)
;; ;; void glTextureParameterIuiv(GLuint texture, GLenum pname, GLuint* params);
;; (bind-lib libGL glTextureParameterIuiv [void,GLuint,GLenum,GLuint*]*)
;; ;; void glTextureParameteriv(GLuint texture, GLenum pname, GLint* param);
;; (bind-lib libGL glTextureParameteriv [void,GLuint,GLenum,GLint*]*)
;; ;; void glGenerateTextureMipmap(GLuint texture);
;; (bind-lib libGL glGenerateTextureMipmap [void,GLuint]*)
;; ;; void glBindTextureUnit(GLuint unit, GLuint texture);
;; (bind-lib libGL glBindTextureUnit [void,GLuint,GLuint]*)
;; ;; void glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
;; (bind-lib libGL glGetTextureImage [void,GLuint,GLint,GLenum,GLenum,GLsizei,i8*]*)
;; ;; void glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
;; (bind-lib libGL glGetCompressedTextureImage [void,GLuint,GLint,GLsizei,i8*]*)
;; ;; void glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params);
;; (bind-lib libGL glGetTextureLevelParameterfv [void,GLuint,GLint,GLenum,GLfloat*]*)
;; ;; void glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params);
;; (bind-lib libGL glGetTextureLevelParameteriv [void,GLuint,GLint,GLenum,GLint*]*)
;; ;; void glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params);
;; (bind-lib libGL glGetTextureParameterfv [void,GLuint,GLenum,GLfloat*]*)
;; ;; void glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params);
;; (bind-lib libGL glGetTextureParameterIiv [void,GLuint,GLenum,GLint*]*)
;; ;; void glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params);
;; (bind-lib libGL glGetTextureParameterIuiv [void,GLuint,GLenum,GLuint*]*)
;; ;; void glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params);
;; (bind-lib libGL glGetTextureParameteriv [void,GLuint,GLenum,GLint*]*)
;; ;; void glCreateVertexArrays(GLsizei n, GLuint *arrays);
;; (bind-lib libGL glCreateVertexArrays [void,GLsizei,GLuint*]*)
;; ;; void glDisableVertexArrayAttrib(GLuint vaobj, GLuint index);
;; (bind-lib libGL glDisableVertexArrayAttrib [void,GLuint,GLuint]*)
;; ;; void glEnableVertexArrayAttrib(GLuint vaobj, GLuint index);
;; (bind-lib libGL glEnableVertexArrayAttrib [void,GLuint,GLuint]*)
;; ;; void glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer);
;; (bind-lib libGL glVertexArrayElementBuffer [void,GLuint,GLuint]*)
;; ;; void glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
;; (bind-lib libGL glVertexArrayVertexBuffer [void,GLuint,GLuint,GLuint,GLintptr,GLsizei]*)
;; ;; void glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, GLuint* buffers, const GLintptr *offsets, GLsizei* strides);
;; (bind-lib libGL glVertexArrayVertexBuffers [void,GLuint,GLuint,GLsizei,GLuint*,GLintptr*,GLsizei*]*)
;; ;; void glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
;; (bind-lib libGL glVertexArrayAttribBinding [void,GLuint,GLuint,GLuint]*)
;; ;; void glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
;; (bind-lib libGL glVertexArrayAttribFormat [void,GLuint,GLuint,GLint,GLenum,GLboolean,GLuint]*)
;; ;; void glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
;; (bind-lib libGL glVertexArrayAttribIFormat [void,GLuint,GLuint,GLint,GLenum,GLuint]*)
;; ;; void glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
;; (bind-lib libGL glVertexArrayAttribLFormat [void,GLuint,GLuint,GLint,GLenum,GLuint]*)
;; ;; void glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor);
;; (bind-lib libGL glVertexArrayBindingDivisor [void,GLuint,GLuint,GLuint]*)
;; ;; void glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param);
;; (bind-lib libGL glGetVertexArrayiv [void,GLuint,GLenum,GLint*]*)
;; ;; void glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
;; (bind-lib libGL glGetVertexArrayIndexediv [void,GLuint,GLuint,GLenum,GLint*]*)
;; ;; void glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
;; (bind-lib libGL glGetVertexArrayIndexed64iv [void,GLuint,GLuint,GLenum,GLint64*]*)
;; ;; void glCreateSamplers(GLsizei n, GLuint *samplers);
;; (bind-lib libGL glCreateSamplers [void,GLsizei,GLuint*]*)
;; ;; void glCreateProgramPipelines(GLsizei n, GLuint *pipelines);
;; (bind-lib libGL glCreateProgramPipelines [void,GLsizei,GLuint*]*)
;; ;; void glCreateQueries(GLenum target, GLsizei n, GLuint *ids);
;; (bind-lib libGL glCreateQueries [void,GLenum,GLsizei,GLuint*]*)
;; ;; void glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
;; (bind-lib libGL glGetQueryBufferObjecti64v [void,GLuint,GLuint,GLenum,GLintptr]*)
;; ;; void glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
;; (bind-lib libGL glGetQueryBufferObjectiv [void,GLuint,GLuint,GLenum,GLintptr]*)
;; ;; void glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
;; (bind-lib libGL glGetQueryBufferObjectui64v [void,GLuint,GLuint,GLenum,GLintptr]*)
;; ;; void glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
;; (bind-lib libGL glGetQueryBufferObjectuiv [void,GLuint,GLuint,GLenum,GLintptr]*)
;; ;; void glMemoryBarrierByRegion(GLbitfield barriers);
;; (bind-lib libGL glMemoryBarrierByRegion [void,GLbitfield]*)
;; ;; void glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
;; (bind-lib libGL glGetTextureSubImage [void,GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLenum,GLenum,GLsizei,i8*]*)
;; ;; void glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
;; (bind-lib libGL glGetCompressedTextureSubImage [void,GLuint,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLsizei,i8*]*)
;; ;; GLenum glGetGraphicsResetStatus(void);
;; (bind-lib libGL glGetGraphicsResetStatus [GLenum]*)
;; ;; void glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
;; (bind-lib libGL glGetnCompressedTexImage [void,GLenum,GLint,GLsizei,i8*]*)
;; ;; void glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
;; (bind-lib libGL glGetnTexImage [void,GLenum,GLint,GLenum,GLenum,GLsizei,i8*]*)
;; ;; void glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
;; (bind-lib libGL glGetnUniformdv [void,GLuint,GLint,GLsizei,GLdouble*]*)
;; ;; void glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
;; (bind-lib libGL glGetnUniformfv [void,GLuint,GLint,GLsizei,GLfloat*]*)
;; ;; void glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params);
;; (bind-lib libGL glGetnUniformiv [void,GLuint,GLint,GLsizei,GLint*]*)
;; ;; void glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
;; (bind-lib libGL glGetnUniformuiv [void,GLuint,GLint,GLsizei,GLuint*]*)
;; ;; void glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
;; (bind-lib libGL glReadnPixels [void,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,i8*]*)
;; ;; void glTextureBarrier(void);
;; (bind-lib libGL glTextureBarrier [void]*)
;; ;; #endif /* GL_VERSION_4_5 */

;; (bind-alias GLuint64EXT i64)
;; (bind-val GL_UNSIGNED_INT64_ARB i32 #x140F)

;; ;; GLuint64 glGetTextureHandleARB(GLuint texture);
;; (bind-lib libGL glGetTextureHandleARB [GLuint64,GLuint]*)
;; ;; GLuint64 glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler);
;; (bind-lib libGL glGetTextureSamplerHandleARB [GLuint64,GLuint,GLuint]*)
;; ;; void glMakeTextureHandleResidentARB(GLuint64 handle);
;; (bind-lib libGL glMakeTextureHandleResidentARB [void,GLuint64]*)
;; ;; void glMakeTextureHandleNonResidentARB(GLuint64 handle);
;; (bind-lib libGL glMakeTextureHandleNonResidentARB [void,GLuint64]*)
;; ;; GLuint64 glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);
;; (bind-lib libGL glGetImageHandleARB [GLuint64,GLuint,GLint,GLboolean,GLint,GLenum]*)
;; ;; void glMakeImageHandleResidentARB(GLuint64 handle, GLenum access);
;; (bind-lib libGL glMakeImageHandleResidentARB [void,GLuint64,GLenum]*)
;; ;; void glMakeImageHandleNonResidentARB(GLuint64 handle);
;; (bind-lib libGL glMakeImageHandleNonResidentARB [void,GLuint64]*)
;; ;; void glUniformHandleui64ARB(GLint location, GLuint64 value);
;; (bind-lib libGL glUniformHandleui64ARB [void,GLint,GLuint64]*)
;; ;; void glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value);
;; (bind-lib libGL glUniformHandleui64vARB [void,GLint,GLsizei,GLuint64*]*)
;; ;; void glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value);
;; (bind-lib libGL glProgramUniformHandleui64ARB [void,GLuint,GLint,GLuint64]*)
;; ;; void glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values);
;; (bind-lib libGL glProgramUniformHandleui64vARB [void,GLuint,GLint,GLsizei,GLuint64*]*)
;; ;; GLboolean glIsTextureHandleResidentARB(GLuint64 handle);
;; (bind-lib libGL glIsTextureHandleResidentARB [GLboolean,GLuint64]*)
;; ;; GLboolean glIsImageHandleResidentARB(GLuint64 handle);
;; (bind-lib libGL glIsImageHandleResidentARB [GLboolean,GLuint64]*)
;; ;; void glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x);
;; (bind-lib libGL glVertexAttribL1ui64ARB [void,GLuint,GLuint64EXT]*)
;; ;; void glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v);
;; (bind-lib libGL glVertexAttribL1ui64vARB [void,GLuint,GLuint64EXT*]*)
;; ;; void glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params);
;; (bind-lib libGL glGetVertexAttribLui64vARB [void,GLuint,GLenum,GLuint64EXT*]*)

;; (bind-alias _cl_context i8)
;; (bind-alias _cl_event i8)
;; (bind-val GL_SYNC_CL_EVENT_ARB i32 #x8240)
;; (bind-val GL_SYNC_CL_EVENT_COMPLETE_ARB i32 #x8241)
;; ;; GLsync glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags);
;; (bind-lib libGL glCreateSyncFromCLeventARB [GLsync,_cl_context*,_cl_event*,GLbitfield]*)
;; (bind-val GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB i32 #x9344)
;; (bind-val GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB i32 #x90EB)
;; (bind-val GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB i32 #x9345)
;; (bind-val GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB i32 #x91BF)

;; ;; void glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);
;; (bind-lib libGL glDispatchComputeGroupSizeARB [void,GLuint,GLuint,GLuint,GLuint,GLuint,GLuint]*)

;; ;; typedef( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,GLchar* message,i8* userParam);
;; (bind-val GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB i32 #x8242)
;; (bind-val GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB i32 #x8243)
;; (bind-val GL_DEBUG_CALLBACK_FUNCTION_ARB i32 #x8244)
;; (bind-val GL_DEBUG_CALLBACK_USER_PARAM_ARB i32 #x8245)
;; (bind-val GL_DEBUG_SOURCE_API_ARB i32 #x8246)
;; (bind-val GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB i32 #x8247)
;; (bind-val GL_DEBUG_SOURCE_SHADER_COMPILER_ARB i32 #x8248)
;; (bind-val GL_DEBUG_SOURCE_THIRD_PARTY_ARB i32 #x8249)
;; (bind-val GL_DEBUG_SOURCE_APPLICATION_ARB i32 #x824A)
;; (bind-val GL_DEBUG_SOURCE_OTHER_ARB i32 #x824B)
;; (bind-val GL_DEBUG_TYPE_ERROR_ARB i32 #x824C)
;; (bind-val GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB i32 #x824D)
;; (bind-val GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB i32 #x824E)
;; (bind-val GL_DEBUG_TYPE_PORTABILITY_ARB i32 #x824F)
;; (bind-val GL_DEBUG_TYPE_PERFORMANCE_ARB i32 #x8250)
;; (bind-val GL_DEBUG_TYPE_OTHER_ARB i32 #x8251)
;; (bind-val GL_MAX_DEBUG_MESSAGE_LENGTH_ARB i32 #x9143)
;; (bind-val GL_MAX_DEBUG_LOGGED_MESSAGES_ARB i32 #x9144)
;; (bind-val GL_DEBUG_LOGGED_MESSAGES_ARB i32 #x9145)
;; (bind-val GL_DEBUG_SEVERITY_HIGH_ARB i32 #x9146)
;; (bind-val GL_DEBUG_SEVERITY_MEDIUM_ARB i32 #x9147)
;; (bind-val GL_DEBUG_SEVERITY_LOW_ARB i32 #x9148)

;; ;; void glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuint* ids, GLboolean enabled);
;; (bind-lib libGL glDebugMessageControlARB [void,GLenum,GLenum,GLenum,GLsizei,GLuint*,GLboolean]*)
;; ;; void glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLchar* buf);
;; (bind-lib libGL glDebugMessageInsertARB [void,GLenum,GLenum,GLuint,GLenum,GLsizei,GLchar*]*)
;; ;; void glDebugMessageCallbackARB(GLDEBUGPROCARB callback, void* userParam);
;; (bind-lib libGL glDebugMessageCallbackARB [void,GLDEBUGPROCARB,i8*]*)
;; ;; GLuint glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
;; (bind-lib libGL glGetDebugMessageLogARB [GLuint,GLuint,GLsizei,GLenum*,GLenum*,GLuint*,GLenum*,GLsizei*,GLchar*]*)

;; ;; void glBlendEquationiARB(GLuint buf, GLenum mode);
;; (bind-lib libGL glBlendEquationiARB [void,GLuint,GLenum]*)
;; ;; void glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
;; (bind-lib libGL glBlendEquationSeparateiARB [void,GLuint,GLenum,GLenum]*)
;; ;; void glBlendFunciARB(GLuint buf, GLenum src, GLenum dst);
;; (bind-lib libGL glBlendFunciARB [void,GLuint,GLenum,GLenum]*)
;; ;; void glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
;; (bind-lib libGL glBlendFuncSeparateiARB [void,GLuint,GLenum,GLenum,GLenum,GLenum]*)

;; (bind-val GL_BLEND_COLOR i32 #x8005)
;; (bind-val GL_BLEND_EQUATION i32 #x8009)

;; (bind-val GL_PARAMETER_BUFFER_ARB i32 #x80EE)
;; (bind-val GL_PARAMETER_BUFFER_BINDING_ARB i32 #x80EF)

;; ;; void glMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
;; (bind-lib libGL glMultiDrawArraysIndirectCountARB [void,GLenum,GLintptr,GLintptr,GLsizei,GLsizei]*)
;; ;; void glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
;; (bind-lib libGL glMultiDrawElementsIndirectCountARB [void,GLenum,GLenum,GLintptr,GLintptr,GLsizei,GLsizei]*)

;; (bind-val GL_SRGB_DECODE_ARB i32 #x8299)
;; (bind-val GL_VERTICES_SUBMITTED_ARB i32 #x82EE)
;; (bind-val GL_PRIMITIVES_SUBMITTED_ARB i32 #x82EF)
;; (bind-val GL_VERTEX_SHADER_INVOCATIONS_ARB i32 #x82F0)
;; (bind-val GL_TESS_CONTROL_SHADER_PATCHES_ARB i32 #x82F1)
;; (bind-val GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB i32 #x82F2)
;; (bind-val GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB i32 #x82F3)
;; (bind-val GL_FRAGMENT_SHADER_INVOCATIONS_ARB i32 #x82F4)
;; (bind-val GL_COMPUTE_SHADER_INVOCATIONS_ARB i32 #x82F5)
;; (bind-val GL_CLIPPING_INPUT_PRIMITIVES_ARB i32 #x82F6)
;; (bind-val GL_CLIPPING_OUTPUT_PRIMITIVES_ARB i32 #x82F7)

;; (bind-val GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB i32 #x00000004)
;; (bind-val GL_LOSE_CONTEXT_ON_RESET_ARB i32 #x8252)
;; (bind-val GL_GUILTY_CONTEXT_RESET_ARB i32 #x8253)
;; (bind-val GL_INNOCENT_CONTEXT_RESET_ARB i32 #x8254)
;; (bind-val GL_UNKNOWN_CONTEXT_RESET_ARB i32 #x8255)
;; (bind-val GL_RESET_NOTIFICATION_STRATEGY_ARB i32 #x8256)
;; (bind-val GL_NO_RESET_NOTIFICATION_ARB i32 #x8261)

;; ;; GLenum glGetGraphicsResetStatusARB(void);
;; (bind-lib libGL glGetGraphicsResetStatusARB [GLenum]*)
;; ;; void glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);
;; (bind-lib libGL glGetnTexImageARB [void,GLenum,GLint,GLenum,GLenum,GLsizei,i8*]*)
;; ;; void glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
;; (bind-lib libGL glReadnPixelsARB [void,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLsizei,i8*]*)
;; ;; void glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img);
;; (bind-lib libGL glGetnCompressedTexImageARB [void,GLenum,GLint,GLsizei,i8*]*)
;; ;; void glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
;; (bind-lib libGL glGetnUniformfvARB [void,GLuint,GLint,GLsizei,GLfloat*]*)
;; ;; void glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params);
;; (bind-lib libGL glGetnUniformivARB [void,GLuint,GLint,GLsizei,GLint*]*)
;; ;; void glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
;; (bind-lib libGL glGetnUniformuivARB [void,GLuint,GLint,GLsizei,GLuint*]*)
;; ;; void glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
;; (bind-lib libGL glGetnUniformdvARB [void,GLuint,GLint,GLsizei,GLdouble*]*)

;; (bind-val GL_SAMPLE_SHADING_ARB i32 #x8C36)
;; (bind-val GL_MIN_SAMPLE_SHADING_VALUE_ARB i32 #x8C37)

;; ;; void glMinSampleShadingARB(GLfloat value);
;; (bind-lib libGL glMinSampleShadingARB [void,GLfloat]*)

;; (bind-val GL_SHADER_INCLUDE_ARB i32 #x8DAE)
;; (bind-val GL_NAMED_STRING_LENGTH_ARB i32 #x8DE9)
;; (bind-val GL_NAMED_STRING_TYPE_ARB i32 #x8DEA)

;; ;; void glNamedStringARB(GLenum type, GLint namelen, GLchar* name, GLint stringlen, GLchar* string);
;; (bind-lib libGL glNamedStringARB [void,GLenum,GLint,GLchar*,GLint,GLchar*]*)
;; ;; void glDeleteNamedStringARB(GLint namelen, GLchar* name);
;; (bind-lib libGL glDeleteNamedStringARB [void,GLint,GLchar*]*)
;; ;; void glCompileShaderIncludeARB(GLuint shader, GLsizei count, GLchar* const*path, GLint* length);
;; (bind-lib libGL glCompileShaderIncludeARB [void,GLuint,GLsizei,GLchar**,GLint*]*)
;; ;; GLboolean glIsNamedStringARB(GLint namelen, GLchar* name);
;; (bind-lib libGL glIsNamedStringARB [GLboolean,GLint,GLchar*]*)
;; ;; void glGetNamedStringARB(GLint namelen, GLchar* name, GLsizei bufSize, GLint *stringlen, GLchar *string);
;; (bind-lib libGL glGetNamedStringARB [void,GLint,GLchar*,GLsizei,GLint*,GLchar*]*)
;; ;; void glGetNamedStringivARB(GLint namelen, GLchar* name, GLenum pname, GLint *params);
;; (bind-lib libGL glGetNamedStringivARB [void,GLint,GLchar*,GLenum,GLint*]*)

;; (bind-val GL_SPARSE_STORAGE_BIT_ARB i32 #x0400)
;; (bind-val GL_SPARSE_BUFFER_PAGE_SIZE_ARB i32 #x82F8)

;; ;; void glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit);
;; (bind-lib libGL glBufferPageCommitmentARB [void,GLenum,GLintptr,GLsizeiptr,GLboolean]*)
;; ;; void glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
;; (bind-lib libGL glNamedBufferPageCommitmentEXT [void,GLuint,GLintptr,GLsizeiptr,GLboolean]*)
;; ;; void glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit);
;; (bind-lib libGL glNamedBufferPageCommitmentARB [void,GLuint,GLintptr,GLsizeiptr,GLboolean]*)

;; (bind-val GL_TEXTURE_SPARSE_ARB i32 #x91A6)
;; (bind-val GL_VIRTUAL_PAGE_SIZE_INDEX_ARB i32 #x91A7)
;; (bind-val GL_NUM_SPARSE_LEVELS_ARB i32 #x91AA)
;; (bind-val GL_NUM_VIRTUAL_PAGE_SIZES_ARB i32 #x91A8)
;; (bind-val GL_VIRTUAL_PAGE_SIZE_X_ARB i32 #x9195)
;; (bind-val GL_VIRTUAL_PAGE_SIZE_Y_ARB i32 #x9196)
;; (bind-val GL_VIRTUAL_PAGE_SIZE_Z_ARB i32 #x9197)
;; (bind-val GL_MAX_SPARSE_TEXTURE_SIZE_ARB i32 #x9198)
;; (bind-val GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB i32 #x9199)
;; (bind-val GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB i32 #x919A)
;; (bind-val GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB i32 #x91A9)

;; ;; void glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit);
;; (bind-lib libGL glTexPageCommitmentARB [void,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei,GLboolean]*)

;; (bind-val GL_COMPRESSED_RGBA_BPTC_UNORM_ARB i32 #x8E8C)
;; (bind-val GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB i32 #x8E8D)
;; (bind-val GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB i32 #x8E8E)
;; (bind-val GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB i32 #x8E8F)

;; (bind-val GL_TEXTURE_CUBE_MAP_ARRAY_ARB i32 #x9009)
;; (bind-val GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB i32 #x900A)
;; (bind-val GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB i32 #x900B)
;; (bind-val GL_SAMPLER_CUBE_MAP_ARRAY_ARB i32 #x900C)
;; (bind-val GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB i32 #x900D)
;; (bind-val GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB i32 #x900E)
;; (bind-val GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB i32 #x900F)

;; (bind-val GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB i32 #x8E5E)
;; (bind-val GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB i32 #x8E5F)
;; (bind-val GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB i32 #x8F9F)

;; (bind-val GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB i32 #x82EC)
;; (bind-val GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB i32 #x82ED)

;; (bind-val GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR i32 #x00000008)

;; (bind-val GL_CONTEXT_ROBUST_ACCESS i32 #x90F3)

;; (bind-val GL_COMPRESSED_RGBA_ASTC_4x4_KHR i32 #x93B0)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_5x4_KHR i32 #x93B1)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_5x5_KHR i32 #x93B2)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_6x5_KHR i32 #x93B3)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_6x6_KHR i32 #x93B4)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_8x5_KHR i32 #x93B5)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_8x6_KHR i32 #x93B6)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_8x8_KHR i32 #x93B7)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_10x5_KHR i32 #x93B8)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_10x6_KHR i32 #x93B9)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_10x8_KHR i32 #x93BA)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_10x10_KHR i32 #x93BB)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_12x10_KHR i32 #x93BC)
;; (bind-val GL_COMPRESSED_RGBA_ASTC_12x12_KHR i32 #x93BD)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR i32 #x93D0)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR i32 #x93D1)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR i32 #x93D2)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR i32 #x93D3)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR i32 #x93D4)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR i32 #x93D5)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR i32 #x93D6)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR i32 #x93D7)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR i32 #x93D8)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR i32 #x93D9)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR i32 #x93DA)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR i32 #x93DB)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR i32 #x93DC)
;; (bind-val GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR i32 #x93DD)

(impc:aot:insert-footer "xtmglcore-directbind")
(define *xtmlib-glcore-directbind-loaded* #t)
(impc:aot:do-and-emit (define *xtmlib-gl-loaded* #t))
