;;; gl-objects.xtm -- xtlang types for dealing with modern OpenGL "objects"

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libGL

;;; Commentary:

;; Helper types for working with Vertex Buffer Objects (VBOs), Vertex
;; Array Objects (VAOs), Framebuffer Objects (FBOs) and OpenGL shaders
;; in general.

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/gl-objects2.xtm" 'quiet))
(sys:load-preload-check 'gl-objects2)
(define *xtmlib-gl-objects2-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/external/gl.xtm")
 (sys:load "libs/external/stb_image.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet)
 (sys:load "libs/external/gl.xtm" 'quiet)
 (sys:load "libs/external/stb_image.xtm" 'quiet))

(impc:aot:insert-header "xtmgl-objects2")
(impc:aot:import-ll "xtmgl-objects2")

;; gl print helper

(bind-func gl_print_error
  (lambda (msg:i8*)
    (let ((err (glGetError)))
      (cond
       ((= err GL_INVALID_ENUM)
        (printf "%s: Invalid Enum\n" msg))
       ((= err GL_INVALID_VALUE)
        (printf "%s: Invalid Value\n" msg))
       ((= err GL_INVALID_OPERATION)
        (printf "%s: Invalid Operation\n" msg))
       ((= err GL_OUT_OF_MEMORY)
        (printf "%s: Out Of Memory\n" msg))
       ((= err GL_INVALID_FRAMEBUFFER_OPERATION)
        (printf "%s: Invalid Framebuffer Operation\n" msg))
       ((= err GL_NO_ERROR)
        1:i32)
       (else
        (printf "%s\n" msg)))
      void)))

(bind-func gl_print_error
  (lambda ()
    (gl_print_error:[void,i8*]* "OpenGL Error")))

(bind-func gl_print_driver_info
  (lambda ()
    (println "--------------------------------------------------")
    (println "Extempore OpenGL driver info")
    (println "--------------------------------------------------")
    (printf "  Vendor:  %s\n" (glGetString GL_VENDOR))
    (printf "Renderer:  %s\n" (glGetString GL_RENDERER))
    (printf " Version:  %s\n" (glGetString GL_VERSION))
    (println "--------------------------------------------------")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Vertex Buffer Object
;;

;; elements * stride should equal (size/4)
;; id, type, size (bytes), data, elements, stride (per element)
(bind-type VBO <GLuint,GLenum,GLsizeiptr,GLvoid*,i64,i64> (printer? . #f))

;; accessors

(bind-func id
  (lambda (vbo:VBO*)
    (if (null? vbo)
        -1
        (tref vbo 0))))

(bind-func type
  (lambda (vbo:VBO*)
    (if (null? vbo)
        -1
        (tref vbo 1))))

(bind-func size
  (lambda (vbo:VBO*)
    (if (null? vbo)
        0
        (tref vbo 2))))

(bind-func data
  (lambda (vbo:VBO*)
    (if (null? vbo)
        null
        (tref vbo 3))))

(bind-func elements
  (lambda (vbo:VBO*)
    (if (null? vbo)
        0
        (tref vbo 4))))

(bind-func stride
  (lambda (vbo:VBO*)
    (if (null? vbo)
        0
        (tref vbo 5))))

;; print and tostring

(bind-func print
  (lambda (vbo:VBO*)
    (if (null? vbo)
        (printf "<VBO: 0x0>")
        (printf "<VBO: id=%d type=%s nbytes=%d data=%p elements=%ld stride=%ld>"
                (tref vbo 0)
                (let ((t (type vbo)))
                  (cond ((= t GL_BYTE) "byte")
                        ((= t GL_SHORT) "short")
                        ((= t GL_INT) "int")
                        ((= t GL_FLOAT) "float")
                        (else "unknown")))
                (tref vbo 2)
                (tref vbo 3)
                (tref vbo 4)
                (tref vbo 5)))
    void))

(bind-func toString
  (lambda (vbo:VBO*)
    (let ((s:i8* (salloc 256)))
      (if (null? vbo)
          (sprintf s "<VBO: 0x0>")
          (sprintf s "<VBO: id=%d type=%s nbytes=%d data=%p elements=%ld stride=%ld>"
                   (tref vbo 0)
                   (let ((t (type vbo)))
                     (cond ((= t GL_BYTE) "byte")
                           ((= t GL_SHORT) "short")
                           ((= t GL_INT) "int")
                           ((= t GL_FLOAT) "float")
                           (else "unknown")))
                   (tref vbo 2)
                   (tref vbo 3)
                   (tref vbo 4)
                   (tref vbo 5)))
      (String s))))

;; constructors

(bind-func VBO
  (lambda (buf:float* buflen:i64 usage:i32 elements:i64 stride:i64)
    (let ((vbo:VBO* (VBO:[VBO*,i32,i32,i64,i8*,i64,i64]* 0 GL_FLOAT (* 4 buflen) (cast buf GLvoid*) elements stride)))
      (glGenBuffers 1 (tref-ptr vbo 0))
      (gl_print_error "Error creating VBO")
      (glBindBuffer GL_ARRAY_BUFFER (id vbo))
      (glBufferData GL_ARRAY_BUFFER (size vbo) (data vbo) usage)
      (gl_print_error "Error setting VBO data")
      (glBindBuffer GL_ARRAY_BUFFER 0)
      ;(printf "Created ") (print vbo) (printf "\n")
      (zone_cleanup (glDeleteBuffers 1 (tref-ptr vbo 0))
                    (gl_print_error "Error deleting VBO"))
      vbo)))

(bind-func VBO
  (lambda (buf:i32* buflen:i64 usage elements:i64 stride:i64)
    (let ((vbo:VBO* (VBO:[VBO*,i32,i32,i64,i8*,i64,i64]* 0 GL_INT (* 4 buflen) (cast buf GLvoid*) elements stride)))
      (glGenBuffers 1 (tref-ptr vbo 0))
      (gl_print_error "Error creating VBO")
      (glBindBuffer GL_ARRAY_BUFFER (id vbo))
      (glBufferData GL_ARRAY_BUFFER (size vbo) (data vbo) usage)
      (gl_print_error "Error setting VBO data")
      (glBindBuffer GL_ARRAY_BUFFER 0)
      ;(printf "Created ") (print vbo) (printf "\n")
      (zone_cleanup (glDeleteBuffers 1 (tref-ptr vbo 0))
                    (gl_print_error "Error deleting VBO"))
      vbo)))

(bind-func VBO
  (lambda (buf:float* buflen elements stride)
    (VBO:[VBO*,float*,i64,i32,i64,i64]* buf buflen GL_STREAM_DRAW elements stride)))

(bind-func VBO
  (lambda (buf:i32* buflen elements stride)
    (VBO:[VBO*,i32*,i64,i32,i64,i64]* buf buflen GL_STREAM_DRAW elements stride)))

(bind-func VBO
  (lambda (buf:float* buflen elements)
    (VBO:[VBO*,float*,i64,i32,i64,i64]* buf buflen GL_STREAM_DRAW elements 0)))

(bind-func VBO
  (lambda (buf:i32* buflen elements)
    (VBO:[VBO*,i32*,i64,i32,i64,i64]* buf buflen GL_STREAM_DRAW elements 0)))

(bind-func VBO
  (lambda (buf:float* buflen)
    (VBO:[VBO*,float*,i64,i32,i64,i64]* buf buflen GL_STREAM_DRAW buflen 0)))

(bind-func VBO
  (lambda (buf:i32* buflen)
    (VBO:[VBO*,i32*,i64,i32,i64,i64]* buf buflen GL_STREAM_DRAW buflen 0)))


;; methods

(bind-func update
  "update the full buffer"
  (lambda (vbo:VBO*)
    (glBindBuffer GL_ARRAY_BUFFER (id vbo))
    (gl_print_error "Error binding VBO")
    (glBufferSubData GL_ARRAY_BUFFER 0 (size vbo) (data vbo))
    (gl_print_error "Error updating VBO subdata")
    (glBindBuffer GL_ARRAY_BUFFER 0)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Vertex Array Object
;;

(bind-type VAO <GLuint,|16,i1|,|16,VBO*|> (printer? . #f))
(bind-val VAO_NULL_ATTRIBS |16,i1|* (array_ref #f #f #f #f
                                             #f #f #f #f
                                             #f #f #f #f
                                             #f #f #f #f
                                             ))
(bind-val VAO_NULL_VBOS |16,VBO*|* (array_ref (cast null VBO*) (cast null VBO*) (cast null VBO*) (cast null VBO*)
                                              (cast null VBO*) (cast null VBO*) (cast null VBO*) (cast null VBO*)
                                              (cast null VBO*) (cast null VBO*) (cast null VBO*) (cast null VBO*)
                                              (cast null VBO*) (cast null VBO*) (cast null VBO*) (cast null VBO*)
                                              ))

(bind-func id
  (lambda (vao:VAO*)
    (if (null? vao)
        -1
        (tref vao 0))))

(bind-func attribs
  (lambda (vao:VAO*)
    (if (null? vao)
        VAO_NULL_ATTRIBS
        (tref-ptr vao 1))))

(bind-func buffers
  (lambda (vao:VAO*)
    (if (null? vao)
        VAO_NULL_VBOS
        (tref-ptr vao 2))))

(bind-func get_vbo
  (lambda (vao:VAO* idx)
    (if (< idx 16)
        (aref (tref-ptr vao 2) idx)
        (cast null VBO*))))

(bind-func attrib_set_p
  (lambda (vao:VAO* index)
    (if (< index 16)
        (aref (tref-ptr vao 1) index)
        #f)))

(bind-func VAO
  (lambda ()
    (let ((vao:VAO* (alloc))
          (as (attribs vao))
          (bs (buffers vao))
          (id:GLuint* (salloc))
          (i 0))
      (glGenVertexArrays 1 id) ;;(tref-ptr vao 0))
      (tset! vao 0 (pref id 0))
      (gl_print_error "Error creating VAO")
      (dotimes (i 16)
        (aset! as i #f)
        (aset! bs i null))
      ;(printf "Created ") (print vao) (printf "\n")
      (zone_cleanup (glDeleteVertexArrays 1 (tref-ptr vao 0))
                    (gl_print_error "Error deleting VAO"))
      vao)))


(bind-func print
  (lambda (vao:VAO*)
    (if (null? vao)
        (printf "<VAO: 0x0>")
        (printf "<VAO: id %d>" (tref vao 0)))
    void))

(bind-func toString
  (lambda (vao:VAO*)
    (let ((s:i8* (salloc 256)))
      (if (null? vao)
          (sprintf s "<VAO: 0x0>")
          (sprintf s "<VAO: id %d>" (tref vao 0)))
      (String s))))

(bind-func unset_attribute
  (lambda (vao index)
    (glBindVertexArray (id vao))
    (aset! (attribs vao) index #f)
    (aset! (buffers vao) index null)
    (glDisableVertexAttribArray index)
    (glVertexAttribDivisor index 0)
    (glBindVertexArray 0)
    void))

;; where size is number of components for vertex
(bind-func set_attribute
  (lambda (vao:VAO* vbo:VBO* type index size stride:GLsizei offset instance_attr:i1)
    ;; (if (not (aref (attribs vao) index))
    (begin
      (glBindVertexArray (id vao))
      (gl_print_error "Error binding VAO")
      (glBindBuffer GL_ARRAY_BUFFER (id vbo))
;      (println 'vbo vbo)
      (gl_print_error "Error binding VBO")
      (let ((component_size 4)) ;; four for GL_FLOAT and GL_INT
        (if (= size 16) ;; i.e. if a mat4
            (begin ;; this is a pain but matrix is simply 4 * vec4
              (glEnableVertexAttribArray (+ index 0)) ;; i dn't know if i need these enables
              (glVertexAttribPointer (+ index 0) 4 type GL_FALSE (* stride component_size)
                                     (pref-ptr (cast null GLvoid*) (* component_size (+ offset 0))))
              (glEnableVertexAttribArray (+ index 1))
              (glVertexAttribPointer (+ index 1) 4 type GL_FALSE (* stride component_size)
                                     (pref-ptr (cast null GLvoid*) (* component_size (+ offset 4))))
              (glEnableVertexAttribArray (+ index 2))
              (glVertexAttribPointer (+ index 2) 4 type GL_FALSE (* stride component_size)
                                     (pref-ptr (cast null GLvoid*) (* component_size (+ offset 8))))
              (glEnableVertexAttribArray (+ index 3))
              (glVertexAttribPointer (+ index 3) 4 type GL_FALSE (* stride component_size)
                                     (pref-ptr (cast null GLvoid*) (* component_size (+ offset 12)))))
            (begin
              (glEnableVertexAttribArray index)
              (glVertexAttribPointer index
                                     size
                                     type ;;(type vbo)
                                     GL_FALSE
                                     (* component_size stride)
                                     (pref-ptr (cast null GLvoid*) (* component_size offset))))))
      (gl_print_error "Error binding VAO attribute")
      (if (= size 16)
          (begin
            (aset! (attribs vao) (+ index 0) #t)
            (aset! (attribs vao) (+ index 1) #t)
            (aset! (attribs vao) (+ index 2) #t)
            (aset! (attribs vao) (+ index 3) #t)))
      (if (<> size 16)
          (aset! (attribs vao) index #t))
      (aset! (buffers vao) index vbo)
      (glBindBuffer GL_ARRAY_BUFFER 0)
      (if (and instance_attr (<> size 16))
          (begin (glVertexAttribDivisor index 1)
                 (gl_print_error "Error setting VAO attribute divisor")))
      (if (and instance_attr (= size 16))
          (begin (glVertexAttribDivisor (+ index 0) 1)
                 (glVertexAttribDivisor (+ index 1) 1)
                 (glVertexAttribDivisor (+ index 2) 1)
                 (glVertexAttribDivisor (+ index 3) 1)
                 (gl_print_error "Error setting VAO attribute divisor")))
      (glBindVertexArray 0))
    void))

(bind-func set_attribute
  (lambda (vao vbo type index size stride:i64 offset:i32)
    (set_attribute:[void,VAO*,VBO*,i32,i32,i32,GLsizei,i32,i1]* vao vbo type index size (i64toi32 stride) offset #f)))

(bind-func set_attribute
  (lambda (vao vbo index size stride:i32 offset:i32)
    (set_attribute:[void,VAO*,VBO*,i32,i32,i32,GLsizei,i32,i1]* vao vbo (type vbo) index size stride offset #f)))

(bind-func set_attribute
  (lambda (vao vbo index size stride:i32 offset:i32 instance_attr:i1)
    (set_attribute:[void,VAO*,VBO*,i32,i32,i32,GLsizei,i32,i1]* vao vbo (type vbo) index size stride offset instance_attr)))

(bind-func set_attribute
  (lambda (vao vbo index size)
    (set_attribute:[void,VAO*,VBO*,i32,i32,i32,GLsizei,i32,i1]* vao vbo (type vbo) index size 0 0 #f)))

(bind-func set_attribute
  (lambda (vao vbo index size instance_attr)
    (set_attribute:[void,VAO*,VBO*,i32,i32,i32,GLsizei,i32,i1]* vao vbo (type vbo) index size 0 0 instance_attr)))

(bind-func draw
  (let ((i 0))
    (lambda (vao:VAO* draw_mode:i32 first_element:i32 count:i32 instances:i32)
      ;; (println 'draw: vao draw_mode first_element count)
      (glBindVertexArray (id vao))
      (gl_print_error "Error binding vertex array")
      (dotimes (i 16)
        (if (aref (attribs vao) i)
            (begin ;; (println 'enable-attrib-list i)
              (glEnableVertexAttribArray i))))
      (gl_print_error "Error enablling attrib arrays in VAO!")
      (if (> instances 0)
          (glDrawArraysInstanced draw_mode first_element count instances)
          (glDrawArrays draw_mode first_element count))
      (gl_print_error "Error drawing VAO!")
      (dotimes (i 16)
        (if (aref (attribs vao) i)
            (begin ;; (println 'disable-attrib-list i)
                   (glDisableVertexAttribArray i))))
      (gl_print_error "Error disabling attrib arrays in VAO!")
      ;; (gl_print_error "Error drawing vertex array")
      ;; (println "done drawing vao")
      (glBindVertexArray 0))))

(bind-func draw
  (lambda (vao:VAO* draw_mode:i32 first_element:i32 count:i32)
    (draw:[void,VAO*,i32,i32,i32,i32]* vao draw_mode first_element count 0)))

;; helper functions for drawing a screen-space quad

;; (bind-func create_ss_quad
;;   (lambda ()
;;     (let ((ss_quad_pos_st:float* (salloc 16)))
;;       (pfill! ss_quad_pos_st
;;               ;; pos     tex_coord
;;               -1. -1.    0. 0.
;;               -1.  1.    0. 1.
;;               1. -1.    1. 0.
;;               1.  1.    1. 1.
;;               )
;;       (let ((vbo (VBO ss_quad_pos_st 16))
;;             (vao (VAO)))
;;         (bind_attribute vao vbo 0 2 4 0) ;; position
;;         (bind_attribute vao vbo 1 2 4 2) ;; tex_coord
;;         vao))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; GL Texture
;;

(bind-type Texture <GLuint,i32,i32,i32,i8*> (printer? . #f))

;; accesstor

(bind-func id
  (lambda (tex:Texture*)
    (if (null? tex)
        -1
        (tref tex 0))))

(bind-func type
  (lambda (tex:Texture*)
    (if (null? tex)
        -1
        (tref tex 1))))

(bind-func type
  (lambda (tex:Texture* value:i32)
    (if (null? tex)
        -1
        (tset! tex 1 value))))

(bind-func width
  (lambda (tex:Texture*)
    (if (null? tex)
        0
        (tref tex 2))))

(bind-func width
  (lambda (tex:Texture* value)
    (if (null? tex)
        0
        (tset! tex 2 value))))

(bind-func height
  (lambda (tex:Texture*)
    (if (null? tex)
        0
        (tref tex 3))))

(bind-func height
  (lambda (tex:Texture* value)
    (if (null? tex)
        0
        (tset! tex 3 value))))

(bind-func data
  (lambda (tex:Texture*)
    (if (null? tex)
        null
        (tref tex 4))))

;; print tostring

(bind-func print
  (lambda (tex:Texture*)
    (if (null? tex)
        (printf "<TEX: 0x0>")
        (printf "<TEX: id:%d type:%d width:%d height:%d>" (id tex) (type tex) (width tex) (height tex)))
    void))

(bind-func toString
  (lambda (tex:Texture*)
    (let ((s:i8* (salloc 256)))
      (if (null? tex)
          (printf "<TEX: 0x0>")
          (printf "<TEX: id:%d type:%d width:%d height:%d>" (id tex) (type tex) (width tex) (height tex)))
      (String s))))

;; helper

(bind-func free_image
  (lambda (tex:Texture*)
    (if (not (null? (tref tex 4)))
        (free (tref tex 4)))
    (tset! tex 1 0)
    (tset! tex 2 0)
    (tset! tex 3 0)
    void))

;; helpers

(bind-func load_data
  (lambda (tex:Texture* flipped:i32 filename:String*)
    ;; (println "LOAD:" filename)
    ;; seems to need to be set
    (stbi_set_flip_vertically_on_load flipped)
    (let ((width_ptr:i32* (tref-ptr tex 2))
          (height_ptr:i32* (tref-ptr tex 3))
          (comp_ptr:i32* (salloc))
          (data (stbi_load (cstring filename) width_ptr height_ptr comp_ptr 4)))
      (cond ((= (pref comp_ptr 0) 4)
             (tset! tex 1 GL_RGBA))
            ((= (pref comp_ptr 0) 3)
             (tset! tex 1 GL_RGBA)) ;; rgb should be converted to RGBA
            ((= (pref comp_ptr 0) 1)
             (tset! tex 1 GL_DEPTH_COMPONENT))
            (else (println "Unknown componenet depth: " (pref comp_ptr 0)) 1:i32))
      (if (null? data)
          (begin
            (println (stbi_failure_reason)) 1)
          (begin
            (tset! tex 4 data) 1))
      void)))


(bind-func load_cube_data
  (lambda (tex:Texture* flipped:i32 front:String* back:String* top:String* bottom:String* left:String* right:String*)
    ;; seems to need to be set
    (stbi_set_flip_vertically_on_load flipped)
    (let ((width_ptr:i32* (tref-ptr tex 2))
          (height_ptr:i32* (tref-ptr tex 3))
          (comp_ptr:i32* (salloc))
          (i:i32 0)
          (wp:i32* (salloc 6))
          (hp:i32* (salloc 6))
          (cp:i32* (salloc 6))
          (wpt:i32 0)
          (hpt:i32 0)
          (cpt:i32 0)
          (front_data (stbi_load (cstring front) (pref-ptr wp 0) (pref-ptr hp 0) (pref-ptr cp 0) 4))
          (back_data (stbi_load (cstring back) (pref-ptr wp 1) (pref-ptr hp 1) (pref-ptr cp 1) 4))
          (top_data (stbi_load (cstring top) (pref-ptr wp 2) (pref-ptr hp 2) (pref-ptr cp 2) 4))
          (bottom_data (stbi_load (cstring bottom) (pref-ptr wp 3) (pref-ptr hp 3) (pref-ptr cp 3) 4))
          (left_data (stbi_load (cstring left) (pref-ptr wp 4) (pref-ptr hp 4) (pref-ptr cp 4) 4))
          (right_data (stbi_load (cstring right) (pref-ptr wp 5) (pref-ptr hp 5) (pref-ptr cp 5) 4))
          (w:i32 (pref wp 0))
          (h:i32 (pref hp 0))
          (c:i32 (pref cp 0))
          (whc:i64 (convert (* w h 4))) ;; always 4 channels
          (data:i8* (alloc (* whc 6)))) ;; always allocate 4 channels
      ;; (println "CUBE LOAD: width:" w "height:" h "channels:" c)
      (dotimes (i 6)
        (set! wpt (+ wpt (pref wp i)))
        (set! hpt (+ hpt (pref hp i)))
        (set! cpt (+ cpt (pref cp i))))
      (if (<> (/ wpt 6) w)
          (begin (println "Bad cube map!  All 6 images must have the same width!" w)
                 (set! front_data null)))
      (if (<> (/ hpt 6) h)
          (begin (println "Bad cube map!  All 6 images must have the same height!" h)
                 (set! front_data null)))
      (if (<> (/ cpt 6) c)
          (begin (println "Bad cube map!  All 6 images must have the same number of components" c)
                 (set! front_data null)))
      (pset! width_ptr 0 w)
      (pset! height_ptr 0 h)
      (pset! comp_ptr 0 4) ;; we actually forced (stbi_load ... 4) to 4 channels
      (tset! tex 1 GL_RGBA) ;; 4 componenets
      (if (or (null? front_data)
              (null? back_data)
              (null? top_data)
              (null? bottom_data)
              (null? left_data)
              (null? right_data))
          (begin
            (println "failed to load some images" (stbi_failure_reason))
            1)
          (begin
            ;; front
            (memcpy (pref-ptr data (* whc 0)) front_data whc)
            ;; back
            (memcpy (pref-ptr data (* whc 1)) back_data whc)
            ;; top
            (memcpy (pref-ptr data (* whc 2)) top_data whc)
            ;; bottom
            (memcpy (pref-ptr data (* whc 3)) bottom_data whc)
            ;; left
            (memcpy (pref-ptr data (* whc 4)) left_data whc)
            ;; right
            (memcpy (pref-ptr data (* whc 5)) right_data whc)
            ;; back
            (tset! tex 4 data)
            1))
      void)))


;; comp is number of componenets (RGB=3, RGBA=4, depth=1 etc.)
(bind-func create_data
  (lambda (tex:Texture* width:i32 height:i32 comp:i32)
    ;; seems to need to be set
    (let ((data:float* (alloc (* width height comp))))
      (cond ((= comp 4)
             (tset! tex 1 GL_RGBA))
            ((= comp 3)
             (tset! tex 1 GL_RGB))
            ((= comp 1)
             (tset! tex 1 GL_DEPTH_COMPONENT))
            (else (println "Unknown number of components: " comp) 1:i32))
      (tset! tex 2 width)
      (tset! tex 3 height)
      (tset! tex 4 (cast data i8*))
      void)))

(bind-func write
  (lambda (tex:Texture* filename:String* flip:i1)
    (let ((comp (if (= (type tex) GL_RGB) 3 4)))
      (if flip (stbi_flip_vertically (width tex) (height tex) comp (data tex)))
      (stbi_write_png (cstring filename) (width tex) (height tex)
                      comp
                      (data tex) (* (width tex) comp 1))
      void)))



;; texture from existing data (no copy) with type
;; (bind-func Texture
;;   (lambda (width:i32 height:i32 comp:i32 type:i32 data:i8*)
;;     (let ((tex (Texture:[Texture*,i32]* type)))
;;       (tset! tex 2 width)
;;       (tset! tex 3 height)
;;       (tset! tex 4 (cast data i8*))
;;       tex)))

;; methods

(bind-func update_cube
  (lambda (tex:Texture*)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_CUBE_MAP (id tex))
    (gl_print_error "error binding texture cube data")
    ;; front
    (glTexImage2D GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex)        ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (pref-ptr (data tex) (* (width tex) (height tex) 4 0)))
    ;; back
    (glTexImage2D GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex)        ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (pref-ptr (data tex) (* (width tex) (height tex) 4 1)))
    ;; top
    (glTexImage2D GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex)        ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (pref-ptr (data tex) (* (width tex) (height tex) 4 2)))
    ;; bottom
    (glTexImage2D GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex)        ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (pref-ptr (data tex) (* (width tex) (height tex) 4 3)))
    ;; left
    (glTexImage2D GL_TEXTURE_CUBE_MAP_POSITIVE_X 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex)        ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (pref-ptr (data tex) (* (width tex) (height tex) 4 4)))
    ;; right
    (glTexImage2D GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex)        ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (pref-ptr (data tex) (* (width tex) (height tex) 4 5)))
    (glBindTexture GL_TEXTURE_CUBE_MAP 0)
    (gl_print_error "could not update cube!")
    void))

(bind-func bind_cube
  (lambda (tex:Texture* active:i32)
    ;; (println "start bind cube")
    (glActiveTexture (+ GL_TEXTURE0 active))
    (glBindTexture GL_TEXTURE_CUBE_MAP (id tex))
    (gl_print_error "error binding texture cube data")
    (cond ((or (= (type tex) GL_RGBA)
               (= (type tex) GL_BGRA))
           (begin
             ;; set some parameters
             (glTexParameteri GL_TEXTURE_CUBE_MAP GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
             (glTexParameteri GL_TEXTURE_CUBE_MAP GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
             (glTexParameteri GL_TEXTURE_CUBE_MAP GL_TEXTURE_WRAP_R GL_CLAMP_TO_EDGE)
             (glTexParameteri GL_TEXTURE_CUBE_MAP GL_TEXTURE_MIN_FILTER GL_LINEAR)
             (glTexParameteri GL_TEXTURE_CUBE_MAP GL_TEXTURE_MAG_FILTER GL_LINEAR)
             1))
          (else;; do nothing
           1))
    (gl_print_error "error setting tex cube parameters")
    (id tex)))

(bind-func update
  (lambda (tex:Texture*)
    (glActiveTexture GL_TEXTURE0)
    (glBindTexture GL_TEXTURE_2D (id tex))
    (glTexImage2D GL_TEXTURE_2D 0
                  (if (= (type tex) GL_BGRA) GL_RGBA (type tex)) ;; this is internal type
                  (width tex)
                  (height tex)
                  0
                  (type tex) ;; this is external type (i.e. conversion from external to internal required)
                  GL_UNSIGNED_BYTE
                  (data tex))
    (glBindTexture GL_TEXTURE_2D 0)
    (gl_print_error "couldn't update texture")
    void))

(bind-func bind
  (lambda (tex:Texture* unit:i32)
    (glActiveTexture (+ GL_TEXTURE0 unit))
    (glBindTexture GL_TEXTURE_2D (id tex))
    (cond ((or (= (type tex) GL_RGBA)
               (= (type tex) GL_RGB)
               (= (type tex) GL_BGR)
               (= (type tex) GL_BGRA))
           (begin
             ;; set some parameters
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
             1))
          ((= (type tex) GL_DEPTH_COMPONENT)
           (begin
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
             (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
             1))
          (else;; do nothing
           1))
    (gl_print_error "error setting tex parameters")
    (id tex)))

(bind-func bind
  (lambda (tex:Texture*)
    (bind:[i32,Texture*,i32]* tex 0)))

(bind-func unbind
  (lambda (tex:Texture* unit:i32)
    (glActiveTexture (+ GL_TEXTURE0 unit))
    (glBindTexture GL_TEXTURE_2D 0)
    (gl_print_error "couldn't unbind texture")
    void))

(bind-func unbind
  (lambda (tex:Texture*)
    (unbind:[void,Texture*,i32]* tex 0)))

(bind-func unbind_cube
  (lambda (tex:Texture* active:i32)
    (glActiveTexture (+ GL_TEXTURE0 active))
    (glBindTexture GL_TEXTURE_CUBE_MAP 0)
    (gl_print_error "couldn't unbind texture")
    void))

(bind-func unbind_cube
  (lambda (tex:Texture*)
    (unbind_cube:[void,Texture*,i32]* tex 0)))


;;; constructors


(bind-func Texture
  (lambda (type)
    (let ((tex (Texture:[Texture*,i32,i32,i32,i32,i8*]* 0 type 0 0 null)))
      (glGenTextures 1 (tref-ptr tex 0))
      (gl_print_error "Error creating Texture")
      (zone_cleanup (glDeleteTextures 1 (tref-ptr tex 0))
                    (gl_print_error "Error deleting Texture")
                    (free_image tex))
      tex)))

(bind-func Texture
  (lambda ()
    (Texture:[Texture*,i32]* 0)))

;; create data
(bind-func Texture
  (lambda (width:i32 height:i32 comp:i32)
    (let ((tex (cond ((= comp 1)
                      (Texture:[Texture*,i32]* GL_DEPTH_COMPONENT))
                     ((= comp 3)
                      (Texture:[Texture*,i32]* GL_RGB))
                     (else
                      (Texture:[Texture*,i32]* GL_RGBA)))))
      (create_data tex width height comp)
      (update tex)
      tex)))

;; load data from file
(bind-func Texture
  (lambda (filename flipped)
    (let ((tex (Texture:[Texture*]*)))
      (load_data tex flipped filename)
      (update tex)
      tex)))

(bind-func Texture
  (lambda (filename)
    (let ((tex (Texture:[Texture*,String*,i32]* filename 1)))
      ;; (update tex)
      tex)))

;; texture from existing data (no copy)
(bind-func Texture
  (lambda (width:i32 height:i32 comp:i32 data:i8*)
    (let ((tex (cond ((= comp 1)
                      (Texture:[Texture*,i32]* GL_DEPTH_COMPONENT))
                     ((= comp 3)
                      (Texture:[Texture*,i32]* GL_RGB))
                     (else
                      (Texture:[Texture*,i32]* GL_RGBA)))))
      (tset! tex 2 width)
      (tset! tex 3 height)
      (tset! tex 4 (cast data i8*))
      (update tex)
      tex)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Shader
;;

;;                <id    ,type  >
(bind-type Shader <GLuint,GLenum>  (printer? . #f))

;; accessors

(bind-func id
  (lambda (shader:Shader*)
    (tref shader 0)))

(bind-func type
  (lambda (shader:Shader*)
    (tref shader 1)))

;; print

(bind-func print ;Shader_print_info_log
  (let ((max_log_length 4096)
        (logbuf:i8* (zalloc max_log_length)))
    (lambda (shader:Shader*)
      (if (null? shader)
          (begin (println "NULL SHADER!") void)
          (let ((len_ptr (salloc 1 i32)))
            (glGetShaderInfoLog (id shader)
                                max_log_length
                                len_ptr
                                logbuf)
            (printf "%sShader: %s\n"
                    (cond ((= (type shader) GL_VERTEX_SHADER)
                           "Vert")
                          ((= (type shader) GL_FRAGMENT_SHADER)
                           "Frag")
                          ((= (type shader) GL_GEOMETRY_SHADER)
                           "Geom")
                          (else ""))
                    (if (= (pref len_ptr 0) 0)
                        "OK"
                        logbuf))
            (if (= (pref len_ptr 0) 0) 0 1)
            void)))))

;; constructors

(bind-func Shader
  "create (and compile) an OpenGL shader"
  (lambda (source:String* type:GLenum)
    (if (not (or (= type GL_VERTEX_SHADER)
                 (= type GL_FRAGMENT_SHADER)
                 (= type GL_GEOMETRY_SHADER)))
        (begin (println "Error: shader type must be one of GL_VERTEX_SHADER, GL_FRAGMENT_SHADER or GL_GEOMETRY_SHADER")
               null)
        (let ((shader_id (glCreateShader type))
              (source_ptr:i8** (salloc))
              (shader (Shader:[Shader*,i32,i32]* shader_id type)))
          (pset! source_ptr 0 (cstring source))
          (glShaderSource shader_id 1 source_ptr (cast null i32*))
          (glCompileShader shader_id)
          (println 'Shader: shader)
          (gl_print_error "Error compiling shader")
          shader))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Shader Program
;;

(bind-type ShaderProgram <GLuint,Shader*,Shader*,Shader*,String*>  (printer? . #f))

;; accessors

(bind-func id
  (lambda (program:ShaderProgram*)
    (if (null? program)
        -1
        (tref program 0))))

(bind-func name
  (lambda (program:ShaderProgram*)
    (if (null? program)
        (Str "NULL PROGRAM!")
        (tref program 4))))

;; print tostring

(bind-func print
  (let ((max_log_length 4096)
        (logbuf:i8* (zalloc max_log_length)))
    (lambda (program:ShaderProgram*)
      (if (null? program)
          (begin (println "NULL SHADER PROGRAM!") void)
          (let ((len_ptr (salloc 1 i32)))
            (glGetProgramInfoLog (id program)
                                 max_log_length
                                 len_ptr
                                 logbuf)
            (println "ShaderProgram: " (tref program 4))
            (printf "%s\n"
                    (if (= (pref len_ptr 0) 0)
                        "OK"
                        logbuf))
            (if (= (pref len_ptr 0) 0) 0 1)
            void)))))

;; constructors

(bind-func ShaderProgram
  "compile and link shader program (vert and frag shader)"
  (lambda (name:String* vert:Shader* frag:Shader*)
    (if (not (and (= (type vert) GL_VERTEX_SHADER)
                  (= (type frag) GL_FRAGMENT_SHADER)))
        (begin (println "Error: input shader types must be vert and frag respectively.")
               null)
        (let ((program (ShaderProgram:[ShaderProgram*,i32,Shader*,Shader*,Shader*,String*]* (glCreateProgram) vert frag null name)))
          (glAttachShader (id program) (id vert))
          (glAttachShader (id program) (id frag))
          (glLinkProgram (id program))
          (gl_print_error "Error making shader program!")
          (println 'ShaderProgram: program)
          program))))

(bind-func ShaderProgram
  "compile and link shader program (vert and frag shader)"
  (lambda (name:String* vert:Shader* geom:Shader* frag:Shader*)
    (if (not (and (= (type vert) GL_VERTEX_SHADER)
                  (= (type geom) GL_GEOMETRY_SHADER)
                  (= (type frag) GL_FRAGMENT_SHADER)))
        (begin (println "Error: input shader types must be vert, geom and frag respectively.")
               null)
        (let ((program (ShaderProgram:[ShaderProgram*,i32,Shader*,Shader*,Shader*,String*]* (glCreateProgram) vert frag geom name)))
          (glAttachShader (id program) (id vert))
          (glAttachShader (id program) (id geom))
          (glAttachShader (id program) (id frag))
          (glLinkProgram (id program))
          (gl_print_error "Error making shader program!")
          (println 'ShaderProgram: program)
          program))))

;; these ones are handy when you want to create a new shader program
;; directly from the sources
(bind-func ShaderProgram
  "compile and link shader program (vert and frag shader source)"
  (lambda (name:String* vsource:String* fsource:String*)
    (let ((vert (Shader vsource GL_VERTEX_SHADER))
          (frag (Shader fsource GL_FRAGMENT_SHADER)))
      (gl_print_error "Error compiling Shaders")
      (if (or (null? vert) (null? frag))
          null
          (ShaderProgram:[ShaderProgram*,String*,Shader*,Shader*]* name vert frag)))))

(bind-func ShaderProgram
  "compile and link shader program (vert and frag shader source)"
  (lambda (name:String* vsource:String* gsource:String* fsource:String*)
    (let ((vert (Shader vsource GL_VERTEX_SHADER))
          (geom (Shader gsource GL_GEOMETRY_SHADER))
          (frag (Shader fsource GL_FRAGMENT_SHADER)))
      (gl_print_error "Error compiling Shaders")
      (if (or (null? vert) (null? geom) (null? frag))
          null
          (ShaderProgram:[ShaderProgram*,String*,Shader*,Shader*,Shader*]* name vert geom frag)))))

;; methods

(bind-func start
  (lambda (prog:ShaderProgram*)
    (glUseProgram 0)
    (glUseProgram (id prog))))

(bind-func stop
  (lambda (prog:ShaderProgram*)
    (glUseProgram 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Framebuffer Object
;;


;; fbo id          0
;; texture         1
;; depth           2
;; width           3
;; height          4
(bind-type FBO <GLuint,Texture*,Texture*,GLsizei,GLsizei> (printer? . #f))

;; accessor functions

(bind-func id
  (lambda (fbo:FBO*)
    (tref fbo 0)))

(bind-func colour_tex
  (lambda (fbo:FBO*)
    (tref fbo 1)))

(bind-func depth_tex
  (lambda (fbo:FBO*)
    (tref fbo 2)))

(bind-func width
  (lambda (fbo:FBO*)
    (tref fbo 3)))

(bind-func height
  (lambda (fbo:FBO*)
    (tref fbo 4)))

;; print tostring

(bind-func print
  (lambda (fbo:FBO*)
    (if (null? fbo)
        (begin (printf "<FBO: 0x0>") void)
        (printout "<FBO: id="
                  (id fbo)
                  " color_tex="
                  (colour_tex fbo)
                  " depth_tex="
                  (depth_tex fbo)
                  " width="
                  (width fbo)
                  " height="
                  (height fbo)
                  ">\n"))
    void))


(bind-func toString
  (lambda (fbo:FBO*)
    (let ((str:i8* (zalloc 256)))
      (if (null? fbo)
          (sprintf str "<FBO: 0x0>")
          (sprintf str "<FBO: id=%d color_tex=%d depth_tex=%d width=%d height=%d>"
                   (id fbo)
                   (colour_tex fbo)
                   (depth_tex fbo)
                   (width fbo)
                   (height fbo)))
      (String str))))

;; constructors

(bind-func FBO
  (lambda ()
    (let ((fbo (FBO:[FBO*,i32,Texture*,Texture*,i32,i32]* 0 null null 0 0)))
      (glGenFramebuffers 1 (tref-ptr fbo 0))
      (gl_print_error "Error creating FBO")
      fbo)))

(bind-func FBO
  (lambda (colour:Texture*)
    (let ((fbo (FBO:[FBO*,i32,Texture*,Texture*,i32,i32]* 0 colour null (width colour) (height colour))))
      (glGenFramebuffers 1 (tref-ptr fbo 0))
      (gl_print_error "Error creating FBO")
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo 0))
      (bind colour)
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D (id colour) 0)
      (unbind colour)
      (update colour)
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      fbo)))

(bind-func FBO
  (lambda (colour:Texture* depth:Texture*)
    (let ((fbo (FBO:[FBO*,i32,Texture*,Texture*,i32,i32]* 0 colour depth (width colour) (height colour))))
      (glGenFramebuffers 1 (tref-ptr fbo 0))
      (gl_print_error "Error creating FBO")
      (glBindFramebuffer GL_FRAMEBUFFER (tref fbo 0))
      (bind colour)
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D (id colour) 0)
      (unbind colour)
      (update colour)
      (bind depth)
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_2D (id depth) 0)
      (unbind depth)
      (update depth)
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      fbo)))

(bind-func FBO
  (lambda (width height)
    (FBO:[FBO*,Texture*]*
     (Texture:[Texture*,i32,i32,i32]* width height 4))))

(bind-func FBO
  (lambda (width height depth:i1)
    (FBO:[FBO*,Texture*,Texture*]*
     (Texture:[Texture*,i32,i32,i32]* width height 4)
     (Texture:[Texture*,i32,i32,i32]* width height 1))))

;; methods

(bind-func bind
  (lambda (fbo:FBO*)
    (glBindFramebuffer GL_FRAMEBUFFER (id fbo))
    (id fbo)))

(bind-func unbind
  (lambda (fbo:FBO*)
    (glBindFramebuffer GL_FRAMEBUFFER 0)
    (id fbo)))

;; get colour tex data back from the GPU and into the texture data structure
(bind-func pull_colour
  (lambda (fbo:FBO*)
    (let ((tex (colour_tex fbo)))
      (glBindFramebuffer GL_FRAMEBUFFER (id fbo))
      (glReadPixels 0 0 (width tex) (height tex) GL_RGBA GL_UNSIGNED_BYTE (data tex))
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      (id fbo))))

(bind-func write_colour
  (lambda (fbo:FBO* filename:String*)
    (pull_colour fbo)
    (write (colour_tex fbo) filename #t)
    void))


(impc:aot:insert-footer "xtmgl-objects2")
(define *xtmlib-gl-objects2-loaded* #t)
