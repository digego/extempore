;;; hid.xtm

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libhid

;;; Commentary:

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/hid.xtm" 'quiet))
(sys:load-preload-check 'libhid)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmhid")

;; lib assimp
(bind-dylib libhid
  (cond ((string=? (sys:platform) "OSX")
         "libhid.dylib")
        ((string=? (sys:platform) "Linux")
         "libhid.so")
        ((string=? (sys:platform) "Windows")
         "libhid.dll")))

(impc:aot:import-ll "xtmhid")

(define *xtmlib-hid-loaded* #t)

(bind-type HIDNode <i16,i16>)
(bind-type HIDPath <i8,|10,HIDNode|>)

;; typedef struct
;; {
;;   long    Value;            /*!< HID Object Value                             */
;;   HIDPath Path;             /*!< HID Path                                     */

;;   uchar   ReportID;         /*!< Report ID, (from incoming report) ???        */
;;   uchar   Offset;           /*!< Offset of data in report                     */
;;   uchar   Size;             /*!< Size of data in bit                          */

;;   uchar   Type;             /*!< Type : FEATURE / INPUT / OUTPUT              */
;;   uchar   Attribute;        /*!< Report field attribute                       */

;;   ulong   Unit;             /*!< HID Unit                                     */
;;   char    UnitExp;          /*!< Unit exponent                                */

;;   long    LogMin;           /*!< Logical Min                                  */
;;   long    LogMax;           /*!< Logical Max                                  */
;;   long    PhyMin;           /*!< Physical Min                                 */
;;   long    PhyMax;           /*!< Physical Max                                 */
;; } HIDData;
(bind-type HIDData <i64,HIDPath,i8,i8,i8,i8,i8,i64,i8,i64,i64,i64,i64>)

;; typedef struct
;; {
;;   uchar   ReportDesc[REPORT_DSC_SIZE];  /*!< Store Report Descriptor          */
;;   ushort  ReportDescSize;               /*!< Size of Report Descriptor        */
;;   ushort  Pos;                          /*!< Store current pos in descriptor  */
;;   uchar   Item;                         /*!< Store current Item               */
;;   long    Value;                        /*!< Store current Value              */

;;   HIDData Data;                         /*!< Store current environment        */

;;   uchar   OffsetTab[MAX_REPORT][3];     /*!< Store ID, type & offset of report*/
;;   uchar   ReportCount;                  /*!< Store Report Count               */
;;   uchar   Count;                        /*!< Store local report count         */

;;   ushort  UPage;                        /*!< Global UPage                     */
;;   HIDNode UsageTab[USAGE_TAB_SIZE];     /*!< Usage stack                      */
;;   uchar   UsageSize;                    /*!< Design number of usage used      */

;;   uchar   nObject;                      /*!< Count objects in Report Descriptor */
;;   uchar   nReport;                      /*!< Count reports in Report Descriptor */
;; } HIDParser;
(bind-type HIDParser <|6144,i8|,i16,i16,i8,i64,HIDData,|300,|3,i8||,i8,i8,i16,|50,HIDNode|,i8,i8,i8>)

(bind-lib libhid HIDParse [i32,HIDParser*,HIDData*]*)
(bind-lib libhid ResetParser [void,HIDParser*]*)
(bind-lib libhid FindObject [i32,HIDParser*,HIDData*]*)
(bind-lib libhid GetValue [void,i8,HIDData*]*)
(bind-lib libhid SetValue [void,HIDData*,i8*]*)
(bind-lib libhid GetReportOffset [i8*,HIDParser*,i8,i8]*)

;; typedef enum hid_return_t {
;;   HID_RET_SUCCESS = 0,
;;   HID_RET_INVALID_PARAMETER,
;;   HID_RET_NOT_INITIALISED,
;;   HID_RET_ALREADY_INITIALISED,
;;   HID_RET_FAIL_FIND_BUSSES,
;;   HID_RET_FAIL_FIND_DEVICES,
;;   HID_RET_FAIL_OPEN_DEVICE,
;;   HID_RET_DEVICE_NOT_FOUND,
;;   HID_RET_DEVICE_NOT_OPENED,
;;   HID_RET_DEVICE_ALREADY_OPENED,
;;   HID_RET_FAIL_CLOSE_DEVICE,
;;   HID_RET_FAIL_CLAIM_IFACE,
;;   HID_RET_FAIL_DETACH_DRIVER,
;;   HID_RET_NOT_HID_DEVICE,
;;   HID_RET_HID_DESC_SHORT,
;;   HID_RET_REPORT_DESC_SHORT,
;;   HID_RET_REPORT_DESC_LONG,
;;   HID_RET_FAIL_ALLOC,
;;   HID_RET_OUT_OF_SPACE,
;;   HID_RET_FAIL_SET_REPORT,
;;   HID_RET_FAIL_GET_REPORT,
;;   HID_RET_FAIL_INT_READ,
;;   HID_RET_NOT_FOUND,
;;   HID_RET_TIMEOUT
;; } hid_return;

(bind-alias hid_return i32)

;; from libusb...
(bind-alias usb_dev_handle i8*)
(bind-alias usb_device i8*)

(bind-alias matcher_fn [bool,usb_dev_handle,i8*,i32]*)

(bind-type HIDInterface <usb_dev_handle,usb_device,i32,|32,i8|,HIDData*,HIDParser*>)
(bind-type HIDInterfaceMatcher <i16,i16,matcher_fn,i8*,i32>)

;; typedef enum HIDDebugLevel_t {
;;   HID_DEBUG_NONE = 0x0,		//!< Default
;;   HID_DEBUG_ERRORS = 0x1,	//!< Serious conditions
;;   HID_DEBUG_WARNINGS = 0x2,	//!< Less serious conditions
;;   HID_DEBUG_NOTICES = 0x4,	//!< Informational messages
;;   HID_DEBUG_TRACES = 0x8,	//!< Verbose tracing of functions
;;   HID_DEBUG_ASSERTS = 0x10,	//!< Assertions for sanity checking
;;   HID_DEBUG_NOTRACES = HID_DEBUG_ERRORS | HID_DEBUG_WARNINGS | HID_DEBUG_NOTICES | HID_DEBUG_ASSERTS,
;;        //!< This is what you probably want to start with while developing with libhid
;;   HID_DEBUG_ALL = HID_DEBUG_ERRORS | HID_DEBUG_WARNINGS | HID_DEBUG_NOTICES | HID_DEBUG_TRACES | HID_DEBUG_ASSERTS
;; } HIDDebugLevel;

(bind-alias HIDDebugLevel i32)

(bind-lib libhid hid_set_debug [void,HIDDebugLevel]*)
(bind-lib libhid hid_set_debug_stream [void,i8*]*)
(bind-lib libhid hid_set_usb_debug [void,i32]*)

(bind-lib libhid hid_new_HIDInterface [HIDInterface*]*)

;; (bind-lib libhid hid_delete_HIDInterface [void,HIDInterface**]*)
(bind-lib libhid hid_reset_HIDInterface [void,HIDInterface*]*)
(bind-lib libhid hid_init [hid_return]*)
(bind-lib libhid hid_cleanup [hid_return]*)
(bind-lib libhid hid_is_initialised [bool]*)
(bind-lib libhid hid_open [hid_return,HIDInterface*,i32,HIDInterfaceMatcher*]*)
(bind-lib libhid hid_force_open [hid_return,HIDInterface*,i32,HIDInterfaceMatcher*,i16]*)
(bind-lib libhid hid_close [hid_return,HIDInterface*]*)
(bind-lib libhid hid_is_opened [bool,HIDInterface*]*)
(bind-lib libhid hid_strerror [i8*,hid_return]*)

(bind-lib libhid hid_get_input_report [hid_return,HIDInterface*,i32*,i32,i8*,i32]*)
(bind-lib libhid hid_set_output_report [hid_return,HIDInterface*,i32*,i32,i8*,i32]*)
(bind-lib libhid hid_get_feature_report [hid_return,HIDInterface*,i32*,i32,i8*,i32]*)
(bind-lib libhid hid_set_feature_report [hid_return,HIDInterface*,i32*,i32,i8*,i32]*)
(bind-lib libhid hid_get_item_value [hid_return,HIDInterface*,i32*,i32,double*]*)

(bind-lib libhid hid_write_identification [hid_return,i8*,HIDInterface*]*)
(bind-lib libhid hid_dump_tree [hid_return,i8*,HIDInterface*]*)
(bind-lib libhid hid_interrupt_read [hid_return,HIDInterface*,i32,i8*,i32,i32]*)
(bind-lib libhid hid_interrupt_write [hid_return,HIDInterface*,i32,i8*,i32,i32]*)
(bind-lib libhid hid_set_idle [hid_return,HIDInterface*,i32,i32]*)

(define *xtmlib-hid-loaded* #t)

(impc:aot:insert-footer "xtmhid")
