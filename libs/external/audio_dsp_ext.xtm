;;; audio_dsp.xtm -- audio DSP library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: kiss-fft, libsndfile

;;; Commentary:

;;
;; extended audio_dsp for spectral and
;; snd file related fucntionality
;;
;; hopefully we can bring this back
;; into core/audio_dsp once we have
;; native sndfile and fft options.
;;

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/audio_dsp_ext.xtm" 'quiet))
(sys:load-preload-check 'audio_dsp_ext)
(define *xtmlib-audio_dsp_ext-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/fft.xtm")
 (sys:load "libs/external/sndfile.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/external/fft.xtm" 'quiet)
 (sys:load "libs/external/sndfile.xtm" 'quiet))

(impc:aot:insert-header "xtmaudio_dsp_ext")
(impc:aot:import-ll "xtmaudio_dsp_ext")

;; are we using float or double precision complex numbers for our
;; samples?
(bind-alias SComplex Complexf)

;; STFT
;;
;; r, n and k should be powers of 2
;;
;; r is the rate at which you want forward fft's to be calculated
;; n is the size of the fft window 'unpadded'
;; k is the size of the fft window 'padded'
;;
;; r <= n
;; k >= n
(bind-func stft_c 10000000
  (lambda (r:i64 n:i64 k:i64)
    (if (< k n) (set! k n))
    (if (> r n) (set! r n))
    (let ((buf:SAMPLE* (alloc n))
          (sample_size_in_bytes 4) ;; assuming float SAMPLE
          (spectrum:SComplex* (alloc k))
          (pad:SAMPLE* (alloc k))
          (segments (/ n r))
          (pad_offset (dtoi64 (- (* .5 (i64tod k)) (* .5 (i64tod n)))))
          (padbuf (cast (pref-ptr pad pad_offset) i8*))
          (f_fftr:FFTR_Config* (fftr_config k))
          (n2 (* n 2)) (nhalf (/ n 2)) (i 0) (idx (- segments 1)) (t 0) (t2 0))
      (lambda (x)
        (if (= t2 0)
            (let ((start (* idx r))
                  (samps (- n start)))
              ;; copy 'n' samples to padded buffer
              (memcpy padbuf (convert (pref-ptr buf start)) (* sample_size_in_bytes samps))
              (memcpy padbuf (convert (pref-ptr buf 0)) (* sample_size_in_bytes start))
              ;; apply windowing function
              (window_hamming (cast padbuf SAMPLE*) n)
              ;; forward fft (pad is padbuf)
              (fft pad (convert spectrum) f_fftr)
              ;; inc index
              (set! idx (% (+ idx 1) segments))
              ))
        (pset! buf t x)
        (set! t (+ t 1))
        (if (= t n) (set! t 0))
        (set! t2 (+ t2 1))
        (if (= t2 r) (set! t2 0))
        x))))

(bind-func stft_st_c
  (lambda (r n k)
    (let ((L (stft_c r n k))
          (R (stft_c r n k))
          (left:SComplex* (L.spectrum))
          (right:SComplex* (R.spectrum))
          (i 0))
      (lambda (chan:i64 x)
        (if (= chan 0) (L x) (R x))))))


(bind-func stft_mc_c
  (lambda (channels:i64 r n k)
    (let ((fftchans:[float,float]** (alloc channels))
          (spectrums:SComplex** (alloc channels))
          (i 0))
      (dotimes (i channels)
        (let ((F (stft_c r n k)))
          (pset! fftchans i F)
          (pset! spectrums i (F.spectrum))))
      (lambda (chan:i64 x)
        ((pref fftchans chan) x)))))

;; uniform partitioned convolution in frq domain
;; expects mono aif/wav audio file at samplerate
(bind-func creverb_c
  (lambda (filename:i8* len:i64)
    (let ((ir_len_unpadded (sf_samples_from_file filename)) ;; get size of ir file (assumes mono!!)
          (ir_len (+ ir_len_unpadded (- len (% ir_len_unpadded len)))) ;; pad to whole multiple of len
          (parts (/ ir_len len)) ;; how many partitions
          (po 0)                 ;; partition offset
          (irs:SComplex* (zalloc (* 2 ir_len))) ;; storage for all IR FFT 'partitions'
          (ffts:SComplex* (zalloc (* 2 ir_len))) ;; storage for all total forward ffts
          (padlgth (* len 2)) ;; padlgth is for convolution buffers
          (aorb:i1 #t)        ;; #t for a #f for b
          (irtaila:SAMPLE* (zalloc len)) ;; buffer ir tail
          (irtailb:SAMPLE* (zalloc len))
          (f_fft:FFT_Config* (fft_config padlgth)) ;; forward complex
          (i_fft:IFFT_Config* (ifft_config padlgth)) ;; inverse complex
          (f_fftr:FFTR_Config* (fftr_config padlgth)) ;; forward real
          (i_fftr:IFFTR_Config* (ifftr_config padlgth)) ;; inverse real
          (drya:SAMPLE* (zalloc padlgth)) ;; buffer input signal
          (dryb:SAMPLE* (zalloc padlgth))
          (t1:i64 0) (i:i64 0) (out:SAMPLE 0.0) (j:i64 0)
          (A:SComplex* (zalloc padlgth))
          (B:SComplex* (zalloc padlgth))
          (a:SAMPLE* (zalloc padlgth))
          (t2:double 0.0)
          (output:SAMPLE* (zalloc len))) ;; buffer output
      (printf "IR:(%.1f seconds) Partitions(size:%lld num:%lld)\n" (ftod (/ (convert ir_len) (convert SAMPLE_RATE))) len parts)
      ;; partition and store IR spectra (circlar convolution so padded)
      (dotimes (i parts)
        (memset (cast A i8*) 0 (convert (* 8 padlgth))) ;; zero pad, assumes Complexf (8 bytes per struct)
        (sf_read_file_into_buffer filename output (* i len) len #f)
        (Complex_bufferize output A len)
        (fft A (pref-ptr irs (* i padlgth)) f_fft))
      (lambda (in:SAMPLE dry:SAMPLE wet:SAMPLE)
        (set! t2 (clock_clock))
        ;; store 'input' data which is 'ahead of out' by len samples
        (pset! (if aorb drya dryb) t1 in)
        ;; set output which is len samples behind 'in'
        (set! out ;; out is always delayed by len
              (+ (* dry (pref (if aorb dryb drya) t1)) ;; playback 'delayed' input
                 (* 4.0 wet             ;; wet output signal
                    (+ (pref output t1) ;; overlap-add current-output with ...
                       (pref (if aorb irtaila irtailb) t1))))) ;; delayed-irtail
        ;; increment time
        (set! t1 (+ t1 1))
        ;; if we have buffered len samples then run convolution
        (if (= t1 len)
            (let ((_fft:SComplex* (pref-ptr ffts (* po padlgth)))
                  (_ir:SComplex* null))
              ;; forward FFT of incoming signal
              (fft (if aorb drya dryb) B f_fftr)
              ;; store FFT to use 'now' and also for 'delayed' use
              (memcpy (cast _fft i8*) (cast B i8*) (convert (* padlgth 8)))
              ;; run convolution over all partions
              (dotimes (i parts)
                (set! j (% (+ parts (- po i)) parts))
                (set! _fft (pref-ptr ffts (* j padlgth)))
                (set! _ir (pref-ptr irs (* i padlgth)))
                ;; '*' and '+' are overloaded for buffers of Complex{f,d}
                (Complex_multiplication_bybuf _fft _ir A padlgth)
                (Complex_addition_bybuf A B B padlgth))
              ;; after convolution is complete back to time domain!
              (ifft B a i_fftr)
              (let ((scale:SAMPLE (/ 1.0 (convert (* len parts))))
                    (tail (if aorb irtaila irtailb)))
                (dotimes (i len)
                  (pset! output i (* (pref a i) scale)))
                (dotimes (i len)
                  (pset! tail i (* (pref a (+ len i)) scale))))
              ;; reset everything for next cycle
              (set! aorb (if aorb #f #t)) ;; swap buffers
              (set! po (% (+ po 1) parts))
              (set! t1 0)))
        ;; (if (= t1 0)
        ;;     (println (- (clock_clock) t2)))
        ;; simply return out
        out))))


;; poly wrapper for spectral_convolution_c
(bind-func creverb_c
  (lambda (path:i8*)
    (creverb_c:[[float,float,float,float]*,i8*,i64]* path (* 4 (convert FRAMES)))))


(bind-func creverb_st_c
  (lambda (pathl pathr lgth)
    (let ((convl (creverb_c pathl lgth))
          (convr (creverb_c pathr lgth)))
      (lambda (chan:i64 in dry wet)
        (cond ((= chan 0)
               (convl in dry wet))
              ((= chan 1)
               (convr in dry wet))
              (else 0.0))))))

(bind-func creverb_st_c
  (lambda (pathl pathr)
    (creverb_st_c:[[float,i64,float,float,float]*,i8*,i8*,i64]* pathl pathr (* (convert FRAMES) 4))))

(impc:aot:insert-footer "xtmaudio_dsp_ext")
(define *xtmlib-audio_dsp_ext-loaded* #t)