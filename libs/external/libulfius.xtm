;;; libulfius.xtm -- httpd

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/libulfius.xtm" 'quiet))
(sys:load-preload-check 'ulfius)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmulfius")

;; set up the current dylib name and path (for AOT compilatio)
(bind-dylib libulfius
  (cond ((string=? (sys:platform) "OSX")
         "libulfius.dylib")
        ((string=? (sys:platform) "Linux")
         "libulfius.so")
        ((string=? (sys:platform) "Windows")
         "ulfius_dll.dll"))
  "xtmulfius")

(impc:aot:import-ll "xtmulfius")

(define *xtmlib-ulfius-loaded* #t)

(bind-val U_CALLBACK_CONTINUE i32 0)
(bind-val U_CALLBACK_COMPLETE i32 1)
(bind-val U_CALLBACK_UNAUTHORIZED i32 2)
(bind-val U_CALLBACK_ERROR i32 3)

(bind-val U_OK i32 0)
(bind-val U_ERROR i32 1)
(bind-val U_ERROR_MEMORY i32 2)
(bind-val U_ERROR_PARAMS i32 3)
(bind-val U_ERROR_LIBMHD i32 4)
(bind-val U_ERROR_LIBCURL i32 5)
(bind-val U_ERROR_NOT_FOUND i32 6)

;; struct _u_map {
;;   int      nb_values;
;;   char  ** keys;
;;   char  ** values;
;;   size_t * lengths;
;; };

(bind-type u_map <i32,i8**,i8**,size_t>)

;; struct _u_cookie {
;;   char * key;
;;   char * value;
;;   char * expires;
;;   uint   max_age;
;;   char * domain;
;;   char * path;
;;   int    secure;
;;   int    http_only;
;; };

(bind-type u_cookie <i8*,i8*,i8*,i32,i8*,i8*,i32,i32>)

;; struct _u_response {
;;   long               status;
;;   char             * protocol;
;;   struct _u_map    * map_header;
;;   unsigned int       nb_cookies;
;;   struct _u_cookie * map_cookie;
;;   char             * auth_realm;
;;   void             * binary_body;
;;   size_t             binary_body_length;
;;   ssize_t         (* stream_callback) (void * stream_user_data, uint64_t offset, char * out_buf, size_t max);
;;   void            (* stream_callback_free) (void * stream_user_data);
;;   size_t             stream_size;
;;   unsigned int       stream_block_size;
;;   void             * stream_user_data;
;; #ifndef U_DISABLE_WEBSOCKET
;;   char             * websocket_protocol;
;;   char             * websocket_extensions;
;;   void            (* websocket_manager_callback) (const struct _u_request * request,
;;                                                   struct _websocket_manager * websocket_manager,
;;                                                   void * websocket_manager_user_data);
;;   void             * websocket_manager_user_data;
;;   void            (* websocket_incoming_message_callback) (const struct _u_request * request,
;;                                                            struct _websocket_manager * websocket_manager,
;;                                                            const struct _websocket_message * message,
;;                                                            void * websocket_incoming_user_data);
;;   void             * websocket_incoming_user_data;
;;   void            (* websocket_onclose_callback) (const struct _u_request * request,
;;                                                   struct _websocket_manager * websocket_manager,
;;                                                   void * websocket_onclose_user_data);
;;   void             * websocket_onclose_user_data;
;; #endif
;;   void *             shared_data;
;; };

;; assumes no websocket
(bind-type u_response <i64,i8*,u_map*,i32,u_cookie*,i8*,i8*,size_t,[size_t,i8*,i64,i8*,size_t]*,[void,i8*]*,size_t,i32,i8*,i8*>)

;; struct _u_request {
;;   char *               http_protocol;
;;   char *               http_verb;
;;   char *               http_url;
;;   int                  check_server_certificate;
;;   long                 timeout;
;;   struct sockaddr *    client_address;
;;   char *               auth_basic_user;
;;   char *               auth_basic_password;
;;   struct _u_map *      map_url;
;;   struct _u_map *      map_header;
;;   struct _u_map *      map_cookie;
;;   struct _u_map *      map_post_body;
;;   void *               binary_body;
;;   size_t               binary_body_length;
;; };
(bind-type u_request <i8*,i8*,i8*,i32,i64,i8*,i8*,i8*,u_map*,u_map*,u_map*,u_map*,i8*,size_t>)

;; struct _u_endpoint {
;;   char * http_method;
;;   char * url_prefix;
;;   char * url_format;
;;   uint   priority;
;;   int (* callback_function)(const struct _u_request * request, // Input parameters (set by the framework)
;;                             struct _u_response * response,     // Output parameters (set by the user)
;;                             void * user_data);
;;   void * user_data;
;; };

(bind-type u_endpoint <i8*,i8*,i8*,i32,[i32,u_request*,u_response*,i8*]*,i8*>)

;;   struct _u_instance {
;;   struct MHD_Daemon          *  mhd_daemon;
;;   int                           status;
;;   uint                          port;
;;   struct sockaddr_in          * bind_address;
;;   int                           nb_endpoints;
;;   char                        * default_auth_realm;
;;   struct _u_endpoint          * endpoint_list;
;;   struct _u_endpoint          * default_endpoint;
;;   struct _u_map               * default_headers;
;;   size_t                        max_post_param_size;
;;   size_t                        max_post_body_size;
;; #ifndef U_DISABLE_WEBSOCKET
;;   size_t                        nb_websocket_active;
;;   struct _websocket          ** websocket_active;
;; #endif
;; };

;; assumes no websocket
(bind-type u_instance <i8*,i32,i32,i8*,i32,i8*,i8*,i8*,i8*,size_t,size_t>)


;; struct connection_info_struct {
;;   struct MHD_PostProcessor * post_processor;
;;   int                        has_post_processor;
;;   int                        callback_first_iteration;
;;   struct _u_request *        request;
;;   size_t                     max_post_param_size;
;;   struct _u_map              map_url_initial;
;; };

(bind-alias MHD_PostProcessor i8) ;; opaque

(bind-val connection_info_stuct <MHD_PostProcessor*,i32,i32,u_request*,size_t,u_map>)

;; int ulfius_init_instance(struct _u_instance * u_instance, uint port, struct sockaddr_in * bind_address, const char * default_auth_realm);
(bind-lib libulfius ulfius_init_instance [i32,u_instance*,i32,i8*,i8*]*)

;; __declspec(dllexport) void ulfius_clean_instance(struct _u_instance * u_instance);
(bind-lib libulfius ulfius_clean_instance [void,u_instance*]*)

;; int ulfius_start_framework(struct _u_instance * u_instance);
(bind-lib libulfius ulfius_start_framework [i32,u_instance*]*)

;; __declspec(dllexport) int ulfius_stop_framework(struct _u_instance
;; * u_instance);
(bind-lib libulfius ulfius_stop_framework [i32,u_instance*]*)

;; __declspec(dllexport) int ulfius_add_endpoint_by_val(struct _u_instance * u_instance,
;;                                const char * http_method,
;;                                const char * url_prefix,
;;                                const char * url_format,
;;                                uint priority,
;;                                int (* callback_function)(const struct _u_request * request, // Input parameters (set by the framework)
;;                                                          struct _u_response * response,     // Output parameters (set by the user)
;;                                                          void * user_data),
;;                                void * user_data);
(bind-lib libulfius ulfius_add_endpoint_by_val [i32,u_instance*,i8*,i8*,i8*,i32,[i32,u_request*,u_response*,i8*]*,i8*]*)


;; __declspec(dllexport) int ulfius_set_string_response(struct _u_response * response, const uint status, const char * body);
(bind-lib libulfius ulfius_set_string_response [i32,u_response*,i32,i8*]*)


(impc:aot:insert-footer "xtmulfius")
