;;; assimp.xtm

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libstb_image, libassimp

;;; Commentary:

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/assimp.xtm" 'quiet))
(sys:load-preload-check 'assimp)
(define *xtmlib-assimp-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/external/stb_image.xtm")
 (sys:load "libs/external/graphics-pipeline.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/external/stb_image.xtm" 'quiet)
 (sys:load "libs/external/graphics-pipeline.xtm" 'quiet))

(impc:aot:insert-header "xtmassimp")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libassimp
  (cond ((string=? (sys:platform) "OSX")
         "libassimp.dylib")
        ((string=? (sys:platform) "Linux")
         "libassimp.so")
        ((string=? (sys:platform) "Windows")
         (list "assimp-vc130-mt.dll" "assimp.dll")))
  "xtmassimp")

(impc:aot:import-ll "xtmassimp")

(bind-func ai_load_ogl_texture
  (lambda (filename tex_id:i32)
    ;; if tex_id is 0, generate a new texture
    (if (= tex_id 0)
        (let ((texid_ptr:i32* (salloc)))
          (glGenTextures 1 texid_ptr)
          (set! tex_id (pref texid_ptr 0))))
    (stbi_set_flip_vertically_on_load 1)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (data (stbi_load filename width_ptr height_ptr comp_ptr 4)))
      (if (null? data)
          (begin (println (stbi_failure_reason))
                 0)
          (begin
            (glActiveTexture GL_TEXTURE0)
            (glBindTexture GL_TEXTURE_2D tex_id)
            (glTexImage2D GL_TEXTURE_2D 0
                          GL_RGBA
                          (pref width_ptr 0)
                          (pref height_ptr 0)
                          0
                          GL_RGBA
                          GL_UNSIGNED_BYTE
                          data)
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "error in ai_load_ogl_texture")
            tex_id)))))

(bind-func ai_load_ogl_texture_from_buffer
  (lambda (buffer buflen tex_id:i32)
    ;; if tex_id is 0, generate a new texture
    (if (= tex_id 0)
        (let ((texid_ptr:i32* (salloc)))
          (glGenTextures 1 texid_ptr)
          (set! tex_id (pref texid_ptr 0))))
    ;; (stbi_set_flip_vertically_on_load 1)
    (let ((width_ptr:i32* (salloc))
          (height_ptr:i32* (salloc))
          (comp_ptr:i32* (salloc))
          (data (stbi_load_from_memory buffer buflen width_ptr height_ptr comp_ptr 4)))
      (if (null? data)
          (begin (println (stbi_failure_reason))
                 0)
          (begin
            (glActiveTexture GL_TEXTURE0)
            (glBindTexture GL_TEXTURE_2D tex_id)
            (glTexImage2D GL_TEXTURE_2D 0
                          GL_RGBA
                          (pref width_ptr 0)
                          (pref height_ptr 0)
                          0
                          GL_RGBA
                          GL_UNSIGNED_BYTE
                          data)
            ;; set some parameters
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
            (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
            (gl_print_error "error in ai_load_ogl_texture")
            tex_id)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; ASSIMP LIBRARY
;;
;; You will need to compile the Open Asset Import Library (ASSIMP)
;; You can get source from here http://assimp.sourceforge.net/
;; Make sure libassimp.so (or similar dylib) is accessible!
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-val aiProcess_CalcTangentSpace enum #x1)
(bind-val aiProcess_JoinIdenticalVertices enum #x2)
(bind-val aiProcess_MakeLeftHanded enum #x4)
(bind-val aiProcess_Triangulate enum #x8)
(bind-val aiProcess_RemoveComponent enum #x10)
(bind-val aiProcess_GenNormals enum #x20)
(bind-val aiProcess_GenSmoothNormals enum #x40)
(bind-val aiProcess_SplitLargeMeshes enum #x80)
(bind-val aiProcess_PreTransformVertices enum #x100)
(bind-val aiProcess_LimitBoneWeights enum #x200)
(bind-val aiProcess_ValidateDataStructure enum #x400)
(bind-val aiProcess_ImproveCacheLocality enum #x800)
(bind-val aiProcess_RemoveRedundantMaterials enum #x1000)
(bind-val aiProcess_FixInfacingNormals enum #x2000)
(bind-val aiProcess_SortByPType enum #x8000)
(bind-val aiProcess_FindDegenerates enum #x10000)
(bind-val aiProcess_FindInvalidData enum #x20000)
(bind-val aiProcess_GenUVCoords enum #x40000)
(bind-val aiProcess_TransformUVCoords enum #x80000)
(bind-val aiProcess_FindInstances enum #x100000)
(bind-val aiProcess_OptimizeMeshes enum  #x200000)
(bind-val aiProcess_OptimizeGraph enum  #x400000)
(bind-val aiProcess_FlipUVs enum #x800000)
(bind-val aiProcess_FlipWindingOrder enum  #x1000000)
(bind-val aiProcess_SplitByBoneCount enum  #x2000000)
(bind-val aiProcess_Debone enum  #x4000000)

(bind-val aiTextureType_NONE enum #x0)
(bind-val aiTextureType_DIFFUSE enum #x1)
(bind-val aiTextureType_SPECULAR enum #x2)
(bind-val aiTextureType_AMBIENT enum #x3)
(bind-val aiTextureType_EMISSIVE enum #x4)
(bind-val aiTextureType_HEIGHT enum #x5)
(bind-val aiTextureType_NORMALS enum #x6)
(bind-val aiTextureType_SHININESS enum #x7)
(bind-val aiTextureType_OPACITY enum #x8)
(bind-val aiTextureType_DISPLACEMENT enum #x9)
(bind-val aiTextureType_LIGHTMAP enum #xA)
(bind-val aiTextureType_REFLECTION enum #xB)
(bind-val aiTextureType_UNKNOWN enum #xC)

(bind-type aiString <size_t,|1024,i8|> (printer? . #f))
;;(llvm:compile "%aiString = type {i64, |1024xi8|}
(bind-type aiMatrix4x4 <float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float>)
(bind-type aiMatrix3x3 <float,float,float,float,float,float,float,float,float>)
(bind-type aiVector4D <float,float,float,float>)
(bind-type aiVector3D <float,float,float>)
(bind-type aiVector2D <float,float>)
;; r g b a
(bind-type aiColor4D <float,float,float,float>)
(bind-type aiColor3D <float,float,float>)
(bind-type aiQuaternion <float,float,float,float>)
(bind-type aiTexel <i8,i8,i8,i8>) ;; b,g,r,a
;; mTime,mValue
(bind-type aiVectorKey <double,aiVector3D>) ;; good
;; mTime,mValue
(bind-type aiQuatKey <double,aiQuaternion>) ;; good
;; mTime,mValue
(bind-type aiMeshKey <double,i32>) ;; good
;; mName(0),mTransformation(1),mParent(2),mNumChildren(3),mChildren(4),mNumMeshes(5),mMeshes(6),mMetadata(7)
(bind-type aiNode <aiString,aiMatrix4x4,aiNode*,i32,aiNode**,i32,i32*,i8*>) ;; good 1144
;; mNumIndices,mIndicies
(bind-type aiFace <i32,i32*>) ;; good
;; mVertexId,mWeightm
(bind-type aiVertexWeight <i32,float>) ;; good
;; mName(0),mNumWeights(1),mWeights(2),mOffsetMatrix(3)
(bind-type aiBone <aiString,i32,aiVertexWeight*,aiMatrix4x4>) ;; good
;; mVertices,mNormals,mTangents,mBitangents,mColors,mNumVertices
(bind-type aiAnimMesh <aiVector3D*,aiVector3D*,aiVector3D*,aiVector3D*,|8,aiColor4D*|,|8,aiVector3D*|,i32>) ;; good
;; mPrimitiveTypes(0),mNumVertices(1),mNumFaces(2),mVertices(3),mNormals(4),mTangents(5),mBitangents(6),mColors(7),mTextureCoords(8),mNumUVComponents(9),mFaces(10),mNumBones(11),mBones(12),mMaterialIndex(13),mName(14),mNumAnimMeshes(15)
(bind-type aiMesh <i32,i32,i32,aiVector3D*,aiVector3D*,aiVector3D*,aiVector3D*,|8,aiColor4D*|,|8,aiVector3D*|,|8,i32|,aiFace*,i32,aiBone**,i32,aiString,i32,aiAnimMesh**,i64>) ;; i64 on end is padding
;; mTranslation,mScaling,mRotation
(bind-type aiUVTransform <aiVector2D,aiVector2D,float>) ;; good
;; mKey(0),mSemantic(1),mIndex(2),mDataLength(3),mType(4),mData(5)
(bind-type aiMaterialProperty <aiString,i32,i32,i32,i32,i8*>) ;; good
;; mProperties,mNumProperties,mNumAllocated
(bind-type aiMaterial <aiMaterialProperty**,i32,i32>) ;; good
;; mNodeName(0),mNumPositionKeys(1),mPositionKeys(2),mNumRotationKeys(3),mRotationKeys(4),mNumScalingKeys(5),mScalingKeys(6),mPreState(7),mPostState(8)
(bind-type aiNodeAnim <aiString,i32,aiVectorKey*,i32,aiQuatKey*,i32,aiVectorKey*,i32,i32>) ;; good
;; mName,mNumKeys,mKeys
(bind-type aiMeshAnim <aiString,i32,aiMeshKey*>) ;; good
;; mName,mDuration,mTicksPerSecond,mNumChannels,mChannels,mNumMeshChannels,mMeshChannels
(bind-type aiAnimation <aiString,double,double,i32,aiNodeAnim**,i32,aiMeshAnim**>) ;; good
;; mWidth,mHeight,achFormatHint,pcData
(bind-type aiTexture <i32,i32,|4,i8|,aiTexel*>) ;; good
;; mName,mType,mPosition,mDirection,mAttenuationConstant,mAttenuationLinear,mAttenuationQuadratic,mColorDiffuse,mColorSpecular,mColorAmbient,mAngleInnerCone,mAngleOuterCone
(bind-type aiLight <aiString,i32,aiVector3D,aiVector3D,float,float,float,aiColor3D,aiColor3D,aiColor3D,float,float>) ;; good
;; mName,mPosition,mUp,mLookAt,mHorizontalFOV,mClipPlaneNear,mClipPlaneFar,mAspect
(bind-type aiCamera <aiString,aiVector3D,aiVector3D,aiVector3D,float,float,float,float>) ;; good
;; mFlags(0),mRootNode(1),mNumMeshes(2),mMeshes(3),mNumMaterials(4),mMaterials(5),mNumAnimations(6),mAnimations(7),mNumTextures(8),mTextures(9),mNumLights(10),mLights(11),mNumCameras(12),mCameras(13)
(bind-type aiScene <i32,aiNode*,i32,aiMesh**,i32,aiMaterial**,i32,aiAnimation**,i32,aiTexture**,i32,aiLight**,i32,aiCamera**,i8*>) ;; good
(bind-type aiExportFormatDesc <i8*,i8*,i8*>)
;;
;; (bind-type aicontainer <aiScene*,aiVector3D*,aiVector3D*,aiVector3D*>)

(bind-lib libassimp aiImportFile [aiScene*,i8*,i32]*)
(bind-lib libassimp aiExportScene [i32,aiScene*,i8*,i8*,i32]*)
(bind-lib libassimp aiGetExportFormatCount [size_t]*)
(bind-lib libassimp aiGetExportFormatDescription [aiExportFormatDesc*,size_t]*)
(bind-lib libassimp aiReleaseImport [void,aiScene*]*)
(bind-lib libassimp aiIdentityMatrix4 [void,aiMatrix4x4*]*)
(bind-lib libassimp aiMultiplyMatrix4 [void,aiMatrix4x4*,aiMatrix4x4*]*)
(bind-lib libassimp aiTransformVecByMatrix4 [void,aiVector3D*,aiMatrix4x4*]*)
(bind-lib libassimp aiTransposeMatrix4 [void,aiMatrix4x4*]*)
(bind-lib libassimp aiTransposeMatrix3 [void,aiMatrix3x3*]*)
(bind-lib libassimp aiGetMaterialColor [i32,aiMaterial*,i8*,i32,i32,aiColor4D*]*)
(bind-lib libassimp aiGetMaterialString [i32,aiMaterial*,i8*,i32,i32,aiString*]*)
(bind-lib libassimp aiGetMaterialFloatArray [i32,aiMaterial*,i8*,i32,i32,float*,i32*]*)
(bind-lib libassimp aiGetMaterialIntegerArray [i32,aiMaterial*,i8*,i32,i32,i32*,i32*]*)
;; aiReturn (aiMaterial* mat, aiTextureType type, uint index, aiString* path, aiTextureMapping* mapping, uint* uvindex, float* blend, aiTextureOp* op, aiTextureMapMode* mapmode, uint* flags)
(bind-lib libassimp aiGetMaterialTexture [i32,aiMaterial*,i32,i32,aiString*,i32*,i32*,float*,i32*,i32*,i32*]*)
;; uint (aiMaterial* mat,i32 type)
(bind-lib libassimp aiGetMaterialTextureCount [i32,aiMaterial*,i32]*)

(bind-func aiGetMaterialFloat:[i32,aiMaterial*,i8*,i32,i32,float*]*
  (lambda (mat pkey type index pout)
    (aiGetMaterialFloatArray mat pkey type index pout null)))

(bind-func ai_matrix4_to_float
  (lambda (mat1:aiMatrix4x4* mat2:float*)
    (doloop (i 16)
      (pset! mat2 i (aref (convert mat1 |16,float|*) i)))))

(bind-func print:[void,aiString*]*
  (lambda (str)
    (if (null? str)
        (begin (printout "''") void)
        (let ((size (tref str 0))
              (dat (convert (tref-ptr str 1) i8*)))
          (printf "'%s'" dat)
          void))))

(bind-func toString:[String*,aiString*]*
  (lambda (str)
    (if (null? str)
        (Str "")
        (let ((size (tref str 0))
              (dat (convert (tref-ptr str 1) i8*)))
          (Str dat)))))

(bind-func match_aiString:[i1,aiString*,aiString*]*
  (lambda (s1 s2)
    ;; (println 'matchstrings: s1 s2)
    (if (<> (tref s1 0)
            (tref s2 0))
        #f
        (if (= (strcmp (cast (tref-ptr s1 1) i8*)
                       (cast (tref-ptr s2 1) i8*))
               0)
            #t
            #f))))

(bind-func ai_find_matching_node:[aiNode*,aiNode*,aiString*]*
  (lambda (node search_str)
    ;; (println 'aifn (cast node i8*) (cast search_str i8*)) ;search_str) ;; (cast node i8*))
    (if (null? node)
        null
        (if (match_aiString (tref-ptr node 0) search_str)
            node
            (let ((num (tref node 3))
                  (i:i32 0)
                  (children (tref node 4))
                  (match:aiNode* null))
              (while (and (null? match) (< i num))
                (set! match (ai_find_matching_node (pref children i) search_str))
                (set! i (+ i 1)))
              match)))))

(bind-func ai_color4_to_float4
  (lambda (colour:aiColor4D* dat:float*)
    (pset! dat 0 (tref colour 0))
    (pset! dat 1 (tref colour 1))
    (pset! dat 2 (tref colour 2))
    (pset! dat 3 (tref colour 3))))

;; mode is a bit of a dodge
;; it basically returns whatever the
;; last vertex positions mode was
;; GL_POINTS GL_LINES GL_TRIANGLE GL_QUADS or GL_POLYGON
(bind-func ai_build_mesh_vbo
  (lambda (vao:VAO* mesh:aiMesh* xmesh:XTMMesh* modes:i32*)
    ;; (printf "... mesh vbo\n")
    (let ((i:i32 0) (j:i32 0) (k:i64 0)
          (vbodata:float* null)
          (max_active_bones:i32 0) ;; most active bones on any 1 vertex
          (num_bones:i32 (tref mesh 11))
          (meshbones:XTMBone* (halloc num_bones))
          (vbostride:i64 (i32toi64 (+ 16 (* 2 4)))) ;; 2d+4d+3d+3d+4d + 4 active bones * 2d space (weight+idx per bone)
          (positions:i64 0)
          (position_cnt:i64 -1)
          (vertices:aiVector3D* (tref mesh 3))
          (normals:aiVector3D* (tref mesh 4))
          (num_vertices (tref mesh 1))
          (num_faces:i32 (tref mesh 2))
          (bones:aiBone** (tref mesh 12))
          (faces (tref mesh 10))
          (face:aiFace* null)
          (num_indicies:i32 0)
          (face_mode:i32 0)
          (index:i32 0)
          (dat:float* null)
          (idat:i32* null)
          (tmp:float 0.0)
          (indicies:i32* null)
          (colors:aiColor4D* (aref (tref-ptr mesh 7) 0)) ;; only use first 'set' of colors
          (texturecoords:aiVector3D* (aref (tref-ptr mesh 8) 0))) ;; only use first 'set' of texcoords
      (tset! xmesh 12 num_bones)
      (tset! xmesh 13 meshbones)
      ;; precalc the total number of positions required
      ;; this is the total number of faces * the total number of
      ;; indexes per face
      (dotimes (i num_faces)
        (set! face (pref-ptr faces i))
        (set! positions (+ positions (convert (tref face 0))))
        (set! indicies (tref face 1))
        (dotimes (j (tref face 0))
          (set! index (pref indicies j))
          ;; (printf "index: %d:%d\n" (+ (- positions 3) j) index)
          (if (or (< index 0) (> index num_vertices))
              (printf "Bad Index Value: %d:%d (%d:%d) %d:%d\n" index num_vertices i j (pref indicies (+ j 1)) (pref indicies (+ j 2))))))
      (printf "...mesh:> faces:%d vertices:%d bones:%d\n" num_faces positions num_bones)
      (dotimes (i num_bones)
        (println ".....bone:>" (tref-ptr (pref bones i) 0) "ptr:" (cast (pref bones i) i8*)))
      ;; 1d id + 4d position + 3d normal + 3d coord + 4d colors + (num_bones * ids) + (num_bones * weights)
      ;; where ids are i32 and everything else is a float
      (let ((vbod:float* (halloc (* positions vbostride))))
        ;;(memset (cast vbod i8*) 0 (* positions vbostride 4))
        (set! vbodata vbod))
      (dotimes (i num_faces)
        (set! face (pref-ptr faces i))
        (set! num_indicies (tref face 0))
        (if (<> num_indicies 3)
            (printf "ERROR: all faces must be triangulated!!!!\n"))
        (set! indicies (tref face 1))
        (dotimes (j num_indicies)
          (set! position_cnt (+ position_cnt 1))
          (set! index (pref indicies j))
          ;; set index (as i32)
          (pset! (cast (pref-ptr vbodata (+ 0 (* position_cnt vbostride))) i32*) 0 index)
          ;; (printf "index %d:%d:%d:%d:%p:%p:%p\n" j num_indicies index position_cnt face indicies faces)
          (if (or (< index 0) (> index num_vertices))
              (printf "...Bad Index Value: %d:%d\n" index num_vertices))
          (pfill! (pref-ptr vbodata (+ 2 (* position_cnt vbostride)))
                  (tref (pref-ptr vertices index) 0) ;; x
                  (tref (pref-ptr vertices index) 1) ;; y
                  (tref (pref-ptr vertices index) 2) ;; z
                  1.0 ;; we are a position (i.e. w==1)
                  )
          (if (null? normals)
              (pfill! (pref-ptr vbodata (+ 6 (* position_cnt vbostride))) ;; offset 4
                      0.0 1.0 0.0) ;; normal pointing up Y
              (pfill! (pref-ptr vbodata (+ 6 (* position_cnt vbostride))) ;; offset 4
                      (tref (pref-ptr normals index) 0) ;; x
                      (tref (pref-ptr normals index) 1) ;; y
                      (tref (pref-ptr normals index) 2) ;; z
                      ))
          (if (null? texturecoords)
              (pfill! (pref-ptr vbodata (+ 9 (* position_cnt vbostride))) ;; offset 4+3
                      0.0 1.0 0.0) ;; normal pointing up Y
              (pfill! (pref-ptr vbodata (+ 9 (* position_cnt vbostride)))
                      (tref (pref-ptr texturecoords index) 0) ;; x
                      (tref (pref-ptr texturecoords index) 1) ;; y
                      0.0 ;;(tref (pref-ptr texturecoords index) 2) ;; z
                      ))
          (if (null? colors) ;; if colors is null make vertex color white!
              (pfill! (pref-ptr vbodata (+ 12 (* position_cnt vbostride))) ;; offset 4+3+3
                      1.0 1.0 1.0 1.0)
              (pfill! (pref-ptr vbodata (+ 12 (* position_cnt vbostride))) ;; offset 4+3+3
                      (tref (pref-ptr colors index) 0) ;; r
                      (tref (pref-ptr colors index) 1) ;; g
                      (tref (pref-ptr colors index) 2) ;; b
                      (tref (pref-ptr colors index) 3) ;; a
                      ))))
      (if (<> (+ 1 position_cnt) positions)
          (printf "Error: positions:%ld <> position_cnt:%ld" positions (+ position_cnt 1)))
      (pset! modes 0 GL_TRIANGLES) ;;  face_mode)
      ;; do bones!
      (dotimes (i num_bones)
        ;; do bones!
        (let ((bone:aiBone* (pref bones i))
              (xbone:XTMBone* (pref-ptr meshbones i))
              (num_weights:i32 (tref bone 1))
              (weights:aiVertexWeight* (tref bone 2))
              (weight:aiVertexWeight* null)
              (offsetmat:aiMatrix4x4* (tref-ptr bone 3))
              (xoffsetmat:float* (halloc 16))
              (vidx:i32 0)
              (vid:i32 0)
              (looking:i1 #t)
              (vertdat:float* null)
              (boneidx:i32* null)
              (boneweight:float* null)
              (vertbones:i32 0)
              (vweight:float 0.0)
              (transform (pref bone 3)))
          (memcpy (cast offsetmat i8*) (cast offsetmat i8*) (* 16 4))
          (tfill! xbone (toString (tref-ptr bone 0)) i null xoffsetmat 0 null)
          (dotimes (k positions)
            (set! vertdat (pref-ptr vbodata (* k vbostride)))
            (set! vertbones (pref (cast vertdat i32*) 1))
            (set! vid (pref (cast vertdat i32*) 0))
            (if (> vertbones 3)
                (begin ;; keep overwriting last bone if more than 4!
                  (set! boneidx (pref-ptr (cast vertdat i32*) (+ 16 3)))
                  (set! boneweight (pref-ptr vertdat (+ 16 4 3))))
                (begin
                  (set! boneidx (pref-ptr (cast vertdat i32*) (+ 16 vertbones)))
                  (set! boneweight (pref-ptr vertdat (+ 16 4 vertbones)))))
            (set! looking #t)
            (set! j 0)
            (while (and looking (< j num_weights))
              (set! weight (pref-ptr weights j))
              (set! vidx (tref weight 0))
              (set! vweight (tref weight 1))
              (if (= vidx vid)
                  (begin (pset! boneidx 0 i)
                         (pset! boneweight 0 vweight)
                         (set! looking #f)
                         (set! vertbones (+ vertbones 1))
                         (pset! (cast vertdat i32*) 1 vertbones)
                         ))
              (if (> vertbones max_active_bones)
                  (set! max_active_bones vertbones))
              (set! j (+ j 1))))))
      (if (> max_active_bones 4)
          (println "Warning! More than 4 active bones in mesh!"))
      (println "MAX ACTIVE BONES:" max_active_bones)
      (tset! xmesh 14 max_active_bones)
      ;; bone sanity check
      (dotimes (k positions)
        (set! tmp 0.0)
        (set! dat (pref-ptr vbodata (+ 16 (i32toi64 num_bones) (* k vbostride))))
        (set! idat (cast (pref-ptr vbodata (* k vbostride)) i32*))
        (dotimes (i num_bones)
          (set! tmp (+ tmp (pref dat i))))
        ;; (println "vertidx:" k "vid:" (pref idat 0) "bones:" (pref idat 1) "total-weight:" tmp))
        (if (and (> tmp 0.01)
                 (< tmp 0.95))
            (println "Error weight for vert:" k "bones:" (pref idat 1) "total:" tmp)
            void))
      ;; return vbo
      (let ((vbo (VBO vbodata (* positions vbostride) GL_STATIC_DRAW positions vbostride)))
        (set_attribute vao vbo 0 4 (convert vbostride) 2)
        (set_attribute vao vbo 1 3 (convert vbostride) 6)
        (set_attribute vao vbo 2 3 (convert vbostride) 9)
        (set_attribute vao vbo 3 4 (convert vbostride) 12)
        ;;; santiy check for num of bones
        ;; (dotimes (k positions)
        ;;   (println "pos:" k "bones:" (pref (cast (pref-ptr vbodata (* k vbostride)) i32*) 1)))
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        (if (> num_bones 0)
            (begin
              (set_attribute vao vbo 4 4 (convert vbostride) 16) ;; bone ids
              (set_attribute vao vbo 5 4 (convert vbostride) (+ 16 num_bones)))) ;; bone weights
        (gl_print_error "error before setting GL_INT active")
        (set_attribute vao vbo 6 1 (convert vbostride) 1)  ;; active bones
        (gl_print_error "error IN setting GL_INT active")
        (glBindBuffer GL_ARRAY_BUFFER 0)
        vbo))))

(bind-func load_assim_material_texture
  (lambda (scene:aiScene* material type dir)
    (let ((texfile:aiString* (salloc))
          (tex:Texture* null))
      (if (= (aiGetMaterialTexture material type 0 texfile null null null null null null) 0)
          (let ((s1 (cast (tref-ptr texfile 1) i8*))
                (lgth (+ (strlen dir) (tref texfile 0) 1))
                (s2 (salloc lgth)))
            (if (= (pref s1 0) 42)
                (let ((texidx:i32 (atoi (pref-ptr s1 1)))
                      (texture:aiTexture* (pref (tref scene 9) texidx))
                      (achformat (tref texture 2))
                      (texwidth (tref texture 0))
                      (texheight (tref texture 1))
                      (texdata (cast (tref texture 3) i8*))
                      (datasize (if (= texheight 0) texwidth (* 4 texwidth texheight))))
                  ;;(printf "tidx:%d of num:%d w:%d h:%d size:%d\n" texidx (tref scene 8) texwidth texheight datasize)
                  (set! tex (Texture texwidth texheight 4 texdata))
                  (update tex)
                  ;; (bind tex #t) ;; send to card
                  ;; (unbind tex)
                  (println tex)
                  ;; (set! texid (ai_load_ogl_texture_from_buffer texdata datasize 0))
                  void)
                (begin
                  (memset s2 0 lgth)
                  (memcpy s2 dir (strlen dir))
                  (memcpy (pref-ptr s2 (strlen dir)) s1 (tref texfile 0))
                  (println 'load-texture-from-file: (Str s2))
                  (set! tex (Texture (Str s2)))
                  (update tex)
                  (println tex)
                  ;; (set! texid (ai_load_ogl_texture s2 0))
                  void))))
      tex)))

      ;; (if (= (aiGetMaterialTexture material 1 0 texfile null null null null null null) 0)
      ;;     (let ((s1 (cast (tref-ptr texfile 1) i8*))
      ;;           (lgth (+ (strlen dir) (tref texfile 0) 1))
      ;;           (s2 (salloc lgth)))
      ;;       (if (= (pref s1 0) 42)
      ;;           (let ((texidx:i32 (atoi (pref-ptr s1 1)))
      ;;                 (texture:aiTexture* (pref (tref scene 9) texidx))
      ;;                 (achformat (tref texture 2))
      ;;                 (texwidth (tref texture 0))
      ;;                 (texheight (tref texture 1))
      ;;                 (texdata (cast (tref texture 3) i8*))
      ;;                 (datasize (if (= texheight 0) texwidth (* 4 texwidth texheight))))
      ;;             ;;(printf "tidx:%d of num:%d w:%d h:%d size:%d\n" texidx (tref scene 8) texwidth texheight datasize)
      ;;             (set! text (Texture texwidth texheight 4 texdata))
      ;;             (println text)
      ;;             ;; (set! texid (ai_load_ogl_texture_from_buffer texdata datasize 0))
      ;;             void)
      ;;           (begin
      ;;             (memset s2 0 lgth)
      ;;             (memcpy s2 dir (strlen dir))
      ;;             (memcpy (pref-ptr s2 (strlen dir)) s1 (tref texfile 0))
      ;;             (println 'load-texture-from-file: (Str s2))
      ;;             (set! text (Texture (Str s2)))
      ;;             (println text)
      ;;             ;; (set! texid (ai_load_ogl_texture s2 0))
      ;;             void))))

(bind-func ai_build_mesh
  (lambda (scene:aiScene* mesh:aiMesh* xmesh:XTMMesh* dir:i8*)
    ;; (printf "\tBuild Mesh\n")
    (let ((facemode:i32* (salloc))
          (vbo:VBO* null)
          (vao:VAO* (VAO))
          (color:aiColor4D* (salloc))
          (val:float* (salloc))
          (diffuse:float* (halloc 4))
          (ambient:float* (halloc 4))
          (specular:float* (halloc 4))
          (emissive:float* (halloc 4))
          (material_index (tref mesh 13))
          (material (pref (tref scene 5) material_index))
          ;; (texid 0)
          (diffuse_tex:Texture* null)
          (normal_tex:Texture* null)
          (specular_tex:Texture* null)
          (height_tex:Texture* null)
          (texfile:aiString* (salloc))
          (name:aiString* (tref-ptr mesh 14)))
      (set! vbo (ai_build_mesh_vbo vao mesh xmesh facemode))
      (tset! xmesh 0 vbo)
      (set! diffuse_tex (load_assim_material_texture scene material aiTextureType_DIFFUSE dir))
      (set! specular_tex (load_assim_material_texture scene material aiTextureType_SPECULAR dir))
      (set! height_tex (load_assim_material_texture scene material aiTextureType_HEIGHT dir))
      (set! normal_tex (load_assim_material_texture scene material aiTextureType_NORMALS dir))
      (tset! xmesh 1 diffuse_tex)
      (tset! xmesh 15 diffuse_tex)
      (tset! xmesh 16 specular_tex)
      (tset! xmesh 17 height_tex)
      (tset! xmesh 18 normal_tex)
      (if (= (aiGetMaterialColor material "$clr.diffuse" 0 0 color) 0)
          (ai_color4_to_float4 color diffuse))
      (tset! xmesh 2 diffuse)
      (if (= (aiGetMaterialColor material "$clr.ambient" 0 0 color) 0)
          (ai_color4_to_float4 color ambient))
      (tset! xmesh 3 ambient)
      (if (= (aiGetMaterialColor material "$clr.specular" 0 0 color) 0)
          (ai_color4_to_float4 color specular))
      (tset! xmesh 4 specular)
      (if (= (aiGetMaterialColor material "$clr.emissive" 0 0 color) 0)
          (ai_color4_to_float4 color emissive))
      (tset! xmesh 5 emissive)
      (if (= (aiGetMaterialFloat material "$mat.shininess" 0 0 val) 0)
          (begin (tset! xmesh 6 (pref val 0)) 1)
          (begin (tset! xmesh 6 0.0) 1))
      (if (= (aiGetMaterialFloat material "$mat.opacity" 0 0 val) 0)
          (begin (tset! xmesh 7 (pref val 0)) 1)
          (begin (tset! xmesh 7 0.0) 1))
      (tset! xmesh 8 (pref facemode 0))
      (tset! xmesh 9 (elements vbo))
      (tset! xmesh 10 vao)
      (tset! xmesh 11 (Str (cast (tref-ptr name 1) i8*)))
      void)))

;; returns the scenes top level node as XTMModel*
(bind-func ai_build_node
  (lambda (scene:aiScene* node:aiNode* _node:XTMModel* parent:XTMModel* dir:i8*)
    (let ((i:i32 0)
          (aiparent:aiNode* (tref node 2))
          (aipn:aiString* (if (null? aiparent) null (tref-ptr aiparent 0)))
          (pnamelgth (if (null? aipn) 0 (tref aipn 0)))
          (pname:i8* (if (null? aipn) null (halloc (+ 1 pnamelgth))))
          (ain:aiString* (tref-ptr node 0))
          (namelgth (tref ain 0))
          (name:i8* (halloc (+ 1 namelgth)))
          (numchildren:i32 (tref node 3))
          (children:aiNode** (tref node 4))
          (_children:XTMModel* (halloc (+ 1 numchildren)))
          (nummeshes:i32 (tref node 5))
          (meshes:aiMesh** (tref scene 3))
          (_meshes:XTMMesh* (halloc (+ 1 nummeshes)))
          (transmat:float* (halloc 16)))
      (memset name 0 (+ namelgth 1))
      (memcpy name (cast (tref-ptr ain 1) i8*) namelgth)
      (if (null? aiparent)
          (println "Node:" (Str name) "Parent:" (Str "") "Children:" numchildren "ptr:" (cast node i8*))
          (begin
            (memset pname 0 (+ pnamelgth 1))
            (memcpy pname (cast (tref-ptr aipn 1) i8*) pnamelgth)
            (println "Node:" (Str name) "Parent:" (Str pname) "Children:" numchildren "ptr:" (cast node i8*))))
      ;;(printf "Build node:%s:%p children(%d)  meshes(%d)\n" name _node numchildren nummeshes)
      (tset! _node 0 (Str name))
      (ai_matrix4_to_float (tref-ptr node 1) transmat)
      (tset! _node 1 transmat)
      (tset! _node 2 parent)
      (tset! _node 3 numchildren)
      (dotimes (i numchildren)
        (ai_build_node scene (pref children i) (pref-ptr _children i) _node dir))
      (tset! _node 4 _children)
      (tset! _node 5 nummeshes)
      (dotimes (i nummeshes)
        (ai_build_mesh scene (pref meshes (pref (tref node 6) i)) (pref-ptr _meshes i) dir))
      (tset! _node 6 _meshes)
      void)))

(bind-func xtm_find_bone
  (lambda (root:XTMModel* str:String*)
    (let ((num_children (tref root 3))
          (children (tref root 4))
          (num_meshes (tref root 5))
          (meshes (tref root 6))
          (found:XTMBone* null)
          (i 0) (j:i32 0))
      (dotimes (i num_meshes)
        (let ((mesh (pref meshes i))
              (num_bones (tref mesh 12))
              (bones (tref mesh 13)))
          (dotimes (j num_bones)
            (if (equal (tref (pref-ptr bones j) 0) str)
                (set! found (pref-ptr bones j))))))
      (set! i 0)
      (while (and (null? found) (< i num_children))
        (set! found (xtm_find_bone (pref-ptr children i) str))
        (set! i (+ i 1)))
      found)))

(bind-func xtm_bone_add_children
  (lambda (bone:XTMBone* node:aiNode* root:XTMModel*)
    (let ((num_children (tref node 3))
          (i:i32 0)
          (children (tref node 4))
          (xtmchildren:XTMBone** (halloc num_children)))
      (dotimes (i num_children)
        (pset! xtmchildren i (xtm_find_bone root (toString (tref-ptr (pref children i) 0)))))
      void)))

(bind-func ai_build_anim_channel
  (lambda (node:aiNodeAnim* scene:aiScene* root:XTMModel*)
    (println "...animNode:>" (tref-ptr node 0) "keyframes:" (tref node 1))
    (let ((aires (ai_find_matching_node (tref scene 1) (tref-ptr node 0)))
          (xtmres (xtm_find_bone root (toString (tref-ptr node 0)))))
      (if (or (null? aires) (null? xtmres))
          (begin (println ".....bone:> No bone found! " (tref-ptr node 0)) void)
          (let ((aiparent (tref aires 2))
                (parent:XTMBone* null)
                (mat:float* (cast (tref-ptr aires 1)))
                (newmat:float* (halloc 16)))
            (memcpy (cast newmat i8*) (cast mat i8*) (* 4 16))
            (tset! xtmres 2 newmat) ;; set transform matrix for xtmbone
            (tset! xtmres 4 (tref aires 3)) ;; set num children for xtmbone
            (xtm_bone_add_children xtmres aires root) ;; add children
            (if (not (null? aiparent))
                (set! parent (xtm_find_bone root (toString (tref-ptr aiparent 0)))))
            (tset! xtmres 6 parent)
            (println ".....bone:>" (tref-ptr aires 0) "parent:"
                     (if (null? parent) (Str "<null>") (tref parent 0))
                     "children:" (tref aires 3) "ptr:" (cast aires i8*))
            void)))))

(bind-func ai_build_animation
  (lambda (scene:aiScene* root:XTMModel*)
    (let ((numanims (convert (tref scene 6)))
          (animations:aiAnimation** (tref scene 7))
          (i:i64 0))
      (dotimes (i numanims)
        (let ((j:i32 0)
              (animation (pref animations i))
              (name (tref-ptr animation 0))
              (duration:double (tref animation 1))
              (tps:double (tref animation 2)) ;; ticks per second
              (num_channels:i32 (tref animation 3))
              (channels:aiNodeAnim** (tref animation 4))
              (num_mesh_channels:i32 (tref animation 5))
              (mesh_channels:aiMeshAnim** (tref animation 6)))
          (println 'Animation: name 'dur: duration 'nodes: num_channels 'meshes: num_mesh_channels)
          (dotimes (j num_channels)
            (ai_build_anim_channel (pref channels j) scene root))
          void)))))

;; returns the scenes top level node as XTMModel*
(bind-func ai_build_scene
  (lambda (scene:aiScene* dir:i8*)
    (printf "Embedded textures: %d\n" (tref scene 8))
    (let ((root:XTMModel* (halloc)))
      (ai_build_node scene (tref scene 1) root null dir)
      (ai_build_animation scene root)
      root)))

;; where post is any post processing required
;; if value is 0 then use default
;; of (+ aiProcess_FindDegenerates aiProcess_Triangulate)
;; if value > 0 then use post exactly as defined
;; which means the user must add AT LEAST aiProcess_Triangulate
;;
(bind-func assimp_load_model
  (lambda (dir file post)
    (let ((lgth (+ (strlen dir) (strlen file) 1))
          (scene:aiScene* null)
          (path:i8* (salloc lgth)))
      (memset path 0 lgth)
      (memcpy path dir (strlen dir))
      (memcpy (pref-ptr path (strlen dir)) file (strlen file))
      (if (> post 0)
          (set! scene (aiImportFile path post))
          (set! scene (aiImportFile path (+ aiProcess_FindDegenerates aiProcess_PreTransformVertices aiProcess_OptimizeMeshes aiProcess_OptimizeGraph aiProcess_Triangulate))))
      ;;(set! scene (aiImportFile path 498379))
      (let ((root:XTMModel*
             (if (null? scene)
                 (begin (printf "Bad Asset! %s\n" path) (cast null XTMModel*))
                 (ai_build_scene scene dir))))
        (if (not (null? scene))
            (begin ;; (printf "delete scene: %p\n" scene)
              (aiReleaseImport scene)))
        root))))

(bind-func assimp_load_model
  (lambda (dir file)
    (assimp_load_model:[XTMModel*,i8*,i8*,i32]* dir file 0)))


(bind-func ai_print_export_formats
  (lambda ()
    (let ((i 0)
          (desc:aiExportFormatDesc* null)
          (cnt (aiGetExportFormatCount)))
      (printf "**************************\n")
      (dotimes (i cnt)
        (set! desc (aiGetExportFormatDescription i))
        (printf "------\nid(%s):ext(%s)\n%s\n" (tref desc 0) (tref desc 2) (tref desc 1)))
      (printf "**************************\n")
      void)))

(bind-func ai_convert
  (lambda (fin fout format:i8* aiprocess)
    (printf "Convert 3D File to %s\n" format)
    (let ((scene (aiImportFile fin aiprocess)))
      (printf "Scene successfully imported\n" scene)
      (aiExportScene scene format fout aiprocess)
      (printf "\n Done exporting scene\n")
      void)))

;; define the constants in Scheme as well
(impc:aot:do-or-emit
 (define aiProcess_CalcTangentSpace #x1))
(impc:aot:do-or-emit
 (define aiProcess_JoinIdenticalVertices #x2))
(impc:aot:do-or-emit
 (define aiProcess_MakeLeftHanded #x4))
(impc:aot:do-or-emit
 (define aiProcess_Triangulate #x8))
(impc:aot:do-or-emit
 (define aiProcess_RemoveComponent #x10))
(impc:aot:do-or-emit
 (define aiProcess_GenNormals #x20))
(impc:aot:do-or-emit
 (define aiProcess_GenSmoothNormals #x40))
(impc:aot:do-or-emit
 (define aiProcess_SplitLargeMeshes #x80))
(impc:aot:do-or-emit
 (define aiProcess_PreTransformVertices #x100))
(impc:aot:do-or-emit
 (define aiProcess_LimitBoneWeights #x200))
(impc:aot:do-or-emit
 (define aiProcess_ValidateDataStructure #x400))
(impc:aot:do-or-emit
 (define aiProcess_ImproveCacheLocality #x800))
(impc:aot:do-or-emit
 (define aiProcess_RemoveRedundantMaterials #x1000))
(impc:aot:do-or-emit
 (define aiProcess_FixInfacingNormals #x2000))
(impc:aot:do-or-emit
 (define aiProcess_SortByPType #x8000))
(impc:aot:do-or-emit
 (define aiProcess_FindDegenerates #x10000))
(impc:aot:do-or-emit
 (define aiProcess_FindInvalidData #x20000))
(impc:aot:do-or-emit
 (define aiProcess_GenUVCoords #x40000))
(impc:aot:do-or-emit
 (define aiProcess_TransformUVCoords #x80000))
(impc:aot:do-or-emit
 (define aiProcess_FindInstances #x100000))
(impc:aot:do-or-emit
 (define aiProcess_OptimizeMeshes #x200000))
(impc:aot:do-or-emit
 (define aiProcess_OptimizeGraph #x400000))
(impc:aot:do-or-emit
 (define aiProcess_FlipUVs #x800000))
(impc:aot:do-or-emit
 (define aiProcess_FlipWindingOrder #x1000000))
(impc:aot:do-or-emit
 (define aiProcess_SplitByBoneCount #x2000000))
(impc:aot:do-or-emit
 (define aiProcess_Debone #x4000000))
;; poor man's Scheme polying
(impc:aot:do-or-emit
 (define assimp_load_model
                       (lambda (dir file . args)
                         (if (null? args)
                             (assimp_load_model_b dir file)
                             (assimp_load_model_a dir file (car args))))))

(impc:aot:insert-footer "xtmassimp")
(define *xtmlib-assimp-loaded* #t)
