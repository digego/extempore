;;; opencl.xtm -- OpenCL 1.2 bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; This file is based on the cl.h header from OSX Yosemite

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/opencl.xtm" 'quiet))
(sys:load-preload-check 'opencl)
(define *xtmlib-opencl-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmopencl")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libCL
  (cond ((string=? (sys:platform) "OSX")
         "/System/Library/Frameworks/OpenCL.framework/OpenCL")
        ((string=? (sys:platform) "Linux")
         "libcl.so")
        ((string=? (sys:platform) "Windows")
         "libcl.dll"))
  "xtmopencl")


(impc:aot:import-ll "xtmopencl")

;;;;;;;;;;;;;;;;;;;
;; cl_platform.h ;;
;;;;;;;;;;;;;;;;;;;

;; TODO check that these alignment requirements are satisfied in xtlang

(bind-alias cl_char i8)
(bind-alias cl_uchar i8)
(bind-alias cl_short i16)    ;; __attribute__((aligned(2)));
(bind-alias cl_ushort i16)  ;; __attribute__((aligned(2)));
(bind-alias cl_int i32)      ;; __attribute__((aligned(4)));
(bind-alias cl_uint i32)    ;; __attribute__((aligned(4)));
(bind-alias cl_long i64)     ;; __attribute__((aligned(8)));
(bind-alias cl_ulong i64)   ;; __attribute__((aligned(8)));
(bind-alias cl_half i16)    ;; __attribute__((aligned(2)));
(bind-alias cl_float float)      ;; __attribute__((aligned(4)));
(bind-alias cl_double double)    ;; __attribute__((aligned(8)));

;; all this stuff is platform dependent! check it makes sense for your
;; platform.
(bind-val CL_CHAR_BIT i32         8)
(bind-val CL_SCHAR_MAX i32        127)
(bind-val CL_SCHAR_MIN i32        -128)
(bind-val CL_CHAR_MAX i32         127) ;; CL_SCHAR_MAX
(bind-val CL_CHAR_MIN i32         -128) ;; CL_SCHAR_MIN
(bind-val CL_UCHAR_MAX i32        255)
(bind-val CL_SHRT_MAX i32         32767)
(bind-val CL_SHRT_MIN i32         -32768)
(bind-val CL_USHRT_MAX i32        65535)
(bind-val CL_INT_MAX i32          2147483647)
(bind-val CL_INT_MIN i32          -2147483648)
(bind-val CL_UINT_MAX i32         #xffffffff)
;; (bind-val CL_LONG_MAX i64         #x7FFFFFFFFFFFFFFFLL)
;; (bind-val CL_LONG_MIN i64         (- #x7FFFFFFFFFFFFFFFLL 1LL))
;; (bind-val CL_ULONG_MAX i64        #xFFFFFFFFFFFFFFFFULL)

(bind-val CL_FLT_DIG i32          6)
(bind-val CL_FLT_MANT_DIG i32     24)
(bind-val CL_FLT_MAX_10_EXP i32   +38)
(bind-val CL_FLT_MAX_EXP i32      +128)
(bind-val CL_FLT_MIN_10_EXP i32   -37)
(bind-val CL_FLT_MIN_EXP i32      -125)
(bind-val CL_FLT_RADIX i32        2)
;; (bind-val CL_FLT_MAX i32          #x1.fffffep127f)
;; (bind-val CL_FLT_MIN i32          #x1.0p-126f)
;; (bind-val CL_FLT_EPSILON i32      #x1.0p-23f)

(bind-val CL_DBL_DIG i32          15)
(bind-val CL_DBL_MANT_DIG i32     53)
(bind-val CL_DBL_MAX_10_EXP i32   +308)
(bind-val CL_DBL_MAX_EXP i32      +1024)
(bind-val CL_DBL_MIN_10_EXP i32   -307)
(bind-val CL_DBL_MIN_EXP i32      -1021)
(bind-val CL_DBL_RADIX i32        2)
;; (bind-val CL_DBL_MAX i32          #x1.fffffffffffffp1023)
;; (bind-val CL_DBL_MIN i32          #x1.0p-1022)
;; (bind-val CL_DBL_EPSILON i32      #x1.0p-52)

(bind-val CL_M_E double            2.718281828459045090796)
(bind-val CL_M_LOG2E double        1.442695040888963387005)
(bind-val CL_M_LOG10E double       0.434294481903251816668)
(bind-val CL_M_LN2 double          0.693147180559945286227)
(bind-val CL_M_LN10 double         2.302585092994045901094)
(bind-val CL_M_PI double           3.141592653589793115998)
(bind-val CL_M_PI_2 double         1.570796326794896557999)
(bind-val CL_M_PI_4 double         0.785398163397448278999)
(bind-val CL_M_1_PI double         0.318309886183790691216)
(bind-val CL_M_2_PI double         0.636619772367581382433)
(bind-val CL_M_2_SQRTPI double     1.128379167095512558561)
(bind-val CL_M_SQRT2 double        1.414213562373095145475)
(bind-val CL_M_SQRT1_2 double      0.707106781186547572737)

(bind-val CL_M_E_F float           2.71828174591064)
(bind-val CL_M_LOG2E_F float       1.44269502162933)
(bind-val CL_M_LOG10E_F float      0.43429449200630)
(bind-val CL_M_LN2_F float         0.69314718246460)
(bind-val CL_M_LN10_F float        2.30258512496948)
(bind-val CL_M_PI_F float          3.14159274101257)
(bind-val CL_M_PI_2_F float        1.57079637050629)
(bind-val CL_M_PI_4_F float        0.78539818525314)
(bind-val CL_M_1_PI_F float        0.31830987334251)
(bind-val CL_M_2_PI_F float        0.63661974668503)
(bind-val CL_M_2_SQRTPI_F float    1.12837922573090)
(bind-val CL_M_SQRT2_F float       1.41421353816986)
(bind-val CL_M_SQRT1_2_F float     0.70710676908493)

;; #if defined( __GNUC__ )
;;    #define CL_HUGE_VALF     __builtin_huge_valf()
;;    #define CL_HUGE_VAL      __builtin_huge_val()
;;    #define CL_NAN           __builtin_nanf( "" )
;; #else
;;    #define CL_HUGE_VALF     ((cl_float) 1e50)
;;    #define CL_HUGE_VAL      ((cl_double) 1e500)
;;    float nanf( const char * );
;;    #define CL_NAN           nanf( "" )
;; #endif
;; #define CL_MAXFLOAT         CL_FLT_MAX
;; #define CL_INFINITY         CL_HUGE_VALF

;;;;;;;;;;
;; cl.h ;;
;;;;;;;;;;

(bind-alias _cl_platform_id i8)
(bind-alias _cl_device_id i8)
(bind-alias _cl_context i8)
(bind-alias _cl_command_queue i8)
(bind-alias _cl_mem i8)
(bind-alias _cl_program i8)
(bind-alias _cl_kernel i8)
(bind-alias _cl_event i8)
(bind-alias _cl_sampler i8)

(bind-alias cl_platform_id _cl_platform_id*)
(bind-alias cl_device_id _cl_device_id*)
(bind-alias cl_context _cl_context*)
(bind-alias cl_command_queue _cl_command_queue*)
(bind-alias cl_mem _cl_mem*)
(bind-alias cl_program _cl_program*)
(bind-alias cl_kernel _cl_kernel*)
(bind-alias cl_event _cl_event*)
(bind-alias cl_sampler _cl_sampler*)

(bind-alias intptr_t size_t) ;; technically not guaranteed, but probably true

(bind-alias cl_bool cl_uint)
(bind-alias cl_bitfield cl_ulong)
(bind-alias cl_device_type cl_bitfield)
(bind-alias cl_platform_info cl_uint)
(bind-alias cl_device_info cl_uint)
(bind-alias cl_device_fp_config cl_bitfield)
(bind-alias cl_device_mem_cache_type cl_uint)
(bind-alias cl_device_local_mem_type cl_uint)
(bind-alias cl_device_exec_capabilities cl_bitfield)
(bind-alias cl_command_queue_properties cl_bitfield)
(bind-alias cl_device_partition_property intptr_t)
(bind-alias cl_device_affinity_domain cl_bitfield)

(bind-alias cl_context_properties intptr_t)
(bind-alias cl_context_info cl_uint)
(bind-alias cl_command_queue_info cl_uint)
(bind-alias cl_channel_order cl_uint)
(bind-alias cl_channel_type cl_uint)
(bind-alias cl_mem_flags cl_bitfield)
(bind-alias cl_mem_object_type cl_uint)
(bind-alias cl_mem_info cl_uint)
(bind-alias cl_mem_migration_flags cl_bitfield)
(bind-alias cl_image_info cl_uint)
(bind-alias cl_buffer_create_type cl_uint)
(bind-alias cl_addressing_mode cl_uint)
(bind-alias cl_filter_mode cl_uint)
(bind-alias cl_sampler_info cl_uint)
(bind-alias cl_map_flags cl_bitfield)
(bind-alias cl_program_info cl_uint)
(bind-alias cl_program_build_info cl_uint)
(bind-alias cl_program_binary_type cl_uint)
(bind-alias cl_build_status cl_int)
(bind-alias cl_kernel_info cl_uint)
(bind-alias cl_kernel_arg_info cl_uint)
(bind-alias cl_kernel_arg_address_qualifier cl_uint)
(bind-alias cl_kernel_arg_access_qualifier cl_uint)
(bind-alias cl_kernel_arg_type_qualifier cl_bitfield)
(bind-alias cl_kernel_work_group_info cl_uint)
(bind-alias cl_event_info cl_uint)
(bind-alias cl_command_type cl_uint)
(bind-alias cl_profiling_info cl_uint)

;; typedef struct _cl_image_format {
;;     cl_channel_order        image_channel_order;
;;     cl_channel_type         image_channel_data_type;
;; } cl_image_format;
(bind-type cl_image_format <cl_channel_order,cl_channel_type>)

;; typedef struct _cl_image_desc {
;;     cl_mem_object_type      image_type;
;;     size_t                  image_width;
;;     size_t                  image_height;
;;     size_t                  image_depth;
;;     size_t                  image_array_size;
;;     size_t                  image_row_pitch;
;;     size_t                  image_slice_pitch;
;;     cl_uint                 num_mip_levels;
;;     cl_uint                 num_samples;
;;     cl_mem                  buffer;
;; };
(bind-type cl_image_desc <cl_mem_object_type,size_t,size_t,size_t,size_t,size_t,size_t,cl_uint,cl_uint,cl_mem>)

;; typedef struct _cl_buffer_region {
;;     size_t                  origin;
;;     size_t                  size;
;; } cl_buffer_region;
(bind-type cl_buffer_region <size_t,size_t>)

;; /******************************************************************************/

;; /* Error Codes */
(bind-val CL_SUCCESS i32 0)
(bind-val CL_DEVICE_NOT_FOUND i32 -1)
(bind-val CL_DEVICE_NOT_AVAILABLE i32 -2)
(bind-val CL_COMPILER_NOT_AVAILABLE i32 -3)
(bind-val CL_MEM_OBJECT_ALLOCATION_FAILURE i32 -4)
(bind-val CL_OUT_OF_RESOURCES i32 -5)
(bind-val CL_OUT_OF_HOST_MEMORY i32 -6)
(bind-val CL_PROFILING_INFO_NOT_AVAILABLE i32 -7)
(bind-val CL_MEM_COPY_OVERLAP i32 -8)
(bind-val CL_IMAGE_FORMAT_MISMATCH i32 -9)
(bind-val CL_IMAGE_FORMAT_NOT_SUPPORTED i32 -10)
(bind-val CL_BUILD_PROGRAM_FAILURE i32 -11)
(bind-val CL_MAP_FAILURE i32 -12)
(bind-val CL_MISALIGNED_SUB_BUFFER_OFFSET i32 -13)
(bind-val CL_EXEC_STATUS_ERROR_FOR_EVENTS_IN_WAIT_LIST i32 -14)
(bind-val CL_COMPILE_PROGRAM_FAILURE i32 -15)
(bind-val CL_LINKER_NOT_AVAILABLE i32 -16)
(bind-val CL_LINK_PROGRAM_FAILURE i32 -17)
(bind-val CL_DEVICE_PARTITION_FAILED i32 -18)
(bind-val CL_KERNEL_ARG_INFO_NOT_AVAILABLE i32 -19)

(bind-val CL_INVALID_VALUE i32 -30)
(bind-val CL_INVALID_DEVICE_TYPE i32 -31)
(bind-val CL_INVALID_PLATFORM i32 -32)
(bind-val CL_INVALID_DEVICE i32 -33)
(bind-val CL_INVALID_CONTEXT i32 -34)
(bind-val CL_INVALID_QUEUE_PROPERTIES i32 -35)
(bind-val CL_INVALID_COMMAND_QUEUE i32 -36)
(bind-val CL_INVALID_HOST_PTR i32 -37)
(bind-val CL_INVALID_MEM_OBJECT i32 -38)
(bind-val CL_INVALID_IMAGE_FORMAT_DESCRIPTOR i32 -39)
(bind-val CL_INVALID_IMAGE_SIZE i32 -40)
(bind-val CL_INVALID_SAMPLER i32 -41)
(bind-val CL_INVALID_BINARY i32 -42)
(bind-val CL_INVALID_BUILD_OPTIONS i32 -43)
(bind-val CL_INVALID_PROGRAM i32 -44)
(bind-val CL_INVALID_PROGRAM_EXECUTABLE i32 -45)
(bind-val CL_INVALID_KERNEL_NAME i32 -46)
(bind-val CL_INVALID_KERNEL_DEFINITION i32 -47)
(bind-val CL_INVALID_KERNEL i32 -48)
(bind-val CL_INVALID_ARG_INDEX i32 -49)
(bind-val CL_INVALID_ARG_VALUE i32 -50)
(bind-val CL_INVALID_ARG_SIZE i32 -51)
(bind-val CL_INVALID_KERNEL_ARGS i32 -52)
(bind-val CL_INVALID_WORK_DIMENSION i32 -53)
(bind-val CL_INVALID_WORK_GROUP_SIZE i32 -54)
(bind-val CL_INVALID_WORK_ITEM_SIZE i32 -55)
(bind-val CL_INVALID_GLOBAL_OFFSET i32 -56)
(bind-val CL_INVALID_EVENT_WAIT_LIST i32 -57)
(bind-val CL_INVALID_EVENT i32 -58)
(bind-val CL_INVALID_OPERATION i32 -59)
(bind-val CL_INVALID_GL_OBJECT i32 -60)
(bind-val CL_INVALID_BUFFER_SIZE i32 -61)
(bind-val CL_INVALID_MIP_LEVEL i32 -62)
(bind-val CL_INVALID_GLOBAL_WORK_SIZE i32 -63)
(bind-val CL_INVALID_PROPERTY i32 -64)
(bind-val CL_INVALID_IMAGE_DESCRIPTOR i32 -65)
(bind-val CL_INVALID_COMPILER_OPTIONS i32 -66)
(bind-val CL_INVALID_LINKER_OPTIONS i32 -67)
(bind-val CL_INVALID_DEVICE_PARTITION_COUNT i32 -68)

;; /* OpenCL Version */
(bind-val CL_VERSION_1_0 i32 1)
(bind-val CL_VERSION_1_1 i32 1)
(bind-val CL_VERSION_1_2 i32 1)

;; /* cl_bool */
(bind-val CL_FALSE i32 0)
(bind-val CL_TRUE i32 1)
(bind-val CL_BLOCKING i32 1) ;; CL_TRUE
(bind-val CL_NON_BLOCKING i32 0) ;; CL_FALSE

;; /* cl_platform_info */
(bind-val CL_PLATFORM_PROFILE i32 #x0900)
(bind-val CL_PLATFORM_VERSION i32 #x0901)
(bind-val CL_PLATFORM_NAME i32 #x0902)
(bind-val CL_PLATFORM_VENDOR i32 #x0903)
(bind-val CL_PLATFORM_EXTENSIONS i32 #x0904)

;; /* cl_device_type - bitfield */
(bind-val CL_DEVICE_TYPE_DEFAULT cl_bitfield (<< 1 0))
(bind-val CL_DEVICE_TYPE_CPU cl_bitfield (<< 1 1))
(bind-val CL_DEVICE_TYPE_GPU cl_bitfield (<< 1 2))
(bind-val CL_DEVICE_TYPE_ACCELERATOR cl_bitfield (<< 1 3))
(bind-val CL_DEVICE_TYPE_CUSTOM cl_bitfield (<< 1 4))
(bind-val CL_DEVICE_TYPE_ALL cl_bitfield #xFFFFFFFF)

;; /* cl_device_info */
(bind-val CL_DEVICE_TYPE i32 #x1000)
(bind-val CL_DEVICE_VENDOR_ID i32 #x1001)
(bind-val CL_DEVICE_MAX_COMPUTE_UNITS i32 #x1002)
(bind-val CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS i32 #x1003)
(bind-val CL_DEVICE_MAX_WORK_GROUP_SIZE i32 #x1004)
(bind-val CL_DEVICE_MAX_WORK_ITEM_SIZES i32 #x1005)
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR i32 #x1006)
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT i32 #x1007)
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT i32 #x1008)
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG i32 #x1009)
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT i32 #x100A)
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE i32 #x100B)
(bind-val CL_DEVICE_MAX_CLOCK_FREQUENCY i32 #x100C)
(bind-val CL_DEVICE_ADDRESS_BITS i32 #x100D)
(bind-val CL_DEVICE_MAX_READ_IMAGE_ARGS i32 #x100E)
(bind-val CL_DEVICE_MAX_WRITE_IMAGE_ARGS i32 #x100F)
(bind-val CL_DEVICE_MAX_MEM_ALLOC_SIZE i32 #x1010)
(bind-val CL_DEVICE_IMAGE2D_MAX_WIDTH i32 #x1011)
(bind-val CL_DEVICE_IMAGE2D_MAX_HEIGHT i32 #x1012)
(bind-val CL_DEVICE_IMAGE3D_MAX_WIDTH i32 #x1013)
(bind-val CL_DEVICE_IMAGE3D_MAX_HEIGHT i32 #x1014)
(bind-val CL_DEVICE_IMAGE3D_MAX_DEPTH i32 #x1015)
(bind-val CL_DEVICE_IMAGE_SUPPORT i32 #x1016)
(bind-val CL_DEVICE_MAX_PARAMETER_SIZE i32 #x1017)
(bind-val CL_DEVICE_MAX_SAMPLERS i32 #x1018)
(bind-val CL_DEVICE_MEM_BASE_ADDR_ALIGN i32 #x1019)
(bind-val CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE i32 #x101A)
(bind-val CL_DEVICE_SINGLE_FP_CONFIG i32 #x101B)
(bind-val CL_DEVICE_GLOBAL_MEM_CACHE_TYPE i32 #x101C)
(bind-val CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE i32 #x101D)
(bind-val CL_DEVICE_GLOBAL_MEM_CACHE_SIZE i32 #x101E)
(bind-val CL_DEVICE_GLOBAL_MEM_SIZE i32 #x101F)
(bind-val CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE i32 #x1020)
(bind-val CL_DEVICE_MAX_CONSTANT_ARGS i32 #x1021)
(bind-val CL_DEVICE_LOCAL_MEM_TYPE i32 #x1022)
(bind-val CL_DEVICE_LOCAL_MEM_SIZE i32 #x1023)
(bind-val CL_DEVICE_ERROR_CORRECTION_SUPPORT i32 #x1024)
(bind-val CL_DEVICE_PROFILING_TIMER_RESOLUTION i32 #x1025)
(bind-val CL_DEVICE_ENDIAN_LITTLE i32 #x1026)
(bind-val CL_DEVICE_AVAILABLE i32 #x1027)
(bind-val CL_DEVICE_COMPILER_AVAILABLE i32 #x1028)
(bind-val CL_DEVICE_EXECUTION_CAPABILITIES i32 #x1029)
(bind-val CL_DEVICE_QUEUE_PROPERTIES i32 #x102A)
(bind-val CL_DEVICE_NAME i32 #x102B)
(bind-val CL_DEVICE_VENDOR i32 #x102C)
(bind-val CL_DRIVER_VERSION i32 #x102D)
(bind-val CL_DEVICE_PROFILE i32 #x102E)
(bind-val CL_DEVICE_VERSION i32 #x102F)
(bind-val CL_DEVICE_EXTENSIONS i32 #x1030)
(bind-val CL_DEVICE_PLATFORM i32 #x1031)
(bind-val CL_DEVICE_DOUBLE_FP_CONFIG i32 #x1032)
;; /* 0x1033 reserved for CL_DEVICE_HALF_FP_CONFIG */
(bind-val CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF i32 #x1034)
(bind-val CL_DEVICE_HOST_UNIFIED_MEMORY i32 #x1035)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR i32 #x1036)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT i32 #x1037)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_INT i32 #x1038)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG i32 #x1039)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT i32 #x103A)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE i32 #x103B)
(bind-val CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF i32 #x103C)
(bind-val CL_DEVICE_OPENCL_C_VERSION i32 #x103D)
(bind-val CL_DEVICE_LINKER_AVAILABLE i32 #x103E)
(bind-val CL_DEVICE_BUILT_IN_KERNELS i32 #x103F)
(bind-val CL_DEVICE_IMAGE_MAX_BUFFER_SIZE i32 #x1040)
(bind-val CL_DEVICE_IMAGE_MAX_ARRAY_SIZE i32 #x1041)
(bind-val CL_DEVICE_PARENT_DEVICE i32 #x1042)
(bind-val CL_DEVICE_PARTITION_MAX_SUB_DEVICES i32 #x1043)
(bind-val CL_DEVICE_PARTITION_PROPERTIES i32 #x1044)
(bind-val CL_DEVICE_PARTITION_AFFINITY_DOMAIN i32 #x1045)
(bind-val CL_DEVICE_PARTITION_TYPE i32 #x1046)
(bind-val CL_DEVICE_REFERENCE_COUNT i32 #x1047)
(bind-val CL_DEVICE_PREFERRED_INTEROP_USER_SYNC i32 #x1048)
(bind-val CL_DEVICE_PRINTF_BUFFER_SIZE i32 #x1049)
(bind-val CL_DEVICE_IMAGE_PITCH_ALIGNMENT i32 #x104A)
(bind-val CL_DEVICE_IMAGE_BASE_ADDRESS_ALIGNMENT i32 #x104B)

;; /* cl_device_fp_config - bitfield */
(bind-val CL_FP_DENORM cl_bitfield (<< 1 0))
(bind-val CL_FP_INF_NAN cl_bitfield (<< 1 1))
(bind-val CL_FP_ROUND_TO_NEAREST cl_bitfield (<< 1 2))
(bind-val CL_FP_ROUND_TO_ZERO cl_bitfield (<< 1 3))
(bind-val CL_FP_ROUND_TO_INF cl_bitfield (<< 1 4))
(bind-val CL_FP_FMA cl_bitfield (<< 1 5))
(bind-val CL_FP_SOFT_FLOAT cl_bitfield (<< 1 6))
(bind-val CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT cl_bitfield (<< 1 7))

;; /* cl_device_mem_cache_type */
(bind-val CL_NONE i32 #x0)
(bind-val CL_READ_ONLY_CACHE i32 #x1)
(bind-val CL_READ_WRITE_CACHE i32 #x2)

;; /* cl_device_local_mem_type */
(bind-val CL_LOCAL i32 #x1)
(bind-val CL_GLOBAL i32 #x2)

;; /* cl_device_exec_capabilities - bitfield */
(bind-val CL_EXEC_KERNEL cl_bitfield (<< 1 0))
(bind-val CL_EXEC_NATIVE_KERNEL cl_bitfield (<< 1 1))

;; /* cl_command_queue_properties - bitfield */
(bind-val CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE cl_bitfield (<< 1 0))
(bind-val CL_QUEUE_PROFILING_ENABLE cl_bitfield (<< 1 1))

;; /* cl_context_info  */
(bind-val CL_CONTEXT_REFERENCE_COUNT i32 #x1080)
(bind-val CL_CONTEXT_DEVICES i32 #x1081)
(bind-val CL_CONTEXT_PROPERTIES i32 #x1082)
(bind-val CL_CONTEXT_NUM_DEVICES i32 #x1083)

;; /* cl_context_properties */
(bind-val CL_CONTEXT_PLATFORM i32 #x1084)
(bind-val CL_CONTEXT_INTEROP_USER_SYNC i32 #x1085)

;; /* cl_device_partition_property */
(bind-val CL_DEVICE_PARTITION_EQUALLY i32 #x1086)
(bind-val CL_DEVICE_PARTITION_BY_COUNTS i32 #x1087)
(bind-val CL_DEVICE_PARTITION_BY_COUNTS_LIST_END i32 #x0)
(bind-val CL_DEVICE_PARTITION_BY_AFFINITY_DOMAIN i32 #x1088)

;; /* cl_device_affinity_domain */
(bind-val CL_DEVICE_AFFINITY_DOMAIN_NUMA cl_bitfield (<< 1 0))
(bind-val CL_DEVICE_AFFINITY_DOMAIN_L4_CACHE cl_bitfield (<< 1 1))
(bind-val CL_DEVICE_AFFINITY_DOMAIN_L3_CACHE cl_bitfield (<< 1 2))
(bind-val CL_DEVICE_AFFINITY_DOMAIN_L2_CACHE cl_bitfield (<< 1 3))
(bind-val CL_DEVICE_AFFINITY_DOMAIN_L1_CACHE cl_bitfield (<< 1 4))
(bind-val CL_DEVICE_AFFINITY_DOMAIN_NEXT_PARTITIONABLE cl_bitfield (<< 1 5))

;; /* cl_command_queue_info */
(bind-val CL_QUEUE_CONTEXT i32 #x1090)
(bind-val CL_QUEUE_DEVICE i32 #x1091)
(bind-val CL_QUEUE_REFERENCE_COUNT i32 #x1092)
(bind-val CL_QUEUE_PROPERTIES i32 #x1093)

;; /* cl_mem_flags - bitfield */
(bind-val CL_MEM_READ_WRITE cl_bitfield (<< 1 0))
(bind-val CL_MEM_WRITE_ONLY cl_bitfield (<< 1 1))
(bind-val CL_MEM_READ_ONLY cl_bitfield (<< 1 2))
(bind-val CL_MEM_USE_HOST_PTR cl_bitfield (<< 1 3))
(bind-val CL_MEM_ALLOC_HOST_PTR cl_bitfield (<< 1 4))
(bind-val CL_MEM_COPY_HOST_PTR cl_bitfield (<< 1 5))
;; reserved                    cl_bitfield (<< 1 6)
(bind-val CL_MEM_HOST_WRITE_ONLY cl_bitfield (<< 1 7))
(bind-val CL_MEM_HOST_READ_ONLY cl_bitfield (<< 1 8))
(bind-val CL_MEM_HOST_NO_ACCESS cl_bitfield (<< 1 9))

;; /* cl_mem_migration_flags - bitfield */
(bind-val CL_MIGRATE_MEM_OBJECT_HOST cl_bitfield (<< 1 0))
(bind-val CL_MIGRATE_MEM_OBJECT_CONTENT_UNDEFINED cl_bitfield (<< 1 1))

;; /* cl_channel_order */
(bind-val CL_R i32 #x10B0)
(bind-val CL_A i32 #x10B1)
(bind-val CL_RG i32 #x10B2)
(bind-val CL_RA i32 #x10B3)
(bind-val CL_RGB i32 #x10B4)
(bind-val CL_RGBA i32 #x10B5)
(bind-val CL_BGRA i32 #x10B6)
(bind-val CL_ARGB i32 #x10B7)
(bind-val CL_INTENSITY i32 #x10B8)
(bind-val CL_LUMINANCE i32 #x10B9)
(bind-val CL_Rx i32 #x10BA)
(bind-val CL_RGx i32 #x10BB)
(bind-val CL_RGBx i32 #x10BC)
(bind-val CL_DEPTH i32 #x10BD)
(bind-val CL_DEPTH_STENCIL i32 #x10BE)

;; /* cl_channel_type */
(bind-val CL_SNORM_INT8 i32 #x10D0)
(bind-val CL_SNORM_INT16 i32 #x10D1)
(bind-val CL_UNORM_INT8 i32 #x10D2)
(bind-val CL_UNORM_INT16 i32 #x10D3)
(bind-val CL_UNORM_SHORT_565 i32 #x10D4)
(bind-val CL_UNORM_SHORT_555 i32 #x10D5)
(bind-val CL_UNORM_INT_101010 i32 #x10D6)
(bind-val CL_SIGNED_INT8 i32 #x10D7)
(bind-val CL_SIGNED_INT16 i32 #x10D8)
(bind-val CL_SIGNED_INT32 i32 #x10D9)
(bind-val CL_UNSIGNED_INT8 i32 #x10DA)
(bind-val CL_UNSIGNED_INT16 i32 #x10DB)
(bind-val CL_UNSIGNED_INT32 i32 #x10DC)
(bind-val CL_HALF_FLOAT i32 #x10DD)
(bind-val CL_FLOAT i32 #x10DE)
(bind-val CL_UNORM_INT24 i32 #x10DF)

;; /* cl_mem_object_type */
(bind-val CL_MEM_OBJECT_BUFFER i32 #x10F0)
(bind-val CL_MEM_OBJECT_IMAGE2D i32 #x10F1)
(bind-val CL_MEM_OBJECT_IMAGE3D i32 #x10F2)
(bind-val CL_MEM_OBJECT_IMAGE2D_ARRAY i32 #x10F3)
(bind-val CL_MEM_OBJECT_IMAGE1D i32 #x10F4)
(bind-val CL_MEM_OBJECT_IMAGE1D_ARRAY i32 #x10F5)
(bind-val CL_MEM_OBJECT_IMAGE1D_BUFFER i32 #x10F6)

;; /* cl_mem_info */
(bind-val CL_MEM_TYPE i32 #x1100)
(bind-val CL_MEM_FLAGS i32 #x1101)
(bind-val CL_MEM_SIZE i32 #x1102)
(bind-val CL_MEM_HOST_PTR i32 #x1103)
(bind-val CL_MEM_MAP_COUNT i32 #x1104)
(bind-val CL_MEM_REFERENCE_COUNT i32 #x1105)
(bind-val CL_MEM_CONTEXT i32 #x1106)
(bind-val CL_MEM_ASSOCIATED_MEMOBJECT i32 #x1107)
(bind-val CL_MEM_OFFSET i32 #x1108)

;; /* cl_image_info */
(bind-val CL_IMAGE_FORMAT i32 #x1110)
(bind-val CL_IMAGE_ELEMENT_SIZE i32 #x1111)
(bind-val CL_IMAGE_ROW_PITCH i32 #x1112)
(bind-val CL_IMAGE_SLICE_PITCH i32 #x1113)
(bind-val CL_IMAGE_WIDTH i32 #x1114)
(bind-val CL_IMAGE_HEIGHT i32 #x1115)
(bind-val CL_IMAGE_DEPTH i32 #x1116)
(bind-val CL_IMAGE_ARRAY_SIZE i32 #x1117)
(bind-val CL_IMAGE_BUFFER i32 #x1118)
(bind-val CL_IMAGE_NUM_MIP_LEVELS i32 #x1119)
(bind-val CL_IMAGE_NUM_SAMPLES i32 #x111A)

;; /* cl_addressing_mode */
(bind-val CL_ADDRESS_NONE i32 #x1130)
(bind-val CL_ADDRESS_CLAMP_TO_EDGE i32 #x1131)
(bind-val CL_ADDRESS_CLAMP i32 #x1132)
(bind-val CL_ADDRESS_REPEAT i32 #x1133)
(bind-val CL_ADDRESS_MIRRORED_REPEAT i32 #x1134)

;; /* cl_filter_mode */
(bind-val CL_FILTER_NEAREST i32 #x1140)
(bind-val CL_FILTER_LINEAR i32 #x1141)

;; /* cl_sampler_info */
(bind-val CL_SAMPLER_REFERENCE_COUNT i32 #x1150)
(bind-val CL_SAMPLER_CONTEXT i32 #x1151)
(bind-val CL_SAMPLER_NORMALIZED_COORDS i32 #x1152)
(bind-val CL_SAMPLER_ADDRESSING_MODE i32 #x1153)
(bind-val CL_SAMPLER_FILTER_MODE i32 #x1154)

;; /* cl_map_flags - bitfield */
(bind-val CL_MAP_READ cl_bitfield (<< 1 0))
(bind-val CL_MAP_WRITE cl_bitfield (<< 1 1))
(bind-val CL_MAP_WRITE_INVALIDATE_REGION cl_bitfield (<< 1 2))

;; /* cl_program_info */
(bind-val CL_PROGRAM_REFERENCE_COUNT i32 #x1160)
(bind-val CL_PROGRAM_CONTEXT i32 #x1161)
(bind-val CL_PROGRAM_NUM_DEVICES i32 #x1162)
(bind-val CL_PROGRAM_DEVICES i32 #x1163)
(bind-val CL_PROGRAM_SOURCE i32 #x1164)
(bind-val CL_PROGRAM_BINARY_SIZES i32 #x1165)
(bind-val CL_PROGRAM_BINARIES i32 #x1166)
(bind-val CL_PROGRAM_NUM_KERNELS i32 #x1167)
(bind-val CL_PROGRAM_KERNEL_NAMES i32 #x1168)

;; /* cl_program_build_info */
(bind-val CL_PROGRAM_BUILD_STATUS i32 #x1181)
(bind-val CL_PROGRAM_BUILD_OPTIONS i32 #x1182)
(bind-val CL_PROGRAM_BUILD_LOG i32 #x1183)
(bind-val CL_PROGRAM_BINARY_TYPE i32 #x1184)

;; /* cl_program_binary_type */
(bind-val CL_PROGRAM_BINARY_TYPE_NONE i32 #x0)
(bind-val CL_PROGRAM_BINARY_TYPE_COMPILED_OBJECT i32 #x1)
(bind-val CL_PROGRAM_BINARY_TYPE_LIBRARY i32 #x2)
(bind-val CL_PROGRAM_BINARY_TYPE_EXECUTABLE i32 #x4)

;; /* cl_build_status */
(bind-val CL_BUILD_SUCCESS i32 0)
(bind-val CL_BUILD_NONE i32 -1)
(bind-val CL_BUILD_ERROR i32 -2)
(bind-val CL_BUILD_IN_PROGRESS i32 -3)

;; /* cl_kernel_info */
(bind-val CL_KERNEL_FUNCTION_NAME i32 #x1190)
(bind-val CL_KERNEL_NUM_ARGS i32 #x1191)
(bind-val CL_KERNEL_REFERENCE_COUNT i32 #x1192)
(bind-val CL_KERNEL_CONTEXT i32 #x1193)
(bind-val CL_KERNEL_PROGRAM i32 #x1194)
(bind-val CL_KERNEL_ATTRIBUTES i32 #x1195)

;; /* cl_kernel_arg_info */
(bind-val CL_KERNEL_ARG_ADDRESS_QUALIFIER i32 #x1196)
(bind-val CL_KERNEL_ARG_ACCESS_QUALIFIER i32 #x1197)
(bind-val CL_KERNEL_ARG_TYPE_NAME i32 #x1198)
(bind-val CL_KERNEL_ARG_TYPE_QUALIFIER i32 #x1199)
(bind-val CL_KERNEL_ARG_NAME i32 #x119A)

;; /* cl_kernel_arg_address_qualifier */
(bind-val CL_KERNEL_ARG_ADDRESS_GLOBAL i32 #x119B)
(bind-val CL_KERNEL_ARG_ADDRESS_LOCAL i32 #x119C)
(bind-val CL_KERNEL_ARG_ADDRESS_CONSTANT i32 #x119D)
(bind-val CL_KERNEL_ARG_ADDRESS_PRIVATE i32 #x119E)

;; /* cl_kernel_arg_access_qualifier */
(bind-val CL_KERNEL_ARG_ACCESS_READ_ONLY i32 #x11A0)
(bind-val CL_KERNEL_ARG_ACCESS_WRITE_ONLY i32 #x11A1)
(bind-val CL_KERNEL_ARG_ACCESS_READ_WRITE i32 #x11A2)
(bind-val CL_KERNEL_ARG_ACCESS_NONE i32 #x11A3)

;; /* cl_kernel_arg_type_qualifer */
(bind-val CL_KERNEL_ARG_TYPE_NONE i32 0)
(bind-val CL_KERNEL_ARG_TYPE_CONST cl_bitfield (<< 1 0))
(bind-val CL_KERNEL_ARG_TYPE_RESTRICT cl_bitfield (<< 1 1))
(bind-val CL_KERNEL_ARG_TYPE_VOLATILE cl_bitfield (<< 1 2))

;; /* cl_kernel_work_group_info */
(bind-val CL_KERNEL_WORK_GROUP_SIZE i32 #x11B0)
(bind-val CL_KERNEL_COMPILE_WORK_GROUP_SIZE i32 #x11B1)
(bind-val CL_KERNEL_LOCAL_MEM_SIZE i32 #x11B2)
(bind-val CL_KERNEL_PREFERRED_WORK_GROUP_SIZE_MULTIPLE i32 #x11B3)
(bind-val CL_KERNEL_PRIVATE_MEM_SIZE i32 #x11B4)
(bind-val CL_KERNEL_GLOBAL_WORK_SIZE i32 #x11B5)

;; /* cl_event_info  */
(bind-val CL_EVENT_COMMAND_QUEUE i32 #x11D0)
(bind-val CL_EVENT_COMMAND_TYPE i32 #x11D1)
(bind-val CL_EVENT_REFERENCE_COUNT i32 #x11D2)
(bind-val CL_EVENT_COMMAND_EXECUTION_STATUS i32 #x11D3)
(bind-val CL_EVENT_CONTEXT i32 #x11D4)

;; /* cl_command_type */
(bind-val CL_COMMAND_NDRANGE_KERNEL i32 #x11F0)
(bind-val CL_COMMAND_TASK i32 #x11F1)
(bind-val CL_COMMAND_NATIVE_KERNEL i32 #x11F2)
(bind-val CL_COMMAND_READ_BUFFER i32 #x11F3)
(bind-val CL_COMMAND_WRITE_BUFFER i32 #x11F4)
(bind-val CL_COMMAND_COPY_BUFFER i32 #x11F5)
(bind-val CL_COMMAND_READ_IMAGE i32 #x11F6)
(bind-val CL_COMMAND_WRITE_IMAGE i32 #x11F7)
(bind-val CL_COMMAND_COPY_IMAGE i32 #x11F8)
(bind-val CL_COMMAND_COPY_IMAGE_TO_BUFFER i32 #x11F9)
(bind-val CL_COMMAND_COPY_BUFFER_TO_IMAGE i32 #x11FA)
(bind-val CL_COMMAND_MAP_BUFFER i32 #x11FB)
(bind-val CL_COMMAND_MAP_IMAGE i32 #x11FC)
(bind-val CL_COMMAND_UNMAP_MEM_OBJECT i32 #x11FD)
(bind-val CL_COMMAND_MARKER i32 #x11FE)
(bind-val CL_COMMAND_ACQUIRE_GL_OBJECTS i32 #x11FF)
(bind-val CL_COMMAND_RELEASE_GL_OBJECTS i32 #x1200)
(bind-val CL_COMMAND_READ_BUFFER_RECT i32 #x1201)
(bind-val CL_COMMAND_WRITE_BUFFER_RECT i32 #x1202)
(bind-val CL_COMMAND_COPY_BUFFER_RECT i32 #x1203)
(bind-val CL_COMMAND_USER i32 #x1204)
(bind-val CL_COMMAND_BARRIER i32 #x1205)
(bind-val CL_COMMAND_MIGRATE_MEM_OBJECTS i32 #x1206)
(bind-val CL_COMMAND_FILL_BUFFER i32 #x1207)
(bind-val CL_COMMAND_FILL_IMAGE i32 #x1208)

;; /* command execution status */
(bind-val CL_COMPLETE i32 #x0)
(bind-val CL_RUNNING i32 #x1)
(bind-val CL_SUBMITTED i32 #x2)
(bind-val CL_QUEUED i32 #x3)

;; /* cl_buffer_create_type  */
(bind-val CL_BUFFER_CREATE_TYPE_REGION i32 #x1220)

;; /* cl_profiling_info  */
(bind-val CL_PROFILING_COMMAND_QUEUED i32 #x1280)
(bind-val CL_PROFILING_COMMAND_SUBMIT i32 #x1281)
(bind-val CL_PROFILING_COMMAND_START i32 #x1282)
(bind-val CL_PROFILING_COMMAND_END i32 #x1283)

;; /********************************************************************************************************/

;; /* Platform API */
;; cl_int clGetPlatformIDs(cl_uint          /* num_entries */,
;;                  cl_platform_id * /* platforms */,
;;                  cl_uint *        /* num_platforms */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetPlatformIDs [cl_int,cl_uint,cl_platform_id*,cl_uint*])

;; cl_int clGetPlatformInfo(cl_platform_id   /* platform */,
;;                   cl_platform_info /* param_name */,
;;                   size_t           /* param_value_size */,
;;                   void *           /* param_value */,
;;                   size_t *         /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetPlatformInfo [cl_int,cl_platform_info*,size_t,i8*,size_t*]*)

;; /* Device APIs */
;; cl_int clGetDeviceIDs(cl_platform_id   /* platform */,
;;                cl_device_type   /* device_type */,
;;                cl_uint          /* num_entries */,
;;                cl_device_id *   /* devices */,
;;                cl_uint *        /* num_devices */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetDeviceIDs [cl_int,cl_platform_id,cl_device_type,cl_uint,cl_device_id*,cl_uint*]*)

;; cl_int clGetDeviceInfo(cl_device_id    /* device */,
;;                 cl_device_info  /* param_name */,
;;                 size_t          /* param_value_size */,
;;                 void *          /* param_value */,
;;                 size_t *        /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetDeviceInfo [cl_int,cl_device_id,cl_device_info,size_t,i8*,size_t*]*)

;; cl_int clCreateSubDevices(cl_device_id                         /* in_device */,
;;                    const cl_device_partition_property * /* properties */,
;;                    cl_uint                              /* num_devices */,
;;                    cl_device_id *                       /* out_devices */,
;;                    cl_uint *                            /* num_devices_ret */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clRetainDevice [cl_int,cl_device_id]*)
(bind-lib libCL clReleaseDevice [cl_int,cl_device_id]*)

;; /* Context APIs  */
;; cl_context clCreateContext(const cl_context_properties * /* properties */,
;;                 cl_uint                 /* num_devices */,
;;                 const cl_device_id *    /* devices */,
;;                 void (CL_CALLBACK * /* pfn_notify */)(const char *, const void *, size_t, void *),
;;                 void *                  /* user_data */,
;;                 cl_int *                /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

;; TODO check the function pointer (3rd argument) type is ok
(bind-lib libCL clCreateContext [cl_context,cl_context_properties*,cl_uint,cl_device_id*,[i8*,i8*,i8*,size_t,i8*],i8*,cl_int*]*)

;; cl_context clCreateContextFromType(const cl_context_properties * /* properties */,
;;                         cl_device_type          /* device_type */,
;;                         void (CL_CALLBACK *     /* pfn_notify*/ )(const char *, const void *, size_t, void *),
;;                         void *                  /* user_data */,
;;                         cl_int *                /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clCreateContextFromType [cl_context,cl_context_properties*,cl_device_type,[i8*,i8*,i8*,size_t,i8*],i8*,cl_int*]*)

(bind-lib libCL clRetainContext [cl_int,cl_context]*)
(bind-lib libCL clReleaseContext [cl_int,cl_context]*)

;; cl_int clGetContextInfo(cl_context         /* context */,
;;                  cl_context_info    /* param_name */,
;;                  size_t             /* param_value_size */,
;;                  void *             /* param_value */,
;;                  size_t *           /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetContextInfo [cl_int,cl_context,cl_context_info,size_t,i8*,size_t*]*)

;; /* Command Queue APIs */
;; cl_command_queue clCreateCommandQueue(cl_context                     /* context */,
;;                      cl_device_id                   /* device */,
;;                      cl_command_queue_properties    /* properties */,
;;                      cl_int *                       /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clCreateCommandQueue [cl_command_queue,cl_context,cl_device_id,cl_command_queue_properties,cl_int*]*)

(bind-lib libCL clRetainCommandQueue [cl_int,cl_command_queue]*)
(bind-lib libCL clReleaseCommandQueue [cl_int,cl_command_queue]*)

;; cl_int clGetCommandQueueInfo(cl_command_queue      /* command_queue */,
;;                       cl_command_queue_info /* param_name */,
;;                       size_t                /* param_value_size */,
;;                       void *                /* param_value */,
;;                       size_t *              /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

;; /* Memory Object APIs */
;; cl_mem clCreateBuffer(cl_context   /* context */,
;;                cl_mem_flags /* flags */,
;;                size_t       /* size */,
;;                void *       /* host_ptr */,
;;                cl_int *     /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clCreateBuffer [cl_mem,cl_context,cl_mem_flags,size_t,i8*,cl_int*]*)

;; cl_mem clCreateSubBuffer(cl_mem                   /* buffer */,
;;                   cl_mem_flags             /* flags */,
;;                   cl_buffer_create_type    /* buffer_create_type */,
;;                   const void *             /* buffer_create_info */,
;;                   cl_int *                 /* errcode_ret */) CL_API_SUFFIX__VERSION_1_1;

(bind-lib libCL clCreateSubBuffer [cl_mem,cl_mem,cl_mem_flags,cl_buffer_create_type,i8*,cl_int*]*)

;; cl_mem clCreateImage(cl_context              /* context */,
;;               cl_mem_flags            /* flags */,
;;               const cl_image_format * /* image_format */,
;;               const cl_image_desc *   /* image_desc */,
;;               void *                  /* host_ptr */,
;;               cl_int *                /* errcode_ret */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clCreateImage [cl_mem,cl_context,cl_mem_flags,cl_image_format*,cl_image_desc*,i8*,cl_int*]*)

(bind-lib libCL clRetainMemObject [cl_int,cl_mem]*)
(bind-lib libCL clReleaseMemObject [cl_int,cl_mem]*)

;; cl_int clGetSupportedImageFormats(cl_context           /* context */,
;;                            cl_mem_flags         /* flags */,
;;                            cl_mem_object_type   /* image_type */,
;;                            cl_uint              /* num_entries */,
;;                            cl_image_format *    /* image_formats */,
;;                            cl_uint *            /* num_image_formats */) CL_API_SUFFIX__VERSION_1_0;

;; cl_int clGetMemObjectInfo(cl_mem           /* memobj */,
;;                    cl_mem_info      /* param_name */,
;;                    size_t           /* param_value_size */,
;;                    void *           /* param_value */,
;;                    size_t *         /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

;; cl_int clGetImageInfo(cl_mem           /* image */,
;;                cl_image_info    /* param_name */,
;;                size_t           /* param_value_size */,
;;                void *           /* param_value */,
;;                size_t *         /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

;; cl_int clSetMemObjectDestructorCallback(  cl_mem /* memobj */,
;;                                     void (CL_CALLBACK * /*pfn_notify*/)( cl_mem /* memobj */, void* /*user_data*/),
;;                                     void * /*user_data */ )             CL_API_SUFFIX__VERSION_1_1;

;; /* Sampler APIs */
;; cl_sampler clCreateSampler(cl_context          /* context */,
;;                 cl_bool             /* normalized_coords */,
;;                 cl_addressing_mode  /* addressing_mode */,
;;                 cl_filter_mode      /* filter_mode */,
;;                 cl_int *            /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;
;; cl_int clRetainSampler(cl_sampler /* sampler */) CL_API_SUFFIX__VERSION_1_0;

;; cl_int clReleaseSampler(cl_sampler /* sampler */) CL_API_SUFFIX__VERSION_1_0;

;; cl_int clGetSamplerInfo(cl_sampler         /* sampler */,
;;                  cl_sampler_info    /* param_name */,
;;                  size_t             /* param_value_size */,
;;                  void *             /* param_value */,
;;                  size_t *           /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

;; /* Program Object APIs  */
;; cl_program clCreateProgramWithSource(cl_context        /* context */,
;;                           cl_uint           /* count */,
;;                           const char **     /* strings */,
;;                           const size_t *    /* lengths */,
;;                           cl_int *          /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clCreateProgramWithSource [cl_program,cl_context,cl_uint,i8**,size_t*,cl_int*]*)

;; cl_program clCreateProgramWithBinary(cl_context                     /* context */,
;;                           cl_uint                        /* num_devices */,
;;                           const cl_device_id *           /* device_list */,
;;                           const size_t *                 /* lengths */,
;;                           const unsigned char **         /* binaries */,
;;                           cl_int *                       /* binary_status */,
;;                           cl_int *                       /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

;; cl_program clCreateProgramWithBuiltInKernels(cl_context            /* context */,
;;                                   cl_uint               /* num_devices */,
;;                                   const cl_device_id *  /* device_list */,
;;                                   const char *          /* kernel_names */,
;;                                   cl_int *              /* errcode_ret */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clRetainProgram [cl_int,cl_program]*)
(bind-lib libCL clReleaseProgram [cl_int,cl_program]*)

;; cl_int clBuildProgram(cl_program           /* program */,
;;                cl_uint              /* num_devices */,
;;                const cl_device_id * /* device_list */,
;;                const char *         /* options */,
;;                void (CL_CALLBACK *  /* pfn_notify */)(cl_program /* program */, void * /* user_data */),
;;                void *               /* user_data */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clBuildProgram [cl_int,cl_program,cl_uint,cl_device_id,i8*,[i8*,cl_program,i8*],i8*]*)

;; cl_int clCompileProgram(cl_program           /* program */,
;;                  cl_uint              /* num_devices */,
;;                  const cl_device_id * /* device_list */,
;;                  const char *         /* options */,
;;                  cl_uint              /* num_input_headers */,
;;                  const cl_program *   /* input_headers */,
;;                  const char **        /* header_include_names */,
;;                  void (CL_CALLBACK *  /* pfn_notify */)(cl_program /* program */, void * /* user_data */),
;;                  void *               /* user_data */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clCompileProgram [cl_int,cl_program,cl_uint,cl_device_id,i8*,cl_uint,cl_program*,i8**,[i8*,cl_program,i8*],i8*]*)

;; cl_program clLinkProgram(cl_context           /* context */,
;;               cl_uint              /* num_devices */,
;;               const cl_device_id * /* device_list */,
;;               const char *         /* options */,
;;               cl_uint              /* num_input_programs */,
;;               const cl_program *   /* input_programs */,
;;               void (CL_CALLBACK *  /* pfn_notify */)(cl_program /* program */, void * /* user_data */),
;;               void *               /* user_data */,
;;               cl_int *             /* errcode_ret */ ) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clLinkProgram [cl_program,cl_uint,cl_device_id,i8*,cl_uint,cl_program*,[i8*,cl_program,i8*],i8*,cl_int*]*)

;; cl_int clUnloadPlatformCompiler(cl_platform_id /* platform */) CL_API_SUFFIX__VERSION_1_2;

;; cl_int clGetProgramInfo(cl_program         /* program */,
;;                  cl_program_info    /* param_name */,
;;                  size_t             /* param_value_size */,
;;                  void *             /* param_value */,
;;                  size_t *           /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetProgramInfo [cl_int,cl_program,cl_program_info,size_t,i8*,size_t*]*)

;; cl_int clGetProgramBuildInfo(cl_program            /* program */,
;;                       cl_device_id          /* device */,
;;                       cl_program_build_info /* param_name */,
;;                       size_t                /* param_value_size */,
;;                       void *                /* param_value */,
;;                       size_t *              /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetProgramBuildInfo [cl_int,cl_program,cl_device_id,cl_program_build_info,size_t,i8*,size_t*]*)

;; /* Kernel Object APIs */
;; cl_kernel clCreateKernel(cl_program      /* program */,
;;                const char *    /* kernel_name */,
;;                cl_int *        /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clCreateKernel [cl_kernel,cl_program,i8*,cl_int*]*)

;; cl_int clCreateKernelsInProgram(cl_program     /* program */,
;;                          cl_uint        /* num_kernels */,
;;                          cl_kernel *    /* kernels */,
;;                          cl_uint *      /* num_kernels_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clRetainKernel [cl_int,cl_kernel]*)
(bind-lib libCL clReleaseKernel [cl_int,cl_kernel]*)

;; cl_int clSetKernelArg(cl_kernel    /* kernel */,
;;                cl_uint      /* arg_index */,
;;                size_t       /* arg_size */,
;;                const void * /* arg_value */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clSetKernelArg [cl_int,cl_kernel,cl_uint,size_t,i8*]*)

;; cl_int clGetKernelInfo(cl_kernel       /* kernel */,
;;                 cl_kernel_info  /* param_name */,
;;                 size_t          /* param_value_size */,
;;                 void *          /* param_value */,
;;                 size_t *        /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetKernelInfo [cl_int,cl_kernel,cl_kernel_info,size_t,i8*,size_t*]*)

;; cl_int clGetKernelArgInfo(cl_kernel       /* kernel */,
;;                    cl_uint         /* arg_indx */,
;;                    cl_kernel_arg_info  /* param_name */,
;;                    size_t          /* param_value_size */,
;;                    void *          /* param_value */,
;;                    size_t *        /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clGetKernelArgInfo [cl_int,cl_kernel,cl_uint,cl_kernel_arg_info,size_t,i8*,size_t*]*)

;; cl_int clGetKernelWorkGroupInfo(cl_kernel                  /* kernel */,
;;                          cl_device_id               /* device */,
;;                          cl_kernel_work_group_info  /* param_name */,
;;                          size_t                     /* param_value_size */,
;;                          void *                     /* param_value */,
;;                          size_t *                   /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetKernelWorkGroupInfo [cl_int,cl_kernel,cl_device_id,cl_kernel_work_group_info,size_t,i8*,size_t*]*)

;; /* Event Object APIs */
;; cl_int clWaitForEvents(cl_uint             /* num_events */,
;;                 const cl_event *    /* event_list */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clWaitForEvents [cl_int,cl_uint,cl_event*]*)

;; cl_int clGetEventInfo(cl_event         /* event */,
;;                cl_event_info    /* param_name */,
;;                size_t           /* param_value_size */,
;;                void *           /* param_value */,
;;                size_t *         /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetEventInfo [cl_int,cl_event,cl_event_info,size_t,i8*,size_t*]*)

;; cl_event clCreateUserEvent(cl_context    /* context */,
;;                   cl_int *      /* errcode_ret */) CL_API_SUFFIX__VERSION_1_1;

(bind-lib libCL clCreateUserEvent [cl_event,cl_context,cl_int*]*)

(bind-lib libCL clRetainEvent [cl_int,cl_event]*)
(bind-lib libCL clReleaseEvent [cl_int,cl_event]*)

;; cl_int clSetUserEventStatus(cl_event   /* event */,
;;                      cl_int     /* execution_status */) CL_API_SUFFIX__VERSION_1_1;

;; cl_int clSetEventCallback( cl_event    /* event */,
;;                     cl_int      /* command_exec_callback_type */,
;;                     void (CL_CALLBACK * /* pfn_notify */)(cl_event, cl_int, void *),
;;                     void *      /* user_data */) CL_API_SUFFIX__VERSION_1_1;

(bind-lib libCL clSetUserEventStatus [cl_int,cl_event,cl_int]*)

;; /* Profiling APIs */
;; cl_int clGetEventProfilingInfo(cl_event            /* event */,
;;                         cl_profiling_info   /* param_name */,
;;                         size_t              /* param_value_size */,
;;                         void *              /* param_value */,
;;                         size_t *            /* param_value_size_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clGetEventProfilingInfo [cl_int,cl_event,cl_profiling_info,size_t,i8*,size_t*]*)

;; /* Flush and Finish APIs */

(bind-lib libCL clFlush [cl_int,cl_command_queue]*)
(bind-lib libCL clFinish [cl_int,cl_command_queue]*)

;; /* Enqueued Commands APIs */
;; cl_int clEnqueueReadBuffer(cl_command_queue    /* command_queue */,
;;                     cl_mem              /* buffer */,
;;                     cl_bool             /* blocking_read */,
;;                     size_t              /* offset */,
;;                     size_t              /* size */,
;;                     void *              /* ptr */,
;;                     cl_uint             /* num_events_in_wait_list */,
;;                     const cl_event *    /* event_wait_list */,
;;                     cl_event *          /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueReadBuffer [cl_int,cl_command_queue,cl_mem,cl_bool,size_t,size_t,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueReadBufferRect(cl_command_queue    /* command_queue */,
;;                         cl_mem              /* buffer */,
;;                         cl_bool             /* blocking_read */,
;;                         const size_t *      /* buffer_offset */,
;;                         const size_t *      /* host_offset */,
;;                         const size_t *      /* region */,
;;                         size_t              /* buffer_row_pitch */,
;;                         size_t              /* buffer_slice_pitch */,
;;                         size_t              /* host_row_pitch */,
;;                         size_t              /* host_slice_pitch */,
;;                         void *              /* ptr */,
;;                         cl_uint             /* num_events_in_wait_list */,
;;                         const cl_event *    /* event_wait_list */,
;;                         cl_event *          /* event */) CL_API_SUFFIX__VERSION_1_1;

(bind-lib libCL clEnqueueReadBufferRect [cl_int,cl_command_queue,cl_mem,cl_bool,size_t*,size_t*,size_t*,size_t,size_t,size_t,size_t,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueWriteBuffer(cl_command_queue   /* command_queue */,
;;                      cl_mem             /* buffer */,
;;                      cl_bool            /* blocking_write */,
;;                      size_t             /* offset */,
;;                      size_t             /* size */,
;;                      const void *       /* ptr */,
;;                      cl_uint            /* num_events_in_wait_list */,
;;                      const cl_event *   /* event_wait_list */,
;;                      cl_event *         /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueWriteBuffer [cl_int,cl_command_queue,cl_mem,cl_bool,size_t,size_t,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueWriteBufferRect(cl_command_queue    /* command_queue */,
;;                          cl_mem              /* buffer */,
;;                          cl_bool             /* blocking_write */,
;;                          const size_t *      /* buffer_offset */,
;;                          const size_t *      /* host_offset */,
;;                          const size_t *      /* region */,
;;                          size_t              /* buffer_row_pitch */,
;;                          size_t              /* buffer_slice_pitch */,
;;                          size_t              /* host_row_pitch */,
;;                          size_t              /* host_slice_pitch */,
;;                          const void *        /* ptr */,
;;                          cl_uint             /* num_events_in_wait_list */,
;;                          const cl_event *    /* event_wait_list */,
;;                          cl_event *          /* event */) CL_API_SUFFIX__VERSION_1_1;

(bind-lib libCL clEnqueueWriteBufferRect [cl_int,cl_command_queue,cl_mem,cl_bool,size_t*,size_t*,size_t*,size_t,size_t,size_t,size_t,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueFillBuffer(cl_command_queue   /* command_queue */,
;;                     cl_mem             /* buffer */,
;;                     const void *       /* pattern */,
;;                     size_t             /* pattern_size */,
;;                     size_t             /* offset */,
;;                     size_t             /* size */,
;;                     cl_uint            /* num_events_in_wait_list */,
;;                     const cl_event *   /* event_wait_list */,
;;                     cl_event *         /* event */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clEnqueueFillBuffer [cl_int,cl_command_queue,cl_mem,i8*,size_t,size_t,size_t,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueCopyBuffer(cl_command_queue    /* command_queue */,
;;                     cl_mem              /* src_buffer */,
;;                     cl_mem              /* dst_buffer */,
;;                     size_t              /* src_offset */,
;;                     size_t              /* dst_offset */,
;;                     size_t              /* size */,
;;                     cl_uint             /* num_events_in_wait_list */,
;;                     const cl_event *    /* event_wait_list */,
;;                     cl_event *          /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueCopyBuffer [cl_int,cl_command_queue,cl_mem,cl_mem,size_t,size_t,size_t,cl_uint,cl_event*,cl_event*]*)
;; cl_int clEnqueueCopyBufferRect(cl_command_queue    /* command_queue */,
;;                         cl_mem              /* src_buffer */,
;;                         cl_mem              /* dst_buffer */,
;;                         const size_t *      /* src_origin */,
;;                         const size_t *      /* dst_origin */,
;;                         const size_t *      /* region */,
;;                         size_t              /* src_row_pitch */,
;;                         size_t              /* src_slice_pitch */,
;;                         size_t              /* dst_row_pitch */,
;;                         size_t              /* dst_slice_pitch */,
;;                         cl_uint             /* num_events_in_wait_list */,
;;                         const cl_event *    /* event_wait_list */,
;;                         cl_event *          /* event */) CL_API_SUFFIX__VERSION_1_1;

(bind-lib libCL clEnqueueCopyBufferRect [cl_int,cl_command_queue,cl_mem,cl_mem,size_t*,size_t*,size_t*,size_t,size_t,size_t,size_t,cl_uint,cl_event*,cl_event*]*)
;; cl_int clEnqueueReadImage(cl_command_queue     /* command_queue */,
;;                    cl_mem               /* image */,
;;                    cl_bool              /* blocking_read */,
;;                    const size_t *       /* origin[3] */,
;;                    const size_t *       /* region[3] */,
;;                    size_t               /* row_pitch */,
;;                    size_t               /* slice_pitch */,
;;                    void *               /* ptr */,
;;                    cl_uint              /* num_events_in_wait_list */,
;;                    const cl_event *     /* event_wait_list */,
;;                    cl_event *           /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueReadImage [cl_int,cl_command_queue,cl_mem,cl_bool,size_t*,size_t*,size_t,size_t,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueWriteImage(cl_command_queue    /* command_queue */,
;;                     cl_mem              /* image */,
;;                     cl_bool             /* blocking_write */,
;;                     const size_t *      /* origin[3] */,
;;                     const size_t *      /* region[3] */,
;;                     size_t              /* input_row_pitch */,
;;                     size_t              /* input_slice_pitch */,
;;                     const void *        /* ptr */,
;;                     cl_uint             /* num_events_in_wait_list */,
;;                     const cl_event *    /* event_wait_list */,
;;                     cl_event *          /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueWriteImage [cl_int,cl_command_queue,cl_mem,cl_bool,size_t*,size_t*,size_t,size_t,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueFillImage(cl_command_queue   /* command_queue */,
;;                    cl_mem             /* image */,
;;                    const void *       /* fill_color */,
;;                    const size_t *     /* origin[3] */,
;;                    const size_t *     /* region[3] */,
;;                    cl_uint            /* num_events_in_wait_list */,
;;                    const cl_event *   /* event_wait_list */,
;;                    cl_event *         /* event */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clEnqueueFillImage [cl_int,cl_command_queue,cl_mem,i8*,size_t*,size_t*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueCopyImage(cl_command_queue     /* command_queue */,
;;                    cl_mem               /* src_image */,
;;                    cl_mem               /* dst_image */,
;;                    const size_t *       /* src_origin[3] */,
;;                    const size_t *       /* dst_origin[3] */,
;;                    const size_t *       /* region[3] */,
;;                    cl_uint              /* num_events_in_wait_list */,
;;                    const cl_event *     /* event_wait_list */,
;;                    cl_event *           /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueCopyImage [cl_int,cl_command_queue,cl_mem,cl_mem,i8*,size_t*,size_t*,size_t*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueCopyImageToBuffer(cl_command_queue /* command_queue */,
;;                            cl_mem           /* src_image */,
;;                            cl_mem           /* dst_buffer */,
;;                            const size_t *   /* src_origin[3] */,
;;                            const size_t *   /* region[3] */,
;;                            size_t           /* dst_offset */,
;;                            cl_uint          /* num_events_in_wait_list */,
;;                            const cl_event * /* event_wait_list */,
;;                            cl_event *       /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueCopyImageToBuffer [cl_int,cl_command_queue,cl_mem,cl_mem,size_t*,size_t*,size_t,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueCopyBufferToImage(cl_command_queue /* command_queue */,
;;                            cl_mem           /* src_buffer */,
;;                            cl_mem           /* dst_image */,
;;                            size_t           /* src_offset */,
;;                            const size_t *   /* dst_origin[3] */,
;;                            const size_t *   /* region[3] */,
;;                            cl_uint          /* num_events_in_wait_list */,
;;                            const cl_event * /* event_wait_list */,
;;                            cl_event *       /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueCopyBufferToImage [cl_int,cl_command_queue,cl_mem,cl_mem,size_t,size_t*,size_t*,cl_uint,cl_event*,cl_event*]*)

;; void* clEnqueueMapBuffer(cl_command_queue /* command_queue */,
;;                    cl_mem           /* buffer */,
;;                    cl_bool          /* blocking_map */,
;;                    cl_map_flags     /* map_flags */,
;;                    size_t           /* offset */,
;;                    size_t           /* size */,
;;                    cl_uint          /* num_events_in_wait_list */,
;;                    const cl_event * /* event_wait_list */,
;;                    cl_event *       /* event */,
;;                    cl_int *         /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueMapBuffer [cl_int,cl_command_queue,cl_mem,cl_bool,cl_map_flags,size_t,size_t,cl_uint,cl_event*,cl_event*,cl_int*]*)

;; void* clEnqueueMapImage(cl_command_queue  /* command_queue */,
;;                   cl_mem            /* image */,
;;                   cl_bool           /* blocking_map */,
;;                   cl_map_flags      /* map_flags */,
;;                   const size_t *    /* origin[3] */,
;;                   const size_t *    /* region[3] */,
;;                   size_t *          /* image_row_pitch */,
;;                   size_t *          /* image_slice_pitch */,
;;                   cl_uint           /* num_events_in_wait_list */,
;;                   const cl_event *  /* event_wait_list */,
;;                   cl_event *        /* event */,
;;                   cl_int *          /* errcode_ret */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueMapImage [cl_int,cl_command_queue,cl_mem,cl_bool,cl_map_flags,size_t*,size_t*,size_t*,size_t*,cl_uint,cl_event*,cl_event*,cl_int*]*)

;; cl_int clEnqueueUnmapMemObject(cl_command_queue /* command_queue */,
;;                         cl_mem           /* memobj */,
;;                         void *           /* mapped_ptr */,
;;                         cl_uint          /* num_events_in_wait_list */,
;;                         const cl_event *  /* event_wait_list */,
;;                         cl_event *        /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueUnmapMemObject [cl_int,cl_command_queue,cl_mem,i8*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueMigrateMemObjects(cl_command_queue       /* command_queue */,
;;                            cl_uint                /* num_mem_objects */,
;;                            const cl_mem *         /* mem_objects */,
;;                            cl_mem_migration_flags /* flags */,
;;                            cl_uint                /* num_events_in_wait_list */,
;;                            const cl_event *       /* event_wait_list */,
;;                            cl_event *             /* event */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clEnqueueMigrateMemObjects [cl_int,cl_command_queue,cl_uint,cl_mem*,cl_mem_migration_flags,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueNDRangeKernel(cl_command_queue /* command_queue */,
;;                        cl_kernel        /* kernel */,
;;                        cl_uint          /* work_dim */,
;;                        const size_t *   /* global_work_offset */,
;;                        const size_t *   /* global_work_size */,
;;                        const size_t *   /* local_work_size */,
;;                        cl_uint          /* num_events_in_wait_list */,
;;                        const cl_event * /* event_wait_list */,
;;                        cl_event *       /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueNDRangeKernel [cl_int,cl_command_queue,cl_kernel,cl_uint,size_t*,size_t*,size_t*,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueTask(cl_command_queue  /* command_queue */,
;;               cl_kernel         /* kernel */,
;;               cl_uint           /* num_events_in_wait_list */,
;;               const cl_event *  /* event_wait_list */,
;;               cl_event *        /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueTask [cl_int,cl_command_queue,cl_kernel,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueNativeKernel(cl_command_queue  /* command_queue */,
;;            void (CL_CALLBACK * /*user_func*/)(void *),
;;                       void *            /* args */,
;;                       size_t            /* cb_args */,
;;                       cl_uint           /* num_mem_objects */,
;;                       const cl_mem *    /* mem_list */,
;;                       const void **     /* args_mem_loc */,
;;                       cl_uint           /* num_events_in_wait_list */,
;;                       const cl_event *  /* event_wait_list */,
;;                       cl_event *        /* event */) CL_API_SUFFIX__VERSION_1_0;

(bind-lib libCL clEnqueueNativeKernel [cl_int,cl_command_queue,[i8*,i8*]*,i8*,size_t,cl_uint,cl_mem*,i8**,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueMarkerWithWaitList(cl_command_queue /* command_queue */,
;;                             cl_uint           /* num_events_in_wait_list */,
;;                             const cl_event *  /* event_wait_list */,
;;                             cl_event *        /* event */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clEnqueueMarkerWithWaitList [cl_int,cl_command_queue,cl_uint,cl_event*,cl_event*]*)

;; cl_int clEnqueueBarrierWithWaitList(cl_command_queue /* command_queue */,
;;                              cl_uint           /* num_events_in_wait_list */,
;;                              const cl_event *  /* event_wait_list */,
;;                              cl_event *        /* event */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clEnqueueBarrierWithWaitList [cl_int,cl_command_queue,cl_uint,cl_event*,cl_event*]*)

;; /* Extension function access
;;  *
;;  * Returns the extension function address for the given function name,
;;  * or NULL if a valid function can not be found.  The client must
;;  * check to make sure the address is not NULL, before using or
;;  * calling the returned function address.
;;  */
;; void* clGetExtensionFunctionAddressForPlatform(cl_platform_id /* platform */,
;;                                          const char *   /* func_name */) CL_API_SUFFIX__VERSION_1_2;

(bind-lib libCL clGetExtensionFunctionAddressForPlatform [i8*,cl_platform_id,i8*]*)

(impc:aot:insert-footer "xtmopencl")
(define *xtmlib-opencl-loaded* #t)
