;;; glib.xtm -- GNOME GLib bindings

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libglib

;;; Commentary:

;; This binding file is incomplete, it will be added to over time.

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/glib.xtm" 'quiet))
(sys:load-preload-check 'glib)
(define *xtmlib-glib-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmglib")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libglib
  (cond ((string=? (sys:platform) "OSX")
         "libglib-2.0.dylib")
        ((string=? (sys:platform) "Linux")
         (list "libglib-2.0.so" "libglib-2.0.so.0"))
        ((string=? (sys:platform) "Windows")
         "libglib-2.0-0.dll"))
  "xtmglib")

(impc:aot:import-ll "xtmglib")


(bind-alias GRegex i8*) ;; GRegex in GLib is actually an opaque struct (not pointer to struct)
(bind-alias GMatchInfo i8*) ;; GMatchInfo in GLib is actually an opaque struct (not pointer to struct)
(bind-alias GDir i8) ;; GDir is an opaque struct
(bind-alias gconstpointer i8*)
(bind-alias gpointer i8*)
(bind-alias gint8 i8)
(bind-alias guint8 i8)
(bind-alias gchar i8)
(bind-alias guchar i8)
(bind-alias guint i32)
(bind-alias gdouble double)
(bind-alias gulong i64)
(bind-alias glong i64)
(bind-alias gfloat float)
(bind-alias gssize i64)
(bind-alias gint64 i64)
(bind-alias guint64 i64)
(bind-alias gint16 i16)
(bind-alias guint16 i16)
(bind-alias gint32 i32)
(bind-alias guint32 i32)
(bind-alias gint i32)
(bind-alias gboolean i32) ;; WARNING GLib defines this as i32
(bind-alias GQuark i32)
(bind-alias GRegexMatchFlags i32)
(bind-alias gsize size_t)
;(bind-alias GObject i8) ;; opaque struct
(bind-alias GObjectClass i8) ;; opaque struct
(bind-alias GObjectConstructParam i8) ;; opaque struct
(bind-alias GType i64)
;(bind-alias GValue i8) ;; opaque struct
(bind-alias GMainLoop i8) ;; opaque struct
(bind-alias GCallback [void]*) ;; callback
(bind-alias GFreeFunc [void,gpointer]*)
(bind-alias GData i8) ;; opaque

;; types
(bind-type GArray <gchar*,guint>)
(bind-type GByteArray <i8*,guint>)
(bind-type GPtrArray <gpointer*,guint>)
(bind-type GMutex <gpointer>)
(bind-type GCond <gpointer>)
(bind-type GTypeClass <GType>)
(bind-type GTypeInstance <GTypeClass*>)
(bind-type GTypeInterface <GType,GType>)
(bind-type GObject <GTypeInstance,guint,GData*>)
(bind-type GList <gpointer,GList*,GList*>)
(bind-type GString <gchar*,gsize,gsize>)
(bind-type GError <GQuark,gint,gchar*>)
(bind-type GValue <GType,|2,i64|>)

(bind-alias GDestroyNotify [void,gpointer]*)

;; misc stuff
(if (string=? "Windows" (sys:platform))
    (begin
      (bind-lib libglib g_get_user_name_utf8 [gchar*]*)
      (bind-lib libglib g_get_real_name_utf8 [gchar*]*)
      (bind-lib libglib g_get_host_name [gchar*]*)
      (bind-lib libglib g_get_home_dir_utf8 [gchar*]*)
      (bind-lib libglib g_get_current_dir_utf8 [gchar*]*)
      ;(bind-lib g gglib_get_environ [gchar**]*)
      (bind-lib libglib g_getenv_utf8 [gchar*,gchar*]*)
      (bind-lib libglib g_setenv_utf8 [gboolean,gchar*]*)
      (bind-lib libglib g_unsetenv_utf8 [void,gchar*]*)
      (bind-lib libglib g_spaced_primes_closest [guint,guint]*))
    (begin
      (bind-lib libglib g_get_user_name [gchar*]*)
      (bind-lib libglib g_get_real_name [gchar*]*)
      (bind-lib libglib g_get_host_name [gchar*]*)
      (bind-lib libglib g_get_home_dir [gchar*]*)
      (bind-lib libglib g_get_current_dir [gchar*]*)
      (bind-lib libglib g_get_environ [gchar**]*)
      (bind-lib libglib g_getenv [gchar*,gchar*]*)
      (bind-lib libglib g_setenv [gboolean,gchar*]*)
      (bind-lib libglib g_unsetenv [void,gchar*]*)
      (bind-lib libglib g_spaced_primes_closest [guint,guint]*)))

;; file system stuff

(bind-val G_FILE_TEST_IS_REGULAR i32 1)
(bind-val G_FILE_TEST_IS_SYMLINK i32 2)
(bind-val G_FILE_TEST_IS_DIR i32 4)
(bind-val G_FILE_TEST_IS_EXECUTABLE i32 8)
(bind-val G_FILE_TEST_EXISTS i32 16)

(unix-or-Windows
 (begin
   (bind-lib libglib g_file_test [gboolean,gchar*,i32]*)
   (bind-lib libglib g_rename [i32,gchar*,gchar*]*)
   (bind-lib libglib g_remove [i32,gchar*]*)
   (bind-lib libglib g_chdir [i32,gchar*]*)
   (bind-lib libglib g_mkdir [i32,gchar*,i32]*)
   (bind-lib libglib g_dir_open [GDir*,gchar*,guint,GError**]*)
   (bind-lib libglib g_dir_close [void,GDir*]*)
   (bind-lib libglib g_dir_read_name [gchar*,GDir*]*)
   (bind-lib libglib g_dir_rewind [void,GDir*]*))
 ;; on Windows, use utf8 versions
 (begin
   (bind-lib libglib g_file_test_utf8 [gboolean,gchar*,i32]*)
   (bind-lib libglib g_rename_utf8 [i32,gchar*,gchar*]*)
   (bind-lib libglib g_remove_utf8 [i32,gchar*]*)
   (bind-lib libglib g_chdir_utf8 [i32,gchar*]*)
   (bind-lib libglib g_mkdir_utf8 [i32,gchar*,int]*)
   (bind-lib libglib g_dir_open_utf8 [GDir*,gchar*,guint,GError**]*)
   (bind-lib libglib g_dir_close [void,GDir*]*)
   (bind-lib libglib g_dir_read_name_utf8 [gchar*,GDir*]*)
   (bind-lib libglib g_dir_rewind [void,GDir*]*)))

;; regex stuff
(bind-lib libglib g_match_info_matches [gboolean,GMatchInfo]*)
(bind-lib libglib g_match_info_next [gboolean,GMatchInfo,GError**]*)
(bind-lib libglib g_match_info_get_match_count [gint,GMatchInfo]*)
(bind-lib libglib g_match_info_is_partial_match [gboolean,GMatchInfo]*)
(bind-lib libglib g_match_info_fetch [gchar*,GMatchInfo,gint]*)
(bind-lib libglib g_match_info_fetch_named [gchar*,GMatchInfo,gchar*]*)
(bind-lib libglib g_match_info_fetch_all [gchar**,GMatchInfo]*)
(bind-lib libglib g_match_info_free [void,GMatchInfo]*)

(bind-lib libglib g_regex_match_simple [i1,gchar*,gchar*,i32,i32]*)
(bind-lib libglib g_regex_split_simple [gchar**,gchar*,gchar*,i32,i32]*)
(bind-lib libglib g_regex_new [GRegex,gchar*,i32,i32,GError**]*)
(bind-lib libglib g_regex_unref [void,GRegex]*)
(bind-lib libglib g_regex_match [gboolean,GRegex,gchar*,i32,i8**]*)
(bind-lib libglib g_regex_match_all [gboolean,GRegex,gchar*,i32,i8**]*)
(bind-lib libglib g_regex_match_full [gboolean,GRegex,gchar*,gssize,gint,i32,i8**,GError**]*)
(bind-lib libglib g_regex_match_all_full [gboolean,GRegex,gchar*,gssize,gint,i32,i8**,GError**]*)
(bind-lib libglib g_regex_split [gchar**,GRegex,gchar*,GRegexMatchFlags]*)
(bind-lib libglib g_regex_split_full [gchar**,GRegex,gchar*,gssize,gint,GRegexMatchFlags,gint,GError**]*)
(bind-lib libglib g_regex_replace [gchar*,GRegex,gchar*,gssize,gint,gchar*,GRegexMatchFlags,GError**]*)
(bind-lib libglib g_regex_replace_literal [gchar*,GRegex,gchar*,gssize,gint,gchar*,GRegexMatchFlags,GError**]*)

;; error stuff
(bind-lib libglib g_error_free [void,GError*]*)

;; memory stuff
(bind-lib libglib g_free [void,gpointer]*)
(bind-lib libglib g_malloc [gpointer,gsize]*)

;; Main loop
(bind-lib libglib g_main_loop_new [GMainLoop*,i8*,gboolean]*)
(bind-lib libglib g_main_loop_run [void,GMainLoop*]*)
(bind-lib libglib g_main_loop_quit [void,GMainLoop*]*)
(bind-lib libglib g_main_loop_is_running [gboolean,GMainLoop*]*)
(bind-lib libglib g_main_loop_unref [void,GMainLoop*]*)
(bind-lib libglib g_main_context_iteration [gboolean,i8*,gboolean]*)

;; type string stuff
(bind-lib libglib g_string_new [GString*,gchar*]*)

;; hash tables
(bind-alias GHashTable i8)
(bind-alias GHashFunc [guint,gconstpointer]*)
(bind-alias GEqualFunc [gboolean,gconstpointer,gconstpointer]*)

;; hash and equal functions for g_hash_table_new
(bind-lib libglib g_direct_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib libglib g_direct_hash [guint,gconstpointer]*)
(bind-lib libglib g_str_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib libglib g_str_hash [guint,gconstpointer]*)
(bind-lib libglib g_int_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib libglib g_int_hash [guint,gconstpointer]*)
(bind-lib libglib g_int64_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib libglib g_int64_hash [guint,gconstpointer]*)
(bind-lib libglib g_double_equal [gboolean,gconstpointer,gconstpointer]*)
(bind-lib libglib g_double_hash [guint,gconstpointer]*)

(bind-lib libglib g_hash_table_new [GHashTable*,GHashFunc,GEqualFunc]*)
(bind-lib libglib g_hash_table_insert [void,GHashTable*,gpointer,gpointer]*)
(bind-lib libglib g_hash_table_replace [void,GHashTable*,gpointer,gpointer]*)
;; (bind-lib g gglib_hash_table_add [void,GHashTable*,gpointer]*)
;; (bind-lib g gglib_hash_table_contains [gboolean,GHashTable*,gconstpointer]*)
(bind-lib libglib g_hash_table_size [guint,GHashTable*]*)
(bind-lib libglib g_hash_table_lookup [gpointer,GHashTable*,gconstpointer]*)
(bind-lib libglib g_hash_table_remove [gboolean,GHashTable*,gconstpointer]*)
(bind-lib libglib g_hash_table_remove_all [void,GHashTable*]*)

;; GObject library

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libgobject
  (cond ((string=? (sys:platform) "OSX")
         "libgobject-2.0.dylib")
        ((string=? (sys:platform) "Linux")
         (list "libgobject-2.0.so" "libgobject-2.0.so.0"))
        ((string=? (sys:platform) "Windows")
         "libgobject-2.0-0.dll")))

(bind-lib libgobject g_object_ref [gpointer,gpointer]*)
(bind-lib libgobject g_object_unref [void,gpointer]*)
(bind-lib libgobject g_object_set_data [void,GObject*,gchar*,gpointer]*)
(bind-lib libgobject g_object_set_property [void,GObject*,gchar*,GValue*]*)
(bind-lib libgobject g_object_get_property [void,GObject*,gchar*,GValue*]*)


;; signal stuff
(bind-alias GClosure i8)
(bind-alias GClosureNotify [void,gpointer,GClosure*]*)
(bind-lib libgobject g_signal_connect_data [gulong,gpointer,gchar*,GCallback,gpointer,GClosureNotify,i32]*)
(bind-func g_signal_connect (lambda (a:gpointer b:gchar* c:GCallback d:gpointer) (g_signal_connect_data a b c d null 0)))
(bind-lib libgobject g_signal_connect_object [gulong,gpointer,gchar*,GCallback,gpointer,i32]*)
(bind-lib libgobject g_signal_emitv [void,GValue*,guint,GQuark,GValue*]*)
(bind-lib libgobject g_signal_lookup [guint,gchar*,GType]*)

;; value and TYPE STUFF
(bind-lib libgobject g_value_init [GValue*,GValue*,GType]*)
(bind-lib libgobject g_value_unset [void,GValue*]*)
(bind-lib libgobject g_value_reset [GValue,GValue*]*)
(bind-lib libgobject g_value_get_string [gchar*,GValue*]*)
(bind-lib libgobject g_value_get_char [gchar,GValue*]*)
(bind-lib libgobject g_value_get_uchar [guchar,GValue*]*)
(bind-lib libgobject g_value_get_int [gint,GValue*]*)
(bind-lib libgobject g_value_get_uint [guint,GValue*]*)
(bind-lib libgobject g_value_get_int64 [gint64,GValue*]*)
(bind-lib libgobject g_value_get_uint64 [guint64,GValue*]*)
(bind-lib libgobject g_value_get_long [gint64,GValue*]*)
(bind-lib libgobject g_value_get_ulong [guint64,GValue*]*)
(bind-lib libgobject g_value_get_float [gfloat,GValue*]*)
(bind-lib libgobject g_value_get_double [gdouble,GValue*]*)
(bind-lib libgobject g_value_get_object [gpointer,GValue*]*)
(bind-lib libgobject g_value_get_boxed [gpointer,GValue*]*)
(bind-lib libgobject g_value_get_pointer [gpointer,GValue*]*)
(bind-lib libgobject g_value_get_boolean [gboolean,GValue*]*)
(bind-lib libgobject g_value_set_char [void,GValue*,gchar]*)
(bind-lib libgobject g_value_set_uchar [void,GValue*,guchar]*)
(bind-lib libgobject g_value_set_int [void,GValue*,gint]*)
(bind-lib libgobject g_value_set_uint [void,GValue*,guint]*)
(bind-lib libgobject g_value_set_int64 [void,GValue*,gint64]*)
(bind-lib libgobject g_value_set_uint64 [void,GValue*,guint64]*)
(bind-lib libgobject g_value_set_long [void,GValue*,glong]*)
(bind-lib libgobject g_value_set_ulong [void,GValue*,gulong]*)
(bind-lib libgobject g_value_set_float [void,GValue*,float]*)
(bind-lib libgobject g_value_set_double [void,GValue*,double]*)
(bind-lib libgobject g_value_set_string [void,GValue*,gchar*]*)
(bind-lib libgobject g_value_set_object [void,GValue*,gpointer]*)
(bind-lib libgobject g_value_set_boxed [void,GValue*,gpointer]*)
(bind-lib libgobject g_value_set_pointer [void,GValue*,gpointer]*)
(bind-lib libgobject g_value_set_boolean [void,GValue*,i32]*);gboolean]*)
(bind-lib libgobject g_value_set_static_string [void,GValue*,gchar*]*)
(bind-lib libgobject g_strdup_value_contents [gchar*,GValue*]*)
(bind-lib libgobject g_type_check_value [gboolean,GValue*]*)
(bind-lib libgobject g_type_check_value_holds [gboolean,GValue*,GType]*)
(bind-lib libgobject g_type_name_from_instance [gchar*,GTypeInstance*]*)
(bind-lib libgobject g_type_name_from_class [gchar*,GTypeClass*]*)
;; (bind-lib libgobject g_type_fundamental [GType,GType]*)
(bind-lib libgobject g_type_from_name [GType,gchar*]*)
(bind-lib libgobject g_type_init [void]*)
(bind-lib libgobject g_type_name [gchar*,GType]*)


;; ;; GSocket stuff
;; (bind-alias GSocket i8)
;; (bind-alias GInetAddress i8)
;; (bind-lib libgio g_inet_address_new_from_string [GInetAddress*,gchar*]*)
;; (bind-lib libgio g_inet_address_to_string [gchar*,GInetAddress*]*)

;;
;; where '2' is the G_TYPE_FUNDAMENTAL_SHIFT
;;
(bind-func g_type_fundamental
  (lambda (v:i64)
    (<< v 2)))

(bind-func g_print_value_type
  (lambda (v:GValue*)
    (printf "valtype: %s\n" (tref v 0))
    void))


;; fundamental stride is 2^2=4
(bind-val G_TYPE_INVALID GType (* 4 0))
(bind-val G_TYPE_NONE GType (* 4 1))
(bind-val G_TYPE_INTERFACE GType (* 4 2))
(bind-val G_TYPE_CHAR GType (* 4 3))
(bind-val G_TYPE_UCHAR GType (* 4 4))
(bind-val G_TYPE_BOOLEAN GType (* 4 5))
(bind-val G_TYPE_INT GType (* 4 6))
(bind-val G_TYPE_UINT GType (* 4 7))
(bind-val G_TYPE_LONG GType (* 4 8))
(bind-val G_TYPE_ULONG GType (* 4 9))
(bind-val G_TYPE_INT64 GType (* 4 10))
(bind-val G_TYPE_UINT64 GType (* 4 11))
(bind-val G_TYPE_ENUM GType (* 4 12))
(bind-val G_TYPE_FLAGS GType (* 4 13))
(bind-val G_TYPE_FLOAT GType (* 4 14))
(bind-val G_TYPE_DOUBLE GType (* 4 15))
(bind-val G_TYPE_STRING GType (* 4 16))
(bind-val G_TYPE_POINTER GType (* 4 17))
(bind-val G_TYPE_BOXED GType (* 4 18))
(bind-val G_TYPE_PARAM GType (* 4 19))
(bind-val G_TYPE_OBJECT GType (* 4 20))
(bind-val G_TYPE_VARIANT GType (* 4 21))

(bind-func gchar_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_CHAR)
      (g_value_set_char gv value)
      gv)))

(bind-func guchar_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_UCHAR)
      (g_value_set_uchar gv value)
      gv)))

(bind-func gint_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_INT)
      (g_value_set_int gv value)
      gv)))

(bind-func guint_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_UINT)
      (g_value_set_uint gv value)
      gv)))

(bind-func gint64_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_INT64)
      (g_value_set_int64 gv value)
      gv)))

(bind-func guint64_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_UINT64)
      (g_value_set_uint64 gv value)
      gv)))

(bind-func gfloat_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_FLOAT)
      (g_value_set_float gv value)
      gv)))

(bind-func gdouble_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_DOUBLE)
      (g_value_set_double gv value)
      gv)))

(bind-func glong_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_LONG)
      (g_value_set_long gv value)
      gv)))

(bind-func gulong_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_ULONG)
      (g_value_set_ulong gv value)
      gv)))

(bind-func gstring_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_STRING)
      (g_value_set_string gv value)
      gv)))

(bind-func gboolean_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_BOOLEAN)
      (g_value_set_boolean gv value)
      gv)))

(bind-func gpointer_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_POINTER)
      (g_value_set_pointer gv value)
      gv)))

(bind-func gobject_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_OBJECT)
      (g_value_set_object gv value)
      gv)))

(bind-func gboxed_alloc
  (lambda (value)
    (let ((gv:GValue* (alloc)))
      (g_value_init gv G_TYPE_BOXED)
      (g_value_set_boxed gv value)
      gv)))

(bind-func gchar_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_CHAR)
      (g_value_set_char gv value)
      gv)))

(bind-func guchar_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_UCHAR)
      (g_value_set_uchar gv value)
      gv)))

(bind-func gint_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_INT)
      (g_value_set_int gv value)
      gv)))

(bind-func guint_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_UINT)
      (g_value_set_uint gv value)
      gv)))

(bind-func gint64_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_INT64)
      (g_value_set_int64 gv value)
      gv)))

(bind-func guint64_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_UINT64)
      (g_value_set_uint64 gv value)
      gv)))

(bind-func gfloat_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_FLOAT)
      (g_value_set_float gv value)
      gv)))

(bind-func gdouble_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_DOUBLE)
      (g_value_set_double gv value)
      gv)))

(bind-func glong_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_LONG)
      (g_value_set_long gv value)
      gv)))

(bind-func gulong_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_ULONG)
      (g_value_set_ulong gv value)
      gv)))

(bind-func gstring_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_STRING)
      (g_value_set_string gv value)
      gv)))

(bind-func gboolean_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_BOOLEAN)
      (g_value_set_boolean gv value)
      gv)))

(bind-func gpointer_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_POINTER)
      (g_value_set_pointer gv value)
      gv)))

(bind-func gobject_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_OBJECT)
      (g_value_set_object gv value)
      gv)))

(bind-func gboxed_halloc
  (lambda (value)
    (let ((gv:GValue* (halloc)))
      (g_value_init gv G_TYPE_BOXED)
      (g_value_set_boxed gv value)
      gv)))


(bind-func gchar_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_CHAR)
      (g_value_set_char gv value)
      gv)))

(bind-func guchar_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_UCHAR)
      (g_value_set_uchar gv value)
      gv)))

(bind-func gint_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_INT)
      (g_value_set_int gv value)
      gv)))

(bind-func guint_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_UINT)
      (g_value_set_uint gv value)
      gv)))

(bind-func gint64_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_INT64)
      (g_value_set_int64 gv value)
      gv)))

(bind-func guint64_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_UINT64)
      (g_value_set_uint64 gv value)
      gv)))

(bind-func gfloat_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_FLOAT)
      (g_value_set_float gv value)
      gv)))

(bind-func gdouble_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_DOUBLE)
      (g_value_set_double gv value)
      gv)))

(bind-func glong_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_LONG)
      (g_value_set_long gv value)
      gv)))

(bind-func gulong_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_ULONG)
      (g_value_set_ulong gv value)
      gv)))

(bind-func gstring_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_STRING)
      (g_value_set_string gv value)
      gv)))

(bind-func gboolean_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_BOOLEAN)
      (g_value_set_boolean gv value)
      gv)))

(bind-func gpointer_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_POINTER)
      (g_value_set_pointer gv value)
      gv)))

(bind-func gobject_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_OBJECT)
      (g_value_set_object gv value)
      gv)))

(bind-func gboxed_zalloc
  (lambda (value)
    (let ((gv:GValue* (zalloc)))
      (g_value_init gv G_TYPE_BOXED)
      (g_value_set_boxed gv value)
      gv)))

(bind-func sys_g_file_test
  (lambda (path)
    (g_file_test path G_FILE_TEST_EXISTS)))

(bind-func sys_g_rename
  (lambda (old new)
    (g_rename old new)))

(bind-func sys_g_remove
  (lambda (path)
    (g_remove path)))

(bind-func sys_g_chdir
  (lambda (path)
    (g_chdir path)))

(bind-func sys_g_mkdir
  (lambda (path)
    (g_mkdir path #o0777)))

(bind-func sys_g_get_user_name
  (lambda ()
    (g_get_user_name)))

(bind-func sys_g_get_host_name
  (lambda ()
    (g_get_host_name)))

(bind-func sys_g_get_home_dir
  (lambda ()
    (g_get_home_dir)))

(bind-func sys_g_get_current_dir
  (lambda ()
    (g_get_current_dir)))

;; need to figure out how to get these to work with new AOT adhoc poly stuff

;; (impc:aot:do-or-emit
;;  (define sys:username (lambda () (cptr->string (sys_g_get_user_name)))))
;; (impc:aot:do-or-emit
;;  (define sys:hostname (lambda () (cptr->string (sys_g_get_host_name)))))
;; (impc:aot:do-or-emit
;;  (define sys:home-directory (lambda () (cptr->string (sys_g_get_home_dir)))))
;; (impc:aot:do-or-emit
;;  (define sys:getcwd (lambda () (cptr->string (sys_g_get_current_dir)))))
;; (impc:aot:do-or-emit
;;  (define sys:pwd (lambda () (cptr->string (sys_g_get_current_dir)))))
;; (impc:aot:do-or-emit
;;  (define sys:cwd (lambda () (cptr->string (sys_g_get_current_dir)))))
;; (impc:aot:do-or-emit
;;  (define sys:rename sys_g_rename))
;; (impc:aot:do-or-emit
;;  (define sys:remove sys_g_remove))
;; (impc:aot:do-or-emit
;;  (define sys:mv sys_g_rename))
;; (impc:aot:do-or-emit
;;  (define sys:rm sys_g_remove))
;; (impc:aot:do-or-emit
;;  (define sys:mkdir sys_g_mkdir))
;; (impc:aot:do-or-emit
;;  (define sys:file-exists? sys_g_file_test))
;; (impc:aot:do-or-emit
;;  (define sys:chdir sys_g_chdir))
;; (impc:aot:do-or-emit
;;  (define (sys:cd path)
;;    (if (null? path)
;;        (sys_g_chdir (sys:home-directory))
;;        (sys_g_chdir path))))
;; (impc:aot:do-or-emit
;;  (define sys:ls (lambda () (sys:directory-list "."))))

(impc:aot:insert-footer "xtmglib")
(define *xtmlib-glib-loaded* #t)
