;;; particles.xtm -- Simple Particle System

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: openGL

;;; Commentary:

;; number of particles
;; particle state
;; x positions
;; y positions
;; xv -> xvelocity
;; yv -> yvelocity
;; size -> particle size
;; r -> red
;; g -> green
;; b -> blue

;;; Code:

(bind-type psystem <i64,i64*,float*,float*,float*,float*,float*,float*,float*,float*,float*,i32>)

;; psystem type helpers
(bind-func psystem_size (lambda (psys:psystem*) (tref psys 0)))
(bind-func psystem_states (lambda (psys:psystem*) (tref psys 1)))
(bind-func psystem_xs (lambda (psys:psystem*) (tref psys 2)))
(bind-func psystem_ys (lambda (psys:psystem*) (tref psys 3)))
(bind-func psystem_xvs (lambda (psys:psystem*) (tref psys 4)))
(bind-func psystem_yvs (lambda (psys:psystem*) (tref psys 5)))
(bind-func psystem_sizes (lambda (psys:psystem*) (tref psys 6)))
(bind-func psystem_reds (lambda (psys:psystem*) (tref psys 7)))
(bind-func psystem_greens (lambda (psys:psystem*) (tref psys 8)))
(bind-func psystem_blues (lambda (psys:psystem*) (tref psys 9)))
(bind-func psystem_alphas (lambda (psys:psystem*) (tref psys 10)))
(bind-func psystem_texid (lambda (psys:psystem*) (tref psys 11)))

;; create system
(bind-func psystem_create
  (lambda (number texture_id)
    (let ((psys:psystem* (halloc))
    (states:i64* (halloc number))
    (xs:float* (halloc number))
    (ys:float* (halloc number))
    (xvs:float* (halloc number))
    (yvs:float* (halloc number))
    (sizes:float* (halloc number))
    (reds:float* (halloc number))
    (greens:float* (halloc number))
    (blues:float* (halloc number))
    (alphas:float* (halloc number)))
      ;(printf "%p,%p,%p,%p,%p,%p,%p,%p,%p,%x\n" states xs ys xvs yvs sizes reds greens blues alphas)
      (tfill! psys number states xs ys xvs yvs sizes reds greens blues alphas texture_id)
      psys)))

;; destroy system
(bind-func psystem_destroy
  (lambda (psys:psystem*)
    (free (tref psys 1))
    (free (tref psys 2))
    (free (tref psys 3))
    (free (tref psys 4))
    (free (tref psys 5))
    (free (tref psys 6))
    (free (tref psys 7))
    (free (tref psys 8))
    (free (tref psys 9))
    (free (tref psys 10))
    (free psys)
    void))



(bind-func psystem-particle-check
  (lambda (psys:psystem* idx)
    (let ((states (psystem_states psys))
    (size (psystem_size psys)))
      (if (> idx (- size 1)) -1
    (if (< (pref states idx) 1)
        idx
        (psystem-particle-check psys (+ idx 1)))))))


(bind-func psystem-set-particle
  (lambda (psys:psystem* idx:i64 x y s xx yy r g b a dur)
    (let ((size (psystem_size psys))
    (free-particle idx))
      (if (or (= free-particle -1)
        (> free-particle size))
    void ;; don't do anything if no free particles
          (let ((states (tref psys 1))
    (xs (tref psys 2))
    (ys (tref psys 3))
    (xvs (tref psys 4))
    (yvs (tref psys 5))
    (sizes (tref psys 6))
    (reds (tref psys 7))
    (greens (tref psys 8))
    (blues (tref psys 9))
    (alphas (tref psys 10)))
      (pset! states free-particle dur)
      (pset! xs free-particle x)
      (pset! ys free-particle y)
      (pset! xvs free-particle xx)
      (pset! yvs free-particle yy)
      (pset! sizes free-particle s)
      (pset! reds free-particle r)
      (pset! greens free-particle g)
      (pset! blues free-particle b)
      (pset! alphas free-particle a)
      void)))))


(bind-func psystem-add-particle
  (lambda (psys:psystem* x y s xx yy r g b a dur)
    (let ((size (psystem_size psys))
    (free-particle (psystem-particle-check psys 0)))
      (if (= free-particle -1)
    void ;; don't do anything if no free particles
    (begin (psystem-set-particle psys free-particle x y s xx yy r g b a dur)
     void)))))


;; draw system
(bind-func psystem_draw 500000000
  (let ((vertex_dat:float* (zalloc 16000000))
  (texcoord_dat:float* (zalloc 16000000))
  (color_dat:float* (zalloc 32000000)))
    (lambda (psys:psystem*)
      (let ((i 0)
      (size (psystem_size psys))
      (texid (psystem_texid psys))
      (states (psystem_states psys))
      (state 0)
      (xs:float* (psystem_xs psys))
      (ys:float* (psystem_ys psys))
      (xvs (psystem_xvs psys))
      (yvs (psystem_yvs psys))
      (sizes (psystem_sizes psys))
      (reds (psystem_reds psys))
      (greens (psystem_greens psys))
      (blues (psystem_blues psys))
      (alphas(psystem_alphas psys))
      (cnt 0))

  ;(printf "tid:%d\n" texid)
  (glEnable GL_BLEND)
  (glDisable GL_DEPTH_TEST)
  (glDepthMask GL_FALSE)
  (glBlendFunc GL_SRC_ALPHA GL_ONE)

  (dotimes (i size)
    (set! state (pref states i))
    (if (> state 0)
        (let ((cdat (pref-ptr color_dat (* cnt 16)))
        (vdat (pref-ptr vertex_dat (* cnt 8)))
        (tdat (pref-ptr texcoord_dat (* cnt 8)))
        (s (pref sizes i))
        (x (- (pref xs i) (* 0.5 s)))
        (y (- (pref ys i) (* 0.5 s))))
    (pset! vdat 0 x) (pset! vdat 1 y)                    ;; v1
    (pset! vdat 2 (+ x s)) (pset! vdat 3 y)              ;; v2
    (pset! vdat 4 (+ x s)) (pset! vdat 5 (+ y s))        ;; v3
    (pset! vdat 6 x) (pset! vdat 7 (+ y s))              ;; v4
    (pset! tdat 0 0.0) (pset! tdat 1 0.0)                ;; t1
    (pset! tdat 2 1.0) (pset! tdat 3 0.0)                ;; t2
    (pset! tdat 4 1.0) (pset! tdat 5 1.0)                ;; t3
    (pset! tdat 6 0.0) (pset! tdat 7 1.0)                ;; t4
    (pset! cdat 0 (pref reds i))                         ;; red
    (pset! cdat 1 (pref greens i))                       ;; green
    (pset! cdat 2 (pref blues i))                        ;; blue
    (pset! cdat 3 (pref alphas i))
    (pset! cdat 4 (pref reds i))                         ;; red
    (pset! cdat 5 (pref greens i))                       ;; green
    (pset! cdat 6 (pref blues i))                        ;; blue
    (pset! cdat 7 (pref alphas i))
    (pset! cdat 8 (pref reds i))                         ;; red
    (pset! cdat 9 (pref greens i))                       ;; green
    (pset! cdat 10 (pref blues i))                        ;; blue
    (pset! cdat 11 (pref alphas i))
    (pset! cdat 12 (pref reds i))                         ;; red
    (pset! cdat 13 (pref greens i))                       ;; green
    (pset! cdat 14 (pref blues i))                        ;; blue
    (pset! cdat 15 (pref alphas i))
    (set! cnt (+ cnt 1)))))
  ;; (set! texid (i64toi32 0))
  (glEnable GL_COLOR_MATERIAL)
  (if (> texid 0)
      (begin (glActiveTexture GL_TEXTURE0)
             (glDisable GL_TEXTURE_RECTANGLE_ARB)
             (glEnable GL_TEXTURE_2D)
       (glBindTexture GL_TEXTURE_2D texid)
       (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
       (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
       (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
       (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
       (glTexEnvi GL_TEXTURE_ENV GL_TEXTURE_ENV_MODE GL_COMBINE)
       1))

  (glEnableClientState GL_VERTEX_ARRAY)
  (glEnableClientState GL_COLOR_ARRAY)
  (glEnableClientState GL_TEXTURE_COORD_ARRAY)

  (glVertexPointer 2 GL_FLOAT 0 (bitcast vertex_dat i8*))
  (glTexCoordPointer 2 GL_FLOAT 0 (bitcast texcoord_dat i8*))
  (glColorPointer 4 GL_FLOAT 0 (bitcast color_dat i8*))
  (glDrawArrays GL_QUADS 0 (* (i64toi32 cnt) 4))

  (glDisableClientState GL_VERTEX_ARRAY)
  (glDisableClientState GL_COLOR_ARRAY)
  (glDisableClientState GL_TEXTURE_COORD_ARRAY)

  (if (> texid 0)
      (begin (glActiveTexture GL_TEXTURE0)
       (glDisable GL_TEXTURE_2D)
       (glBindTexture GL_TEXTURE_2D 0)
       (glTexEnvi GL_TEXTURE_ENV GL_TEXTURE_ENV_MODE GL_REPLACE)
       1))

  (glDepthMask GL_TRUE)
  (glEnable GL_DEPTH_TEST)
  (glDisable GL_COLOR_MATERIAL)
  (glDisable GL_BLEND)

  1))))


;; subtract 1 from state
;; updates x,y position from xv,yv
(bind-func psystem_update
  (lambda (psys:psystem*)
    (let ((size (psystem_size psys))
    (states (psystem_states psys))
    (xs (psystem_xs psys))
    (ys (psystem_ys psys))
    (xvs (psystem_xvs psys))
    (yvs (psystem_yvs psys))
    (i 0)
    (cnt 0))
      (dotimes (i size)
  (if (> (pref states i) 0)
      (begin (set! cnt (+ cnt 1))
       (pset! states i (- (pref states i) 1))
       (pset! xs i (+ (pref xs i) (pref xvs i)))
       (pset! ys i (+ (pref ys i) (pref yvs i))))))
      cnt))) ;; return number of active particles
