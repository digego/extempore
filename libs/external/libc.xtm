;;; libc.xtm -- libc bindings for Extempore

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libc

;;; Commentary:

;;; Code:

;; lib-loading config
(sys:load-preload-check 'libc)

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libc
  (cond ((string=? (sys:platform) "OSX")
         "libc.dylib")
        ((string=? (sys:platform) "Linux")
         "libc.so")
        ((string=? (sys:platform) "Windows")
         "libc.dll")))

(define *xtmlib-libc-loaded* #t)

;; some hostname/ip stuff
(bind-val AF_INET i16 2)
(bind-val AF_INET6 i16 28)
(bind-alias in_addr_t i32)
(bind-type in_addr <i32>)
(bind-type in6_addr </16,i8/>)
(bind-type sockaddr <i16,/14,i8/>)
(bind-type sockaddr_in <i16,i16,in_addr,/8,i8/>)
(bind-type sockaddr_in6 <i16,i16,i32,in6_addr,i32>)
(bind-type ifaddrs <ifaddrs*,i8*,i32,sockaddr*,sockaddr*,sockaddr*,i8*>)
(bind-type hostent <i8*,i8**,i32,i32,i8*>)
(bind-lib libc inet_addr [in_addr_t,i8*]*)
(bind-lib libc inet_network [in_addr_t,i8*]*)
(bind-lib libc inet_ntoa [i8*,in_addr_t]*)
(bind-lib libc inet_aton [i32,i8*,in_addr*]*)
(bind-lib libc inet_lnaof [in_addr_t,in_addr]*)
(bind-lib libc inet_makeaddr [in_addr,in_addr_t,in_addr_t]*)
(bind-lib libc gethostbyname [hostent*,i8*]*)
(bind-lib libc gethostname [i32,i8*,size_t]*)
(bind-lib libc getifaddrs [i32,ifaddrs**]*)
(bind-lib libc htons [i16,i16]*)
(bind-lib libc ntohs [i16,i16]*)

(bind-func hostname
  (lambda ()
    (let ((name:i8* (halloc 128)))
      (gethostname name 128)
      name)))

;; return the FIRST address only
(bind-func host_to_ip
  (lambda (name:i8*)
    (let ((he (cast (gethostbyname name) hostent*)))
      (if (null? he)
          (begin (printf "Could not find hostname: %s\n" name)
                 null)
          (let ((addresses (cast (tref he 4) in_addr**)))
            (inet_ntoa (tref (pref addresses 0) 0)))))))

(define sys:host-to-ip
  (lambda (name)
    (cptr->string (host_to_ip name))))

(define sys:hostname
  (lambda ()
    (cptr->string (hostname))))

(bind-func _print_interface_addresses
  (lambda (ifs:ifaddrs*)
    (let ((address (cast (tref ifs 3) sockaddr_in*))
          (ipv:i8* (cast (tref-ptr address 0) i8*)))
      (if (= (pref ipv 1) (i16toi8 AF_INET))
          (begin
            (printf "%s " (tref ifs 1))
            (printf "[IPv4]: %s\n" (inet_ntoa (tref (tref-ptr address 2) 0)))))
      (if (null? (tref ifs 0))
          void
          (_print_interface_addresses (tref ifs 0))))))

;; ip4 only
(bind-func print_interface_addresses
  (lambda ()
    (let ((ifs:ifaddrs** (alloc)))
      (pset! ifs 0 null)
      (getifaddrs ifs)
      (_print_interface_addresses (pref ifs 0))
      void)))

(bind-func _interface_address
  (lambda (name:i8* ifs:ifaddrs*)
    (let ((address (cast (tref ifs 3) sockaddr_in*))
          (ipv:i8* (cast (tref-ptr address 0) i8*)))
      (if (and (= (pref ipv 1) (i16toi8 AF_INET))
               (= (strcmp name (tref ifs 1)) 0))
          (inet_ntoa (tref (tref-ptr address 2) 0))
          (if (null? (tref ifs 0))
              ""
              (_interface_address name (tref ifs 0)))))))

;; ip4 only
(bind-func interface_address
  (lambda (name)
    (let ((ifs:ifaddrs** (alloc)))
      (pset! ifs 0 null)
      (getifaddrs ifs)
      (_interface_address name (pref ifs 0)))))

(define sys:print-interface-addresses
  (lambda ()
    (print_interface_addresses)))

(define sys:interface-address
  (lambda (name)
    (cptr->string (interface_address name))))

;; (sys:hostname)
;; (sys:host-to-ip (sys:hostname))
;; (sys:print-interface-addresses)
;; (println (sys:interface-address "en0"))
