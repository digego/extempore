;;; fleet-node.xtm -- library support for fleet clusters

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: nanomsg

;;; Commentary:

;; this file is designed to be loaded on the remote nodes - it handles
;; things like setting up a nanomsg server, etc.

;;; Code:

(sys:load-preload-check 'fleet-node)
(define *xtmlib-fleet-node-loaded* #t)

(sys:load "libs/external/nanomsg.xtm")

(bind-val FLEET_NANOMSG_SERVER_SOCKET i32 -1)
(bind-val FLEET_NANOMSG_SERVER_RUNNING i1 1)
;; assumes port 7099 for nanomsg communication

(bind-func node_reply_socket_init
  (lambda ()
    (if (or (< (set! FLEET_NANOMSG_SERVER_SOCKET (create_socket NN_REP)) 0)
            (< (bind_socket FLEET_NANOMSG_SERVER_SOCKET "tcp://0.0.0.0:7199") 0))
        (nn_println_strerror "reply socket")
        (println "successfully bound REPLY_SOCKET:" FLEET_NANOMSG_SERVER_SOCKET))))

(ipc:bind-func "utility" 'node_reply_socket_init)
(ipc:call-async "utility" 'node_reply_socket_init)

(bind-val FLEET_NANOMSG_SERVER_BUFLEN size_t 10000)

(bind-func node_reply_function
  "request message in inbuf (length inbuflen), shoudl store pointer to reply message in outbuf & return length of reply message"
  (let ((reply_str:i8* (zalloc 256)))
    (lambda (inbuf:i8* inbuflen:size_t outbuf:i8**)
      (let ((bytes (sprintf reply_str "pingback! received message \"%s\" at time %lld" inbuf (now))))
        (pset! outbuf 0 reply_str)
        bytes))))

(bind-func node_reply_loop 30000
  (let ((buf:i8* (zalloc FLEET_NANOMSG_SERVER_BUFLEN))
        (repbufptr:i8** (zalloc)))
    (lambda ()
      (println "starting reply_loop...")
      (while FLEET_NANOMSG_SERVER_RUNNING
        (let ((reqbytes (nn_recv FLEET_NANOMSG_SERVER_SOCKET buf FLEET_NANOMSG_SERVER_BUFLEN 0)))
          (if (> reqbytes 0)
              (let ((bytes (node_reply_function buf FLEET_NANOMSG_SERVER_BUFLEN repbufptr)))
                (if (> bytes 0)
                    (if (< (nn_send FLEET_NANOMSG_SERVER_SOCKET (pref repbufptr 0) (+ 1 (convert bytes)) 0) 0)
                        (nn_println_strerror "error in node_reply_loop")))))))
      (println "stopping node_reply_loop"))))

;; call node_reply_loop on the utility process
(ipc:bind-func "utility" 'node_reply_loop)
(ipc:call-async "utility" 'node_reply_loop)

(bind-func node_reply_loop_stop
  (lambda ()
    (set! FLEET_NANOMSG_SERVER_RUNNING #f)))

(define *xtmlib-fleet-node-loaded* #t)
