;;; opengl.xtm -- helper functions for working with openGL

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: openGL

;;; Commentary:

;;

;;; Code:
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/opengl.xtm" 'quiet))
(sys:load-preload-check 'opengl)
(define *xtmlib-opengl-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/math.xtm")
 (sys:load "libs/external/soil.xtm"))
(impc:aot:insert-forms (sys:load "libs/core/math.xtm" 'quiet))
(impc:aot:insert-forms (sys:load "libs/external/soil.xtm" 'quiet))

;; shoud we do this on Windows?
(impc:aot:suppress-aot-do
 (sys:load "libs/external/glext.xtm"))
(impc:aot:insert-forms (sys:load "libs/external/glext.xtm" 'quiet))

(impc:aot:insert-header "xtmopengl")

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load GL

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libgl
  (cond ((string=? (sys:platform) "Linux")
         "libGL.so")
        ((string=? (sys:platform) "Windows")
         "opengl32.dll")
        ((string=? (sys:platform) "OSX")
         "/System/Library/Frameworks/OpenGL.framework/OpenGL")
        (else
         (begin (print-with-colors 'red 'default #f (print "Error"))
                (print ": unknown platform ")
                (print-with-colors 'yellow 'default #f (print (sys:platform))))))
  "xtmopengl")

;; if on windows also check for Gl32.dll
(if (not libgl)
    (if (string=? "Windows" (sys:platform))
        (begin (set! libgl (impc:ti:bind-dylib 'libgl "Gl32.dll"))
               (if (or (null? libgl)
                       (eq? #f libgl))
                   (print-error "Error loading opengl library")))
        (sys:load-escape "Error loading opengl library")))

(impc:aot:import-ll "xtmopengl")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; missing opengl constants

;; (bind-val GL_VIEWPORT_BIT i32 2048)
;; (bind-val GL_ENABLE_BIT i32 8192)
;; (bind-val GL_VERTEX_PROGRAM_POINT_SIZE i32 34370)
;; (bind-val GL_COORD_REPLACE i32 34914)

;; (bind-val GL_ONE_MINUS_SRC_ALPHA i32 771)
;; (bind-val GL_ONE_MINUS_SRC_COLOR i32 769)
;; (bind-val GL_ONE_MINUS_DST_COLOR i32 775)

;;;;;;;;;;;;;;;;;;;;;;;  FBO stuff

;; (bind-val GL_DRAW_FRAMEBUFFER i32 36009)
;; (bind-val GL_READ_FRAMEBUFFER i32 36008)
;; (bind-val GL_FRAMEBUFFER i32 36160)
;; (bind-val GL_RENDERBUFFER i32 36161)
;; (bind-val GL_RENDERBUFFER_WIDTH i32 36162)
;; (bind-val GL_RENDERBUFFER_HEIGHT i32 36163)
;; (bind-val GL_RENDERBUFFER_INTERNAL_FORMAT i32 36164)
;; (bind-val GL_FRAMEBUFFER_COMPLETE i32 36053)
;; (bind-val GL_COLOR_ATTACHMENT0 i32 36064)
;; (bind-val GL_COLOR_ATTACHMENT1 i32 36065)
;; (bind-val GL_COLOR_ATTACHMENT2 i32 36066)
;; (bind-val GL_COLOR_ATTACHMENT3 i32 36067)
;; (bind-val GL_COLOR_ATTACHMENT4 i32 36068)
;; (bind-val GL_COLOR_ATTACHMENT5 i32 36069)
;; (bind-val GL_COLOR_ATTACHMENT6 i32 36070)
;; (bind-val GL_COLOR_ATTACHMENT7 i32 36071)
;; (bind-val GL_COLOR_ATTACHMENT8 i32 36072)
;; (bind-val GL_COLOR_ATTACHMENT9 i32 36073)
;; (bind-val GL_COLOR_ATTACHMENT10 i32 36074)
;; (bind-val GL_COLOR_ATTACHMENT11 i32 36075)
;; (bind-val GL_COLOR_ATTACHMENT12 i32 36076)
;; (bind-val GL_COLOR_ATTACHMENT13 i32 36077)
;; (bind-val GL_COLOR_ATTACHMENT14 i32 36078)
;; (bind-val GL_COLOR_ATTACHMENT15 i32 36079)

;; (bind-val GL_DEPTH_ATTACHMENT i32 36096)
;; ;; (bind-val GL_DEPTH_COMPONENT16 i32 33189)
;; (bind-val GL_DEPTH_COMPONENT24 i32 33190)
;; (bind-val GL_DEPTH_COMPONENT32 i32 33191)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Load GLU

(bind-dylib libglu
  (cond ((string=? (sys:platform) "Linux")
         "libGLU.so")
        ((string=? (sys:platform) "Windows")
         "Glu32.dll")
        ((string=? (sys:platform) "OSX")
         "/System/Library/Frameworks/OpenGL.framework/OpenGL")
        (else
         (begin (print-with-colors 'red 'default #f (print "Error"))
                (print ": unknown platform ")
                (print-with-colors 'yellow 'default #f (print (sys:platform)))))))

(bind-lib libglu gluLookAt [void,double,double,double,double,double,double,double,double,double]*)
(bind-lib libglu gluOrtho2D [void,double,double,double,double]*)
(bind-lib libglu gluPerspective [void,double,double,double,double]*)
(bind-lib libglu gluErrorString [i8*,i32]*)

(bind-func gl_setup
  (lambda ()
    (glEnable GL_LIGHTING)
    (glEnable GL_LIGHT0)
    (let ((diffuse:float* (halloc 4))
    (specular:float* (halloc 4))
    (position:float* (halloc 4)))
      (pset! diffuse 0 1.0)
      (pset! diffuse 1 1.0)
      (pset! diffuse 2 1.0)
      (pset! diffuse 3 1.0)
      (pset! specular 0 1.0)
      (pset! specular 2 1.0)
      (pset! specular 3 1.0)
      (pset! specular 4 1.0)
      (pset! position 0 100.0)
      (pset! position 1 100.0)
      (pset! position 2 100.0)
      (pset! position 3 0.0)

      (glLightfv GL_LIGHT0 GL_DIFFUSE diffuse)
      (glLightfv GL_LIGHT0 GL_SPECULAR specular)
      (glLightfv GL_LIGHT0 GL_POSITION position))

    (glColorMaterial GL_FRONT_AND_BACK GL_AMBIENT_AND_DIFFUSE)
    (glEnable GL_COLOR_MATERIAL)
    (glShadeModel GL_SMOOTH)
    (glDisable GL_BLEND)
    (glBlendFunc GL_ONE GL_SRC_ALPHA)))

;; (bind-val GL_MODELVIEW i32 5888)
;; (bind-val GL_MODELVIEW_MATRIX i32 2982)
;; (bind-val GL_PROJECTION i32 5889)
;; (bind-val GL_PROJECTION_MATRIX i32 2983)
;; (bind-val GL_TEXTURE i32 5890)
;; (bind-val GL_TEXTURE_MATRIX i32 2984)

(bind-func gl_set_view
  (lambda (w:double h:double depth:double)
    (glViewport 0 0 (dtoi32 w) (dtoi32 h))
    (glMatrixMode GL_PROJECTION)
    (glLoadIdentity)
    (gluPerspective 35.0 (/ w h) 0.1 depth)
    (glMatrixMode GL_MODELVIEW)
    (glEnable GL_DEPTH_TEST)
    (gl_setup)
    1))

(bind-func gl_look_at
  (lambda (eyex eyey eyez centre-x centre-y centre-z up-x up-y up-z)
    (glLoadIdentity)
    (gluLookAt eyex eyey eyez centre-x centre-y centre-z up-x up-y up-z)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; FBO helpers
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;(bind-val GL_RGBA16F i32 34842)
;;(bind-val GL_RGBA8 i32 32856)

;; creates an empty texture
;; suitable to back an FBO
(bind-func fbo_create_texture_rect
  (lambda (width height)
    (let ((id:i32* (salloc))
    (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      ;;(glRenderbufferStorage GL_RENDERBUFFER GL_RGBA16F width height)
      (glRenderbufferStorage GL_RENDERBUFFER GL_RGBA8 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB (pref tex 0))
      ;;(glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_RGBA16F width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_RGBA8 width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
      (pref tex 0))))


;; create fbo depth buffer
(bind-func fbo_create_depth_buffer_rect
  (lambda (width height)
    (let ((id:i32* (salloc))
    (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      ;; (glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT32 width height)
      (glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT24 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB (pref tex 0))
      ;;(glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_DEPTH_COMPONENT32 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 GL_DEPTH_COMPONENT24 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
      (pref tex 0))))

;; creates an empty texture
;; suitable to back an FBO
(bind-func fbo_create_texture
  (lambda (width height)
    (let ((id:i32* (salloc))
    (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      (glRenderbufferStorage GL_RENDERBUFFER GL_RGBA8 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_2D (pref tex 0))
      (glTexImage2D GL_TEXTURE_2D 0 GL_RGBA8 width height 0 GL_RGBA GL_UNSIGNED_BYTE null)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_2D 0)
      (pref tex 0))))


;; create fbo depth buffer
(bind-func fbo_create_depth_buffer
  (lambda (width height)
    (let ((id:i32* (salloc))
    (tex:i32* (salloc)))
      (glGenRenderbuffers 1 id)
      (glBindRenderbuffer GL_RENDERBUFFER (pref id 0))
      (glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT32 width height)
      ;; (glRenderbufferStorage GL_RENDERBUFFER GL_DEPTH_COMPONENT24 width height)
      (glFramebufferRenderbuffer GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_RENDERBUFFER (pref id 0))

      (glGenTextures 1 tex)
      (glBindTexture GL_TEXTURE_2D (pref tex 0))
      (glTexImage2D GL_TEXTURE_2D 0 GL_DEPTH_COMPONENT32 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      ;; (glTexImage2D GL_TEXTURE_2D 0 GL_DEPTH_COMPONENT24 width height 0 GL_DEPTH_COMPONENT GL_FLOAT null)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
      (glBindTexture GL_TEXTURE_2D 0)
      (pref tex 0))))


;;
;; vbo id      0
;; data size   1
;; ptr to data 2
;;
(bind-type E_vbo <i32,i32,i8*>)

;; asumming always GL_ARRAY_BUFFER at the moment
;; type is one of GL_DYNAMIC_DRAW, GL_STATIC_DRAW, GL_STREAM_DRAW etc..
(bind-func create_vbo
  (lambda (size:i32 data:i8* type:i32)
    (let ((vbo:E_vbo* (halloc))
          (vboid:i32* (salloc)))
      (glGenBuffers 1 vboid)
      (glBindBuffer GL_ARRAY_BUFFER (pref vboid 0))
      (glBufferData GL_ARRAY_BUFFER (convert size) null type)
      ;; (glBufferSubData GL_ARRAY_BUFFER 0 size data)
      (tfill! vbo (pref vboid 0) size data)
      (glBindBuffer GL_ARRAY_BUFFER 0)
      vbo)))


;; structure to hold fbo data
;; fbo id          0
;; texture id      1
;; depth buffer id 2
;; width           3
;; height          4
(bind-type E_fbo <i32,i32,i32,i32,i32>)

;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create_fbo_rect
  (lambda (width:i32 height:i32 _texid:i32 _depthid:i32)
    (let ((texid:i32 0)
    (depthid:i32 0)
    (fboid:i32* (salloc))
    (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      (if (> _texid 0) (set! texid _texid))
      (if (> _depthid 0) (set! depthid _depthid))
      (set! texid (fbo_create_texture_rect width height))
      (set! depthid (fbo_create_depth_buffer_rect width height))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_RECTANGLE_ARB texid 0)
      ;; Attach the texture depthid to the depth buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_RECTANGLE_ARB depthid 0)
      (tfill! fbo (pref fboid 0) texid depthid width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
  (if (<> status GL_FRAMEBUFFER_COMPLETE)
      (set! fbo (cast null E_fbo*))))
      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))

;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create_fbo_no_depth_rect
  (lambda (width:i32 height:i32 _texid:i32)
    (let ((texid:i32 0)
    (fboid:i32* (salloc))
    (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      (if (> _texid 0) (set! texid _texid))
      (set! texid (fbo_create_texture_rect width height))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_RECTANGLE_ARB texid 0)
      (tfill! fbo (pref fboid 0) texid -1 width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
  (if (<> status GL_FRAMEBUFFER_COMPLETE)
      (set! fbo (cast null E_fbo*))))
      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear GL_COLOR_BUFFER_BIT)
      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))


;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create_fbo
  (lambda (width:i32 height:i32 _texid:i32 _depthid:i32)
    (let ((texid:i32 0)
    (depthid:i32 0)
    (fboid:i32* (salloc))
    (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      (if (> _texid 0) (set! texid _texid))
      (if (> _depthid 0) (set! texid _depthid))
      (set! texid (fbo_create_texture width height))
      (set! depthid (fbo_create_depth_buffer width height))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D texid 0)
      ;; Attach the texture depthid to the depth buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_DEPTH_ATTACHMENT GL_TEXTURE_2D depthid 0)
      (tfill! fbo (pref fboid 0) texid depthid width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER))
            (err:i32 (glGetError)))
  (if (<> status GL_FRAMEBUFFER_COMPLETE)
            (if (<> err GL_NO_ERROR)
                (begin (printf "GL ERR: FRAMEBUFFER err: %d\n" err)
                       (set! fbo (cast null E_fbo*))
                       1)
                (begin
                  (printf "Possible framebuf error?: %d\n" err)
                  1))))
      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))



;; create and return a frame buffer struct (E_fbo)
;; if _texid is greater than 0 then use existing _texid
(bind-func create_fbo_no_depth
  (lambda (width:i32 height:i32 _texid:i32)
    (let ((texid:i32 0)
    (fboid:i32* (salloc))
    (fbo:E_fbo* (halloc))) ;; heap alloc
      (glGenFramebuffers 1 fboid)
      ;; bind the fbo
      (glBindFramebuffer GL_FRAMEBUFFER (pref fboid 0))
      (if (> _texid 0) (set! texid _texid))
      (set! texid (fbo_create_texture width height))
      ;; Attach the texture texid to the color buffer of our fbo
      (glFramebufferTexture2D GL_FRAMEBUFFER GL_COLOR_ATTACHMENT0 GL_TEXTURE_2D texid 0)
      (tfill! fbo (pref fboid 0) texid -1 width height)
      (let ((status:i32 (glCheckFramebufferStatus GL_FRAMEBUFFER)))
  (printf "fb status %d\n" status)
  (if (<> status GL_FRAMEBUFFER_COMPLETE)
      (set! fbo (cast null E_fbo*))))
      (glClearColor 0.0 1.0 0.0 1.0)
      (glClear GL_COLOR_BUFFER_BIT)
      ;; unbind the frame buffer
      (glBindFramebuffer GL_FRAMEBUFFER 0)
      ;; return the extfbo struct
      fbo)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Shader helpers
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; a couple of shader helper functions
(bind-func print_shader_info_log
  (lambda (obj:i32)
    (let ((infologLength (salloc 1 i32))
          (charsWritten (salloc 1 i32)))
      (glGetShaderiv obj GL_INFO_LOG_LENGTH infologLength)
      (if (> (pref infologLength 0) 1)
          (let ((l (bitcast (malloc (convert (pref infologLength 0))) i8*)))
            (glGetShaderInfoLog obj (pref infologLength 0) charsWritten l)
            (printf "printShaderInfoLog: %s\n" l)
            (free l)
            1)
          (begin (printf "Shader Info log: OK\n") 1)))))

(bind-func print_program_info_log
  (lambda (obj:i32)
    (let ((infologLength (salloc 1 i32))
          (charsWritten (salloc 1 i32)))
      (glGetProgramiv obj GL_INFO_LOG_LENGTH infologLength)
      (if (> (pref infologLength 0) 1)
          (let ((l (bitcast (malloc (convert (pref infologLength 0))) i8*)))
            (glGetProgramInfoLog obj (pref infologLength 0) charsWritten l)
            (printf "Program Info Log:\n %s\n" l)
            (free l)
            1)
          (begin (printf "Program Info log: OK\n") 1)))))

;; load shader (vert and frag shader)
(bind-func create_shader
  (lambda (vsource:i8* fsource:i8*)
    (let ((fshader (glCreateShader GL_FRAGMENT_SHADER))
          (vshader (glCreateShader GL_VERTEX_SHADER))
          (fcode:|1,i8*|* (salloc 1))
          (vcode:|1,i8*|* (salloc 1))
          (program (glCreateProgram))
          (temp:i32* (salloc 1)))
      (pset! fcode 0 fsource)
      (pset! vcode 0 vsource)
      (glShaderSource fshader 1 (cast fcode i8**) (bitcast null i32*))
      (glShaderSource vshader 1 (cast vcode i8**) (bitcast null i32*))
      (glCompileShader fshader)
      (glCompileShader vshader)
      (glAttachShader program fshader)
      (glAttachShader program vshader)
      (glLinkProgram program)
      (print_shader_info_log fshader)
      (print_shader_info_log vshader)
      (print_program_info_log program)
      program)))


;; with default attributes for
;; 0 vertex 4d
;; 1 normals 3d
;; 2 coords (uvw) 3d
;; 3 color 4d
(bind-func create_shader_xtm
  (lambda (vsource:i8* fsource:i8*)
    (let ((fshader (glCreateShader GL_FRAGMENT_SHADER))
    (vshader (glCreateShader GL_VERTEX_SHADER))
    (fcode:|1,i8*|* (salloc 1))
    (vcode:|1,i8*|* (salloc 1))
    (program (glCreateProgram))
    (temp:i32* (salloc 1)))
      (pset! fcode 0 fsource)
      (pset! vcode 0 vsource)
      (glShaderSource fshader 1 (cast fcode i8**) (bitcast null i32*))
      (glShaderSource vshader 1 (cast vcode i8**) (bitcast null i32*))
      (glCompileShader fshader)
      (glCompileShader vshader)
      (glAttachShader program fshader)
      (glAttachShader program vshader)
      (glBindAttribLocation program 0 "xtmVertex")
      (glBindAttribLocation program 1 "xtmNormal")
      (glBindAttribLocation program 2 "xtmUVW")
      (glBindAttribLocation program 3 "xtmColour")
      (glLinkProgram program)
      (print_shader_info_log fshader)
      (print_shader_info_log vshader)
      (print_program_info_log program)
      program)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  GL DRAWING STUFF (deprecated use cairo)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(bind-func circle_line
  (lambda (radius:double x:double y:double)
    (let ((k 0.0))
      (glLineWidth 3.0)
      (glBegin GL_LINE_LOOP)
      (dotimes (k 90.0)
  (let ((angle:double (/ (* k 2.0 PI) 90.0)))
    (glVertex2d (+ x (* (cos angle) radius)) (+ y (* (sin angle) radius)))))
      (glEnd))))

(bind-func circle_whole
  (lambda (radius:double x:double y:double)
    (let ((k 0.0))
      (glBegin GL_TRIANGLE_FAN)
      (dotimes (k 90.0)
  (let ((angle:double (/ (* k 2.0 PI) 90.0)))
    (glVertex2d (+ x (* (cos angle) radius)) (+ y (* (sin angle) radius)))))
      (glEnd))))

(bind-func cube_whole
  (let ((dlist -1))
    (lambda ()
      (if (> dlist -1)
    (begin (glCallList dlist) 1)
    (begin (set! dlist (glGenLists 1))
     (glNewList dlist (+ GL_COMPILE 1))
     (glBegin GL_QUADS)
     ;; Front face
     (glNormal3d 0.0 0.0 1.0)
     (glVertex3d 0.0 0.0  1.0)
     (glVertex3d 1.0 0.0  1.0)
     (glVertex3d 1.0  1.0  1.0)
     (glVertex3d 0.0  1.0  1.0)
     ;; Back face
     (glNormal3d 0.0 0.0 -1.0)
     (glVertex3d 0.0 0.0 0.0)
     (glVertex3d 0.0  1.0 0.0)
     (glVertex3d 1.0  1.0 0.0)
     (glVertex3d 1.0 0.0 0.0)
     ;; Top face
     (glNormal3d 0.0 1.0 0.0)
     (glVertex3d 0.0  1.0 0.0)
     (glVertex3d 0.0  1.0  1.0)
     (glVertex3d 1.0  1.0  1.0)
     (glVertex3d 1.0  1.0 0.0)
     ;; Bottom face
     (glNormal3d 0.0 -1.0 0.0)
     (glVertex3d 0.0 0.0 0.0)
     (glVertex3d 1.0 0.0 0.0)
     (glVertex3d 1.0 0.0  1.0)
     (glVertex3d 0.0 0.0  1.0)
     ;; Right face
     (glNormal3d 1.0 0.0 0.0)
     (glVertex3d 1.0 0.0 0.0)
     (glVertex3d 1.0  1.0 0.0)
     (glVertex3d 1.0  1.0  1.0)
     (glVertex3d 1.0 0.0  1.0)
     ;; Left face
     (glNormal3d -1.0 0.0 0.0)
     (glVertex3d 0.0 0.0 0.0)
     (glVertex3d 0.0 0.0  1.0)
     (glVertex3d 0.0  1.0  1.0)
     (glVertex3d 0.0  1.0 0.0)
     (glEnd)
     (glEndList)
     1)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; opengl misc

;;(bind-val GL_RENDERER i32 7937)

(bind-func gl_print_driver_info
  (lambda ()
    (printf "--------------------------\n")
    (printf "OpenGL Driver:\nVendor:%s\nRenderer:%s\nVersion:%s\n" (glGetString GL_VENDOR) (glGetString GL_RENDERER) (glGetString GL_VERSION))
    (printf "--------------------------\n")
    void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OpenGL related Matrix Operations
;;

(bind-func mat4_to_mat3
  (lambda (mat4:float* mat3:float*)
    (pfill! mat3
            (pref mat4 0) (pref mat4 1) (pref mat4 2)
            (pref mat4 4) (pref mat4 5) (pref mat4 6)
            (pref mat4 8) (pref mat4 9) (pref mat4 10))
    void))


(bind-func translate_matrix
  (lambda (mat:float* x y z)
    (let ((mat2:float* (salloc 32))
          (mat3 (pref-ptr mat2 16)))
      (pfill! mat2
              1.0 0.0 0.0 0.0
              0.0 1.0 0.0 0.0
              0.0 0.0 1.0 0.0
              x   y   z   1.0)
      ;;(mmulf mat2 4 4 mat 4 4 mat3)
      (mmul4 mat2 mat mat3)
      (memcpy (cast mat i8*) (cast mat3 i8*) (* 16 4))
      void)))

(bind-func scale_matrix
  (lambda (mat:float* x:float y:float z:float)
    (let ((mat2:float* (salloc 32))
          (mat3:float* (pref-ptr mat2 16)))
      (pfill! mat2
              x     0.0   0.0   0.0
              0.0   y     0.0   0.0
              0.0   0.0   z     0.0
              0.0   0.0   0.0   1.0)
      ;;(mmulf mat2 4 4 mat 4 4 mat3)
      (mmul4 mat2 mat mat3)
      (memcpy (cast mat i8*) (cast mat3 i8*) (* 16 4))
      void)))

(bind-func rotate_matrix
  (lambda (mat:float* alpha:float x:float y:float z:float)
    (let ((c (cos alpha))
          (c-1 (- 1.0 c))
          (s (sin alpha))
          (mat2:float* (salloc 16))
          (mat3:float* (salloc 16))
          (vec1:float* (salloc 3)) ;; axis to rotate around (normalized)
          (vec2:float* (salloc 3))) ;; axis to rotate around (normalized)
      (pfill! vec1 x y z)
      (vnormf vec1 3 vec2)
      (set! x (pref vec2 0))
      (set! y (pref vec2 1))
      (set! z (pref vec2 2))
      (pfill! mat2
              (+ (* x x c-1) c) (- (* x y c-1) (* z s)) (+ (* x z c-1) (* y s)) 0.0
              (+ (* y x c-1) (* z s)) (+ (* y y c-1) c) (- (* y z c-1) (* x s)) 0.0
              (- (* x z c-1) (* y s)) (+ (* y z c-1) (* x s)) (+ (* z z c-1) c) 0.0
              0.0               0.0                     0.0                     1.0)
      ;;(mmulf mat2 4 4 mat 4 4 mat3)
      (mmul4 mat2 mat mat3)
      (memcpy (cast mat i8*) (cast mat3 i8*) (* 16 4))
      void)))

;; this is similar to gluPerspective
;; but fills a suitable PROJECTION matrix
(bind-func fill_identity_matrix
  (lambda (mat:float*)
    (pfill! mat
            1.0 0.0 0.0 0.0
            0.0 1.0 0.0 0.0
            0.0 0.0 1.0 0.0
            0.0 0.0 0.0 1.0)
    void))

;; this is similar to gluPerspective
;; but fills a suitable PROJECTION matrix
(bind-func fill_projection_matrix
  (lambda (mat:float* fovy aspect near far)
    (let ((top (* near (tanf fovy)))
          (right (* top aspect))
          (left (* -1.0 right))
          (bottom (* -1.0 top)))
      (pfill! mat
              (/ near right) 0.0 0.0 0.0
              0.0 (/ near top) 0.0 0.0
              0.0 0.0 (/ (+ (* -1.0 far) near) (- far near)) -1.0
              0.0 0.0 (/ (* -2.0 far near) (- far near)) 0.0)
      void)))

;; this is similar to gluPerspective
;; but fills a suitable PROJECTION matrix
(bind-func fill_orthographic_matrix
  (lambda (mat:float* left right bottom top near far)
    (pfill! mat
            (/ 2.0 (- right left)) 0.0 0.0 0.0
            0.0 (/ 2.0 (- top bottom)) 0.0 0.0
            0.0 0.0 (* -1.0 (/ 2.0 (- far near))) 0.0
            (* -1.0 (/ (+ left right) (- right left)))
            (* -1.0 (/ (+ top bottom) (- top bottom)))
            (* -1.0 (/ (+ far near) (- far near)))
            1.0)
    void))

;; where v1 and v2 can be v3 or v4
;; but v3 MUST be v4
(bind-func fill_direction_vector
  (lambda (v1:float* v2:float* v3:float*)
    (let ((tmp:float* (salloc 4)))
      (vsub v1 v2 3 tmp)
      (vnorm tmp 3 v3)
      (pset! v3 3 0.0) ;; direction vectors get w = 0.0
      void)))

;; this is similar to gl_look_at
;; but returns a suitable VIEW matrix
(bind-func fill_view_matrix
  (let ((mattt:float* (alloc 16)))
    (lambda (matrix:float* vEye vTarget vUp)
      (let ((vz:float* (salloc 3))
            (vy:float* (salloc 3))
            (vx:float* (salloc 3))
            (i 0)
            (mat:float* (salloc 16))
            (mtmp1:float* (salloc 16))
            (vtmp1:float* (salloc 3))
            (vtmp2:float* (salloc 3)))
        (vsub vEye vTarget 3 vtmp1)
        (vnorm vtmp1 3 vz)
        (vnorm vUp 3 vtmp2)
        (vcross vtmp2 vz vtmp1)
        (vnorm vtmp1 3 vx)
        (vcross vz vx vy)
        (pfill! mat
                (pref vx 0) (pref vx 1) (pref vx 2) 0.0
                (pref vy 0) (pref vy 1) (pref vy 2) 0.0
                (pref vz 0) (pref vz 1) (pref vz 2) 0.0
                (pref vEye 0) (pref vEye 1) (pref vEye 2) 1.0)
        (minvf mat 4 matrix)
        void))))


;; this is similar to gl_look_at
;; but returns a suitable VIEW matrix
;;
;; same as fill_view_matrix but
;; instead of a target:position
;; we provide a    dir:vector
(bind-func fill_view_matrix_dir
  (let ((mattt:float* (alloc 16)))
    (lambda (matrix:float* vEye:float* vDir vUp)
      (let ((vz:float* (salloc 3))
            (vy:float* (salloc 3))
            (vx:float* (salloc 3))
            (i 0)
            (mat:float* (salloc 16))
            (mtmp1:float* (salloc 16))
            (vtmp1:float* (salloc 3))
            (vtmp2:float* (salloc 3)))
        (vnorm vDir 3 vz)
        (vnorm vUp 3 vtmp2)
        (vcross vtmp2 vz vtmp1)
        (vnorm vtmp1 3 vx)
        (vcross vz vx vy)
        (pfill! mat
                (pref vx 0) (pref vx 1) (pref vx 2) 0.0
                (pref vy 0) (pref vy 1) (pref vy 2) 0.0
                (pref vz 0) (pref vz 1) (pref vz 2) 0.0
                (pref vEye 0) (pref vEye 1) (pref vEye 2) 1.0)
        (minvf mat 4 matrix)
        void))))

(bind-func gl_print_error_with_msg
  (lambda (msg:i8*)
    (let ((err (glGetError)))
      (cond
       ((= err GL_INVALID_ENUM)
        (printf "%s: Invalid Enum\n" msg))
       ((= err GL_INVALID_VALUE)
        (printf "%s: Invalid Value\n" msg))
       ((= err GL_INVALID_OPERATION)
        (printf "%s: Invalid Operation\n" msg))
       ((= err GL_STACK_OVERFLOW)
        (printf "%s: Stack Underflow\n" msg))
       ((= err GL_STACK_UNDERFLOW)
        (printf "%s: Stack Overflow\n" msg))
       ((= err GL_OUT_OF_MEMORY)
        (printf "%s: Out Of Memory\n" msg))
       ;((= err GL_INVALID_FRAMEBUFFER_OPERATION)
       ; (printf "%s: Invalid Framebuffer Operation\n" msg))
       ((= err GL_TABLE_TOO_LARGE)
        (printf "%s: Table Too Large\n" msg))
       ((= err GL_NO_ERROR)
        1:i32)
       (else
        (printf "%s\n" msg)))
      void)))

(bind-func gl_print_error_no_msg
  (lambda ()
    (gl_print_error_with_msg "OpenGL Error")))

(bind-poly gl_print_error gl_print_error_with_msg)
(bind-poly gl_print_error gl_print_error_no_msg)

(impc:aot:insert-footer "xtmopengl")
(define *xtmlib-opengl-loaded* #t)
