;;; system.xtm -- system interaction library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libapr

;;; Commentary:

;; Scheme & xtlang code for interacting with the system in a
;; cross-platform fashion, e.g. environment variables, file/directory
;; manipulation, signal handling

;; currently, this cross-platform functionality is mostly provided
;; through the Apache Portable Runtime (APR) library - see
;; libs/external/apr.xtm for a full list of bindings

;; these functions all create/manage/destroy their own memory pools
;; for convenience - if you need more controls you can create your own
;; pool and call the APR functions directly

;; the xtlang

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/system.xtm" 'quiet))
(sys:load-preload-check 'system)
(define *xtmlib-system-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/external/apr.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet)
 (sys:load "libs/external/apr.xtm" 'quiet))

(impc:aot:insert-header "xtmsystem")
(impc:aot:import-ll "xtmsystem")

;; file IO

(sys:load "libs/core/adt.xtm")

(bind-func sys_file_open
  (lambda (filename flags permissions pool)
    (letz ((file:apr_file_t** (zalloc))
           (res (apr_file_open file (cstring filename) flags permissions pool)))
      (if (= res APR_SUCCESS) (pref file 0) null))))

(bind-func sys_file_close
  (lambda (file)
    (apr_file_close file)))

(bind-func sys_file_remove
  (lambda (filepath)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_file_remove (cstring filepath) pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_file_rename
  (lambda (from_path to_path)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_file_rename (cstring from_path) (cstring to_path) pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_file_link
  (lambda (from_path to_path)
    (apr_file_link (cstring from_path) (cstring to_path))))

(bind-func sys_file_copy
  (lambda (from_path to_path permissions)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_file_copy (cstring from_path) (cstring to_path) permissions pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_file_append
  (lambda (from_path to_path permissions)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_file_append (cstring from_path) (cstring to_path) permissions pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_file_eof
  (lambda (file)
    (apr_file_eof file)))

(bind-func sys_file_open_stderr
  (lambda (pool)
    (let ((file:apr_file_t** (salloc))
          (res APR_SUCCESS))
      (set! res (apr_file_open_stderr file pool))
      (apr_pool_destroy pool)
      (if (= res APR_SUCCESS) (pref file 0) null))))

(bind-func sys_file_open_stdout
  (lambda (pool)
    (let ((file:apr_file_t** (salloc))
          (res APR_SUCCESS))
      (set! res (apr_file_open_stdout file pool))
      (apr_pool_destroy pool)
      (if (= res APR_SUCCESS) (pref file 0) null))))

(bind-func sys_file_open_stdin
  (lambda (pool)
    (let ((file:apr_file_t** (salloc))
          (res APR_SUCCESS))
      (set! res (apr_file_open_stdin file pool))
      (apr_pool_destroy pool)
      (if (= res APR_SUCCESS) (pref file 0) null))))

(bind-func sys_file_read
  (lambda (file buf nbytes)
    (let ((nbytes_ptr:size_t* (salloc)))
      (pset! nbytes_ptr 0 nbytes)
      (apr_file_read file buf nbytes_ptr)
      (pref nbytes_ptr 0))))

(bind-func sys_file_write
  (lambda (file buf nbytes)
    (let ((nbytes_ptr:size_t* (salloc)))
      (pset! nbytes_ptr 0 nbytes)
      (apr_file_write file buf nbytes_ptr)
      (pref nbytes_ptr 0))))

(bind-func sys_file_putc
  (lambda (file char)
    (apr_file_putc char file)))

(bind-func sys_file_getc
  (lambda (file)
    (let ((char_ptr:i8* (salloc)))
      (apr_file_getc char_ptr file)
      (pref char_ptr 0))))

(bind-func sys_file_ungetc
  (lambda (file char)
    (apr_file_ungetc char file)))

;; TODO check if the semantics of this are correct!
(bind-func sys_file_gets
  (lambda (file maxlen)
    (let ((buf:i8* (salloc)))
      (if (= (apr_file_gets buf maxlen file) APR_SUCCESS)
          (Str buf)
          null))))

(bind-func sys_file_puts
  (lambda (file str)
    (apr_file_puts (cstring str) file)))

(bind-func sys_file_flush
  (lambda (file)
    (apr_file_flush file)))

(bind-func sys_file_sync
  (lambda (file)
    (apr_file_sync file)))

(bind-func sys_file_datasync
  (lambda (file)
    (apr_file_datasync file)))

(bind-func sys_file_datasync
  (lambda (file)
    (apr_file_datasync file)))

(bind-func sys_file_seek
"Move the read/write file offset to a specified byte within a file.

  APR_SET  --  set the offset to offset
  APR_CUR  --  add the offset to the current position
  APR_END  --  add the offset to the current file size

@param file - The file descriptor
@param where - How to move the pointer (see above)
@param offset - The offset to move the pointer to
@return - the offset the pointer was actually moved to."
  (lambda (file where offset)
    (let ((off_ptr:apr_off_t* (salloc)))
      (pset! off_ptr 0 offset)
      (apr_file_seek file where off_ptr)
      (pref off_ptr 0))))

(bind-func sys_filepath_root
  (lambda (filepath)
    (letz ((pool (apr_pool_create))
           (root:i8** (zalloc))
           (filename:i8** (zalloc))
           (res APR_SUCCESS)
           (path_list null))
      (pset! filename 0 (cstring filepath))
      (set! res (apr_filepath_root root filename 0 pool))
      (if (= res APR_SUCCESS)
          (set! path_list (list (Str (pref root 0))
                                (Str (pref filename 0)))))
      (apr_pool_destroy pool)
      path_list)))

(bind-func sys_pwd
  (lambda ()
    (let ((pool (apr_pool_create))
          (dirname:i8** (salloc 1024))
          (res APR_SUCCESS))
      (set! res (apr_filepath_get dirname 0 pool))
      (apr_pool_destroy pool)
      (if (= res APR_SUCCESS) (Str (pref dirname 0)) null))))

(bind-func sys_cd
  (lambda (dirname)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_filepath_set (cstring dirname) pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_ls
  (lambda (dirname)
    (letz ((pool (apr_pool_create))
           (dir:i8** (zalloc))
           (info:apr_finfo_t* (zalloc))
           (res APR_SUCCESS)
           (file_list (list)))
      (apr_dir_open dir (cstring dirname) pool)
      (while (= (apr_dir_read info APR_FINFO_NAME (pref dir 0)) 0)
        (set! file_list (cons (Str (tref info 15)) file_list)))
      (apr_dir_close (pref dir 0))
      (apr_pool_destroy pool)
      file_list)))

(bind-func sys_dir_make
  (lambda (dirname permissions)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_dir_make (cstring dirname) permissions pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_dir_make_recursive
  (lambda (dirname permissions)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_dir_make_recursive (cstring dirname) permissions pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_dir_remove
  (lambda (dirname)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_dir_remove (cstring dirname) pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_file_mktemp
  (lambda (filename_prefix pool)
    (letz ((file:apr_file_t** (zalloc))
           (namebuf:i8* (zalloc 1024))
           (res APR_SUCCESS))
      (sprintf namebuf "%sXXXXXX" (cstring filename_prefix))
      (set! res (apr_file_mktemp file namebuf 0 pool))
      (if (= res APR_SUCCESS) (pref file 0) null))))

(bind-func sys_temp_dir_get
  (lambda ()
    (let ((pool (apr_pool_create))
          (dirname_ptr:i8** (salloc))
          (res APR_SUCCESS)
          (tmpdir null))
      (set! res (apr_temp_dir_get dirname_ptr pool))
      (set! tmpdir (Str (pref dirname_ptr 0)))
      (apr_pool_destroy pool)
      (if (= res APR_SUCCESS) tmpdir null))))

;; environment variables

(bind-func sys_env_get
  (lambda (var)
    (let ((pool (apr_pool_create))
          (val:i8** (salloc))
          (res APR_SUCCESS))
      (set! res (apr_env_get val (cstring var) pool))
      (apr_pool_destroy pool)
      (if (= res APR_SUCCESS)
          (Str (pref val 0))
          null))))

(bind-func sys_env_set
  (lambda (var val)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_env_set (cstring val) (cstring var) pool))
      (apr_pool_destroy pool)
      res)))

(bind-func sys_env_delete
  (lambda (var)
    (let ((pool (apr_pool_create))
          (res APR_SUCCESS))
      (set! res (apr_env_delete (cstring var) pool))
      (apr_pool_destroy pool)
      res)))

(impc:aot:insert-footer "xtmsystem")
(define *xtmlib-system-loaded* #t)
