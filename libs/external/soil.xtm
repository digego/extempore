;;; soil.xtm -- Simple Library Wrapper for SOIL

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libSOIL

;;; Commentary:

;; taken from http://www.lonesock.net/soil.html

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/soil.xtm" 'quiet))
(sys:load-preload-check 'soil)
(define *xtmlib-soil-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/external/gl.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))
(impc:aot:insert-forms (sys:load "libs/external/gl.xtm"))

;; load soil library

(impc:aot:insert-header "xtmsoil")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libsoil
  (cond ((string=? (sys:platform) "OSX")
         "libSOIL.dylib")
        ((string=? (sys:platform) "Linux")
         "libSOIL.so")
        ((string=? (sys:platform) "Windows")
         "SOIL.dll"))
  "xtmsoil")

(impc:aot:import-ll "xtmsoil")


(bind-lib libsoil SOIL_load_OGL_texture [i32,i8*,i32,i32,i32]*)
(bind-lib libsoil SOIL_load_OGL_texture_from_memory [i32,i8*,i32,i32,i32,i32]*)

;; (bind-lib libsoil SOIL_load_OGL_cubemap [i32,i8*,i8*,i8*,i8*,i8*,i8*,i32,i32,i32]*)
;; (bind-lib libsoil SOIL_load_OGL_single_cubemap [i32,i8*,i32,i32,i32]*)

(bind-lib libsoil SOIL_load_image [i8*,i8*,i32*,i32*,i32*,i32]*)
;(bind-lib libsoil SOIL_save_image [i32,i8*,i32,i32,i32,i32,i8*]*)
;(bind-lib solilib SOIL_save_screenshot [i32,i8*,i32,i32,i32,i32,i32]*)

(bind-val SOIL_FLAG_POWER_OF_TWO i32 1)
(bind-val SOIL_FLAG_MIPMAPS i32 2)
(bind-val SOIL_FLAG_TEXTURE_REPEATS i32 4)
(bind-val SOIL_FLAG_MULTIPLY_ALPHA i32 8)
(bind-val SOIL_FLAG_INVERT_Y i32 16)
(bind-val SOIL_FLAG_COMPRESS_TO_DXT i32 32)
(bind-val SOIL_FLAG_DDS_LOAD_DIRECT i32 64)
(bind-val SOIL_FLAG_NTSC_SAFE_RGB i32 128)
(bind-val SOIL_FLAG_CoCg_Y i32 256)
(bind-val SOIL_FLAG_TEXTURE_RECTANGLE i32 512)

(bind-val SOIL_LOAD_AUTO i32 0)
(bind-val SOIL_LOAD_L i32 1)
(bind-val SOIL_LOAD_LA i32 2)
(bind-val SOIL_LOAD_RGB i32 3)
(bind-val SOIL_LOAD_RGBA i32 4)

(bind-val SOIL_SAVE_TYPE_TGA i32 0)
(bind-val SOIL_SAVE_TYPE_BMP i32 1)
(bind-val SOIL_SAVE_TYPE_DDS i32 2)

(bind-val GL_TEXTURE_RECTANGLE_ARB i32 #x84F5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; SOME IMAGE HELPERS FUNCTIONS

;; id of 0 means Create new texture
;; id > 0 means load image into existing texture
;; returns texture
(bind-func gl_load_image_rect
  (lambda (path id)
    (let ((texid (SOIL_load_OGL_texture path SOIL_LOAD_AUTO id (+ SOIL_FLAG_MIPMAPS SOIL_FLAG_INVERT_Y SOIL_FLAG_TEXTURE_RECTANGLE))))
      (if (= texid 0)
    (printf "Error loading: %s\n" path))
      texid)))

(bind-func gl_load_image
  (lambda (path id)
    (let ((texid (SOIL_load_OGL_texture path SOIL_LOAD_AUTO id (+ SOIL_FLAG_MIPMAPS SOIL_FLAG_INVERT_Y))))
      (if (= texid 0)
    (printf "Error loading: %s\n" path))
      texid)))

;; get texture height
;; for TEXTURE_2D only!
(bind-func gl_tex_height
  (lambda (tex)
    (glDisable GL_TEXTURE_RECTANGLE_ARB)
    (glEnable GL_TEXTURE_2D)
    (glBindTexture GL_TEXTURE_2D tex)
    (let ((v:|1,i32|* (salloc)))
      (glGetTexLevelParameteriv GL_TEXTURE_RECTANGLE_ARB 0 GL_TEXTURE_HEIGHT (cast v))
      (glDisable GL_TEXTURE_2D)
      (glBindTexture GL_TEXTURE_2D 0)
      (aref v 0))))

;; get texture-width
;; for TEXTURE_2D only!
(bind-func gl_tex_width
  (lambda (tex)
    (glDisable GL_TEXTURE_RECTANGLE_ARB)
    (glEnable GL_TEXTURE_2D)
    (glBindTexture GL_TEXTURE_2D tex)
    (let ((v:|1,i32|* (salloc)))
      (glGetTexLevelParameteriv GL_TEXTURE_2D 0 GL_TEXTURE_WIDTH (cast v))
      (glDisable GL_TEXTURE_2D)
      (glBindTexture GL_TEXTURE_2D 0)
      (aref v 0))))

;; get texture-width
;; for TEXTURE_RECTANGLE only!
(bind-func gl_tex_width_rect
  (lambda (tex)
    (glDisable GL_TEXTURE_2D)
    (glEnable GL_TEXTURE_RECTANGLE_ARB)
    (glBindTexture GL_TEXTURE_RECTANGLE_ARB tex)
    (let ((v:|1,i32|* (salloc)))
      (glGetTexLevelParameteriv GL_TEXTURE_RECTANGLE_ARB 0 GL_TEXTURE_WIDTH (cast v))
      (glDisable GL_TEXTURE_RECTANGLE_ARB)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
      (aref v 0))))

;; get texture height
;; for TEXTURE_RECTANGLE only!
(bind-func gl_tex_height_rect
  (lambda (tex)
    (glDisable GL_TEXTURE_2D)
    (glEnable GL_TEXTURE_RECTANGLE_ARB)
    (glBindTexture GL_TEXTURE_RECTANGLE_ARB tex)
    (let ((v:|1,i32|* (salloc)))
      (glGetTexLevelParameteriv GL_TEXTURE_RECTANGLE_ARB 0 GL_TEXTURE_HEIGHT (cast v))
      (glDisable GL_TEXTURE_RECTANGLE_ARB)
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB 0)
      (aref v 0))))


;; where type is GL_UNSIGNED_BYTE GL_FLOAT GL_SHORT etc..
;; if texid is zero then assign a new tex id otherwise use the texid provided
(bind-func gl_load_tex_rect
  (lambda (width height channels type data texid)
    (let* ((tex:i32* (salloc)))
      (pset! tex 0 texid)
      ;(printf "load image: size: w:%d h:%d: channels:%d\n" width height channels)
      (if (< texid 1) (glGenTextures 1 tex))
      ;(printf "tex: %d\n" (pref tex 0))
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB (pref tex 0))
      ;;(glPixelStorei GL_UNPACK_ALIGNMENT 1) ;; this causes problems!!!
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 channels ;GL_RGBA
        width height
        0
        (cond ((= channels 1) GL_RED)
        ((= channels 3) GL_RGB)
        ((= channels 4) GL_RGBA) ;GL_RGBA)
        (else GL_RGBA))
        type
        ; GL_FLOAT; GL_UNSIGNED_BYTE
        data)
      (pref tex 0))))

;; where type is GL_UNSIGNED_BYTE GL_FLOAT GL_SHORT etc..
;; if texid is zero then assign a new tex id otherwise use the texid provided
(bind-func gl_load_tex
  (lambda (width height channels type data texid)
    (let* ((tex:i32* (salloc)))
      (pset! tex 0 texid)
      (if (< texid 1) (glGenTextures 1 tex))
      (glEnable GL_TEXTURE_2D)
      (glBindTexture GL_TEXTURE_2D (pref tex 0))
      ;;(glPixelStorei GL_UNPACK_ALIGNMENT 1) ;; this causes problems!!!
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexImage2D GL_TEXTURE_2D 0 channels ;GL_RGBA
        width height
        0
        (cond ((= channels 1) GL_RED)
        ((= channels 3) GL_RGB)
        ((= channels 4) GL_RGBA) ;GL_RGBA)
        (else GL_RGBA))
        type
        ; GL_FLOAT; GL_UNSIGNED_BYTE
        data)
      (pref tex 0))))


;; where type is GL_UNSIGNED_BYTE GL_FLOAT GL_SHORT etc..
;; if texid is zero then assign a new tex id otherwise use the texid provided
(bind-func gl_load_tex_ext
  (lambda (width height channels type data textype texid)
    (let* ((tex:i32* (salloc)))
      (pset! tex 0 texid)
      ;(printf "load image: size: w:%d h:%d: channels:%d\n" width height channels)
      (if (< texid 1) (glGenTextures 1 tex))
      ;(printf "tex: %d\n" (pref tex 0))
      (glBindTexture textype (pref tex 0))
      ;;(glPixelStorei GL_UNPACK_ALIGNMENT 1) ;; this causes problems!!!
      (glTexParameteri textype GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri textype GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri textype GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glTexParameteri textype GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexImage2D textype 0 channels ;GL_RGBA
        width height
        0
        (cond ((= channels 1) GL_RED)
        ((= channels 3) GL_RGB)
        ((= channels 4) GL_RGBA) ;GL_RGBA)
        (else GL_RGBA))
        type
        ; GL_FLOAT; GL_UNSIGNED_BYTE
        data)
      (pref tex 0))))


;; where type is GL_UNSIGNED_BYTE GL_FLOAT GL_SHORT etc..
;; if texid is zero then assign a new tex id otherwise use the texid provided
(bind-func gl_load_tex_bgr
  (lambda (width height channels type data texid)
    (let* ((tex:i32* (salloc)))
      (pset! tex 0 texid)
      ;(printf "load image: size: w:%d h:%d: channels:%d\n" width height channels)
      (if (< texid 1) (glGenTextures 1 tex))
      ;(printf "tex: %d\n" (pref tex 0))
      (glBindTexture GL_TEXTURE_RECTANGLE_ARB (pref tex 0))
      ;;(glPixelStorei GL_UNPACK_ALIGNMENT 1) ;; this causes problems!!!
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glTexParameteri GL_TEXTURE_RECTANGLE_ARB GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexImage2D GL_TEXTURE_RECTANGLE_ARB 0 channels ;GL_RGBA
        width height
        0
        (cond ((= channels 1) GL_RED)
        ((= channels 3) GL_BGR)
        ((= channels 4) GL_BGRA) ;GL_RGBA)
        (else GL_BGRA))
        type
        ; GL_FLOAT; GL_UNSIGNED_BYTE
        data)
      (pref tex 0))))

;; where type is GL_UNSIGNED_BYTE GL_FLOAT GL_SHORT etc..
;; if texid is zero then assign a new tex id otherwise use the texid provided
(bind-func gl_load_tex_ext_bgr
  (lambda (width height channels type data textype texid)
    (let* ((tex:i32* (salloc)))
      (pset! tex 0 texid)
      ;(printf "load image: size: w:%d h:%d: channels:%d\n" width height channels)
      (if (< texid 1) (glGenTextures 1 tex))
      ;(printf "tex: %d\n" (pref tex 0))
      (glBindTexture textype (pref tex 0))
      ;;(glPixelStorei GL_UNPACK_ALIGNMENT 1) ;; this causes problems!!!
      (glTexParameteri textype GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
      (glTexParameteri textype GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
      (glTexParameteri textype GL_TEXTURE_MAG_FILTER GL_NEAREST)
      (glTexParameteri textype GL_TEXTURE_MIN_FILTER GL_NEAREST)
      (glTexImage2D textype 0 channels ;GL_RGBA
        width height
        0
        (cond ((= channels 1) GL_RED)
        ((= channels 3) GL_BGR)
        ((= channels 4) GL_BGRA) ;GL_RGBA)
        (else GL_BGRA))
        type
        ; GL_FLOAT; GL_UNSIGNED_BYTE
        data)
      (pref tex 0))))


(define *xtmlib-soil-loaded* #t)

(impc:aot:insert-footer "xtmsoil")
