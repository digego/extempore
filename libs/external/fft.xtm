;;; fft.xtm -- FFT library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: kiss_fft

;;; Commentary:

;; Bindings for KissFFT by Mark Borgerding
;; (http://kissfft.sourceforge.net)

;; An Extempore-ready (will build a shared kiss_fft shared lib) branch
;; is up at https://github.com/extemporelang/kiss_fft

;; On OSX, you can get it through homebrew:

;; brew install libkiss-fft

;; To build the shared lib yourself, clone the above git repo and

;; make cmake-build && cd cmake-build && cmake .. & make install

;; **Note** - the homebrew formula used to be called kiss_fft, but
;; this libkiss-fft is an updated one based on my fork of kiss_fft,
;; with a proper cross-platform build process


;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/fft.xtm" 'quiet))
(sys:load-preload-check 'fft)
(define *xtmlib-fft-loaded* #f)

(set! *impc:compiler:message:level* 'high)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm")
 (sys:load "libs/core/math.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))
(impc:aot:insert-forms (sys:load "libs/core/math.xtm" 'quiet))

(impc:aot:insert-header "xtmfft")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libkiss_fft
  (cond ((string=? (sys:platform) "OSX")
         "libkiss_fft.dylib")
        ((string=? (sys:platform) "Linux")
         "libkiss_fft.so")
        ((string=? (sys:platform) "Windows")
         "kiss_fft.dll"))
  "xtmfft")

;; import ll MUST come after bind-dylib
(impc:aot:import-ll "xtmfft")



(bind-alias kiss_fft_scalar float)
(bind-alias kiss_fft_cpx Complexf)

(bind-alias kiss_fft_cfg i8*)

;;  kiss_fft_alloc
;;
;;  Initialize a FFT (or IFFT) algorithm's cfg/state buffer.
;;
;;  typical usage:      kiss_fft_cfg mycfg=kiss_fft_alloc(1024,0,NULL,NULL);
;;
;;  The return value from fft_alloc is a cfg buffer used internally
;;  by the fft routine or NULL.
;;
;;  If lenmem is NULL, then kiss_fft_alloc will allocate a cfg buffer using malloc.
;;  The returned value should be free()d when done to avoid memory leaks.
;;
;;  The state can be placed in a user supplied buffer 'mem':
;;  If lenmem is not NULL and mem is not NULL and *lenmem is large enough,
;;      then the function places the cfg in mem and the size used in *lenmem
;;      and returns mem.
;;
;;  If lenmem is not NULL and ( mem is NULL or *lenmem is not large enough),
;;      then the function returns NULL and places the minimum cfg
;;      buffer size in *lenmem.
(bind-lib libkiss_fft kiss_fft_alloc [kiss_fft_cfg,i32,i32,i8*,size_t*]*)

;;  kiss_fft(cfg,in_out_buf)
;;
;;  Perform an FFT on a complex input buffer.
;;  for a forward FFT,
;;  fin should be  f[0] , f[1] , ... ,f[nfft-1]
;;  fout will be   F[0] , F[1] , ... ,F[nfft-1]
;;  Note that each element is complex and can be accessed like
;;  f[k].r and f[k].i
(bind-lib libkiss_fft kiss_fft [void,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)

;;  A more generic version of the above function. It reads its input from every Nth sample.
(bind-lib libkiss_fft kiss_fft_stride [void,kiss_fft_cfg,kiss_fft_cpx*,kiss_fft_cpx*,i32]*)

;;  Cleans up some memory that gets managed internally. Not necessary to call, but it might clean up
;;  your compiler output to call this before you exit.
(bind-lib libkiss_fft kiss_fft_cleanup [void]*)

;;  Returns the smallest integer k, such that k>=n and k has only "fast" factors (2,3,5)
(bind-lib libkiss_fft kiss_fft_next_fast_size [i32,i32]*)

;; KFC -- Kiss FFT Cache

;; Not needing to deal with kiss_fft_alloc and a config
;; object may be handy for a lot of programs.

;; KFC uses the underlying KISS FFT functions, but caches the config object.
;; The first time kfc_fft or kfc_ifft for a given FFT size, the cfg
;; object is created for it.  All subsequent calls use the cached
;; configuration object.

;; NOTE:
;; You should probably not use this if your program will be using a lot
;; of various sizes of FFTs.  There is a linear search through the
;; cached objects.  If you are only using one or two FFT sizes, this
;; will be negligible. Otherwise, you may want to use another method
;; of managing the cfg objects.

;;  There is no automated cleanup of the cached objects.  This could lead
;; to large memory usage in a program that uses a lot of *DIFFERENT*
;; sized FFTs.  If you want to force all cached cfg objects to be freed,
;; call kfc_cleanup.

;; /*forward complex FFT */
;; void kfc_fft(int nfft, const kiss_fft_cpx * fin,kiss_fft_cpx * fout);
(bind-lib libkiss_fft kfc_fft [void,i32,kiss_fft_cpx*,kiss_fft_cpx*]*)
;; /*reverse complex FFT */
;; void kfc_ifft(int nfft, const kiss_fft_cpx * fin,kiss_fft_cpx * fout);
(bind-lib libkiss_fft kfc_ifft [void,i32,kiss_fft_cpx*,kiss_fft_cpx*]*)

;; /*free all cached objects*/
(bind-lib libkiss_fft kfc_cleanup [void]*)

;; tools/kiss_fftnd.h

(bind-alias kiss_fftnd_cfg i8*)

(bind-lib libkiss_fft kiss_fftnd_alloc [kiss_fftnd_cfg,i32*,i32,i32,i8*,size_t*]*)
(bind-lib libkiss_fft kiss_fftnd [void,kiss_fftnd_cfg,kiss_fft_cpx*,kiss_fft_cpx*]*)

;; tools/kiss_fftndr.h

(bind-alias kiss_fftndr_cfg i8*)

;;  dims[0] must be even

;;  If you don't care to allocate space, use mem = lenmem = NULL
(bind-lib libkiss_fft kiss_fftndr_alloc [kiss_fftndr_cfg,i32*,i32,i32,i8*,size_t*]*)

;;  input timedata has dims[0] X dims[1] X ... X  dims[ndims-1] scalar points
;;  output freqdata has dims[0] X dims[1] X ... X  dims[ndims-1]/2+1 complex points
(bind-lib libkiss_fft kiss_fftndr [void,kiss_fftndr_cfg,kiss_fft_scalar*,kiss_fft_cpx*]*)

;;  input and output dimensions are the exact opposite of kiss_fftndr
(bind-lib libkiss_fft kiss_fftndri [void,kiss_fftndr_cfg,kiss_fft_cpx*,kiss_fft_scalar*]*)


;; tools/kiss_fftr.h

;; Real optimized version can save about 45% cpu time vs. complex fft of a real seq.
(bind-alias kiss_fftr_cfg i8*)

;;  nfft must be even
;;  If you don't care to allocate space, use mem = lenmem = NULL
(bind-lib libkiss_fft kiss_fftr_alloc [kiss_fftr_cfg,i32,i32,i8*,size_t*]*)


;;  input timedata has nfft scalar points
;;  output freqdata has nfft/2+1 complex points
(bind-lib libkiss_fft kiss_fftr [void,kiss_fftr_cfg,kiss_fft_scalar*,kiss_fft_cpx*]*)

;;  input freqdata has  nfft/2+1 complex points
;;  output timedata has nfft scalar points
(bind-lib libkiss_fft kiss_fftri [void,kiss_fftr_cfg,kiss_fft_cpx*,kiss_fft_scalar*]*)


;; complex input

;; this config for FORWARD FFT ONLY!
; (bind-func fft_config_h:[kiss_fft_cfg,i64]*
;   (lambda (len)
;     (let ((sz:i64 0)
;           (res (kiss_fft_alloc (i64toi32 len) 0 null (ref sz)))
;           (config:i8* (halloc sz)))
;     (kiss_fft_alloc (i64toi32 len) 0 config (ref sz))
;     (convert config))))

(bind-type FFT_Config <kiss_fft_cfg>)

(bind-func fft_config:[FFT_Config*,i64]*
  (lambda (len)
    (let ((sz:i64 0)
          (findSize (kiss_fft_alloc (i64toi32 len) 0 null (ref sz)))
          (config:i8* (alloc sz))
          (res:kiss_fft_cfg (kiss_fft_alloc (i64toi32 len) 0 config (ref sz))))
      (if (null? res) (println "error constructing fft config!"))
      (FFT_Config res))))

(bind-type FFTR_Config <kiss_fftr_cfg>)

;; fftr config (real config) not the same as cpx config above!
(bind-func fftr_config:[FFTR_Config*,i64]*
  (lambda (len)
    (let ((sz:i64 0)
          (findSize (kiss_fftr_alloc (i64toi32 len) 0 null (ref sz)))
          (config:i8* (alloc sz))
          (res:kiss_fft_cfg (kiss_fftr_alloc (i64toi32 len) 0 config (ref sz))))
      (if (null? res) (println "error constructing fftr config!"))
      (FFTR_Config res))))

; (bind-func fft
;   "calculate the FFT of an input signal"
;   (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* len:i64)
;     (let ((config:kiss_fft_cfg (fft_config_h len)))
;       (kiss_fft config in out)
;       (free config)
;       void)))

(bind-func fft
  "calculate the FFT of an input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* config:FFT_Config*)
    (kiss_fft (tref config 0) in out)
    void))

;; real-valued input

; (bind-func fft
;   "calculate the FFT of a real-valued input signal"
;   (lambda (in:kiss_fft_scalar* out:kiss_fft_cpx* len:i64)
;     (let ((config (fft_config_h len)))
;       (kiss_fftr config in out)
;       (free config)
;       void)))

(bind-func fft
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_scalar* out:kiss_fft_cpx* config:FFTR_Config*)
    (kiss_fftr (tref config 0) in out)
    void))


;; this config for INVERSE FFT ONLY!
; (bind-func ifft_config_h:[kiss_fft_cfg,i64]*
;   (lambda (len)
;     (let ((sz:i64 0)
;           (res (kiss_fft_alloc (i64toi32 len) 1 null (ref sz)))
;           (config:i8* (halloc sz)))
;     (kiss_fft_alloc (i64toi32 len) 1 config (ref sz))
;     (convert config))))

(bind-type IFFT_Config <kiss_fft_cfg>)

(bind-func ifft_config:[IFFT_Config*,i64]*
  (lambda (len)
    (let ((sz:i64 0)
          (findSize (kiss_fft_alloc (i64toi32 len) 1 null (ref sz)))
          (config:i8* (alloc sz))
          (res (kiss_fft_alloc (i64toi32 len) 1 config (ref sz))))
      (if (null? res) (println "error constructing ifft config!"))
      (IFFT_Config res))))

(bind-type IFFTR_Config <kiss_fftr_cfg>)

;; ifftr config (real config) not the same as cpx config above!
(bind-func ifftr_config:[IFFTR_Config*,i64]*
  (lambda (len)
    (let ((sz:i64 0)
          (findSize (kiss_fftr_alloc (i64toi32 len) 1 null (ref sz)))
          (config:i8* (alloc sz))
          (res (kiss_fftr_alloc (i64toi32 len) 1 config (ref sz))))
      (if (null? res) (println "error constructing ifftr config!"))
      (IFFTR_Config res))))

; (bind-func ifft
;   "calculate the inverse FFT of a signal"
;   (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* len:i64)
;     (let ((config (ifft_config_h len)))
;       (kiss_fft config in out)
;       (free config)
;       void)))

(bind-func ifft
  "calculate the inverse FFT of a signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_cpx* config:IFFT_Config*)
    (kiss_fft (tref config 0) in out)
    void))

; (bind-func ifft
;   "calculate the FFT of a real-valued input signal"
;   (lambda (in:kiss_fft_cpx* out:kiss_fft_scalar* len:i64)
;     (let ((config (ifft_config_h len)))
;       (kiss_fftri config in out)
;       (free config)
;       void)))

(bind-func ifft
  "calculate the FFT of a real-valued input signal"
  (lambda (in:kiss_fft_cpx* out:kiss_fft_scalar* config:IFFTR_Config*)
    (kiss_fftri (tref config 0) in out)
    void))

(define *xtmlib-fft-loaded* #t)

(impc:aot:insert-footer "xtmfft")
