;;; glfw3.xtm -- OpenGL context creation/management

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libglfw

;;; Commentary:

;; These bindings are based on GLFW 3.2.1, which should have been
;; built automatically as part of the Extempore install process. For
;; GLFW documentation, see www.glfw.org

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/glfw3.xtm" 'quiet))
(sys:load-preload-check 'glfw3)
(define *xtmlib-glfw3-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmglfw3")

(bind-dylib libglfw
  (cond ((string=? (sys:platform) "OSX")
         (list "libglfw.dylib" "libglfw3.dylib" "libglfw.3.dylib"))
        ((string=? (sys:platform) "Linux") "libglfw.so")
        ((string=? (sys:platform) "Windows") "glfw3.dll"))
  "xtmglfw3")

(impc:aot:import-ll "xtmglfw3")

;; opaque pointers
(bind-alias GLFWmonitor i8)
(bind-alias GLFWwindow i8)
(bind-alias GLFWcursor i8)

(bind-val GLFW_VERSION_MAJOR i32 3)
(bind-val GLFW_VERSION_MINOR i32 2)
(bind-val GLFW_VERSION_REVISION i32 0)
(bind-val GLFW_TRUE i32 1)
(bind-val GLFW_FALSE i32 0)
(bind-val GLFW_RELEASE i32 0)
(bind-val GLFW_PRESS i32 1)
(bind-val GLFW_REPEAT i32 2)
(bind-val GLFW_KEY_UNKNOWN i32 -1)
(bind-val GLFW_KEY_SPACE i32 32)
(bind-val GLFW_KEY_APOSTROPHE i32 39)
(bind-val GLFW_KEY_COMMA i32 44)
(bind-val GLFW_KEY_MINUS i32 45)
(bind-val GLFW_KEY_PERIOD i32 46)
(bind-val GLFW_KEY_SLASH i32 47)
(bind-val GLFW_KEY_0 i32 48)
(bind-val GLFW_KEY_1 i32 49)
(bind-val GLFW_KEY_2 i32 50)
(bind-val GLFW_KEY_3 i32 51)
(bind-val GLFW_KEY_4 i32 52)
(bind-val GLFW_KEY_5 i32 53)
(bind-val GLFW_KEY_6 i32 54)
(bind-val GLFW_KEY_7 i32 55)
(bind-val GLFW_KEY_8 i32 56)
(bind-val GLFW_KEY_9 i32 57)
(bind-val GLFW_KEY_SEMICOLON i32 59)
(bind-val GLFW_KEY_EQUAL i32 61)
(bind-val GLFW_KEY_A i32 65)
(bind-val GLFW_KEY_B i32 66)
(bind-val GLFW_KEY_C i32 67)
(bind-val GLFW_KEY_D i32 68)
(bind-val GLFW_KEY_E i32 69)
(bind-val GLFW_KEY_F i32 70)
(bind-val GLFW_KEY_G i32 71)
(bind-val GLFW_KEY_H i32 72)
(bind-val GLFW_KEY_I i32 73)
(bind-val GLFW_KEY_J i32 74)
(bind-val GLFW_KEY_K i32 75)
(bind-val GLFW_KEY_L i32 76)
(bind-val GLFW_KEY_M i32 77)
(bind-val GLFW_KEY_N i32 78)
(bind-val GLFW_KEY_O i32 79)
(bind-val GLFW_KEY_P i32 80)
(bind-val GLFW_KEY_Q i32 81)
(bind-val GLFW_KEY_R i32 82)
(bind-val GLFW_KEY_S i32 83)
(bind-val GLFW_KEY_T i32 84)
(bind-val GLFW_KEY_U i32 85)
(bind-val GLFW_KEY_V i32 86)
(bind-val GLFW_KEY_W i32 87)
(bind-val GLFW_KEY_X i32 88)
(bind-val GLFW_KEY_Y i32 89)
(bind-val GLFW_KEY_Z i32 90)
(bind-val GLFW_KEY_LEFT_BRACKET i32 91)
(bind-val GLFW_KEY_BACKSLASH i32 92)
(bind-val GLFW_KEY_RIGHT_BRACKET i32 93)
(bind-val GLFW_KEY_GRAVE_ACCENT i32 96)
(bind-val GLFW_KEY_WORLD_1 i32 161)
(bind-val GLFW_KEY_WORLD_2 i32 162)
(bind-val GLFW_KEY_ESCAPE i32 256)
(bind-val GLFW_KEY_ENTER i32 257)
(bind-val GLFW_KEY_TAB i32 258)
(bind-val GLFW_KEY_BACKSPACE i32 259)
(bind-val GLFW_KEY_INSERT i32 260)
(bind-val GLFW_KEY_DELETE i32 261)
(bind-val GLFW_KEY_RIGHT i32 262)
(bind-val GLFW_KEY_LEFT i32 263)
(bind-val GLFW_KEY_DOWN i32 264)
(bind-val GLFW_KEY_UP i32 265)
(bind-val GLFW_KEY_PAGE_UP i32 266)
(bind-val GLFW_KEY_PAGE_DOWN i32 267)
(bind-val GLFW_KEY_HOME i32 268)
(bind-val GLFW_KEY_END i32 269)
(bind-val GLFW_KEY_CAPS_LOCK i32 280)
(bind-val GLFW_KEY_SCROLL_LOCK i32 281)
(bind-val GLFW_KEY_NUM_LOCK i32 282)
(bind-val GLFW_KEY_PRINT_SCREEN i32 283)
(bind-val GLFW_KEY_PAUSE i32 284)
(bind-val GLFW_KEY_F1 i32 290)
(bind-val GLFW_KEY_F2 i32 291)
(bind-val GLFW_KEY_F3 i32 292)
(bind-val GLFW_KEY_F4 i32 293)
(bind-val GLFW_KEY_F5 i32 294)
(bind-val GLFW_KEY_F6 i32 295)
(bind-val GLFW_KEY_F7 i32 296)
(bind-val GLFW_KEY_F8 i32 297)
(bind-val GLFW_KEY_F9 i32 298)
(bind-val GLFW_KEY_F10 i32 299)
(bind-val GLFW_KEY_F11 i32 300)
(bind-val GLFW_KEY_F12 i32 301)
(bind-val GLFW_KEY_F13 i32 302)
(bind-val GLFW_KEY_F14 i32 303)
(bind-val GLFW_KEY_F15 i32 304)
(bind-val GLFW_KEY_F16 i32 305)
(bind-val GLFW_KEY_F17 i32 306)
(bind-val GLFW_KEY_F18 i32 307)
(bind-val GLFW_KEY_F19 i32 308)
(bind-val GLFW_KEY_F20 i32 309)
(bind-val GLFW_KEY_F21 i32 310)
(bind-val GLFW_KEY_F22 i32 311)
(bind-val GLFW_KEY_F23 i32 312)
(bind-val GLFW_KEY_F24 i32 313)
(bind-val GLFW_KEY_F25 i32 314)
(bind-val GLFW_KEY_KP_0 i32 320)
(bind-val GLFW_KEY_KP_1 i32 321)
(bind-val GLFW_KEY_KP_2 i32 322)
(bind-val GLFW_KEY_KP_3 i32 323)
(bind-val GLFW_KEY_KP_4 i32 324)
(bind-val GLFW_KEY_KP_5 i32 325)
(bind-val GLFW_KEY_KP_6 i32 326)
(bind-val GLFW_KEY_KP_7 i32 327)
(bind-val GLFW_KEY_KP_8 i32 328)
(bind-val GLFW_KEY_KP_9 i32 329)
(bind-val GLFW_KEY_KP_DECIMAL i32 330)
(bind-val GLFW_KEY_KP_DIVIDE i32 331)
(bind-val GLFW_KEY_KP_MULTIPLY i32 332)
(bind-val GLFW_KEY_KP_SUBTRACT i32 333)
(bind-val GLFW_KEY_KP_ADD i32 334)
(bind-val GLFW_KEY_KP_ENTER i32 335)
(bind-val GLFW_KEY_KP_EQUAL i32 336)
(bind-val GLFW_KEY_LEFT_SHIFT i32 340)
(bind-val GLFW_KEY_LEFT_CONTROL i32 341)
(bind-val GLFW_KEY_LEFT_ALT i32 342)
(bind-val GLFW_KEY_LEFT_SUPER i32 343)
(bind-val GLFW_KEY_RIGHT_SHIFT i32 344)
(bind-val GLFW_KEY_RIGHT_CONTROL i32 345)
(bind-val GLFW_KEY_RIGHT_ALT i32 346)
(bind-val GLFW_KEY_RIGHT_SUPER i32 347)
(bind-val GLFW_KEY_MENU i32 348)
(bind-val GLFW_KEY_LAST i32 GLFW_KEY_MENU)
(bind-val GLFW_MOD_SHIFT i32 #x0001)
(bind-val GLFW_MOD_CONTROL i32 #x0002)
(bind-val GLFW_MOD_ALT i32 #x0004)
(bind-val GLFW_MOD_SUPER i32 #x0008)
(bind-val GLFW_MOUSE_BUTTON_1 i32 0)
(bind-val GLFW_MOUSE_BUTTON_2 i32 1)
(bind-val GLFW_MOUSE_BUTTON_3 i32 2)
(bind-val GLFW_MOUSE_BUTTON_4 i32 3)
(bind-val GLFW_MOUSE_BUTTON_5 i32 4)
(bind-val GLFW_MOUSE_BUTTON_6 i32 5)
(bind-val GLFW_MOUSE_BUTTON_7 i32 6)
(bind-val GLFW_MOUSE_BUTTON_8 i32 7)
(bind-val GLFW_MOUSE_BUTTON_LAST i32 GLFW_MOUSE_BUTTON_8)
(bind-val GLFW_MOUSE_BUTTON_LEFT i32 GLFW_MOUSE_BUTTON_1)
(bind-val GLFW_MOUSE_BUTTON_RIGHT i32 GLFW_MOUSE_BUTTON_2)
(bind-val GLFW_MOUSE_BUTTON_MIDDLE i32 GLFW_MOUSE_BUTTON_3)
(bind-val GLFW_JOYSTICK_1 i32 0)
(bind-val GLFW_JOYSTICK_2 i32 1)
(bind-val GLFW_JOYSTICK_3 i32 2)
(bind-val GLFW_JOYSTICK_4 i32 3)
(bind-val GLFW_JOYSTICK_5 i32 4)
(bind-val GLFW_JOYSTICK_6 i32 5)
(bind-val GLFW_JOYSTICK_7 i32 6)
(bind-val GLFW_JOYSTICK_8 i32 7)
(bind-val GLFW_JOYSTICK_9 i32 8)
(bind-val GLFW_JOYSTICK_10 i32 9)
(bind-val GLFW_JOYSTICK_11 i32 10)
(bind-val GLFW_JOYSTICK_12 i32 11)
(bind-val GLFW_JOYSTICK_13 i32 12)
(bind-val GLFW_JOYSTICK_14 i32 13)
(bind-val GLFW_JOYSTICK_15 i32 14)
(bind-val GLFW_JOYSTICK_16 i32 15)
(bind-val GLFW_JOYSTICK_LAST i32 GLFW_JOYSTICK_16)
(bind-val GLFW_NOT_INITIALIZED i32 #x00010001)
(bind-val GLFW_NO_CURRENT_CONTEXT i32 #x00010002)
(bind-val GLFW_INVALID_ENUM i32 #x00010003)
(bind-val GLFW_INVALID_VALUE i32 #x00010004)
(bind-val GLFW_OUT_OF_MEMORY i32 #x00010005)
(bind-val GLFW_API_UNAVAILABLE i32 #x00010006)
(bind-val GLFW_VERSION_UNAVAILABLE i32 #x00010007)
(bind-val GLFW_PLATFORM_ERROR i32 #x00010008)
(bind-val GLFW_FORMAT_UNAVAILABLE i32 #x00010009)
(bind-val GLFW_NO_WINDOW_CONTEXT i32 #x0001000A)
(bind-val GLFW_FOCUSED i32 #x00020001)
(bind-val GLFW_ICONIFIED i32 #x00020002)
(bind-val GLFW_RESIZABLE i32 #x00020003)
(bind-val GLFW_VISIBLE i32 #x00020004)
(bind-val GLFW_DECORATED i32 #x00020005)
(bind-val GLFW_AUTO_ICONIFY i32 #x00020006)
(bind-val GLFW_FLOATING i32 #x00020007)
(bind-val GLFW_MAXIMIZED i32 #x00020008)
(bind-val GLFW_RED_BITS i32 #x00021001)
(bind-val GLFW_GREEN_BITS i32 #x00021002)
(bind-val GLFW_BLUE_BITS i32 #x00021003)
(bind-val GLFW_ALPHA_BITS i32 #x00021004)
(bind-val GLFW_DEPTH_BITS i32 #x00021005)
(bind-val GLFW_STENCIL_BITS i32 #x00021006)
(bind-val GLFW_ACCUM_RED_BITS i32 #x00021007)
(bind-val GLFW_ACCUM_GREEN_BITS i32 #x00021008)
(bind-val GLFW_ACCUM_BLUE_BITS i32 #x00021009)
(bind-val GLFW_ACCUM_ALPHA_BITS i32 #x0002100A)
(bind-val GLFW_AUX_BUFFERS i32 #x0002100B)
(bind-val GLFW_STEREO i32 #x0002100C)
(bind-val GLFW_SAMPLES i32 #x0002100D)
(bind-val GLFW_SRGB_CAPABLE i32 #x0002100E)
(bind-val GLFW_REFRESH_RATE i32 #x0002100F)
(bind-val GLFW_DOUBLEBUFFER i32 #x00021010)
(bind-val GLFW_CLIENT_API i32 #x00022001)
(bind-val GLFW_CONTEXT_VERSION_MAJOR i32 #x00022002)
(bind-val GLFW_CONTEXT_VERSION_MINOR i32 #x00022003)
(bind-val GLFW_CONTEXT_REVISION i32 #x00022004)
(bind-val GLFW_CONTEXT_ROBUSTNESS i32 #x00022005)
(bind-val GLFW_OPENGL_FORWARD_COMPAT i32 #x00022006)
(bind-val GLFW_OPENGL_DEBUG_CONTEXT i32 #x00022007)
(bind-val GLFW_OPENGL_PROFILE i32 #x00022008)
(bind-val GLFW_CONTEXT_RELEASE_BEHAVIOR i32 #x00022009)
(bind-val GLFW_CONTEXT_NO_ERROR i32 #x0002200A)
(bind-val GLFW_CONTEXT_CREATION_API i32 #x0002200B)
(bind-val GLFW_NO_API i32 0)
(bind-val GLFW_OPENGL_API i32 #x00030001)
(bind-val GLFW_OPENGL_ES_API i32 #x00030002)
(bind-val GLFW_NO_ROBUSTNESS i32 0)
(bind-val GLFW_NO_RESET_NOTIFICATION i32 #x00031001)
(bind-val GLFW_LOSE_CONTEXT_ON_RESET i32 #x00031002)
(bind-val GLFW_OPENGL_ANY_PROFILE i32 0)
(bind-val GLFW_OPENGL_CORE_PROFILE i32 #x00032001)
(bind-val GLFW_OPENGL_COMPAT_PROFILE i32 #x00032002)
(bind-val GLFW_CURSOR i32 #x00033001)
(bind-val GLFW_STICKY_KEYS i32 #x00033002)
(bind-val GLFW_STICKY_MOUSE_BUTTONS i32 #x00033003)
(bind-val GLFW_CURSOR_NORMAL i32 #x00034001)
(bind-val GLFW_CURSOR_HIDDEN i32 #x00034002)
(bind-val GLFW_CURSOR_DISABLED i32 #x00034003)
(bind-val GLFW_ANY_RELEASE_BEHAVIOR i32 0)
(bind-val GLFW_RELEASE_BEHAVIOR_FLUSH i32 #x00035001)
(bind-val GLFW_RELEASE_BEHAVIOR_NONE i32 #x00035002)
(bind-val GLFW_NATIVE_CONTEXT_API i32 #x00036001)
(bind-val GLFW_EGL_CONTEXT_API i32 #x00036002)
(bind-val GLFW_ARROW_CURSOR i32 #x00036001)
(bind-val GLFW_IBEAM_CURSOR i32 #x00036002)
(bind-val GLFW_CROSSHAIR_CURSOR i32 #x00036003)
(bind-val GLFW_HAND_CURSOR i32 #x00036004)
(bind-val GLFW_HRESIZE_CURSOR i32 #x00036005)
(bind-val GLFW_VRESIZE_CURSOR i32 #x00036006)
(bind-val GLFW_CONNECTED i32 #x00040001)
(bind-val GLFW_DISCONNECTED i32 #x00040002)
(bind-val GLFW_DONT_CARE i32)
;; callback function signatures
(bind-alias GLFWglproc [void]*)
(bind-alias GLFWvkproc [void]*)
(bind-alias GLFWerrorfun [void,i32,i8*]*)
(bind-alias GLFWwindowposfun [void,GLFWwindow*,i32,i32]*)
(bind-alias GLFWwindowsizefun [void,GLFWwindow*,i32,i32]*)
(bind-alias GLFWwindowclosefun [void,GLFWwindow*]*)
(bind-alias GLFWwindowrefreshfun [void,GLFWwindow*]*)
(bind-alias GLFWwindowfocusfun [void,GLFWwindow*,i32]*)
(bind-alias GLFWwindowiconifyfun [void,GLFWwindow*,i32]*)
(bind-alias GLFWframebuffersizefun [void,GLFWwindow*,i32,i32]*)
(bind-alias GLFWmousebuttonfun [void,GLFWwindow*,i32,i32,i32]*)
(bind-alias GLFWcursorposfun [void,GLFWwindow*,double,double]*)
(bind-alias GLFWcursorenterfun [void,GLFWwindow*,i32]*)
(bind-alias GLFWscrollfun [void,GLFWwindow*,double,double]*)
(bind-alias GLFWkeyfun [void,GLFWwindow*,i32,i32,i32,i32]*)
(bind-alias GLFWcharfun [void,GLFWwindow*,i32]*)
(bind-alias GLFWcharmodsfun [void,GLFWwindow*,i32,i32]*)
(bind-alias GLFWdropfun [void,GLFWwindow*,i32,i8**]*)
(bind-alias GLFWmonitorfun [void,GLFWmonitor*,i32]*)
(bind-alias GLFWjoystickfun [void,i32,i32]*)
(bind-type GLFWvidmode <i32,i32,i32,i32,i32,i32>
  "@member width - index 0
@member height - index 1
@member redBits - index 2
@member greenBits - index 3
@member blueBits - index 4
@member refreshRate - index 5")
(bind-type GLFWgammaramp <i16*,i16*,i16*,i32>
  "@member red - index 0
@member green - index 1
@member blue - index 2
@member size - index 3")
(bind-type GLFWimage <i32,i32,i8*>
  "@member width - index 0
@member height - index 1
@member pixels - index 2")
(bind-lib libglfw glfwInit [i32]*)
(bind-lib libglfw glfwTerminate [void]*)
(bind-lib libglfw glfwGetVersion [void,i32*,i32*,i32*]*
  "@param major - index 0
@param minor - index 1
@param rev - index 2")
(bind-lib libglfw glfwGetVersionString [i8*]*)
(bind-lib libglfw glfwSetErrorCallback [GLFWerrorfun,GLFWerrorfun]*
  "@param cbfun - index 0")
(bind-lib libglfw glfwGetMonitors [GLFWmonitor**,i32*]*
  "@param count - index 0")
(bind-lib libglfw glfwGetPrimaryMonitor [GLFWmonitor*]*)
(bind-lib libglfw glfwGetMonitorPos [void,GLFWmonitor*,i32*,i32*]*
  "@param monitor - index 0
@param xpos - index 1
@param ypos - index 2")
(bind-lib libglfw glfwGetMonitorPhysicalSize [void,GLFWmonitor*,i32*,i32*]*
  "@param monitor - index 0
@param widthMM - index 1
@param heightMM - index 2")
(bind-lib libglfw glfwGetMonitorName [i8*,GLFWmonitor*]*
  "@param monitor - index 0")
(bind-lib libglfw glfwSetMonitorCallback [GLFWmonitorfun,GLFWmonitorfun]*
  "@param cbfun - index 0")
(bind-lib libglfw glfwGetVideoModes [GLFWvidmode*,GLFWmonitor*,i32*]*
  "@param monitor - index 0
@param count - index 1")
(bind-lib libglfw glfwGetVideoMode [GLFWvidmode*,GLFWmonitor*]*
  "@param monitor - index 0")
(bind-lib libglfw glfwSetGamma [void,GLFWmonitor*,float]*
  "@param monitor - index 0
@param gamma - index 1")
(bind-lib libglfw glfwGetGammaRamp [GLFWgammaramp*,GLFWmonitor*]*
  "@param monitor - index 0")
(bind-lib libglfw glfwSetGammaRamp [void,GLFWmonitor*,GLFWgammaramp*]*
  "@param monitor - index 0
@param ramp - index 1")
(bind-lib libglfw glfwDefaultWindowHints [void]*)
(bind-lib libglfw glfwWindowHint [void,i32,i32]*
  "@param hint - index 0
@param value - index 1")
(bind-lib libglfw glfwCreateWindow [GLFWwindow*,i32,i32,i8*,GLFWmonitor*,GLFWwindow*]*
  "@param width - index 0
@param height - index 1
@param title - index 2
@param monitor - index 3
@param share - index 4")
(bind-lib libglfw glfwDestroyWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwWindowShouldClose [i32,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwSetWindowShouldClose [void,GLFWwindow*,i32]*
  "@param window - index 0
@param value - index 1")
(bind-lib libglfw glfwSetWindowTitle [void,GLFWwindow*,i8*]*
  "@param window - index 0
@param title - index 1")
(bind-lib libglfw glfwSetWindowIcon [void,GLFWwindow*,i32,GLFWimage*]*
  "@param window - index 0
@param count - index 1
@param images - index 2")
(bind-lib libglfw glfwGetWindowPos [void,GLFWwindow*,i32*,i32*]*
  "@param window - index 0
@param xpos - index 1
@param ypos - index 2")
(bind-lib libglfw glfwSetWindowPos [void,GLFWwindow*,i32,i32]*
  "@param window - index 0
@param xpos - index 1
@param ypos - index 2")
(bind-lib libglfw glfwGetWindowSize [void,GLFWwindow*,i32*,i32*]*
  "@param window - index 0
@param width - index 1
@param height - index 2")
(bind-lib libglfw glfwSetWindowSizeLimits [void,GLFWwindow*,i32,i32,i32,i32]*
  "@param window - index 0
@param minwidth - index 1
@param minheight - index 2
@param maxwidth - index 3
@param maxheight - index 4")
(bind-lib libglfw glfwSetWindowAspectRatio [void,GLFWwindow*,i32,i32]*
  "@param window - index 0
@param numer - index 1
@param denom - index 2")
(bind-lib libglfw glfwSetWindowSize [void,GLFWwindow*,i32,i32]*
  "@param window - index 0
@param width - index 1
@param height - index 2")
(bind-lib libglfw glfwGetFramebufferSize [void,GLFWwindow*,i32*,i32*]*
  "@param window - index 0
@param width - index 1
@param height - index 2")
(bind-lib libglfw glfwGetWindowFrameSize [void,GLFWwindow*,i32*,i32*,i32*,i32*]*
  "@param window - index 0
@param left - index 1
@param top - index 2
@param right - index 3
@param bottom - index 4")
(bind-lib libglfw glfwIconifyWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwRestoreWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwMaximizeWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwShowWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwHideWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwFocusWindow [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwGetWindowMonitor [GLFWmonitor*,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwSetWindowMonitor [void,GLFWwindow*,GLFWmonitor*,i32,i32,i32,i32,i32]*
  "@param window - index 0
@param monitor - index 1
@param xpos - index 2
@param ypos - index 3
@param width - index 4
@param height - index 5
@param refreshRate - index 6")
(bind-lib libglfw glfwGetWindowAttrib [i32,GLFWwindow*,i32]*
  "@param window - index 0
@param attrib - index 1")
(bind-lib libglfw glfwSetWindowUserPointer [void,GLFWwindow*,i8*]*
  "@param window - index 0
@param pointer - index 1")
(bind-lib libglfw glfwGetWindowUserPointer [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwSetWindowPosCallback [GLFWwindowposfun,GLFWwindow*,GLFWwindowposfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetWindowSizeCallback [GLFWwindowsizefun,GLFWwindow*,GLFWwindowsizefun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetWindowCloseCallback [GLFWwindowclosefun,GLFWwindow*,GLFWwindowclosefun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetWindowRefreshCallback [GLFWwindowrefreshfun,GLFWwindow*,GLFWwindowrefreshfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetWindowFocusCallback [GLFWwindowfocusfun,GLFWwindow*,GLFWwindowfocusfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetWindowIconifyCallback [GLFWwindowiconifyfun,GLFWwindow*,GLFWwindowiconifyfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetFramebufferSizeCallback [GLFWframebuffersizefun,GLFWwindow*,GLFWframebuffersizefun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwPollEvents [void]*)
(bind-lib libglfw glfwWaitEvents [void]*)
(bind-lib libglfw glfwWaitEventsTimeout [void,double]*
  "@param timeout - index 0")
(bind-lib libglfw glfwPostEmptyEvent [void]*)
(bind-lib libglfw glfwGetInputMode [i32,GLFWwindow*,i32]*
  "@param window - index 0
@param mode - index 1")
(bind-lib libglfw glfwSetInputMode [void,GLFWwindow*,i32,i32]*
  "@param window - index 0
@param mode - index 1
@param value - index 2")
(bind-lib libglfw glfwGetKeyName [i8*,i32,i32]*
  "@param key - index 0
@param scancode - index 1")
(bind-lib libglfw glfwGetKey [i32,GLFWwindow*,i32]*
  "@param window - index 0
@param key - index 1")
(bind-lib libglfw glfwGetMouseButton [i32,GLFWwindow*,i32]*
  "@param window - index 0
@param button - index 1")
(bind-lib libglfw glfwGetCursorPos [void,GLFWwindow*,double*,double*]*
  "@param window - index 0
@param xpos - index 1
@param ypos - index 2")
(bind-lib libglfw glfwSetCursorPos [void,GLFWwindow*,double,double]*
  "@param window - index 0
@param xpos - index 1
@param ypos - index 2")
(bind-lib libglfw glfwCreateCursor [GLFWcursor*,GLFWimage*,i32,i32]*
  "@param image - index 0
@param xhot - index 1
@param yhot - index 2")
(bind-lib libglfw glfwCreateStandardCursor [GLFWcursor*,i32]*
  "@param shape - index 0")
(bind-lib libglfw glfwDestroyCursor [void,GLFWcursor*]*
  "@param cursor - index 0")
(bind-lib libglfw glfwSetCursor [void,GLFWwindow*,GLFWcursor*]*
  "@param window - index 0
@param cursor - index 1")
(bind-lib libglfw glfwSetKeyCallback [GLFWkeyfun,GLFWwindow*,GLFWkeyfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetCharCallback [GLFWcharfun,GLFWwindow*,GLFWcharfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetCharModsCallback [GLFWcharmodsfun,GLFWwindow*,GLFWcharmodsfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetMouseButtonCallback [GLFWmousebuttonfun,GLFWwindow*,GLFWmousebuttonfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetCursorPosCallback [GLFWcursorposfun,GLFWwindow*,GLFWcursorposfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetCursorEnterCallback [GLFWcursorenterfun,GLFWwindow*,GLFWcursorenterfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetScrollCallback [GLFWscrollfun,GLFWwindow*,GLFWscrollfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwSetDropCallback [GLFWdropfun,GLFWwindow*,GLFWdropfun]*
  "@param window - index 0
@param cbfun - index 1")
(bind-lib libglfw glfwJoystickPresent [i32,i32]*
  "@param joy - index 0")
(bind-lib libglfw glfwGetJoystickAxes [float*,i32,i32*]*
  "@param joy - index 0
@param count - index 1")
(bind-lib libglfw glfwGetJoystickButtons [i8*,i32,i32*]*
  "@param joy - index 0
@param count - index 1")
(bind-lib libglfw glfwGetJoystickName [i8*,i32]*
  "@param joy - index 0")
(bind-lib libglfw glfwSetJoystickCallback [GLFWjoystickfun,GLFWjoystickfun]*
  "@param cbfun - index 0")
(bind-lib libglfw glfwSetClipboardString [void,GLFWwindow*,i8*]*
  "@param window - index 0
@param string - index 1")
(bind-lib libglfw glfwGetClipboardString [i8*,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwGetTime [double]*)
(bind-lib libglfw glfwSetTime [void,double]*
  "@param time - index 0")
(bind-lib libglfw glfwGetTimerValue [i64]*)
(bind-lib libglfw glfwGetTimerFrequency [i64]*)
(bind-lib libglfw glfwMakeContextCurrent [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwGetCurrentContext [GLFWwindow*]*)
(bind-lib libglfw glfwSwapBuffers [void,GLFWwindow*]*
  "@param window - index 0")
(bind-lib libglfw glfwSwapInterval [void,i32]*
  "@param interval - index 0")
(bind-lib libglfw glfwExtensionSupported [i32,i8*]*
  "@param extension - index 0")
(bind-lib libglfw glfwGetProcAddress [GLFWglproc,i8*]*
  "@param procname - index 0")
(bind-lib libglfw glfwVulkanSupported [i32]*)
(bind-lib libglfw glfwGetRequiredInstanceExtensions [i8**,i32*]*
  "@param count - index 0")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; xtlang helper functions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-func glfw_error_callback:GLFWerrorfun
  (lambda (err description)
    (printf "GLFW error %d: %s\n" err description)
    void))

(bind-func glfw_init
  (lambda ()
    (let ((res (glfwInit)))
      (if (= res 1)
          (begin
            (glfwSetErrorCallback (convert (get_native_fptr glfw_error_callback)))
            res)
          res))))

(bind-func glfw_terminate
  (lambda ()
    (glfwTerminate)))

(bind-func glfw_print_version_string
  (lambda ()
    (printf "%s\n" (glfwGetVersionString))))

(bind-func glfw_create_fullscreen_window
  "creates a windowed fullscreen window (i.e. doesn't change video mode)"
  (let ((window_title:i8* (zalloc 128)))
    (lambda (mon)
      (sprintf window_title "Extempore OpenGL Window")
      (let ((monitor mon) ;;(glfwGetPrimaryMonitor))
            (vidmode (glfwGetVideoMode monitor))
            (width (tref vidmode 0))
            (height (tref vidmode 1))
            (res:GLFWwindow* null))
        ;; (glfwWindowHint GLFW_RED_BITS (tref vidmode 2))
        ;; (glfwWindowHint GLFW_GREEN_BITS (tref vidmode 3))
        ;; (glfwWindowHint GLFW_BLUE_BITS (tref vidmode 4))
        ;; (glfwWindowHint GLFW_REFRESH_RATE (tref vidmode 5))
        (glfwWindowHint GLFW_DECORATED 0)
        (glfwWindowHint GLFW_AUTO_ICONIFY 1)
        (set! res (glfwCreateWindow width height window_title monitor null))
        (glfwSetWindowPos res 0 0)
        res))))

(bind-func glfw_create_fullscreen_window
  (lambda ()
    (glfw_create_fullscreen_window:[i8*,i8*]* (glfwGetPrimaryMonitor))))

(bind-func glfw_create_fullscreen_interaction_window
  "creates a windowed fullscreen window (i.e. doesn't change video mode)"
  (let ((window_title:i8* (zalloc 128)))
    (lambda (mon)
      (sprintf window_title "Extempore OpenGL Window")
      (let ((monitor mon) ;;(glfwGetPrimaryMonitor))
            (vidmode (glfwGetVideoMode monitor))
            (width (tref vidmode 0))
            (height (tref vidmode 1))
            (res:GLFWwindow* null))
        ;; (glfwWindowHint GLFW_RED_BITS (tref vidmode 2))
        ;; (glfwWindowHint GLFW_GREEN_BITS (tref vidmode 3))
        ;; (glfwWindowHint GLFW_BLUE_BITS (tref vidmode 4))
        ;; (glfwWindowHint GLFW_REFRESH_RATE (tref vidmode 5))
        (glfwWindowHint GLFW_DECORATED 0)
        (glfwWindowHint GLFW_AUTO_ICONIFY 1)
        (register_for_window_events)
        (set! res (glfwCreateWindow width height window_title monitor null))
        (glfwSetWindowPos res 0 0)
        res))))

(bind-func glfw_create_fullscreen_interaction_window
  (lambda ()
    (glfw_create_fullscreen_interaction_window:[i8*,i8*]* (glfwGetPrimaryMonitor))))

(bind-func glfw_create_window
  (let ((window_title:i8* (zalloc 128)))
    (lambda (width height)
      (sprintf window_title "Extempore OpenGL Window")
      (glfwCreateWindow width height window_title null null))))

(bind-func glfw_create_interaction_window
  (let ((window_title:i8* (zalloc 128)))
    (lambda (width height)
      (sprintf window_title "Extempore OpenGL Window")
      (register_for_window_events)
      (glfwCreateWindow width height window_title null null))))

(bind-func glfw_window_should_close
  (lambda (window)
    (glfwWindowShouldClose window)))

(bind-func glfw_make_context_current
  (lambda (window)
    (glfwMakeContextCurrent window)))

(bind-func glfw_destroy_window
  (lambda (window:GLFWwindow*)
    (if (not (null? window))
        (glfwDestroyWindow window)
        (begin (printf "Error: Window pointer is NULL.\n")
               void))
    void))

(bind-func glfw_swap_buffers
  (lambda (window:GLFWwindow*)
    (glfwSwapBuffers window)))

(bind-func glfw_poll_events
  (lambda ()
    (glfwPollEvents)))

(bind-func glfw_print_video_mode_details
  (lambda (vidmode:GLFWvidmode*)
    (printf "      width: %i\n     height: %i\n    redBits: %i\n  greenBits: %i\n   blueBits: %i\nrefreshRate: %i\n"
            (tref vidmode 0)
            (tref vidmode 1)
            (tref vidmode 2)
            (tref vidmode 3)
            (tref vidmode 4)
            (tref vidmode 5))))

(bind-func glfw_print_primary_monitor_details
  (lambda ()
    (let ((monitor (glfwGetPrimaryMonitor)))
      (if (not (null? monitor))
          (glfw_print_video_mode_details (glfwGetVideoMode monitor))
          (printf "Error: Monitor pointer is NULL.\n")))))

(bind-func glfw_set_core_profile
  (lambda ()
    (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3)
    (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 2)
    (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT (convert 1)) ;; GL_TRUE
    (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_CORE_PROFILE)))

;; this doesn't work across all platforms - need to do more investigation
(bind-func glfw_set_compatibility_profile
  (lambda ()
    (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3)
    (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 1)
    (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT (convert 0)) ;; GL_FALSE
    (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_COMPAT_PROFILE)))

;; callbacks

(bind-func glfw_key_callback:GLFWkeyfun
  (lambda (window key scancode action mods)
    (printf "window: %p key: %d scancode: %d action: %d mods: %d\n"
            window key scancode action mods)
    void))

(bind-func glfw_char_callback:GLFWcharfun
  (lambda (window codepoint)
    (printf "window: %p codepoint: %c\n" window codepoint)
    void))

(bind-func glfw_window_position_callback:GLFWwindowposfun
  (lambda (window xpos ypos)
    (printf "window position x: %d y: %d\n" xpos ypos)
    void))

(bind-func glfw_window_focus_callback:GLFWwindowfocusfun
  (lambda (window focused)
    (if (= focused (convert 1)) ;; GL_TRUE
        (printf "window %p gained focus\n" window)
        (printf "window %p lost focus\n" window))
    void))

(bind-func glfw_cursor_position_callback:GLFWcursorposfun
  (lambda (window xpos ypos)
    (printf "cursor position x: %f y: %f\n" xpos ypos)
    void))

(bind-func glfw_mouse_button_callback:GLFWmousebuttonfun
  (lambda (window button action mods)
    (printf "window: %p button %d action %d mods %d\n" window button action mods)
    void))

(bind-func glfw_init_and_create_window
  (lambda (width height)
    (glfw_init)
    (glfw_set_core_profile)
    (let ((window (glfw_create_window width height)))
      ;; the ShowWindow and SwapBuffers calls are necessary for
      ;; Windows, otherwise the context becomes unresponsive
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_compatibility_window
  (lambda (width height)
    (glfw_init)
    ;; (glfw_set_compatibility_profile)
    (let ((window (glfw_create_window width height)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_interaction_window
  (lambda (width height)
    (glfw_init)
    (glfw_set_core_profile)
    (let ((window (glfw_create_interaction_window width height)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_interaction_compatibility_window
  (lambda (width height)
    (glfw_init)
    ;; (glfw_set_compatibility_profile)
    (let ((window (glfw_create_interaction_window width height)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_fullscreen_window
  (lambda (monitor_idx)
    (glfw_init)
    (glfw_set_core_profile)
    (let ((num:i32* (salloc))
          (monitors (glfwGetMonitors num))
          (window (glfw_create_fullscreen_window (if (< monitor_idx (pref num 0))
                                                     (pref monitors monitor_idx)
                                                     (pref monitors 0)))))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_fullscreen_window
  (lambda ()
    (glfw_init_and_create_fullscreen_window:[i8*,i32]* 0:i32)))

(bind-func glfw_init_and_create_fullscreen_interaction_window
  (lambda (monitor_idx)
    (glfw_init)
    (glfw_set_core_profile)
    (let ((num:i32* (salloc))
          (monitors (glfwGetMonitors num))
          (window (glfw_create_fullscreen_interaction_window (if (< monitor_idx (pref num 0))
                                                                 (pref monitors monitor_idx)
                                                                 (pref monitors 0)))))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_fullscreen_interaction_compatibility_window
  (lambda (monitor_idx)
    (glfw_init)
    (let ((num:i32* (salloc))
          (monitors (glfwGetMonitors num))
          (window (glfw_create_fullscreen_interaction_window (if (< monitor_idx (pref num 0))
                                                                 (pref monitors monitor_idx)
                                                                 (pref monitors 0)))))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_init_and_create_fullscreen_interaction_window
  (lambda ()
    (glfw_init_and_create_fullscreen_interaction_window:[i8*,i32]* 0:i32)))


(bind-func glfw_init_and_create_fullscreen_compatibility_window
  (lambda ()
    (glfw_init)
    ;; (glfw_set_compatibility_profile)
    (let ((window (glfw_create_fullscreen_window)))
      (glfwShowWindow window)
      (glfwMakeContextCurrent window)
      (glfwSwapInterval 1)
      (glfwSwapBuffers window)
      window)))

(bind-func glfw_get_window_width
  (lambda (window)
    (let ((width_ptr:i32* (salloc)))
      (glfwGetWindowSize window width_ptr null)
      (pref width_ptr 0))))

(bind-func glfw_get_window_height
  (lambda (window)
    (let ((height_ptr:i32* (salloc)))
      (glfwGetWindowSize window null height_ptr)
      (pref height_ptr 0))))

(bind-func glfw_get_framebuffer_width
  (lambda (window)
    (let ((width_ptr:i32* (salloc)))
      (glfwGetFramebufferSize window width_ptr null)
      (pref width_ptr 0))))

(bind-func glfw_get_framebuffer_height
  (lambda (window)
    (let ((height_ptr:i32* (salloc)))
      (glfwGetFramebufferSize window null height_ptr)
      (pref height_ptr 0))))

(bind-func glfw_get_pixel_ratio
  (lambda (window)
    (let ((ww:i32* (alloc))
          (wh:i32* (alloc))
          (fbw:i32* (alloc))
          (fbh:i32* (alloc)))
      (glfwGetWindowSize window ww wh)
      (glfwGetFramebufferSize window fbw fbh)
      (/ (convert fbw float) (convert ww float)))))

(impc:aot:insert-footer "xtmglfw3")
(define *xtmlib-glfw3-loaded* #t)
