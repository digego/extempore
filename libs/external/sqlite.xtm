;;; sqlite.xtm

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: sqlite.dll

;;; Commentary:

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/sqlite.xtm" 'quiet))
(sys:load-preload-check 'sqlite)
(define *xtmlib-sqlite-loaded* #t)

(impc:aot:insert-header "xtmsqlite")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libsqlite
  (cond ((string=? (sys:platform) "OSX")
         "libsqlite3.dylib")
        ((string=? (sys:platform) "Linux")
         "libsqlite3.so")
        ((string=? (sys:platform) "Windows")
         "sqlite3.dll"))
  "xtmsqlite")

(impc:aot:import-ll "xtmsqlite")

;; treat as opaque pointers
(bind-alias sqlite3 i8)
(bind-alias sqlite3_stmt i8)
(bind-alias sqlite3_value i8)

(bind-val SQLITE_OK i32 0)
(bind-val SQLITE_ERROR i32 1)
(bind-val SQLITE_BUSY i32 5)
(bind-val SQLITE_ROW i32 100)
(bind-val SQLITE_DONE i32 101)


;; int sqlite3_open(
;;  const char *filename,   /* Database filename (UTF-8) */
;;  sqlite3 **ppDb          /* OUT: SQLite db handle */
;;);
(bind-lib libsqlite sqlite3_open [i32,i8*,sqlite3**]*)

;; int sqlite3_prepare_v2(
;;  sqlite3 *db,            /* Database handle */
;;  const char *zSql,       /* SQL statement, UTF-8 encoded */
;;  int nByte,              /* Maximum length of zSql in bytes. */
;;  sqlite3_stmt **ppStmt,  /* OUT: Statement handle */
;;  const char **pzTail     /* OUT: Pointer to unused portion of zSql */
;;);
(bind-lib libsqlite sqlite3_prepare_v2 [i32,sqlite3*,i8*,i32,sqlite3_stmt**,i8**]*)

;; int sqlite3_step(sqlite3_stmt*);
(bind-lib libsqlite sqlite3_step [i32,sqlite3_stmt*]*)

;; int sqlite3_finalize(sqlite3_stmt *pStmt);
(bind-lib libsqlite sqlite3_finalize [i32,sqlite3_stmt*]*)

;; int sqlite3_close_v2(sqlite3*);
(bind-lib libsqlite sqlite3_close_v2 [i32,sqlite3*]*)

;; const void *sqlite3_column_blob(sqlite3_stmt*, int iCol);
;; int sqlite3_column_bytes(sqlite3_stmt*, int iCol);
;; int sqlite3_column_bytes16(sqlite3_stmt*, int iCol);
;; double sqlite3_column_double(sqlite3_stmt*, int iCol);
;; int sqlite3_column_int(sqlite3_stmt*, int iCol);
;; sqlite3_int64 sqlite3_column_int64(sqlite3_stmt*, int iCol);
;; const unsigned char *sqlite3_column_text(sqlite3_stmt*, int iCol);
;; const void *sqlite3_column_text16(sqlite3_stmt*, int iCol);
;; int sqlite3_column_type(sqlite3_stmt*, int iCol);
;; sqlite3_value *sqlite3_column_value(sqlite3_stmt*, int iCol);
(bind-lib libsqlite sqlite3_column_blob [i8*,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_bytes [i32,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_bytes16 [i32,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_double [double,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_int [i32,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_int64 [i64,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_text [i8*,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_text16 [i8*,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_type [i32,sqlite3_stmt*,i32]*)
(bind-lib libsqlite sqlite3_column_value [sqlite3_value*,sqlite3_stmt*,i32]*)

(bind-lib libsqlite sqlite3_column_count [i32,sqlite3_stmt*]*)
(bind-lib libsqlite sqlite3_column_name [i8*,sqlite3_stmt*,i32]*)

(bind-val SQLITE_INTEGER i32 1)
(bind-val SQLITE_FLOAT   i32 2)
(bind-val SQLITE_BLOB    i32 4)
(bind-val SQLITE3_TEXT   i32 3)
(bind-val SQLITE_NULL    i32 5)

;; int sqlite3_errcode(sqlite3 *db);
;; int sqlite3_extended_errcode(sqlite3 *db);
;; const char *sqlite3_errmsg(sqlite3*);
;; const void *sqlite3_errmsg16(sqlite3*);
;; const char *sqlite3_errstr(int);
(bind-lib libsqlite sqlite3_errcode [i32,sqlite3*]*)
(bind-lib libsqlite sqlite3_extended_errcode [i32,sqlite3*]*)
(bind-lib libsqlite sqlite3_errmsg [i8*,sqlite3*]*)
(bind-lib libsqlite sqlite3_errmsg16 [i8*,sqlite3*]*)
(bind-lib libsqlite sqlite3_errstr [i8*,i32]*)


;; int sqlite3_exec(
;;   sqlite3*,                                  /* An open database */
;;   const char *sql,                           /* SQL to be evaluated */
;;   int (*callback)(void*,int,char**,char**),  /* Callback function */
;;   void *,                                    /* 1st argument to callback */
;;   char **errmsg                              /* Error msg written here */
;; );
(bind-lib libsqlite sqlite3_exec [i32,sqlite3*,i8*,[i32,i8*,i32,i8**,i8**]*,i8*,i8**]*)

;; int sqlite3_get_table(
;;   sqlite3 *db,          /* An open database */
;;   const char *zSql,     /* SQL to be evaluated */
;;   char ***pazResult,    /* Results of the query */
;;   int *pnRow,           /* Number of result rows written here */
;;   int *pnColumn,        /* Number of result columns written here */
;;   char **pzErrmsg       /* Error msg written here */
;; );
;; void sqlite3_free_table(char **result);
(bind-lib libsqlite sqlite3_get_table [i32,sqlite3*,i8*,i8**,i32*,i32*,i8**]*)

(bind-lib libsqlite sqlite3_free_table [void,i8**]*)


(impc:aot:insert-footer "xtmsqlite")
(define *xtmlib-sqlite-loaded* #t)
