;;; qr-code.xtm -- QR code generation using libqrencode

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libqrencode

;;; Commentary:

;; Requires libqrencode (http://fukuchi.org/works/qrencode/)

;; Installation:

;; OSX (via homebrew): brew install qrencode

;;; Code:

(define libqrencode
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "libqrencode.so"))
          ((string=? platform "Windows") (sys:open-dylib "libqrencode.dll"))
          ((string=? platform "OSX") (sys:open-dylib "libqrencode.dylib"))
          (else (print "Unknown platform: " platform)))))

(sys:load-preload-check 'qr-code)
(define *xtmlib-qr-code-loaded* #t)
(print "Loading libqrencode library...\n\n")

(bind-alias QRencodeMode enum)

(bind-val QR_MODE_NUL QRencodeMode -1)       ;; Terminator (NUL character). Internal use only
(bind-val QR_MODE_NUM QRencodeMode 0)        ;; Numeric mode
(bind-val QR_MODE_AN QRencodeMode 1)         ;; Alphabet-numeric mode
(bind-val QR_MODE_8 QRencodeMode 2)          ;; 8-bit data mode
(bind-val QR_MODE_KANJI QRencodeMode 3)      ;; Kanji (shift-jis) mode
(bind-val QR_MODE_STRUCTURE QRencodeMode 4)  ;; Internal use only
(bind-val QR_MODE_ECI QRencodeMode 5)        ;; ECI mode
(bind-val QR_MODE_FNC1FIRST QRencodeMode 6)  ;; FNC1, first position
(bind-val QR_MODE_FNC1SECOND QRencodeMode 7) ;; FNC1, second position

(bind-alias QRecLevel enum)

(bind-val QR_ECLEVEL_L QRecLevel 0)  ;; lowest
(bind-val QR_ECLEVEL_M QRecLevel 1)
(bind-val QR_ECLEVEL_Q QRecLevel 2)
(bind-val QR_ECLEVEL_H QRecLevel 3)  ;; highest

;; the QRcode 'class' type: <version,width,data>
(bind-type QRcode <i32,i32,i8*>)

(bind-func QRcode_version
  (lambda (code:QRcode*)
    (tref code 0)))

(bind-func QRcode_size
  (lambda (code:QRcode*)
    (tref code 1)))

(bind-func QRcode_data
  (lambda (code:QRcode*)
    (tref code 2)))

(bind-func QRcode_pixel
  "returns bool: white=0, black=1"
  (lambda (code:QRcode* x y)
    (convert (bitwise-and 1:i8
                          (pref (tref code 2)
                                (+ (* x (QRcode_size code)) y)))
             bool)))

;; [code,string,version,level,hint,casesensitive]*
(bind-lib libqrencode QRcode_encodeString [QRcode*,i8*,i32,QRecLevel,QRencodeMode,i32]*)
;; [code,string,version,level]*
(bind-lib libqrencode QRcode_encodeString8bit [QRcode*,i8*,i32,QRecLevel]*)
;; [code,string,version,level]*
(bind-lib libqrencode QRcode_encodeData [QRcode*,i32,i8*,i32,QRecLevel]*)
;; [code,size,data,version,level]*
(bind-lib libqrencode QRcode_free [void,QRcode*]*)

;; use low error-correction by default
(bind-func qr_create_l
  (lambda (input_string:String* version)
    (QRcode_encodeString8bit (cstring input_string) version QR_ECLEVEL_L)))

;; takes an error correction level
(bind-func qr_create_with_level
  (lambda (input_string:String* version level)
    (QRcode_encodeString8bit (cstring input_string) version level)))

(bind-poly qr_create qr_create_l)
(bind-poly qr_create qr_create_with_level)

(define *xtmlib-qr-code-loaded* #t)
(print "\nlibqrencode library loaded.\n\n")
