;;; pc_ivl.xtm -- pitch class and interval sets

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; A pitch class in this library is taken to be a
;; list of MIDI note values from the first octave (0-11)
;; from which other pitches are compared using modulo 12.
;; Therefore, 0 = C, 1 = C#, etc..

;;; Code:


; Define basic diatonic major
(define *pc:diatonic-major*
   '((i . (0 . ^))
     (i6 . (0 . ^6))
     (i64 . (0 . ^64))
     (i7 . (0 . ^7))
     (i- . (0 . -))
     (i-7 . (0 . -7))
     (n . (1 . ^)) ; neopolitan
     (n6 . (1 . ^6)) ; neopolitan
     (ii . (2 . -))
     (ii6 . (2 . -6))
     (ii7 . (2 . -7))
     (ii9 . (2 . -9))
     (ii^ . (2 . ^))
     (ii^7 . (2 . ^7))
     (iii . (4 . -))
     (iii6 . (4 . -6))
     (iii7 . (4 . -7))
     (iii^ . (4 . ^))
     (iii^7 . (4 . ^7))
     (iv . (5 . ^))
     (iv6 . (5 . ^6))
     (iv7 . (5 . ^7))
     (iv- . (5 . -))
     (iv-7 . (5 . -7))
     (v . (7 . ^))
     (v6 . (7 . ^6))
     (v7 . (7 . 7))
     (v- . (7 . -))
     (v-7 . (7 . -7))
     (b6 . (8 . ^))
     (vi . (9 . -))
     (vi6 . (9 . -6))
     (vi7 . (9 . -7))
     (vi^ . (9 . ^))
     (vi^7 . (9 . ^7))
     (b7 . (10 . ^))
     (viio . (11 . o))
     (viio7 . (11 . o7))
     (vii . (11 . o))
     (vii7 . (11 . -7b5))
     ))

;; Define basic diatonic minor
(define *pc:diatonic-minor*
   '((i . (0 . -))
     (i6 . (0 . -6))
     (i64 . (0 . -64))
     (i7 . (0 . -7))
     (i^ . (0 . ^))
     (i^6 . (0 . ^6))
     (i^64 . (0 . ^64))
     (i^7 . (0 . ^7))
     (n . (1 . ^)) ; neopolitan
     (n6 . (1 . ^6)) ; neopolitan
     (ii . (2 . o))
     (ii6 . (2 . o6))
     (ii7 . (2 . o7))
     (ii- . (2 . -))
     (ii-6 . (2 . -6))
     (ii-7 . (2 . -7))
     (ii^ . (2 . ^))
     (ii^7 . (2 . ^7))
     (iii . (3 . ^))
     (iii6 . (3 . ^6))
     (iii7 . (3 . ^7))
     (iii- . (3 . -))
     (iii-6 . (3 . -6))
     (iii-7 . (3 . -7))
     (iv . (5 . -))
     (iv6 . (5 . -6))
     (iv7 . (5 . -7))
     (iv^ . (5 . ^))
     (iv^6 . (5 . ^6))
     (iv^7 . (5 . ^7))
     (v . (7 . ^))
     (v^ . (7 . ^))
     (v6 . (7 . ^6))
     (v7 . (7 . 7))
     (v- . (7 . -))
     (v-6 . (7 . -6))
     (v-6 . (7 . -6))
     (v-7 . (7 . -))
     (vi . (8 . ^))
     (vi6 . (8 . ^6))
     (vi7 . (8 . ^7))
     (vi- . (8 . -))
     (vi-6 . (8 . -6))
     (vi-7 . (8 . -7))
     (vii . (10 . ^))
     (vii6 . (10 . ^6))
     (vii7 . (10 . ^7))
     (viio . (11 . o)) ;raised 7 (dim)
     (viio6 . (11 . o6)) ;raised 7 (dim)
     (viio7 . (11 . o7)) ; raised 7 (dim)
     ))

;; various scales defined as pc sets
(define *pc:scales*
   '((blues . (2 1 1 3 2))
     (blue-note . (3 2 1 1 3))
     (diminished . (2 1 2 1 2 1 2))
     (half-diminished . (2 1 2 1 2 2))
     (dominant-diminished . (1 2 1 2 1 2 1))
     (acoustic . (2 2 2 1 2 1))
     (algerian . (2 1 3 1 1 3))
     (altered . (1 2 1 2 2 2))
     (augmented . (3 1 3 1 3))
     (bebop . (2 2 1 2 1 1 2))
     (bebop-dominant . (2 2 1 2 2 1 1))
     (enigmentic . (1 3 2 2 2 1))
     (flamenco . (1 3 1 2 1 3))
     (gypsy . (2 1 3 1 1 2))
     (istrian . (1 2 1 2 1))
     (iwato . (1 4 1 4))
     (melodic . (2 1 2 2 2 2))
     (neapolitan . (1 2 2 2 2))
     (persian . (1 3 1 1 2 1))
     (prometheus . (2 2 2 3 1))
     (tritone . (1 3 2 1 3))
     (ukrainian . (2 1 3 1 2 1))
     (yo . (3 2 2 3))
     (pentatonic . (2 2 3 2))
     (wholetone . (2 2 2 2 2))
     (chromatic . (1 1 1 1 1 1 1 1 1 1 1))
     (octatonic . (2 1 2 1 2 1 2))
     (messiaen1 . (2 2 2 2 2))
     (messiaen2 . (2 1 2 1 2 1 2))
     (messiaen3 . (2 1 1 2 1 1 2 1))
     (messiaen4 . (1 1 3 1 1 1 3))
     (messiaen5 . (1 4 1 1 4))
     (messiaen6 . (2 2 1 1 2 2 1))
     (messiaen7 . (1 1 1 2 1 1 1 1 2))
     (harmonic . (2 1 2 2 1 3))
     (double-harmonic . (1 3 1 2 1 3))
     (ionian . (2 2 1 2 2 2))
     (dorian . (2 1 2 2 2 1))
     (phrygian . (1 2 2 2 1 2))
     (phrygian-dominant . (1 3 1 2 1 2))
     (lydian . (2 2 2 1 2 2))
     (lydian-dominant . (2 2 2 1 2 1))
     (lydian-mixolydian . (2 1 2 1 2 1 2))
     (lydian-augmented . (2 2 2 2 1 2))
     (mixolydian . (2 2 1 2 2 1))
     (aeolian . (2 1 2 2 1 2))
     (locrian . (1 2 2 1 2 2))))

; Define basic chord symbols
(define *pc:chord-syms*
   '((^ . (0 4 7))
     (^sus . (0 5 7))
     (^6 . (4 7 0))
     (^64 . (7 0 4))
     (^7 . (0 4 7 11))
     (^65 . (4 7 11 0))
     (^43 . (7 11 0 4))
     (^42 . (11 0 4 7))
     (^2 . (11 0 4 7))
     (^7#4 . (0 4 7 11 6))
     (^9 . (0 4 7 11 2))
     (7 . (0 4 7 10))
     (9 . (0 4 7 10 2))
     (65 . (4 7 10 0))
     (43 . (7 10 0 4))
     (2 . (10 0 4 7))
     (42 . (10 0 4 7))
     (- . (0 3 7))
     (-sus . (0 5 7))
     (-6 . (3 7 0))
     (-64 . (7 0 3))
     (-7 . (0 3 7 10))
     (-65 . (3 7 10 0))
     (-43 . (7 10 0 3))
     (-42 . (10 0 3 7))
     (-2 . (10 0 3 7))
     (-9 . (0 3 7 10 2))
     (o . (0 3 6))
     (o6 . (3 6 0))
     (o64 . (6 0 3))
     (o7 . (0 3 6 8))
     (o65 . (3 6 8 0))
     (o43 . (6 8 0 3))
     (o42 . (8 0 3 6))
     (o2 . (8 0 3 6))
     (-7b5 . (0 3 6 9))))


(define *pc:chord-syms-scales*
   '((^ . 'ionian)
     (^sus . 'mixolydian)
     (^6 . 'ionian)
     (^64 . 'ionian)
     (^7 . 'ionian)
     (^65 . 'ionian)
     (^43 . 'ionian)
     (^42 . 'ionian)
     (^2 . 'ionian)
     (^7#4 . 'ionian)
     (^9 . 'ionian)
     (7 . 'mixolydian)
     (9 . 'mixolydian)
     (65 . 'mixolydian)
     (43 . 'mixolydian)
     (2 . 'mixolydian)
     (42 . 'mixolydian)
     (- . 'dorian)
     (-sus . 'mixolydian)
     (-6 . 'dorian)
     (-64 . 'dorian)
     (-7 . 'dorian)
     (-65 . 'dorian)
     (-43 . 'dorian)
     (-42 . 'dorian)
     (-2 . 'dorian)
     (-9 . 'dorian)
     (o . 'locrian)
     (o6 . 'locrian)
     (o64 . 'locrian)
     (o7 . 'locrian)
     (o65 . 'locrian)
     (o43 . 'locrian)
     (o42 . 'locrian)
     (o2 . 'locrian)
     (-7b5 . 'locrian)))


;; returns a scale based on a chord (standard jazz translations)
(define *pc:chord->scale*
   '((i . (0 . ionian))
     (i7 . (0 . ionian))
     (ii . (2 . dorian))
     (ii7 . (2 . dorian))
     (ii9 . (2 . dorian))
     (iii . (4 . phrygian))
     (iii7 . (4 . phrygian))
     (iv . (5 . lydian))
     (iv7 . (5 . lydian))
     (v . (7 . mixolydian))
     (v7 . (7 . mixolydian))
     (vi . (9 . aeolian))
     (vi7 . (9 . aeolian))
     (vii . (11 . locrian))
     (vii7 . (11 . locrian))))


;; return the pitch class of pitch

(define pc:pc
  (lambda (pitch)
    (modulo pitch 12)))

;; A predicate for calculating if pitch is in pc
;;
;; arg 1: pitch to check against pc
;; arg 2: pc to check pitch against
;;
;; retuns true or false
;;
(define pc:?
   (lambda (pitch pc)
      (list? (member (modulo pitch 12) pc))))


;; quantize pc
;; Always slelects a higher value before a lower value where distance is equal.
;;
;; arg 1: pitch to quantize to pc
;; arg 2: pc to quantize pitch against
;;
;; returns quantized pitch or #f if non available
;;
(define pc:quantize
   (lambda (pitch-in pc)
      (let loop ((offset 0)
                 (pitch (real->integer (round pitch-in))))
         (cond ((pc:? (+ pitch offset) pc) (+ pitch offset))
               ((pc:? (- pitch offset) pc) (- pitch offset))
               ((< offset 7) (loop (+ offset 1) pitch))
               (else (print-notification "no pc value to quantize to" pitch pc)
                     #f)))))

;; quantize pc
;; Always slelects a lower value before a higher value where distance is equal.
;;
;; arg 1: pitch to quantize to pc
;; arg 2: pc to quantize pitch against
;;
;; returns quntized pitch or #f if non available
;;
(define pc:quantize-low
   (lambda (pitch-in pc)
      (let loop ((offset 0)
                 (pitch (real->integer (round pitch-in))))
         (cond ((pc:? (- pitch offset) pc) (- pitch offset))
               ((pc:? (+ pitch offset) pc) (+ pitch offset))
               ((< offset 7) (loop (+ offset 1) pitch))
               (else (print-notification "no pc value to quantize to" pitch pc)
                     #f)))))


;; select random pitch from pitch class
;; bounded by lower and upper (inclusive lower exclusive upper)
;;
;; arg 1: lower bound (inclusive)
;; arg 2: upper bound (exclusive)
;; arg 3: pitch class
;;
;; returns #f if no valid pitch is possible
;;
(define pc:random
  (lambda (lower upper pc)
    (if (null? pc) #f
        (let ((choices (filter (lambda (x) (pc:? x pc)) (range lower upper))))
          (if (null? choices) #f
              (random choices))))))



;; select pitch from pitch class relative to a given pitch
;;
;; 1st: bass pitch
;; 2nd: pc relationship to bass pitch (max is abs 7)
;; 3rd: pitch class
;;
;; example:
;; (pc:relative 64 -2 '(0 2 4 5 7 9 11)) => 60
;; (pc:relative 69 3 '(0 2 4 5 7 9 11)) => 74
;;
(define pc:relative
  (lambda (pitch i pc)
    (set! i (real->integer (round i)))
    (if (= i 0) pitch
  (let ((cnt_op (if (negative? i) - +)))
    (let loop ((p (cnt_op pitch 1)) (cnt 0))
      (if (pc:? p pc) (set! cnt (cnt_op cnt 1)))
      (if (= cnt i) p
    (loop (cnt_op p 1) cnt)))))))

;; pc:make-chord
;; creates a list of "number" pitches between "lower" and "upper"
;; bounds from the given "pc".  a division of the bounds
;; by the number of elements requested breaks down the selection into
;; equal ranges from which each pitch is selected.
;; make-chord attempts to select pitches of all degrees of the pc.
;; it is possible for elements of the returned chord to be -1 if no
;; possible pc is available for the given range.
;; non-deterministic (i.e. result can vary each time)
;;
;; arg1: lower bound (inclusive)
;; arg2: upper bound (exclusive)
;; arg3: number of pitches in chord
;; arg4: pitch class
;;
;; example: c7
;; (pc:make-chord 60 85 4 '(0 4 7 10)) => (60 70 76 79)
;;
(define pc:make-chord
   (lambda (lower upper number pc)
      (let ((chord '()))
         (let loop ((l (round lower))
                    (u (round upper))
                    (n number)
                    (p pc))
            (if (< n 1)
                (map (lambda (x)
                       (real->integer x))
                     (cl:sort (cl:remove -1 chord) <)) ; lowest pitch to highest pitch remove -1s
                (let* ((range (- u l))
                       (gap (round (/ range n)))
                       (pitch (pc:random l (+ l gap) p)))
                   (if (not pitch) ; if new pitch is #f, try from whole range
                       (set! chord (cons (pc:random lower upper p) chord))
                       (set! chord (cons pitch chord)))
                   (loop (+ l gap)
                         u
                         (- n 1)
                         (if (> (length p) 1)
                             (cl:remove (modulo (car chord) 12) p)
                             pc))))))))


;; Returns a scale degree of a given value (pitch) based on a pc
(define pc:degree
   (lambda (value pc)
      (let loop ((i 1)
                 (lst pc))
         (if (null? lst)
             (begin (print-notification "pitch not in pc") #f)
             (if (= (car lst) (modulo value 12))
                 i
                 (loop (+ i 1) (cdr lst)))))))


;; quantize the values of lst to pc
(define pc:quantize-list
   (lambda (lst pc)
      (map (lambda (i)
              (pc:quantize i pc))
           lst)))


;; retrograde list
(define ivl:retrograde reverse)

;; invert list paying no attention to key
(define ivl:invert
   (lambda (lst . args)
      (let ((pivot (if (null? args)
                       (car lst)
                       (car args))))
         (cons (car lst) (map (lambda (i)
                                 (- pivot (- i pivot)))
                              (cdr lst))))))

;; transpose list paying no attention to key
(define ivl:transpose
   (lambda (val lst)
      (map (lambda (i)
              (+ i val))
           lst)))

;; expand/contract list by factor paying no attention to key
(define ivl:expand/contract
   (lambda (lst factor)
      (cons (car lst)
            (let loop ((old (car lst))
                       (l (cdr lst))
                       (current (car lst))
                       (newlst '()))
               (if (null? l)
                   (reverse newlst)
                   (loop (car l)
                         (cdr l)
                         (+ current (* factor (- (car l) old)))
                         (cons (real->integer (+ current (* factor (- (car l) old))))
                               newlst)))))))



;; invert the values of lst quantizing to pc
(define pc:invert
   (lambda (lst pc . args)
      (if (null? args)
          (pc:quantize-list (ivl:invert lst) pc)
          (pc:quantize-list (ivl:invert lst (car args)) pc))))

;; transpose the values of lst quantizing to pc
(define pc:transpose
   (lambda (val lst pc)
      (pc:quantize-list (ivl:transpose val lst) pc)))

;; expand/contract lst by factor quantizing to pc
(define pc:expand/contract
   (lambda (lst factor pc)
      (pc:quantize-list (ivl:expand/contract lst factor) pc)))

;; returns a scale type based on a chord type (basic jazz modal theory)
(define pc:chord->scale
   (lambda (root type)
      (pc:scale (modulo (+ (cadr (assoc type *pc:chord->scale*)) root) 12)
                (cddr (assoc type *pc:chord->scale*)))))

;; returns a scale type based on a given root
(define pc:scale
   (lambda (root type)
     (if (string? type) (set! type (string->symbol type)))
      (if (assoc type *pc:scales*)
          (let loop ((l (cdr (assoc type *pc:scales*)))
                     (current (modulo root 12))
                     (newlst '()))
             (if (null? l)
                 (reverse (cons current newlst))
                 (loop (cdr l) (modulo (+ current (car l)) 12) (cons current newlst))))
          (begin (print-notification "Scale type not found." *pc:scales*) #f))))


;; returns a chord following basic diatonic harmony rules
;; based on root (0 for C etc.) maj/min ('^ or '-) and degree (i-vii)
(define pc:diatonic
  (lambda (root maj-min degree)
    (if (number? degree)
        (set! degree (cdr (assoc degree '((0 . i) (1 . ii) (2 . ii)
                                          (3 . iii) (4 . iii) (5 . iv)
                                          (6 . iv) (7 . v) (8 . vi) (9 . vi)
                                          (10 . vii) (11 . vii))))))
    (let ((val (assoc degree
                      (if (equal? '^ maj-min)
                          *pc:diatonic-major*
                          *pc:diatonic-minor*))))
      (pc:chord (modulo (+ root (cadr val)) 12) (cddr val)))))



;; returns a chord given a root and type
;; see *pc:chord-syms* for currently available types
;;
;; e.g. (pc:chord 0 '^7)  => '(0 4 7 11)
(define pc:chord
  (lambda (root type)
      (let ((chord (assoc type *pc:chord-syms*)))
         (if chord
             (let loop ((l (cdr chord))
                        (newlst '()))
                (if (null? l)
                    (reverse newlst)
                    (loop (cdr l) (cons (modulo (+ (car l) root) 12) newlst))))
             (begin (print-notification "Chord type not found." type) #f)))))


;; returns chord options for root in maj-min key of pc
;;
;; e.g. (pc:chord-options 0 '^ (pc:scale 0 'ionian)) => ((0 4 7) (0 4 7 11) (0 5 7) (0 4 7 11 2) (0 4 7 11 6))
(define pc:chord-options
   (lambda (root maj-min pc)
      (let ((major7 '(^ ^7 ^sus ^9 ^7#4))
            (dom7 '(^ 7 ^sus 9))
            (minor7 '(- -7 -sus -9))
            (dim7 '(o -7b5 o7))
            (degree (pc:degree root pc)))
         (map (lambda (sym)
                 (pc:chord root sym))
              (if (equal? maj-min '^)
                  (case degree
                        ((-1) '())
                        ((1 4) major7)
                        ((5) dom7)
                        ((2 3 6) minor7)
                        ((7) dim7))
                  (case degree
                        ((-1) '())
                        ((1 4 6) minor7)
                        ((3) major7)
                        ((5) (append minor7 dom7))
                        ((2) dim7)
                        ((7) (append dom7 dim7))))))))


;; make a chord that is fixed at either the 'top or the 'bottom
;; where fixed is as close as the chord allows to fix-point
;; defaults to bottom
;;
;; (pc:make-chord-fixed 60 3 '(0 3 7))      => (60 63 67)
;; (pc:make-chord-fixed 60 3 '(0 3 7) 'top) => (51 55 60)
;;
(define pc:make-chord-fixed
   (lambda (fix-point number pc . args)
      (if (< number 1)
          '()
          (let loop ((pitches (list (real->integer (pc:quantize fix-point pc))))
                     (num (- number 1))
                     (dir (if (null? args) + (if (equal? 'bottom (car args)) + -))))
            (if (> num 0)
                (loop (cons (real->integer (pc:relative (car pitches) (dir 1) pc))
                            pitches)
                      (- num 1)
                      dir)
                (reverse pitches))))))


(define pc:distance-of-chord
   (lambda (chd pc)
      (apply + (map (lambda (p)
                       (pc:distance p pc))
                    chd))))

;; distance between pitch and a pc
(define pc:distance
  (lambda (pitch pc)
    (if (atom? pc) (set! pc (list pc)))
    (let ((p (modulo pitch 12)))
      (car (cl:sort (map (lambda (class)
                           (let ((val (abs (- p class))))
                             (abs (if (< val (- 12 val)) val (- 12 val)))))
                         pc) <)))))

;; find the pc that is closest to given pitch
;; useful for finding next step for pitch given a chord
(define pc:closest-pc
  (lambda (pitch pc)
    (cdar (cl:sort (map (lambda (class) (cons (pc:distance pitch class) class)) pc)
                   (lambda (a b) (< (car a) (car b)))))))

(define pc:closest-pitch
  (lambda (pc pitches)
    (cdar (cl:sort (map (lambda (p) (cons (pc:distance p pc) p)) pitches)
                   (lambda (a b) (< (car a) (car b)))))))

;; returns the pitch in plst that is closest to the pc set
;; if multiple pitches in plst are the closest return the first
(define pc:find-closest
   (lambda (plst pc)
      (cdar (cl:sort (map (lambda (p)
                            (cons (pc:distance p pc) p))
                         plst)
                     (lambda (a b) (if (< (car a) (car b)) #t #f))))))


;; find shortest part movement from chord to pc
(define pc:move-chord
   (lambda (chord pc)
      (let loop ((pci pc)
                 (chda chord)
                 (chdb '()))
         (if (null? pci) (set! pci pc))
         (if (null? chda)
             (cl:sort chdb <)
             (let* ((match (pc:find-closest chda pci))
                    (new-pitch (if (> (random) .5)
                                   (pc:quantize-low match pci)
                                   (pc:quantize match pci))))
                (loop (remove-first (modulo new-pitch 12) pci)
                      (remove-first match chda)
                      (cons new-pitch chdb)))))))


;; returns the type of scale given a pc or the pc itself
;; if no known scale is found
(define pc:scale-from-pc
   (lambda (pc)
      (let ((scale (let loop ((scale pc)
                              (ivls '()))
                      (if (null? (cdr scale))
                          (reverse ivls)
                          (loop (cdr scale) (cons (let ((v (- (cadr scale) (car scale))))
                                                     (if (< v 0)
                                                         (+ 12 v)
                                                         v)) ivls))))))
         (let check ((scales *pc:scales*))
            (if (null? scales)
                pc
                (if (equal? scale (cdar scales))
                    (caar scales)
                    (check (cdr scales))))))))

;; returns a pc-set based on a list of intervals
;; plst is the seed for the progression
;; usually this will be a list with one element
(define pc:from-intervals
   (lambda (plst intervals)
      (if (null? intervals)
          (reverse plst)
          (pc:from-intervals (cons (modulo (+ (car plst)
                                              (car intervals))
                                           12)
                                   plst)
                             (cdr intervals)))))

;returns a pc-set based on a list of steps a beginning pitch class and a pc-set
(define pc:from-steps
   (lambda (pitch steps pc)
      (let loop ((slst steps)
                 (plst (list pitch)))
         (if (null? slst)
             (reverse plst)
             (loop (cdr slst)
                   (cons (modulo (pc:relative (car plst) (car slst) pc) 7) plst))))))

;; attempts to return a reasonable scale based on the chord and root provided
(define pc:scale-from-chord
   (lambda (root chord)
      (let ((res (cl:find-if (lambda (v)
                                (equal? (car v) chord))
                             (map (lambda (scale)
                                     (cons (cl:intersection chord scale) scale))
                                  (map (lambda (type)
                                          (pc:scale root type))
                                       '(ionian aeolian mixolydian lydian phrygian locrian
                                                dorian lydian-mixolydian wholetone chromatic))))))
         (if (pair? res)
             (cdr res)
             chord))))


;; genereate a melody from a list of steps in a (pc) pitch class
(define pc:melody-by-step
   (lambda (starting-pitch steps pc . args)
      (if (null? steps)
          (reverse (car args))
          (if (null? args)
              (pc:melody-by-step starting-pitch steps pc (cons starting-pitch args))
              (pc:melody-by-step (pc:relative starting-pitch (car steps) pc)
                                 (cdr steps)
                                 pc
                                 (cons (pc:relative starting-pitch (car steps) pc) (car args)))))))


;; generate a meldoy from a list of intervals
(define ivl:melody-by-ivl
   (lambda (starting-pitch ivls . args)
      (if (null? ivls)
          (reverse (car args))
          (if (null? args)
              (ivl:melody-by-ivl starting-pitch ivls (cons starting-pitch args))
              (ivl:melody-by-ivl (+ starting-pitch (car ivls)) (cdr ivls)
                                 (cons (+ starting-pitch (car ivls)) (car args)))))))


;; base drums      20-29 - bd
;; snare drums     30-39 - sd
;; hats closed     40-44 - hc
;; hats open       45-49 - ho
;; crash cymbols   50-54 - cc
;; ride cymbols    55-59 - rc
;; high toms       60-64 - ht
;; mid toms        65-70 - m5
;; low toms        70-74 - lt
;; rim shots       75-79 - rs
;; cow bell        80-84 - cb
;; clap            85-89 - cp
;; maracca         90-93 - ma


;; base drums 20-29
(define bd0 20)
(define bd1 21)
(define bd2 22)
(define bd3 23)
(define bd4 24)
(define bd5 25)
(define bd6 26)
(define bd7 27)
(define bd8 28)
(define bd9 29)
;; snare drums 30-39
(define sd0 30)
(define sd1 31)
(define sd2 32)
(define sd3 33)
(define sd4 34)
(define sd5 35)
(define sd6 36)
(define sd7 37)
(define sd8 38)
(define sd9 39)
;; hats closed 40-44
(define hc0 40)
(define hc1 41)
(define hc2 42)
(define hc3 43)
(define hc4 44)
;; hats open 45-49
(define ho0 45)
(define ho1 46)
(define ho2 47)
(define ho3 48)
(define ho4 49)
;; crash cymbols 50-54
(define cc0 50)
(define cc1 51)
(define cc2 52)
(define cc3 53)
(define cc4 54)
;; ride cymbols 55-59
(define rc0 55)
(define rc1 56)
(define rc2 57)
(define rc3 58)
(define rc4 59)
;; high toms 60-64
(define ht0 60)
(define ht1 61)
(define ht2 62)
(define ht3 63)
(define ht4 64)
;; mid toms 65-69
(define mt0 65)
(define mt1 66)
(define mt2 67)
(define mt3 68)
(define mt4 69)
;; low toms 70-74
(define lt0 70)
(define lt1 71)
(define lt2 72)
(define lt3 73)
(define lt4 74)
;; rim shots 75-79
(define rs0 75)
(define rs1 76)
(define rs2 77)
(define rs3 78)
(define rs4 79)
;; cow bell 80-84
(define cb0 80)
(define cb1 81)
(define cb2 82)
(define cb3 83)
(define cb4 84)
;; clap 85-89
(define cp0 85)
(define cp1 86)
(define cp2 87)
(define cp3 88)
(define cp4 89)
;; maracca 90-92
(define ma0 90)
(define ma1 91)
(define ma2 92)
;; tambourine 93-95
(define tb0 93)
(define tb1 94)
(define tb2 95)



(define __ -1) ;; rest

(define c0 (- 60 48))
(define c#0 (- 61 48))
(define db0 (- 61 48))
(define d0 (- 62 48))
(define d#0 (- 63 48))
(define eb0 (- 63 48))
(define e0 (- 64 48))
(define f0 (- 65 48))
(define f#0 (- 66 48))
(define gb0 (- 66 48))
(define g0 (- 67 48))
(define g#0 (- 68 48))
(define ab0 (- 68 48))
(define a0 (- 69 48))
(define a#0 (- 70 48))
(define bb0 (- 70 48))
(define b0 (- 71 48))
(define cb0 (- 71 48))

(define c1 (- 60 36))
(define c#1 (- 61 36))
(define db1 (- 61 36))
(define d1 (- 62 36))
(define d#1 (- 63 36))
(define eb1 (- 63 36))
(define e1 (- 64 36))
(define f1 (- 65 36))
(define f#1 (- 66 36))
(define gb1 (- 66 36))
(define g1 (- 67 36))
(define g#1 (- 68 36))
(define ab1 (- 68 36))
(define a1 (- 69 36))
(define a#1 (- 70 36))
(define bb1 (- 70 36))
(define b1 (- 71 36))
(define cb1 (- 71 36))

(define c2 (- 60 24))
(define c#2 (- 61 24))
(define db2 (- 61 24))
(define d2 (- 62 24))
(define d#2 (- 63 24))
(define eb2 (- 63 24))
(define e2 (- 64 24))
(define f2 (- 65 24))
(define f#2 (- 66 24))
(define gb2 (- 66 24))
(define g2 (- 67 24))
(define g#2 (- 68 24))
(define ab2 (- 68 24))
(define a2 (- 69 24))
(define a#2 (- 70 24))
(define bb2 (- 70 24))
(define b2 (- 71 24))
(define cb2 (- 71 24))

(define c3 (- 60 12))
(define c#3 (- 61 12))
(define db3 (- 61 12))
(define d3 (- 62 12))
(define d#3 (- 63 12))
(define eb3 (- 63 12))
(define e3 (- 64 12))
(define f3 (- 65 12))
(define f#3 (- 66 12))
(define gb3 (- 66 12))
(define g3 (- 67 12))
(define g#3 (- 68 12))
(define ab3 (- 68 12))
(define a3 (- 69 12))
(define a#3 (- 70 12))
(define bb3 (- 70 12))
(define b3 (- 71 12))
(define cb3 (- 71 12))

(define c4 60)
(define c#4 61)
(define db4 61)
(define d4 62)
(define d#4 63)
(define eb4 63)
(define e4 64)
(define f4 65)
(define f#4 66)
(define gb4 66)
(define g4 67)
(define g#4 68)
(define ab4 68)
(define a4 69)
(define a#4 70)
(define bb4 70)
(define b4 71)
(define cb4 71)

(define c5 (+ 60 12))
(define c#5 (+ 61 12))
(define db5 (+ 61 12))
(define d5 (+ 62 12))
(define d#5 (+ 63 12))
(define eb5 (+ 63 12))
(define e5 (+ 64 12))
(define f5 (+ 65 12))
(define f#5 (+ 66 12))
(define gb5 (+ 66 12))
(define g5 (+ 67 12))
(define g#5 (+ 68 12))
(define ab5 (+ 68 12))
(define a5 (+ 69 12))
(define a#5 (+ 70 12))
(define bb5 (+ 70 12))
(define b5 (+ 71 12))
(define cb5 (+ 71 12))

(define c6 (+ 60 24))
(define c#6 (+ 61 24))
(define db6 (+ 61 24))
(define d6 (+ 62 24))
(define d#6 (+ 63 24))
(define eb6 (+ 63 24))
(define e6 (+ 64 24))
(define f6 (+ 65 24))
(define f#6 (+ 66 24))
(define gb6 (+ 66 24))
(define g6 (+ 67 24))
(define g#6 (+ 68 24))
(define ab6 (+ 68 24))
(define a6 (+ 69 24))
(define a#6 (+ 70 24))
(define bb6 (+ 70 24))
(define b6 (+ 71 24))
(define cb6 (+ 71 24))

(define c7 (+ 60 36))
(define c#7 (+ 61 36))
(define db7 (+ 61 36))
(define d7 (+ 62 36))
(define d#7 (+ 63 36))
(define eb7 (+ 63 36))
(define e7 (+ 64 36))
(define f7 (+ 65 36))
(define f#7 (+ 66 36))
(define gb7 (+ 66 36))
(define g7 (+ 67 36))
(define g#7 (+ 68 36))
(define ab7 (+ 68 36))
(define a7 (+ 69 36))
(define a#7 (+ 70 36))
(define bb7 (+ 70 36))
(define b7 (+ 71 36))
(define cb7 (+ 71 36))

(define c8 (+ 60 48))
(define c#8 (+ 61 48))
(define db8 (+ 61 48))
(define d8 (+ 62 48))
(define d#8 (+ 63 48))
(define eb8 (+ 63 48))
(define e8 (+ 64 48))
(define f8 (+ 65 48))
(define f#8 (+ 66 48))
(define gb8 (+ 66 48))
(define g8 (+ 67 48))
(define g#8 (+ 68 48))
(define ab8 (+ 68 48))
(define a8 (+ 69 48))
(define a#8 (+ 70 48))
(define bb8 (+ 70 48))
(define b8 (+ 71 48))
(define cb8 (+ 71 48))


;;
;; some midi helpers
;;

(define midi2frq
  (lambda (pitch)
    (if (<= pitch 0.0) 0.0
        (* 440.0 (expt 2.0 (/ (- pitch 69.0) 12.0))))))

(define frq2midi
  (lambda (freq)
    (if (<= freq 0.0) 0.0
        (+ (* 12.0 (/ (log (/ freq 440.0)) (log 2))) 69.0))))
