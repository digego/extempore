;;; distributed OSC clock (core)
;;
;; follows the TOPLAP CLOCK and SYNC specifications
;;
;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;;; Code:

;; lib-loading config

;; This code makes the following assumptions

;; firstly that ip address and port information
;; are avilable to osc:receive

;; secondly that broadcasting on "255.255.255.255" is
;; available on the current network.

;; toplap clock port
(define *toplap-clock-server-port* 5155)
(define *toplap-clock-client-port* 5156)
(define *toplap-sync-port* 5157)
;; election value
(define *election-val* (random))
;; master?
(define *master* #f)
;; master ip (something valid to start with)
(define *masterip* "127.0.0.1") ;;
(define *oldmasterip* "127.0.0.1") ;; something valid
;; the time of the last stream message
;; from the current master
;; give ouselves 1 second breathing room
;; for startup
(define *toplap-lastmsg* (+ 1. (clock:clock)))
;; did we win!
(define *election-winner* #f)
(define *toplap-clock-server* (cons "127.0.0.1" *toplap-clock-server-port*))
(define *toplap-clock-client* (cons "127.0.0.1" *toplap-clock-client-port*))
(define *toplap-sync-server* (cons "127.0.0.1" *toplap-sync-port*))
(define *toplap-sync-broadcast* (cons "255.255.255.255" *toplap-sync-port*))
(define *toplap-print-stream* #f)
(define *toplap-clock-global-offset* 0.0)
(define *clock-oldbpm* (*metro* 'get-tempo))
(define *clock-oldcycle* 4)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; helper functions

(define join-clock-time
  (lambda (s n)
    (+ s (/ n 1000000000.))))

(define split-clock-time
  (lambda (t)
    (cons (real->integer t)
          (real->integer (* 1000000000.0 (modulo t 1.0))))))

;;;;;;;;;;;;;;;;;;;;;;;
;; OSC servers

;; have OSC emit both source IP and PORT
(io:osc:netaddress? #t)

(define sync-server-receive
  (lambda (timestamp address srcip srcport . args)
    (cond ((string=? address "/clock/election/q")
           ;; someone has asked for an election!
           ;; if we have a higher election-val OR we are allready the master
           ;; then send a message back, otherwise don't!
           (let ((election-val (car args)))
             (if (or *master*
                     (> *election-val* election-val))
                 (io:osc:send (now) (cons srcip srcport) "/clock/election/r"))))
          ((string=? address "/clock/election/r")
           ;; if we receive an election reply
           ;; then we are definitely NOT the master
           ;; also don't try for re-election again
           ;; for AT LEAST 5 seconds!
           (set! *toplap-lastmsg* (+ 5. (clock:clock)))
           (set! *election-winner* #f))
          ((string=? address "/clock/sync/q")
           ;; if someone asks for a clocksync (from any IP and any PORT)
           ;; and we are the master then send a reply
           ;; first arg is t1 (from client) we add t2 to reply
           (if *master*
               (let ((t (split-clock-time (clock:clock))))
                 (io:osc:send (now) (cons srcip srcport) "/clock/sync/r"
                              (car args) (cadr args)
                              (car t) (cdr t)))))
          ((string=? address "/clock/sync/r")
           ;; clock syncs come from current master
           (let* ((t1 (join-clock-time (car args) (cadr args)))
                  (t2 (join-clock-time (caddr args) (cadddr args)))
                  (t3 t2)
                  (t4 (clock:clock))
                  (msg-delay (- t4 t1))
                  (offset (/ (+ (- t2 t1) (- t3 t4)) 2.0)))
             (set! *toplap-clock-global-offset* offset)
             (set! *masterip* srcip)
             (if (not (string=? *masterip* *oldmasterip*))
                 (begin (ascii-print-color 0 5 9)
                        (println)
                        (println 'There 'is 'a 'new 'toplap 'clock 'in 'town! srcip)
                        (println)
                        (ascii-print-color 0 7 9)
                        (set! *master* #f)
                        (set! *oldmasterip* *masterip*)))
             (set! *toplap-lastmsg* (clock:clock))))
          ((string=? address "/clock/master/q")
           ;; if current master send reponse
           ;; srcport need not be same as *toplap-port*
           (if *master*
               (io:osc:send (now) (cons srcip srcport) "/clock/master/r")))
          ((string=? address "/clock/master/r")
           ;; if we get a message it must be from master
           ;; so we can set the *mastersip* to whatever the srcip is
           (set! *mastersip* srcip)) ;; master port must be *toplap-clock-port*
          ((string=? address "/clock/cycle/set")
           ;; cycle changes are sent to master only (i.e. not broadcast)
           ;; to ensure that we don't have the problem where some
           ;; clients GET the message but the master DOESN'T!
           (if *master*
               (let ((beat-n (car args))
                     (beat-d (cadr args))
                     (cycle (caddr args)))
                 (*metro* 'set-cycle cycle (/ beat-n beat-d))
                 ;; broadcast new bpm details as cycle/update
                 (io:osc:send (now) *toplap-sync-broadcast* "/clock/cycle/update"
                              beat-n beat-d cycle))))
          ((string=? address "/clock/cycle/update")
           (apply io:osc:send (now) *toplap-clock-server* "/clock/cycle/update" args))
          ((string=? address "/clock/bpm/set")
           ;; bpm changes are sent to master only (i.e. not broadcast)
           ;; to ensure that we don't have the problem where some
           ;; clients GET the message but the master DOESN'T!
           (if *master*
               (let ((time (join-clock-time (car args) (cadr args)))
                     (beat-n (caddr args))
                     (beat-d (cadddr args))
                     (bpm (car (cddddr args))))
                 (*metro* 'set-tempo bpm (clock->samples time) (/ beat-n beat-d))
                 ;; broadcast new bpm details as bpm/update
                 (io:osc:send (now) *toplap-sync-broadcast* "/clock/bpm/update"
                              (car args) (cadr args) beat-n beat-d bpm))))
          ((string=? address "/clock/bpm/update")
           (apply io:osc:send (now) *toplap-clock-server* "/clock/bpm/update" args))
          (else (println 'bad 'osc 'message: address)))))


(define clock-server-receive
  (lambda (timestamp address srcip srcport . args)
    (cond ((string=? address "/clock/bpm/set")
           (apply io:osc:send (now) *toplap-sync-server* "/clock/bpm/set" args))
          ((string=? address "/clock/bpm/update") ;; bpm/update may come from SYNC!
           ;; pass update to client
           (apply io:osc:send (now) *toplap-clock-client* "/clock/bpm/update" args)
           ;; and also apply locally in case client is not extempore!
           (let ((time (join-clock-time (car args) (cadr args)))
                 (beat-n (caddr args))
                 (beat-d (cadddr args))
                 (bpm (car (cddddr args))))
             (if (and (not *master*) (<> bpm *clock-oldbpm*))
                 (begin
                   (set! *clock-oldbpm* bpm)
                   (*metro* 'set-tempo bpm (clock->samples time) (/ beat-n beat-d))))))
          ((string=? address "/clock/cycle/set")
           (apply io:osc:send (now) *toplap-sync-server* "/clock/cycle/set" args))
          ((string=? address "/clock/cycle/update") ;; cycle/update may come from SYNC!
           ;; pass update onto client
           (apply io:osc:send (now) *toplap-clock-client* "/clock/cycle/update" args)
           ;; and also apply locally in case client is not extempore!
           (let ((beat-n (car args))
                 (beat-d (cadr args))
                 (cycle (caddr args)))
             (if (and (not *master*) (<> cycle *clock-oldcycle*))
                 (begin
                   (set! *clock-oldcycle* cycle)
                   (*metro* 'set-cycle cycle (/ beat-n beat-d))))))
          ((string=? address "/clock/offset/q")
           ;; retrieve clock offset
           (let ((offset (split-clock-time *toplap-clock-global-offset*)))
             (io:osc:send (now) (cons srcip srcport) "/clock/offset/r"
                          (car offset) (cdr offset))))
          ((string=? address "/clock/state/q")
           (let* ((bpmmark (*metro* 'get-mark))
                  (bpmtime (split-clock-time (car mark)))
                  (bpm-beat (cdr mark))
                  (bpm (*metro* 'get-tempo))
                  (cycle (*metro* 'get-cycle))
                  (cycle-beat (*metro* 'get-cycle-mark)))
             ;; retieve state of the world!
             (io:osc:send (now) *toplap-clock-client* "/clock/state/r"
                          (car bpmtime) (cdr bpmtime)
                          (rational->n bpm-beat) (rational->d bpm-beat)
                          bpm
                          (rational->n cycle-beat) (rational->d cycle-beat)
                          cycle)))
          (else (println 'bad 'osc 'message: address))))))


(define clock-client-receive
  (lambda (timestamp address srcip srcport . args)
    (cond ((string=? address "/clock/bpm/update")
           ;; bpm/update is same as bpm/set but is a broadcast
           ;; call from the master
           ;; (i.e. we don't care so much if this UDP packet gets lost
           (let ((time (join-clock-time (car args) (cadr args)))
                 (beat-n (caddr args))
                 (beat-d (cadddr args))
                 (bpm (car (cddddr args))))
             (if (and (not *master*) (<> bpm *clock-oldbpm*))
                 (begin
                   (set! *clock-oldbpm* bpm)
                   (*metro* 'set-tempo bpm (clock->samples time) (/ beat-n beat-d))))))
          ((string=? address "/clock/cycle/update")
           ;; bpm/update is same as bpm/set but is a broadcast
           ;; call from the master
           ;; (i.e. we don't care so much if this UDP packet gets lost
           (let ((beat-n (car args))
                 (beat-d (cadr args))
                 (cycle (caddr args)))
             (if (and (not *master*) (<> cycle *clock-oldcycle*))
                 (begin
                   (set! *clock-oldcycle* cycle)
                   (*metro* 'set-cycle cycle (/ beat-n beat-d))))))
          ((string=? address "/clock/offset/r")
           ;; retrieve clock offset
           (let ((offset (join-clock-time (car args) (cadr args))))
             (clock:adjust-offset offset)))
          ((string=? address "/clock/state/r")
           (let ((bpmtime (join-clock-time (car args) (cadr args)))
                 (bpmbeat (/ (caddr args) (cadddr args)))
                 (bpm (car (cddddr args)))
                 (cyclebeat (/ (cadr (cddddr args)) (caddr (cddddr args))))
                 (cycle (cadddr (cddddr args))))
             (println 'bpmtime: bpmtime 'bpmbeat: bpmbeat 'bpm: bpm
                      'cyclebeat: cyclebeat 'cycle: cycle)))
          (else (println 'bad 'osc 'message: address))))))

(io:osc:start-server *toplap-clock-client-port* "clock-client-receive")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; sync service calls


;; call a general election!
;; this is a broadcast call
;; if there is an existing master
;; that master will continue in the rolw
;; if there is NO master then the peer
;; with the highest *election-val* will
;; become the new master.
(define toplap-clock-election
  (lambda ()
    ;; assume we won :)
    (set! *election-winner* #t)
    (ascii-print-color 0 5 9)
    (println 'Nominating 'myself 'in 'toplap 'clock 'election!)
    (ascii-print-color 0 7 9)
    ;; send message to the world!
    (io:osc:send (now) *toplap-sync-broadcast* "/clock/election/q" *election-val*)
    ;; wait 4 seconds to find out if we really won!
    ;; if we didn't someone will have forced our
    ;; *election-winner* to #f
    (sys:sleep (* *au:samplerate* 4.0))
    (if *election-winner*
        (begin
          (set! *master* #t)
          (ascii-print-color 1 5 9)
          (println 'Which 'I 'Won!)
          (ascii-print-color 0 7 9))
        (begin
          (ascii-print-color 1 5 9)
          (println 'Which 'I 'lost!)
          (ascii-print-color 0 7 9)))
    (set! *election-winner* #f)))

;; a regular sync to the current master clock
;; this loop is run by all clients
;; (including the master!)
;;
;; also *toplap-lastsync* should never be
;; more than 1/2 second old..
;; if we get to more than 2 seconds old call
;; a general election!  because the master
;; must have died!
(define toplap-clock-sync
  (lambda ()
    (let ((t (split-clock-time (clock:clock))))
      (io:osc:send (now) (cons *masterip* *toplap-sync-port*) "/clock/sync/q"
                   (car t) (cdr t)))
    ;; if not master and last streamed message
    ;; was more than 3 seconds ago
    ;; then call a general election!
    (if (and (not *master*)
             (> (- (clock:clock) *toplap-lastmsg*) 3.0))
        (toplap-clock-election))
    (callback (+ (now) 10000) 'toplap-clock-sync)))

;; we DON'T start the clock-server automatically
;; in case someone wants to run an external clock server
(define clock-runsync
  (lambda ()
    (io:osc:start-server *toplap-clock-server-port* "clock-server-receive")
    (io:osc:start-server *toplap-sync-port* "clock-sync-receive")
    (callback (+ (now) 22050) 'toplap-clock-sync)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; client side public function calls

;; sends OSC message /clock/bpm/set to current master
(define clock-set-bpm
  (lambda (time beat bpm)
    (let ((t (split-clock-time (samples->clock time))))
      (io:osc:send (now) *toplap-clock-server* "/clock/bpm/set"
                   (car t) (cdr t)
                   (rational->n beat) (rational->d beat) bpm))))

(define clock-set-cycle
  (lambda (bpm cycle)
    (io:osc:send (now) *toplap-clock-server* "/clock/cycle/set"
                 (rational->n beat) (rational->d beat) cycle)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(ascii-print-color 0 5 9)
(println)
(println 'Started 'TOPLAP Clock!)
(println 'Call '(clock-runsync) 'to 'start 'TOPLAP 'SYNC 'services)
(ascii-print-color 0 7 9)
(println)
