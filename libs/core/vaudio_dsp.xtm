;;; vaudio_dsp.xtm -- SIMD audio DSP library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; Please keep in mind that these functions
;; are provided as EXAMPLES ONLY.  They are
;; things that I've thown together and are
;; not to be considered "production" in any way.
;; In particular they are very very inefficient!!
;;
;; Please feel free to fix things and contribute
;; extra juicy bits and pieces
;;
;; Contains:
;; Sine, Square, Saw, Pulse waves
;; Delay, TapDelay, Comb (variable length delay)
;; AllPass, Reverb, Flanger and Chorus
;; LowPass, HighPass, BandPass and Notch filters
;; BitCrusher

;;; Code:

;; lib-loading config
(sys:load-preload-check 'vaudio_dsp)
(sys:load-preload-check 'audio_dsp)
(define *xtmlib-vaudio_dsp-loaded* #t)

;; do you want to compile multichannel extensions
;; usually NOT
(define *build-multi-chan* #t)

;; bind some global audio values
(if (not (impc:ti:globalvar-exists? "SAMPLERATE"))
    (begin (bind-val SAMPLERATE double (integer->real *au:samplerate*))
           (bind-val SR double (integer->real *au:samplerate*))))
(if (not (impc:ti:globalvar-exists? "CHANNELS"))
    (bind-val CHANNELS i64 *au:channels*))
(if (not (impc:ti:globalvar-exists? "IN_CHANNELS"))
    (bind-val IN_CHANNELS i64 *au:in-channels*))
(if (not (impc:ti:globalvar-exists? "FRAMES"))
    (bind-val FRAMES i64 *au:block-size*))
(if (not (impc:ti:globalvar-exists? "VFRAMES"))
    (bind-val VFRAMES i32 (* (/ *au:block-size* 4)
                             *au:channels*)))

;; some scalar constants
(define *srflt* (llvm:convert-float (number->string (integer->real *samplerate*))))
(define *pi* (llvm:convert-float (number->string pi)))
(define *2pi* (llvm:convert-float (number->string (* 2.0 pi))))
(bind-val SRf float *srflt*)
(bind-val PIf float *pi*)
(bind-val TWOPIf float *2pi*)

(bind-alias VDSP [void,float*,float*,float,i8*]*)

(bind-func print_audio_state
  (lambda ()
    (printf "    FRAMES: %lld\n" FRAMES)
    (printf "   VFRAMES: %d\n" VFRAMES)
    (printf " OUT CHANS: %lld\n" CHANNELS)
    (printf "  IN CHANS: %lld\n" IN_CHANNELS)
    (printf "SAMPLERATE: %f\n" SAMPLERATE)))

(print_audio_state)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; silence
(bind-func dsp:VDSP
  (let ((i 0))
    (lambda (in out time dat)
      (dotimes (i FRAMES)
        (pset! out i 0.0))
      void)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; vector helpers

;; zone allocate a v4 from scalar val
;; v4val expects to be zone allocated
(bind-func v4val
  (lambda (val:float)
    (let ((v4:/4,float/* (alloc)))
      (vfill! v4 val val val val)
      v4)))

;; v4fabsf expects stack allocation use
(bind-func v4fabsf
  (lambda (x:/4,float/*)
    (let ((i 0) (y:/4,float/* (salloc)))
      (dotimes (i 4)
        (vset! y i (fabsf (vref x i))))
      y)))

(bind-func v4sum
  (lambda (x:/4,float/*)
    (+ (vref x 0) (vref x 1) (vref x 2) (vref x 3))))


;; gaussian random number X ~ N(0,1)
;; algorithm by Marsaglia http://c-faq.com/lib/gaussian.html

(bind-func dsp_randn
  (let ((phase 0))
    (lambda ()
      (let ((u1 (random))
      (u2 (random))
      (v1 (- (* 2.0 u1) 1.0))
      (v2 (- (* 2.0 u2) 1.0))
      (s (+ (* v1 v1) (* v2 v2))))
  (if (= phase 0)
      (if (or (> s 1.0) (= s 0.0) (= s 1.0))
    (dsp_randn)
    (* v1 (sqrt (/ (* -2.0 (log s)) s))))
      (begin (set! phase (- 1 phase))
       (* v2 (sqrt (/ (* -2.0 (log s)) s)))))))))

;; high limit
;; low limit
;; then value
(bind-func range_limit
  (lambda (h:double l:double v:double)
    (if (< v l) l
  (if (> v h) h
      v))))


;; x values must fall within the range -PI ... PI
(bind-func _sin
  (let ((i 0)
        (p (v4val 0.225))
  (b (v4val (/ 4.0 PIf)))
        (y:/4,float/* (zalloc))
  (c (v4val (/ -4.0 (* PIf PIf)))))
    (lambda (x:/4,float/*)
      (pset! y 0 (+ (* b x) (* c x (v4fabsf x))))
      (pset! y 0 (+ (* p (- (* y (v4fabsf y)) y)) y))
      y)))

;; (bind-func osc_c
;;   (lambda (phase)
;;     (lambda (amp freq)
;;       (let ((inc (* TWOPI (/ freq SAMPLERATE))))
;;  (set! phase (+ phase inc))
;;  (* amp (sin phase))))))


(bind-func oscv_c
  (lambda (phase)
    (let ((i 0)
          (y:/4,float/* (alloc))
          (vphase:/4,float/* (alloc))
          (srv (v4val SAMPLE_RATE))
          (twopiv (v4val TWOPIf))
          (inc:/4,float/* (alloc)))
      (vset! vphase 0 phase)
      (lambda (amp:/4,float/* freq:/4,float/*)
        (pset! inc 0 (* twopiv (/ freq srv)))
        (dotimes (i 4)
          (vset! vphase i phase)
          (set! phase (+ phase (vref inc i)))
          (if (> phase PIf) (set! phase (- phase TWOPIf))))
        (pset! y 0 (* amp (_sin vphase)))
        y))))

(bind-func oscv_mc_c
  (lambda (phase chans)
    (let ((i:i32 0) (p 0)
          (y:/4,float/* (alloc))
          (vphase:/4,float/* (alloc))
          (srv (v4val SAMPLE_RATE))
          (twopiv (v4val TWOPIf)))
      (vset! vphase 0 phase)
      (lambda (amp:/4,float/* freq:/4,float/*)
        (let ((inc (* TWOPIf (/ (vref freq 0) SAMPLE_RATE))))
          (dotimes (i 4)
            (vset! vphase i phase)
            (if (= (% p chans) 0)
                (begin (set! phase (+ phase inc))
                       (if (> phase PIf) (set! phase (- phase TWOPIf)))))
            (set! p (+ p 1)))
          (pset! y 0 (* amp (_sin vphase)))
          y)))))

(define *xtmlib-vaudio_dsp-loaded* #t)
