;;; instruments-scm.xtm -- scheme code for libs/core/instruments.xtm library

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;

;;; Code:

(define play-note
  (lambda (time inst pitch vol dur . args)
    (let* ((nargs (length args))
           (duration dur)
           (dargs (sys:make-cptr (* (if (audio_64bit) 8 4) nargs))) ;; doubles
           (native (if (procedure? inst)
                       (llvm:get-native-closure (llvm:ffi-get-name inst))
                       (llvm:get-native-closure (if (symbol? inst)
                                                    (symbol->string inst)
                                                    inst)))))
      (if (= (audio_64bit) 1)
          (dotimes (i nargs) (cptr:set-double dargs (* i 8) (eval (list-ref args i))))
          (dotimes (i nargs) (cptr:set-float dargs (* i 4) (eval (list-ref args i)))))
      (if (cptr? native)
          (xtm_play_note (real->integer time)
                      native
                      (midi2frq (* 1.0 pitch))
                      (/ (exp (/ vol 26.222)) 127.0)
                      (real->integer duration)
                      nargs
                      dargs)
          (print-error 'No 'inst 'named (symbol->string inst))))))


;; the play macro
(macro (play args)
       (if (symbol? (cadr args))
           `(play-note (*metro* beat) ,(cadr args) ,(caddr args) ,(cadddr args) (*metro* 'dur ,(car (cddddr args)))
                       ,@(cdr (cddddr args)))
           `(play-note (*metro* (+ beat ,(cadr args))) ,(caddr args) ,(cadddr args) ,(car (cddddr args))
                       (*metro* 'dur ,(car (cdr (cddddr args))))
                       ,@(cddr (cddddr args)))))


(define-macro (playob o b . args)
  `(if (= 0 (modulo (+ ,o beat) ,b))
       (play ,@args)
       #f))

(define-macro (playobs l b . args)
  `(if (member (modulo beat ,b) ,l)
       (play ,@args)
       #f))

;; play pattern
;;
;; (playp "x x " 2 sampler 120 dur)
;; (playp ". -x . x" 2 sampler 120 dur)
;; 
(define-macro (playp str l . args)
  `(let ((res (cl:member-if (lambda (x)
                              (equal? (car x) (modulo beat ,l)))
                            ',(map (lambda (c r)
                                     (list (if (equal? c #\ ) #f r)
                                           (cdr (assoc c '((#\ . 0)
                                                           (#\x . 60)
                                                           (#\o . 67)
                                                           (#\- . 66)
                                                           (#\. . 69))))))
                                   (string->list str)
                                   (range 0 l (/ l (string-length str)))))))
     (if res 
         (play ,(car args)
               (cadar res)
               ,@(cdr args))
         #f)))


;; a macro for making extemore instruments
;; see http://benswift.me/2012-09-28-making-an-instrument.html

(define-macro (bind-instrument name note_kernel effect_kernel . args)
  `(bind-func ,name
     (let* ((poly:i64 48)
            (notes:[SAMPLE,SAMPLE,i64,i64]** (zalloc poly))
            (attack:i64 200)
            (decay:i64 200)
            (release:i64 1000)
            (sustain:SAMPLE 0.6) ;; amplitude of the sustain
            (gain 2.0)
            (ii 0)
            (note_starts:i64* (zalloc poly))
            (new_note (lambda (start:i64 freq:SAMPLE dur:i64 amp:SAMPLE nargs:i64 dargs:SAMPLE*)
                        (let ((free_note:i64 -1)
                              (iii 0)
                              (i 0))
                          (dotimes (i poly) ;; check for free poly spot
                            ;;(printf "%d:%f\n" i (ftod (pref note_starts i)))
                            (if (> (pref note_starts i) 9999999999998)
                                (set! free_note i)))
                          (if (> free_note -1) ;; if we found a free poly spot assign a note
                              (let ((note_zone (push_new_zone (* 1024 ,(if (null? args) 10 (car args)))))
                                    (initdata (NoteInitData start freq amp dur attack decay release sustain)))
                                (pset! notes free_note
                                       (note_c start freq amp dur
                                               attack decay release sustain
                                               note_starts free_note
                                               (,note_kernel initdata nargs dargs)
                                               note_zone))
                                (pset! note_starts free_note start)
                                (pop_zone)
                                1)
                              0)))))
       (dotimes (ii poly) ;; sets all notes to inactive
         (pset! note_starts ii 9999999999999))
       (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
         (let ((out:SAMPLE 0.0)
               (k 0))
           (dotimes (k poly) ;; sum all active notes
             (if (< (pref note_starts k) time)
                 (set! out (+ out (* 0.3 ((pref notes k) in time chan))))))
           (* gain (,effect_kernel out time chan dat)))))))

;; this is an alias for compatibility - but don't use it in new code
(define define-instrument bind-instrument)

(if (not (sys:precomp:currently-compiling?))
    (begin
      (eval '(bind-val Metro Metronome*)
            (interaction-environment))
      (eval
       '(bind-func metro_init
          (lambda (bpm:double offset:i64 n:i64 d:i64)
            (if (not (null? Metro)) (hfree Metro))
            (set! Metro (hcopy (MakeMetro_4 bpm offset n d)))
            void))
       (interaction-environment))
      (metro_init 120. 0 0 1)
      (sys:load "libs/core/pc_ivl.xtm")))
