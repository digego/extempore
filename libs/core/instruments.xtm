;;; instruments.xtm -- instruments (core)

;; Author: Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; This is for instruments which are solely written in scheme and
;; xtlang - no binding to external (that is, C) libraries.
;;
;; Any instruments which depend on external libraries are
;; in libs/external/instruments_ext.xtm

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/instruments.xtm" 'quiet))
(sys:load-preload-check 'instruments)

(define *xtmlib-instruments-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/audio_dsp.xtm"))
(impc:aot:insert-forms (sys:load "libs/core/audio_dsp.xtm" 'quiet))

(impc:aot:insert-header "xtminstruments")
(impc:aot:import-ll "xtminstruments")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; making a polyphonic instrument
;;

(bind-val MAXPOLYPHONY i64 32)

;; Structure for init values of each note
;; re-starttime is for voicesteeling
;; idx(0) start(1) freq(2) amp(3) dur(4) gate(5) active(6) re-starttime(7) zone(8)
(bind-type NoteData <i64,i64,SAMPLE,SAMPLE,i64,SAMPLE,i1,i64,i8*>)

(bind-func static note_idx (lambda (data:NoteData*) (tref data 0)))
(bind-func static note_starttime (lambda (data:NoteData*) (tref data 1)))
(bind-func static note_frequency (lambda (data:NoteData*) (tref data 2)))
(bind-func static note_amplitude (lambda (data:NoteData*) (tref data 3)))
(bind-func static note_duration (lambda (data:NoteData*) (tref data 4)))
(bind-func static note_gate_get (lambda (data:NoteData*) (tref data 5)))
(bind-func static note_gate_set (lambda (data:NoteData* value) (tset! data 5 value)))
(bind-poly note_gate note_gate_get)
(bind-poly note_gate note_gate_set)
(bind-func static note_active_get (lambda (data:NoteData*) (tref data 6)))
(bind-func static note_active_set (lambda (data:NoteData* value) (tset! data 6 value)))
(bind-poly note_active note_active_get)
(bind-poly note_active note_active_set)
(bind-func static note_restarttime (lambda (data:NoteData*) (tref data 7)))
(bind-func static note_zone (lambda (data:NoteData*) (cast (tref data 8) mzone*)))

(bind-alias INSTRUMENT [SAMPLE,SAMPLE,i64,i64,SAMPLE*]*)
(bind-alias NOTE_KERNEL [[SAMPLE,i64,i64]*,NoteData*,i64,SAMPLE*]*)
(bind-alias FX_KERNEL [SAMPLE,SAMPLE,i64,i64,SAMPLE*]*)

(bind-func instrument_find_note
  (lambda (notes:NoteData** lgth)
    (let ((idx 0)
          (i 0)
          (old (note_starttime (pref notes 0)))
          (active #f)
          (starttime 0)
          (go #t))
      (while (= #t go)
        (set! starttime (note_starttime (pref notes i)))
        (if (< starttime old)
            (begin (set! old starttime) (set! idx i)))
        (set! active (note_active (pref notes i)))
        (if (not active)
            (begin (set! idx i) (set! go #f)))
        ;; (println '-- i (note_active (pref notes i)) (note_refcnt (pref notes i)))
        (set! i (+ i 1))
        (if (= i lgth) (set! go #f))
        void)
      ;; (println "note:" idx (note_active (pref notes idx)) (note_refcnt (pref notes idx)))
      (pref notes idx))))


(bind-func make_instrument
  (lambda (note_kernel:NOTE_KERNEL effect_kernel:FX_KERNEL)
    (effect_kernel.notekernel:NOTE_KERNEL note_kernel)
    (let* ((maxpoly:i64 MAXPOLYPHONY)
           (tmp_active:i64 0)
           (numactive:i64 0)
           (poly:i64 maxpoly)
           (notes:NoteData** (zalloc poly))
           (note_event_buf:i64 10)
           (note_events:<i64,SAMPLE,SAMPLE,i64,NoteData*>* (alloc note_event_buf))
           (note_event:<i64,SAMPLE,SAMPLE,i64,NoteData*>* null)
           (note_event_b:<i64,SAMPLE,SAMPLE,i64,NoteData*>* null)
           (note_event_c:<i64,SAMPLE,SAMPLE,i64,NoteData*>* null)
           (note_event_in_idx:i64 0)
           (note_event_out_idx:i64 0)
           (note_event_out_idx_b:i64 0)
           (note_event_out_idx_c:i64 0)
           (note_event_out_time:i64 #x0FFFFFFFFFFFFFFF)
           (note_event_out_time_b:i64 #x0FFFFFFFFFFFFFFF)
           (note_event_out_time_c:i64 #x0FFFFFFFFFFFFFFF)
           (note_event_note:NoteData* null)
           (note:NoteData* null)
           (kernels:[SAMPLE,i64,i64]** (zalloc poly))
           (kernel:[SAMPLE,i64,i64]* null)
           (nullkernel:[SAMPLE,i64,i64]* null)
           (starttime:i64 0)
           (out:SAMPLE 0.0)
           (zzone:mzone* null)
           (k:i64 0) (i:i64 0) (j:i64 0)
           (new_note (lambda (start:i64 freq:SAMPLE dur:i64 amp:SAMPLE nargs:i64 dargs:SAMPLE*)
                       (let ((free_note (instrument_find_note notes poly))
                             (idx (note_idx free_note))
                             (zone (note_zone free_note)))
                         (if (null? free_note)
                             null
                             (if (or (note_active free_note) #f) ;; (> (note_refcnt free_note) 0))
                                 (begin ;; resuse existing kernel
                                   ;; (println "A idx:" (note_idx free_note) start freq amp dur)
                                   (set! kernel (pref kernels (note_idx free_note)))
                                   (tset! free_note 2 freq)
                                   (tset! free_note 3 amp)
                                   (tset! free_note 4 dur)
                                   (tset! free_note 5 1.0)
                                   (tset! free_note 7 start)
                                   (cset! (cast kernel [void]*) data free_note NoteData*)
                                   ;; existing kernel is still in use!
                                   free_note)
                                 (begin ;; create new kernel
                                   ;; (println "B idx:" (note_idx free_note) start freq amp dur)
                                   (reset_zone zone)
                                   (push_zone zone)
                                   ;; initialize kernel with active set to #f
                                   (tfill! free_note idx start freq amp dur 1.0 #f start (cast zone i8*))
                                   ;; init new kernel
                                   (pset! kernels idx (note_kernel free_note nargs dargs))
                                   ;; activate to true once kernel is valid
                                   (note_active free_note #t) ;; don't activate until kernel is valid!
                                   (pop_zone)
                                   free_note)))))))
      ;; init note events
      (dotimes (i 10)
        (tfill! (pref-ptr note_events i) #x0FFFFFFFFFFFFFFF 0.0 0.0 0 null))
      ;; init notes
      (dotimes (i poly)
        (pset! kernels i (cast null))
        (pset! notes i (NoteData i 0 0.0 0.0 0 1.0 #f 0 (cast (create_zone (* 10 1024))))))
      ;; sum all active note kernels and then process through effect kernel
      (lambda (in:SAMPLE time:i64 chan:i64 dat:SAMPLE*)
        (set! out 0.0)
        (set! tmp_active 0)
        (dotimes (k poly) ;; sum all active notes
          (set! note (pref notes k))
          (set! starttime (tref note 1)) ;; tref (faster)
          (if (not (tref note 6)) ;; if not active
              (begin void) ;(tset! note 1 #x0FFFFFFFFFFFFFFF) void) ;; (pset! kernels k nullkernel) void)
              (begin (set! tmp_active (+ tmp_active 1)) void))
          (set! kernel (pref kernels k))
          (if (and (>= time starttime) (tref note 6)) ; (not (null? kernel)))
              (set! out (+ out (* 0.2 (kernel time chan))))))
        (set! numactive tmp_active)
        (effect_kernel out time chan dat)))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; making and playing notes

(bind-func xtm_play_note
  (lambda (time inst:INSTRUMENT freq amp dur nargs:i64 dargs)
    (if (> freq 10.0)
        (let ((f (inst.new_note:[NoteData*,i64,SAMPLE,i64,SAMPLE,i64,SAMPLE*]*))
              (note:NoteData* (f time freq dur amp nargs dargs)))
          note)
        null)))

(bind-func xtm_start_note
  (lambda (time inst:INSTRUMENT freq amp nargs:i64 dargs)
    (if (> freq 10.0)
        (let ((dur 1000000000000)
              (f (inst.new_note:[NoteData*,i64,SAMPLE,i64,SAMPLE,i64,SAMPLE*]*))
              (note:NoteData* (f time freq dur amp nargs dargs)))
          note)
        null)))

(bind-func xtm_stop_note
  (lambda (note:i8*)
    (let ((nd:NoteData* (cast note)))
      (if (not (null? nd))
          (note_active nd #f)))
    void))

(bind-func xtm_release_note
  (lambda (note:i8*)
    (let ((nd:NoteData* (cast note)))
      (if (not (null? nd))
          (note_gate nd 0.0)))
    void))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; play for use with native beat scheduler
;;

(bind-func xtm_play
  (lambda (offset:double bsched:[void]* inst:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]*
                    pitch:double vol:double dur:double
                    num:i64 mem:SAMPLE*)
    (let ((bpm (bsched.bpm)))
      (xtm_play_note (+ (now) (dtoi64 (* offset (/ 60.0 bpm) SRd)))
                     inst
                     (midi2frq (convert pitch))
                     (convert (/ (exp (/ vol 26.222)) 127.0))
                     (dtoi64 (* dur (/ 60.0 bpm) SRd))
                     num mem))))

;;;;;;;;;;;;;;;;;;;;;

;; load the scheme macros (e.g. bind-instrument)
(sys:load "libs/core/instruments-scm.xtm")
;; make sure we load them with AOT-compiled code as well
(impc:aot:insert-forms
 (sys:load "libs/core/instruments-scm.xtm"))

;; load global instrument params (and build into aot)
(sys:load "libs/core/instruments/instrument_params.xtm")

;; load instruments (and build into aot)
(sys:load "libs/core/instruments/fmsynth.xtm")
(sys:load "libs/core/instruments/wavetables.xtm")
(sys:load "libs/core/instruments/analogue.xtm")
(sys:load "libs/core/instruments/dlogue.xtm")
(sys:load "libs/core/instruments/analogue_midi.xtm")

(impc:aot:insert-footer "xtminstruments")

(define *xtmlib-instruments-loaded* #t)
