
;; -> 
;; Use of `->` (the "thread-first" macro) can help make code
;; more readable by removing nesting.
;; Threads the first expr passed to the macro into the first position in the second sexp.
;; Recursively continues to thread the resultant sexp into any further sexp arguments.

(define-macro (-> value . args)
  (if (null? args)
      value
      (let loop ((thread-items args)
                 (transformed value))
        (if (null? thread-items)
            transformed
            (loop 
             (cdr thread-items)
             (insert-at-index 1 (car thread-items) transformed))))))


;; ->>
;; Use of `->>` (the "thread-last" macro) can help make code
;; more readable by removing nesting.
;; Threads the first expr passed to the macro into the last position in the second sexp.
;; Recursively continues to thread the resultant sexp into any further sexp arguments.

(define-macro (->> value . args)
  (if (null? args)
      value
      (let loop ((thread-items args)
                 (transformed value))
        (if (null? thread-items)
            transformed
            (loop 
             (cdr thread-items)
             (insert-at-index (length (car thread-items)) (car thread-items) transformed))))))
