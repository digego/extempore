;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; xobject
;;
;; a super naive object implementation for xtlang
;; currently this is primarily for testing.
;;
;; hopefully will turn into something useful later on :)
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; we need adt
(sys:load "libs/core/adt.xtm")

;;                   name,parent    ,methods
(bind-type xobject_t <i8*,xobject_t*,xlist_t*~<i8*,i8*>*~>)

(bind-func xobj_database
  (let ((aa:i8* (alloc))
        (db (xlist (xpair "____" (xlist (xpair "____" (cast null i8*)))))))
    ;; (xinsert db 1 (xpair "class_test" (xlist (xpair "method_test" (cast null i8*)))))
    (lambda ()
      db)))

(bind-func xobj_add_class
  (lambda (class:i8*)
    (let ((db (xobj_database))
          (dblgth (xlength db))
          (ls (strlen class))
          (classname (halloc (+ 1 ls)))
          (clazz:xlist_t--3163971124910877296* (xdict_find db class)))
      (strcpy classname class)
      (if (null? clazz)
          (xinsert db dblgth (xpair classname (xlist (xpair "____" (cast null i8*))))))
      void)))

(bind-func xobj_class_exists:[i1,i8*]*
  (lambda (class)
    (let ((db:xlist_t--8487158256724425667* (xobj_database))
          (clazz:xlist_t--3163971124910877296* (xdict_find db class)))
      (if (not (null? clazz))
          1
          0))))

(bind-func xobj_add_method
  (lambda (class:i8* method:i8* closure:i8*)
    (let ((db:xlist_t--8487158256724425667* (xobj_database))
          (ls (strlen method))
          (methodname (halloc (+ ls 1)))
          (clazz:xlist_t--3163971124910877296* (xdict_find db class)))
      (strcpy methodname method)
      (if (not (null? clazz))
          (let ((clazzlgth (xlength clazz)))
            (xinsert clazz clazzlgth (xpair methodname closure))))
      void)))

(bind-func xobj_method_exists:[i1,i8*,i8*]*
  (lambda (class method)
    (let ((db (xobj_database))
          (clazz:xlist_t--3163971124910877296* (xdict_find db class)))
      (if (not (null? clazz))
          (let ((res:i8* (xdict_find clazz method)))
            (if (not (null? res)) 1 0))
          0))))

(bind-func xobj_get_method
  (lambda (class:i8* method:i8*)
    (let ((db:xlist_t--8487158256724425667* (xobj_database))
          (clazz:xlist_t--3163971124910877296* (xdict_find db class)))
      (if (not (null? clazz))
          (let ((res:i8* (xdict_find clazz method)))
            (if (not (null? res))
                res
                (cast null)))
          (cast null)))))

(bind-func xobj_print_class
  (lambda (class:i8*)
    (let ((db:xlist_t--8487158256724425667* (xobj_database))
          (clazz:xlist_t--3163971124910877296* (xdict_find db class)))
      (printf "class:%s\n" class)
      (xmap (lambda (p)
              (let ((mn (xfirst p))
                    (mp (xsecond p)))
                (printf "\tmethod:%s -> closure:%p\n" mn mp)))
            clazz)
      1)))

(bind-func xobj_print_classes
  (lambda ()
    (let ((db:xlist_t--8487158256724425667* (xobj_database)))
      (xmap (lambda (p) (xobj_print_class (xfirst p))) db)
      void)))

(define-macro (bind-object name . slots)
  (if (= 0 (xobj_class_exists (symbol->string name)))
      (let* ((obj_type (string-append "xobj_" (symbol->string name) "_t"))
             (obj_name (string-append "xobj_" (symbol->string name)))
             (slots_ (map (lambda (s) (regex:split (symbol->string s) ":")) slots))
             (slots (append (list (list "_xobj_name" "i8*"))
                            (list (list "_xobj_parent" "xobject_t*"))
                            (list (list "_methods" "xlist_t*~<i8*,i8*>*~"))
                            slots_))
             (bindtype (list 'bind-type (string->symbol obj_type)
                             (string->symbol
                              (string-append "<" (cadr (car slots))
                                             (apply string-append
                                                    (map (lambda (k) (string-append "," (cadr k)))
                                                         (cdr slots)))
                                             ">"))))
             (constructor1 (list 'bind-func (string->symbol
                                             (string-append obj_name
                                                            "_1:[" obj_type "*]*"))
                                 `(lambda () (let ((obj (halloc)))
                                          (tset! obj 0 ,(symbol->string name))
                                          obj))))
             (constructor1poly (list 'bind-poly 'xobj_build (string->symbol (string-append obj_name "_1"))))
             (constructor2 (list 'bind-func (string->symbol
                                             (string-append obj_name
                                                            "_2:[" obj_type "*"
                                                            (apply string-append (map (lambda (kk) (string-append "," (cadr kk))) slots_))
                                                            "]*"))
                                 `(lambda ,(map (lambda (s) (string->symbol (car s))) slots_)
                                    (let ((obj (halloc)))
                                      ,(cons 'begin
                                             (cons (list 'tset! 'obj 0 (symbol->string name))
                                                   (map (lambda (s j) (list 'tset! 'obj (+ j 3) (string->symbol (car s))))
                                                        slots_
                                                        (make-list-with-proc (length slots_) (lambda (i) i)))))
                                      obj))))
             (constructor2poly (list 'bind-poly 'xobj_build (string->symbol (string-append obj_name "_2"))))
             (destructor (list 'bind-func (string->symbol
                                           (string-append obj_name "_destroy:[void," obj_type "*]*"))
                               `(lambda (obj) (free obj))))
             (destructorpoly (list 'bind-poly 'xobj_destroy (string->symbol (string-append obj_name "_destroy"))))
             (getters (map (lambda (s idx)
                             (list 'bind-func (string->symbol
                                               (string-append obj_name "_get_" (car s) ":["
                                                              (cadr s) "," obj_type "*]*"))
                                   `(lambda (obj)
                                      (tref obj ,idx))))
                           slots
                           (make-list-with-proc (length slots) (lambda (i) i))))
             (getterpolys (map (lambda (s) (list 'bind-poly
                                            (string->symbol (string-append "xobj_get_" (car s)))
                                            (string->symbol (string-append obj_name "_get_" (car s)))))
                               slots))
             (setters (map (lambda (s idx)
                             (list 'bind-func (string->symbol
                                               (string-append obj_name "_set_" (car s) ":"
                                                              "[void," obj_type "*," (cadr s) "]*"))
                                   `(lambda (obj val)
                                      (tset! obj ,idx val)
                                      void)))
                           slots
                           (make-list-with-proc (length slots) (lambda (i) i))))
             (setterpolys (map (lambda (s) (list 'bind-poly
                                            (string->symbol (string-append "xobj_set_" (car s)))
                                            (string->symbol (string-append obj_name "_set_" (car s)))))
                               slots)))
        (eval bindtype (interaction-environment))
        (eval constructor1 (interaction-environment))
        ;;(println constructor1)
        (eval constructor1poly (interaction-environment))
        (eval constructor2 (interaction-environment))
        ;;(println constructor2)
        (eval constructor2poly (interaction-environment))
        (eval destructor (interaction-environment))
        (eval destructorpoly (interaction-environment))
        (for-each (lambda (e) (eval e (interaction-environment))) getters)
        ;;(println getters)
        (for-each (lambda (e) (eval e (interaction-environment))) getterpolys)
        (for-each (lambda (e) (eval e (interaction-environment))) setters)
        (for-each (lambda (e) (eval e (interaction-environment))) setterpolys)
        ;; (println 'test: (list 'xobj_add_class (symbol->string name)))
        (eval (list 'xobj_add_class (symbol->string name)) (interaction-environment))
        1)))


(define-macro (bind-method class method def)
  (let* ((method_ (regex:split (symbol->string method) ":"))
         (methodname (car method_))
         (classname (symbol->string class))
         (methodtype (if (null? (cdr method_))
                         (print-error 'Compiler 'Error: 'you 'must 'give 'the 'method 'a 'type)
                         (impc:ir:get-type-from-pretty-str (cadr method_))))
         (adjusttypea (cons (car methodtype)
                              (cons (cadr methodtype)
                                    (cons (string->symbol (string-append "xobject_t*"))
                                          (cddr methodtype)))))
         (adjusttype (cons (car methodtype)
                              (cons (cadr methodtype)
                                    (cons (string->symbol (string-append "xobj_" classname "_t*"))
                                          (cddr methodtype)))))
         (f1 `(bind-func ,(string->symbol
                           (string-append "xobj_" classname "_" methodname ":"
                                          (impc:ir:pretty-print-type adjusttypea)))
                ,(cons (car def)
                       (cons (cons 'obj (cadr def))
                             ;;(append `(let ((self (cast obj ,(string->symbol (string-append "xobj_" classname "_t*")))))
                             (append `(let ((,(string->symbol (string-append "self:xobj_" classname "_t*")) (cast obj)))
                                        ,@(cddr def)))))))
         (f2 `(bind-func ,(string->symbol
                           (string-append "xobj_global_" methodname ":"
                                          (impc:ir:pretty-print-type
                                           (cons (car methodtype)
                                                 (cons (cadr methodtype)
                                                       (cons 'xobject_t*
                                                             (cddr methodtype)))))))
                (lambda ,(cons 'obj (cadr def))
                  (let ((class:i8* (tref obj 0))
                        ;(self (cast obj ,(string->symbol (string-append "xobj_" classname "_t*"))))
                        ;;(f:[i64,i64,i64]* (xobj_get_method class ,methodname)))
                        (,(string->symbol (string-append "f:" (impc:ir:pretty-print-type adjusttypea)))
                         (cast (xobj_get_method class ,methodname))))
                    (if (null? f)
                        (begin (printf
                                ,(string-append "Runtime Error: no method '" methodname "' for class '%s'\\n")
                                class)
                               ,(if (= -1 (cadr methodtype))
                                    'void
                                    '(convert null)))
                        ,(cons 'f (cons 'obj (cadr def))))))))
         (f3 `(bind-func ,(string->symbol
                           (string-append "xobj_" classname "_" methodname "_poly:"
                                          (impc:ir:pretty-print-type
                                           (cons (car methodtype)
                                                 (cons (cadr methodtype)
                                                       (cons (string->symbol (string-append "xobj_" classname "_t*"))
                                                             (cddr methodtype)))))))
                (lambda ,(cons 'obj (cadr def))
                  (let ((class:i8* (tref obj 0))
                        ;(self (cast obj ,(string->symbol (string-append "xobj_" classname "_t*"))))
                        (,(string->symbol (string-append "f:" (impc:ir:pretty-print-type adjusttypea)))
                         (cast (xobj_get_method class ,methodname))))
                        ;;(f:[i64,i64,i64]* (xobj_get_method class ,methodname)))
                    (if (null? f)
                        (begin (printf
                                ,(string-append "Runtime Error: no method '" methodname "' for class '%s'\\n")
                                class)
                               ,(if (= -1 (cadr methodtype))
                                    'void
                                    '(convert null)))
                        ,(cons 'f (cons '(cast obj) (cadr def)))))))))

    ;;(println f1)
    (eval f1 (interaction-environment))
    (if (not (llvm:get-function (string-append "xobj_global_" methodname)))
        (begin
          ;; (println f2)
          (eval f2 (interaction-environment))
          (eval (list 'bind-poly
                      (string->symbol (string-append "xobj_" methodname))
                      (string->symbol (string-append "xobj_global_" methodname)))
                (interaction-environment))))
    ;; (println f3)
    (eval f3 (interaction-environment))
    (eval (list 'bind-poly
                (string->symbol (string-append "xobj_" methodname))
                (string->symbol (string-append "xobj_" classname "_" methodname "_poly")))
          (interaction-environment))
    (eval (list 'xobj_add_method classname methodname
                (llvm:get-native-closure (string-append "xobj_" classname "_" methodname)))
          (interaction-environment))
    1))
