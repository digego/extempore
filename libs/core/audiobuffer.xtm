;;; audiobuffer.xtm

;; Author: Ben Swift, Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;;

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/audiobuffer.xtm" 'quiet))
(sys:load-preload-check 'audiobuffer)
(define *xtmlib-audiobuffer-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmaudiobuffer")
(impc:aot:import-ll "xtmaudiobuffer")

;; two little helpers to keep this independent from audio_dsp

(bind-func static hermite_interp_local
  (lambda (fractional y1:SAMPLE x0 x1 x2)
    (let ((c (* 0.5 (- x1 y1)))
          (v (- x0 x1))
          (w (+ c v))
          (a (+ w v (* (- x2 x0) 0.5)))
          (b (+ w a)))
      (+ (* (+ (* (- (* a fractional) b) fractional) c) fractional) x0))))

(bind-func static midi2frq_local
  (lambda (pitch:SAMPLE)
    (if (<= pitch 0.0) 0.0
        (* 440.0 (pow 2.0 (/ (- pitch 69.0) 12.0))))))

;;;;;;;;;;;;;;;;;;;;;;
;; AudioBuffer type ;;
;;;;;;;;;;;;;;;;;;;;;;

;; 0 filepath
;; 1 playhead
;; 2 frames
;; 3 channels
;; 4 data
;; 5 samplerate
;; 6 loop start
;; 7 loop frames
;; 8 root pitch (as midi #)
;; 9 phase (for wavetable operations)

(bind-type AudioBuffer <String*,i64,i64,i64,SAMPLE*,double,i64,i64,i64,double> (printer? . #f))

(bind-func AudioBuffer
  (lambda (frames chans)
    (let ((dat:SAMPLE* (alloc (* frames chans))))
      (AudioBuffer_z (String "") 0 frames chans dat (convert SAMPLE_RATE) 0 0 60 0.0))))

(bind-func AudioBuffer
  (lambda (frames chans samplerate)
    (let ((dat:SAMPLE* (alloc (* frames chans))))
      (AudioBuffer_z (String "") 0 frames chans dat samplerate 0 0 60 0.0))))

(bind-func print
  "specialised print function for AudioBuffer*"
  (lambda (ab:AudioBuffer*)
    (if (null? ab)
        (printf "<AudioBuffer 0x0>")
        (printf "<AudioBuffer %p
      filepath: %s
      playhead: %lld
        frames: %lld
      channels: %lld
          data: %p
    samplerate: %f
    loop_start: %lld
   loop_frames: %lld
      root_frq: %lld
         phase: %f>"
                ab
                (tref (tref ab 0) 1)
                (tref ab 1)
                (tref ab 2)
                (tref ab 3)
                (tref ab 4)
                (tref ab 5)
                (tref ab 6)
                (tref ab 7)
                (tref ab 8)
                (tref ab 9)))
    void))


(bind-func toString
  "specialised toString function for AudioBuffer*"
  (lambda (ab:AudioBuffer*)
    (let ((str:i8* (salloc 1024)))
      (if (null? ab)
          (sprintf str "<AudioBuffer 0x0>")
          (sprintf str "<AudioBuffer %p
      filepath: %s
      playhead: %lld
        frames: %lld
      channels: %lld
          data: %p
    samplerate: %f
    loop_start: %lld
   loop_frames: %lld
      root_frq: %lld
         phase: %f>"
                   ab
                   (tref ab 0)
                   (tref ab 1)
                   (tref ab 2)
                   (tref ab 3)
                   (tref ab 4)
                   (tref ab 5)
                   (tref ab 6)
                   (tref ab 7)
                   (tref ab 8)
                   (tref ab 9)))
      (Str str))))

;; getters/setters

(bind-func static AudioBuffer_filepath
  (lambda (ab:AudioBuffer*)
    (tref ab 0)))

(bind-func static AudioBuffer_set_filepath
  (lambda (ab:AudioBuffer* filepath)
    (tset! ab 0 filepath)))

(bind-func static AudioBuffer_playhead
  (lambda (ab:AudioBuffer*)
    (tref ab 1)))

(bind-func static AudioBuffer_set_playhead
  (lambda (ab:AudioBuffer* playhead)
    (tset! ab 1 playhead)))

(bind-func static AudioBuffer_frames
  (lambda (ab:AudioBuffer*)
    (tref ab 2)))

(bind-func static AudioBuffer_set_frames
  (lambda (ab:AudioBuffer* frames)
    (tset! ab 2 frames)))

(bind-func static AudioBuffer_channels
  (lambda (ab:AudioBuffer*)
    (tref ab 3)))

(bind-func static AudioBuffer_set_channels
  (lambda (ab:AudioBuffer* channels)
    (tset! ab 3 channels)))

(bind-func static AudioBuffer_data
  (lambda (ab:AudioBuffer*)
    (tref ab 4)))

(bind-func AudioBuffer_data_b64
  (lambda (ab:AudioBuffer*)
    (let ((b64size:i64 0)
          (datsize:i64 (* (AudioBuffer_frames ab) (AudioBuffer_channels ab) 4)))
      (String (base64_encode (cast (tref ab 4) i8*) datsize (ref b64size))))))

(bind-func AudioBuffer_data_b64_cstring
  (lambda (ab:AudioBuffer*)
    (let ((b64size:i64 0)
          (datsize:i64 (* (AudioBuffer_frames ab) (AudioBuffer_channels ab) 4)))
      (base64_encode (cast (tref ab 4) i8*) datsize (ref b64size)))))

(bind-func static AudioBuffer_set_data
  (lambda (ab:AudioBuffer* data)
    (tset! ab 4 data)))

(bind-func AudioBuffer_set_data_b64
  (lambda (ab:AudioBuffer* b64:String*)
    (let ((size:i64 0)
          (out:i8* (base64_decode (cstring b64) (length b64) (ref size))))
      (if (<= size (* (AudioBuffer_frames ab) (AudioBuffer_channels ab) 4))
          (begin (memcpy (cast (AudioBuffer_data ab)) out size) void)
          (begin (println "error: AudioBuffer must be at least " size " bytes." ) void)))))

(bind-func static AudioBuffer_samplerate
  (lambda (ab:AudioBuffer*)
    (tref ab 5)))

(bind-func static AudioBuffer_set_samplerate
  (lambda (ab:AudioBuffer* samplerate)
    (tset! ab 5 samplerate)))

(bind-func static AudioBuffer_loop_start
  (lambda (ab:AudioBuffer*)
    (tref ab 6)))

(bind-func static AudioBuffer_set_loop_start
  (lambda (ab:AudioBuffer* loop_start)
    (tset! ab 6 loop_start)))

(bind-func static AudioBuffer_loop_frames
  (lambda (ab:AudioBuffer*)
    (tref ab 7)))

(bind-func static AudioBuffer_set_loop_frames
  (lambda (ab:AudioBuffer* loop_frames)
    (tset! ab 7 loop_frames)))

(bind-func static AudioBuffer_root_pitch
  (lambda (ab:AudioBuffer*)
    (tref ab 8)))

(bind-func static AudioBuffer_set_root_pitch
  (lambda (ab:AudioBuffer* root_pitch)
    (tset! ab 8 root_pitch)))

(bind-func static AudioBuffer_phase
  (lambda (ab:AudioBuffer*)
    (tref ab 9)))

(bind-func static AudioBuffer_set_phase
  (lambda (ab:AudioBuffer* phase)
    (tset! ab 9 phase)))

(bind-func static AudioBuffer_num_samples
  "get the total number of samples (* frames channels) from an Audiobuffer"
  (lambda (ab:AudioBuffer*)
    (* (AudioBuffer_frames ab)
       (AudioBuffer_channels ab))))

(bind-func static AudioBuffer_seek
  (lambda (ab:AudioBuffer* seek_to)
    (if (< seek_to 0)
        (begin
          (println "AudioBuffer seek value must be > 0")
          #f)
        (let ((len (AudioBuffer_frames ab)))
          (AudioBuffer_set_playhead ab (if (< seek_to len) seek_to len))
          #t))))

;; "peek" doesn't advance the playhead, "read" does

(bind-func static AudioBuffer_peek
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (if (< ph (AudioBuffer_frames ab))
          (pref (AudioBuffer_data ab)
                (+ (* ph (AudioBuffer_channels ab)) chan))
          0.0))))

(bind-func static AudioBuffer_peek_looped
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (pref (AudioBuffer_data ab)
            (+ (* (% ph (AudioBuffer_frames ab)) (AudioBuffer_channels ab)) chan)))))

(bind-func AudioBuffer_read
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (if (< ph (AudioBuffer_frames ab))
          (begin
            (if (= chan 0) (AudioBuffer_set_playhead ab (+ ph 1)))
            (pref (AudioBuffer_data ab)
                  (+ (* ph (AudioBuffer_channels ab)) chan)))
          0.0))))

(bind-func AudioBuffer_read
  (lambda (ab:AudioBuffer* frame chan)
    (if (< frame (AudioBuffer_frames ab))
        (begin
          (if (= chan 0) (AudioBuffer_set_playhead ab frame))
          (pref (AudioBuffer_data ab)
                (+ (* frame (AudioBuffer_channels ab)) chan)))
        0.0)))

(bind-func AudioBuffer_read_looped
  (lambda (ab:AudioBuffer* chan)
    (let ((ph (AudioBuffer_playhead ab)))
      (if (= chan 0)
          (AudioBuffer_set_playhead ab (% (+ ph 1) (AudioBuffer_frames ab))))
      (pref (AudioBuffer_data ab)
            (+ (* ph (AudioBuffer_channels ab)) chan)))))

(bind-func AudioBuffer_read_looped
  (lambda (ab:AudioBuffer* frame chan)
    (if (= chan 0)
        (AudioBuffer_set_playhead ab (% frame (AudioBuffer_frames ab))))
    (if (> frame (AudioBuffer_frames ab))
        0.0
        (pref (AudioBuffer_data ab)
              (+ (* frame (AudioBuffer_channels ab)) chan)))))

(bind-func static AudioBuffer_ptr
  "returns a pointer into the buffer"
  (lambda (ab:AudioBuffer* frame chan)
    (if (< frame 0) (set! frame (llabs frame)))
    (if (< frame (AudioBuffer_frames ab))
        (pref-ptr (AudioBuffer_data ab)
          (+ (* frame (AudioBuffer_channels ab)) chan))
        (pref-ptr (AudioBuffer_data ab)
          (+ (* (% frame (AudioBuffer_frames ab)) (AudioBuffer_channels ab)) chan)))))

;; no pulsewidth, faster but no segments or mixing
(bind-func AudioBuffer_read_interp
  (lambda (buffer:AudioBuffer* freq:SAMPLE chan:i64)
    (let ((channels:i64 (AudioBuffer_channels buffer))
          (frames (AudioBuffer_frames buffer))
          (looplgth (AudioBuffer_loop_frames buffer))
          (loopstart (AudioBuffer_loop_start buffer))
          (oneshot (= looplgth 0))
          (segments (if oneshot 0 (/ frames looplgth)))
          (phase:double (AudioBuffer_phase buffer))
          (rate (/ (convert freq) (convert (midi2frq_local (convert (AudioBuffer_root_pitch buffer))))))
          (pos:double phase)
          (lgth:i64 (if oneshot
                    (- (- frames 1) loopstart)
                    (clamp looplgth
                           0
                           (- frames loopstart))))
          (lgthf:double (convert lgth))
          (dat (AudioBuffer_ptr buffer (clamp loopstart 0 (- frames looplgth)) chan))
          (y1 0.0)
          (y1pos:i64 (* channels (convert (floor (% (- pos rate) lgthf)))))
          (x0 0.0)
          (x0pos:i64 (* channels (convert (floor pos))))
          (x1 0.0)
          (x1pos:i64 (* channels (convert (floor (% (+ pos rate) lgthf)))))
          (x2 0.0)
          (x2pos:i64 (* channels (convert (floor (% (+ pos rate rate) lgthf))))))
      (if (> pos lgthf) 0.0 ;; return silence when past the end (shouldn't happen if looping)
          (begin
            (set! y1 (if (and oneshot (< x0pos 1)) 0.0 (pref dat y1pos)))
            (set! x0 (pref dat x0pos))
            (set! x1 (pref dat x1pos))
            (set! x2 (pref dat x2pos))
            (if (= chan 0) ;; increment phase
                (AudioBuffer_set_phase buffer
                                      (if oneshot
                                          (+ pos rate)
                                          (% (+ pos rate) lgthf))))
            ;; return interpolated result
            (hermite_interp_local (dtof (% pos 1.0)) y1 x0 x1 x2))))))


;; where pw is between 0.0 - 1.0
;; and chooses between 'segments' of the audio file
;; where a segment is 1 * looplgth samples long
;; the number of segments is then frames / looplgth
(bind-func AudioBuffer_read_interp_pw
  (lambda (buffer:AudioBuffer* freq:SAMPLE chan:i64 pw:float)
    (set! pw (* pw 0.9999999))
    (let ((channels:i64 (AudioBuffer_channels buffer))
          (frames (AudioBuffer_frames buffer))
          (looplgth (AudioBuffer_loop_frames buffer))
          (loopstart (AudioBuffer_loop_start buffer))
          (oneshot (= looplgth 0))
          (segments (if oneshot 0 (/ frames looplgth)))
          (phase:double (AudioBuffer_phase buffer))
          (rate (/ (convert freq) (convert (midi2frq_local (convert (AudioBuffer_root_pitch buffer))))))
          (pos:double phase)
          (lgth:i64 (if oneshot
                      (- (- frames 1) loopstart)
                      (clamp looplgth
                            0
                            (- frames loopstart))))
          (lgthf:double (convert lgth))
          (offset (* (convert (floor (* pw (convert segments)))) looplgth))
          (mix (% (* pw (convert segments)) 1.0))
          (dat1 (AudioBuffer_ptr buffer offset chan))
          (dat2 (AudioBuffer_ptr buffer (% (+ offset looplgth) frames) chan))
          (dy1 0.0) (dx0 0.0) (dx1 0.0) (dx2 0.0)
          (y1 0.0) (x0 0.0) (x1 0.0) (x2 0.0)
          (y1pos:i64 (* channels (convert (floor (% (- pos rate) lgthf)))))
          (x0pos:i64 (* channels (convert (floor pos))))
          (x1pos:i64 (* channels (convert (floor (% (+ pos rate) lgthf)))))
          (x2pos:i64 (* channels (convert (floor (% (+ pos rate rate) lgthf))))))
      (if (> pos lgthf) 0.0 ;; return silence when past the end (shouldn't happen if looping)
          (begin
            (set! dy1 (- (pref dat2 y1pos) (pref dat1 y1pos)))
            (set! y1 (if (and oneshot (< x0pos 1)) 0.0 (+ (pref dat1 y1pos) (* dy1 mix))))
            (set! dx0 (- (pref dat2 x0pos) (pref dat1 x0pos)))
            (set! x0 (+ (pref dat1 x0pos) (* dx0 mix)))
            (set! dx1 (- (pref dat2 x1pos) (pref dat1 x1pos)))
            (set! x1 (+ (pref dat1 x1pos) (* dx1 mix)))
            (set! dx2 (- (pref dat2 x2pos) (pref dat1 x2pos)))
            (set! x2 (+ (pref dat1 x2pos) (* dx2 mix)))
            (if (= chan 0) ;; increment phase
                (AudioBuffer_set_phase buffer
                                      (if oneshot
                                          (+ pos rate)
                                          (% (+ pos rate) lgthf))))
            ;; return interpolated result
            (hermite_interp_local (dtof (% pos 1.0)) y1 x0 x1 x2))))))

;; where mix is 0.0-1.0 and mixes between buf1 and buf2
(bind-func AudioBuffer_read_interp_mix
  (lambda (buffer:AudioBuffer* buffer2:AudioBuffer* freq:SAMPLE chan:i64 mix:float)
    (let ((channels:i64 (AudioBuffer_channels buffer))
          (frames (AudioBuffer_frames buffer))
          (looplgth (AudioBuffer_loop_frames buffer))
          (loopstart (AudioBuffer_loop_start buffer))
          (oneshot (= looplgth 0))
          (segments (if oneshot 0 (/ frames looplgth)))
          (phase:double (AudioBuffer_phase buffer))
          (rate (/ (convert freq) (convert (midi2frq_local (convert (AudioBuffer_root_pitch buffer))))))
          (pos:double phase)
          (lgth:i64 (if oneshot
                    (- (- frames 1) loopstart)
                    (clamp looplgth
                           0
                           (- frames loopstart))))
          (lgthf:double (convert lgth))
          (dat1 (AudioBuffer_ptr buffer (clamp loopstart 0 (- frames looplgth)) chan))
          (dat2 (AudioBuffer_ptr buffer2 (clamp loopstart 0 (- frames looplgth)) chan))
          (dy1 0.0) (dx0 0.0) (dx1 0.0) (dx2 0.0)
          (y1 0.0)
          (y1pos:i64 (* channels (convert (floor (% (- pos rate) lgthf)))))
          (x0 0.0)
          (x0pos:i64 (* channels (convert (floor pos))))
          (x1 0.0)
          (x1pos:i64 (* channels (convert (floor (% (+ pos rate) lgthf)))))
          (x2 0.0)
          (x2pos:i64 (* channels (convert (floor (% (+ pos rate rate) lgthf))))))
      (set! mix (fabs mix))
      (if (> pos lgthf) 0.0
          (begin
            (set! dy1 (- (pref dat2 y1pos) (pref dat1 y1pos)))
            (set! y1 (if (and oneshot (< x0pos 1)) 0.0 (+ (pref dat1 y1pos) (* dy1 mix))))
            (set! dx0 (- (pref dat2 x0pos) (pref dat1 x0pos)))
            (set! x0 (+ (pref dat1 x0pos) (* dx0 mix)))
            (set! dx1 (- (pref dat2 x1pos) (pref dat1 x1pos)))
            (set! x1 (+ (pref dat1 x1pos) (* dx1 mix)))
            (set! dx2 (- (pref dat2 x2pos) (pref dat1 x2pos)))
            (set! x2 (+ (pref dat1 x2pos) (* dx2 mix)))
            (if (= chan 0) ;; increment phase
                (AudioBuffer_set_phase buffer
                                      (if oneshot
                                          (+ pos rate)
                                          (% (+ pos rate) lgthf))))
            ;; return interpolated result
            (hermite_interp_local (dtof (% pos 1.0)) y1 x0 x1 x2))))))


;;;;;;;;;;;;;;;;;;;;;;;;;
;; reading audio files ;;
;;;;;;;;;;;;;;;;;;;;;;;;;

;; A native xtlang wave and aiff file readers - currently only works
;; for *reading* uncompressed aiff and wave files. If you need to read
;; compressed audio files, or write audio files, use
;; libs/external/libsndfile.xtm

;; helper functions for bit twiddling

;; AIFFs are big-endian, so need some helper functions for
;; byte-swapping

(bind-func static swapi16
  (lambda (x:i16)
    (bor (>> x 8)
         (<< x 8))))

(bind-func static swapi32
  (lambda (x:i32)
    (bor (bor (& (>> x 24) #xff)           ;; move byte 3 to byte 0
              (& (<< x 8) #xff0000))       ;; move byte 1 to byte 2
         (bor (& (>> x 8) #xff00)          ;; move byte 2 to byte 1
              (& (<< x 24) #xff000000))))) ;; byte 0 to byte 3

(bind-func swap_bytes_inplace
  ;; super dangerous - use only if you know what you're doing
  (lambda (buf:i8* nbytes)
    (let ((tmp 0)
          (i 0))
      (dotimes (i (/ nbytes 2))
        (set! tmp (pref buf i))
        (pset! buf i (pref buf (- nbytes 1 i)))
        (pset! buf (- nbytes 1 i) tmp)))))

;; IEEE floating point

(bind-func audiofile_float_to_sample_le
  (lambda (src:i8* dest:SAMPLE* nsamp)
    (doloop (i nsamp)
      (pset! dest i (pref (cast src float*) i)))))

(bind-func audiofile_float_to_sample_be
  (let ((tmp:i32* (zalloc 1)))
    (lambda (src:i8* dest:SAMPLE* nsamp)
      (doloop (i nsamp)
        ;; flip the byte order
        (pset! tmp 0 (pref (cast src i32*) i))
        (pset! tmp 0 (swapi32 (pref tmp 0)))
        ;; stuff it into dest
        (pset! dest i (pref (cast tmp float*) 0))))))

;; 16-bit PCM

(bind-func audiofile_16bitPCM_to_sample_le
  (let ((range (i64tod (<< 1 16))))
    (lambda (src:i8* dest:SAMPLE* nsamp)
      (doloop (i nsamp)
        (pset! dest i (dtof (/ (i16tod (pref (cast src i16*) i)) range)))))))

(bind-func audiofile_16bitPCM_to_sample_be
  (let ((range (i64tod (<< 1 16))))
    (lambda (src:i8* dest:SAMPLE* nsamp)
      (doloop (i nsamp)
        (pset! dest i (dtof (/ (i16tod (swapi16 (pref (cast src i16*) i))) range)))))))

;; 24-bit PCM

(bind-func audiofile_24bitPCM_to_sample_le
  (let ((range (i64tod (<< 1 32)))
        (tmp:i8* (zalloc 4)))
    (lambda (src:i8* dest:SAMPLE* nsamp)
      (pset! tmp 3 0)
      (doloop (i nsamp)
        ;; copy the 3 bytes to tmp
        (pset! tmp 1 (pref src (* i 3)))
        (pset! tmp 2 (pref src (+ (* i 3) 1)))
        (pset! tmp 3 (pref src (+ (* i 3) 2)))
        (pset! dest i (dtof (/ (i32tod (pref (cast tmp i32*) 0)) range)))))))

(bind-func audiofile_24bitPCM_to_sample_be
  (let ((range (i64tod (<< 1 32)))
        (tmp:i8* (zalloc 4)))
    (lambda (src:i8* dest:SAMPLE* nsamp)
      (pset! tmp 0 0)
      (doloop (i nsamp)
        ;; copy the 3 bytes to tmp (in reverse order)
        (pset! tmp 3 (pref src (* i 3)))
        (pset! tmp 2 (pref src (+ (* i 3) 1)))
        (pset! tmp 1 (pref src (+ (* i 3) 2)))
        (pset! dest i (dtof (/ (i32tod (pref (cast tmp i32*) 0)) range)))))))

;; might as well use the WAVE format IDs

;; these are usually 16-bit
(bind-val WAVE_FORMAT_PCM i64 1)
(bind-val WAVE_FORMAT_IEEE_FLOAT i64 3)
(bind-val WAVE_FORMAT_ALAW i64 6)
(bind-val WAVE_FORMAT_MULAW i64 7)
(bind-val WAVE_FORMAT_EXTENSIBLE i64 -2)

(bind-func audiofile_copy_samples
  (lambda (src dest nsamp bitdepth type le:i1)
    (cond ((= type WAVE_FORMAT_IEEE_FLOAT)
           (if le
               (audiofile_float_to_sample_le src dest nsamp)
               (audiofile_float_to_sample_be src dest nsamp))
           #t)
          ((and (or (= type WAVE_FORMAT_PCM)
                    (= type WAVE_FORMAT_EXTENSIBLE))
                (= bitdepth 16))
           (if le
               (audiofile_16bitPCM_to_sample_le src dest nsamp)
               (audiofile_16bitPCM_to_sample_be src dest nsamp))
           #t)
          ((and (or (= type WAVE_FORMAT_PCM)
                    (= type WAVE_FORMAT_EXTENSIBLE))
                (= bitdepth 24))
           (if le
               (audiofile_24bitPCM_to_sample_le src dest nsamp)
               (audiofile_24bitPCM_to_sample_be src dest nsamp))
           #t)
          (else
           (println "audiofile error: the native xtlang wave/aiff file reader currently\nonly supports 16/24-bit PCM or 32-bit IEEE float audio\n\nFor more audio format options, use libs/external/sndfile.xtm")
           #f))))

;;;;;;;;;
;; IFF ;;
;;;;;;;;;

;; wave and aiff files are both descendents of IFF, except they differ
;; in endianness. So we define a base type which represents a chunk
;; header

(bind-type IffChunkHeader <|4,i8|,i32> (printer? . #f))
(bind-val IFF_CHUNK_HEADER_SIZE i64 8)

(bind-func iffchunk_check_ID
  "check the chunk & form IDs are valid"
  (lambda (hdr:IffChunkHeader* id:i8*)
    (= (strncmp (aref-ptr (tref-ptr hdr 0) 0) id 4) 0)))

(bind-func iffchunk_size
  (lambda (hdr:IffChunkHeader* le:i1)
    (if le (tref hdr 1) (swapi32 (tref hdr 1)))))

;; this version "smartly" jumps through the file based on the chunk sizes
(bind-func iffchunk_find_smart
  (lambda (fileptr:i8* id le:i1)
    (while (not (iffchunk_check_ID (cast fileptr IffChunkHeader*) id))
      (set! fileptr
            (pref-ptr fileptr
                      (+ IFF_CHUNK_HEADER_SIZE
                         (convert
                          (iffchunk_size (cast fileptr IffChunkHeader*) le)
                          i64)))))
    fileptr))

;; super naive - will run off the end of the buffer if it doesn't find
;; the desired ID
(bind-func iffchunk_find_dumb
  (lambda (fileptr:i8* id:i8*)
    (while (<> (strncmp fileptr id 4) 0)
      (set! fileptr (pref-ptr fileptr 1)))
    fileptr))

(bind-func print
  "specialised print function for IffChunkHeader*"
  (lambda (hdr:IffChunkHeader*)
    (if (null? hdr)
        (printf "<IffChunkHeader 0x0>")
        (printf "<IffChunkHeader chunk ID: %.4s  chunk size: %d>"
                (aref-ptr (tref-ptr hdr 0) 0)
                (iffchunk_size hdr #t))) ;; this will only work for WAVE
    void))

(bind-func toString
  "specialised toString function for IffChunkHeader*"
  (lambda (hdr:IffChunkHeader*)
    (let ((str:i8* (salloc 256)))
      (if (null? hdr)
          (sprintf str "<IffChunkHeader 0x0>")
          (sprintf str
                   "<IffChunkHeader chunk ID: %.4s  chunk size: %d>"
                   (aref-ptr (tref-ptr hdr 0) 0)
                   (iffchunk_size hdr #t))) ;; this will only work for WAVE
      (Str str))))

;;;;;;;;;;
;; WAVE ;;
;;;;;;;;;;

(bind-func wave_validate
  (lambda (fileptr)
    (and (= (strncmp fileptr "RIFF" 4) 0)
         (= (strncmp (pref-ptr fileptr 8) "WAVE" 4) 0))))

(bind-func audiofile_wave_read_samples
  (lambda (filepath dest:SAMPLE*)
    (let ((filedata (sys_slurp_file filepath)))
      (if (null? filedata)
          (begin (println "wavefile error: could not open file")
                 (free filedata)
                 #f)
          (cond ((not (wave_validate filedata))
                 (println "wavefile error: there was a problem with the chunk IDs...\nis the file corrupt?")
                 (free filedata)
                 #f)
                (else
                 (let ((fmt (iffchunk_find_dumb filedata "fmt "))
                       (chunksize (i32toi64 (iffchunk_size (cast fmt IffChunkHeader*) #t)))
                       (type (i16toi64 (pref (cast (pref-ptr fmt IFF_CHUNK_HEADER_SIZE) i16*) 0)))
                       (nchan (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 2)) i16*) 0)))
                       (samplerate (i32toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 4)) i32*) 0)))
                       (bitdepth (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 14)) i16*) 0)))
                       (data (iffchunk_find_dumb filedata "data"))
                       (nframes (/ (i32toi64 (iffchunk_size (cast data IffChunkHeader*) #t))
                                   (* nchan (/ bitdepth 8))))
                       ;; read data into memory
                       (res (audiofile_copy_samples (pref-ptr data IFF_CHUNK_HEADER_SIZE)
                                                    dest
                                                    (* nchan nframes)
                                                    bitdepth
                                                    type
                                                    #t)))
                   (free filedata)
                   res)))))))

(bind-func AudioBuffer_from_wave
  (lambda (filepath)
    (let ((filedata (sys_slurp_file filepath)))
      (if (null? filedata)
          (begin (println "wavefile error: could not open file")
                 (free filedata)
                 null)
          (cond ((not (wave_validate filedata))
                 (println "wavefile error: there was a problem with the chunk IDs...\nis the file corrupt?")
                 (free filedata)
                 null)
                (else
                 (let ((fmt (iffchunk_find_dumb filedata "fmt "))
                       (chunksize (i32toi64 (iffchunk_size (cast fmt IffChunkHeader*) #t)))
                       (type (i16toi64 (pref (cast (pref-ptr fmt IFF_CHUNK_HEADER_SIZE) i16*) 0)))
                       (nchan (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 2)) i16*) 0)))
                       (samplerate (i32tod (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 4)) i32*) 0)))
                       (bitdepth (i16toi64 (pref (cast (pref-ptr fmt (+ IFF_CHUNK_HEADER_SIZE 14)) i16*) 0)))
                       (data (iffchunk_find_dumb filedata "data"))
                       (nframes (/ (i32toi64 (iffchunk_size (cast data IffChunkHeader*) #t))
                                   (* nchan (/ bitdepth 8))))
                       (ab (AudioBuffer nframes nchan samplerate))
                       (abres (AudioBuffer_set_filepath ab (Str filepath)))
                       ;; read data into memory
                       (res (audiofile_copy_samples (pref-ptr data IFF_CHUNK_HEADER_SIZE)
                                                    (AudioBuffer_data ab)
                                                    (* nchan nframes)
                                                    bitdepth
                                                    type
                                                    #t)))
                   (free filedata)
                   (if res ab null))))))))

;;;;;;;;;;
;; AIFF ;;
;;;;;;;;;;

(bind-func aiff_validate
  (lambda (fileptr)
    (and (= (strncmp fileptr "FORM" 4) 0)
         (= (strncmp (pref-ptr fileptr 8) "AIFF" 4) 0))))

;; currently, this will crash out if the AIFF sub-chunks are bad (it
;; doesn't know where the end of the file). It will gracefully handle
;; non AIFF files, though. Only corrupted ones would be a problem
(bind-func audiofile_aiff_read_samples
  (lambda (filepath dest:SAMPLE*)
    (let ((filedata (sys_slurp_file filepath)))
      (if (null? filedata)
          (begin (println "aiff file error: could not open file")
                 #f)
          (let ((common (iffchunk_find_dumb filedata "COMM"))
                (sounddata (iffchunk_find_dumb filedata "SSND")))
            ;; pull the data out of the common chunk
            (let ((nchan (i16toi64 (swapi16 (pref (cast (pref-ptr common IFF_CHUNK_HEADER_SIZE) i16*) 0))))
                  (nframes (i32toi64 (swapi32 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 2)) i32*) 0))))
                  (bitdepth (i16toi64 (swapi16 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 6)) i16*) 0))))
                  (res (audiofile_copy_samples (pref-ptr sounddata (+ IFF_CHUNK_HEADER_SIZE 8))
                                               dest
                                               (* nchan nframes)
                                               bitdepth
                                               WAVE_FORMAT_PCM ;; AIFF is always PCM
                                               #f)))           ;; AIFF is *not* little-endian
              (free filedata)
              res))))))

(bind-func AudioBuffer_from_aiff
  (lambda (filepath)
    (let ((filedata (sys_slurp_file filepath)))
      (if (null? filedata)
          (begin (println "aiff file error: could not open file")
                 null)
          (let ((common (iffchunk_find_dumb filedata "COMM"))
                (sounddata (iffchunk_find_dumb filedata "SSND")))
            ;; pull the data out of the common chunk
            (let ((nchan (i16toi64 (swapi16 (pref (cast (pref-ptr common IFF_CHUNK_HEADER_SIZE) i16*) 0))))
                  (nframes (i32toi64 (swapi32 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 2)) i32*) 0))))
                  (bitdepth (i16toi64 (swapi16 (pref (cast (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 6)) i16*) 0))))
                  (samplerate (begin
                                (swap_bytes_inplace (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 8)) 10)
                                (fp80ptrtod (pref-ptr common (+ IFF_CHUNK_HEADER_SIZE 8)))))
                  (ab (AudioBuffer nframes nchan samplerate))
                  (abres (AudioBuffer_set_filepath ab (Str filepath)))
                  (res (audiofile_copy_samples (pref-ptr sounddata (+ IFF_CHUNK_HEADER_SIZE 8))
                                               (AudioBuffer_data ab)
                                               (* nchan nframes)
                                               bitdepth
                                               WAVE_FORMAT_PCM ;; AIFF is always PCM
                                               #f)))
              (free filedata) ;; why does this cause a crash?
              (if res ab null)))))))

;; works for both aiff and wave files

(bind-func audiofile_read_samples
  (lambda (filepath dest:SAMPLE*)
    (cond ((rmatch "\\.wave?$" filepath)
           (audiofile_wave_read_samples filepath dest))
          ((rmatch "\\.aiff?$" filepath)
           (audiofile_aiff_read_samples filepath dest))
          (else
           (println "native xtlang audiofile reader only works for uncompressed aiff and wave files")
           #f))))

(bind-func AudioBuffer
  (lambda (filepath)
    (cond ((rmatch "\\.wave?$" filepath)
           (AudioBuffer_from_wave filepath))
          ((rmatch "\\.aiff?$" filepath)
           (AudioBuffer_from_aiff filepath))
          (else
           (println "native xtlang audiofile reader only works for uncompressed aiff and wave files")
           null))))

(bind-func AudioBuffer_malloc
  (lambda (frames chans samplerate)
    (let ((dat:SAMPLE* (alloc (* frames chans))))
      (AudioBuffer_h (String "") 0 frames chans dat samplerate 0 0 60 0.0))))

;; AudioBuffer created with b64 is always malloc'd
;; and expected to live for the duration of the session
(bind-func AudioBuffer
  (lambda (frames chans samplerate phase root loopstart loopframes b64:String*)
    (let ((ab (AudioBuffer_malloc frames chans samplerate)))
      (AudioBuffer_set_phase ab phase)
      (AudioBuffer_set_root_pitch ab root)
      (AudioBuffer_set_loop_start ab loopstart)
      (AudioBuffer_set_loop_frames ab loopframes)
      (AudioBuffer_set_data_b64 ab b64)
      ab)))

(bind-func AudioBuffer_cstring
  (lambda (frames chans samplerate phase root loopstart loopframes b64:i8*)
    (let ((ab (AudioBuffer_malloc frames chans samplerate)))
      (AudioBuffer_set_phase ab phase)
      (AudioBuffer_set_root_pitch ab root)
      (AudioBuffer_set_loop_start ab loopstart)
      (AudioBuffer_set_loop_frames ab loopframes)
      (AudioBuffer_set_data_b64 ab (String b64))
      ab)))

;; copy audiobuffer
(bind-func AudioBuffer
  (lambda (in:AudioBuffer*)
    (let ((size (* (AudioBuffer_frames in) (AudioBuffer_channels in)))
          (dat:SAMPLE* (alloc size))
          (olddat:SAMPLE* (AudioBuffer_data in)))
      (memcpy (cast dat) (cast olddat) (* size 4))
      (AudioBuffer_z
        (AudioBuffer_filepath in)
        (AudioBuffer_playhead in)
        (AudioBuffer_frames in)
        (AudioBuffer_channels in)
        dat
        (AudioBuffer_samplerate in)
        (AudioBuffer_loop_start in)
        (AudioBuffer_loop_frames in)
        (AudioBuffer_root_pitch in)
        (AudioBuffer_phase in)))))

;; a 'new' AudioBuffer with shared audio buffer
(bind-func AudioBuffer_shared_data
  (lambda (ab:AudioBuffer*)
    (AudioBuffer_z (String "")
                   0
                   (AudioBuffer_frames ab)
                   (AudioBuffer_channels ab)
                   (AudioBuffer_data ab)
                   (AudioBuffer_samplerate ab)
                   (AudioBuffer_loop_start ab)
                   (AudioBuffer_loop_frames ab)
                   (AudioBuffer_root_pitch ab)
                   0.0)))

;; single channel wavetable oscillator
(bind-func wt_c
  (lambda (buffer:AudioBuffer*)
    (let ((wt (AudioBuffer_shared_data buffer)))
      (lambda (amp freq)
        (* amp (AudioBuffer_read_interp wt freq 0))))))

;; multi channel wavetable oscillator
(bind-func wt_mc_c
  (lambda (buffer:AudioBuffer*)
    (let ((wt (AudioBuffer_shared_data buffer)))
      (lambda (chan amp freq)
        (* amp (AudioBuffer_read_interp wt freq chan))))))

(bind-func static playbuf
  (lambda (ab:AudioBuffer* chan)
    (AudioBuffer_read_looped ab chan)))

(bind-func static loopbuf
  (lambda (ab:AudioBuffer* chan)
    (AudioBuffer_read_looped ab chan)))

(bind-func AudioBuffer_concat
  (lambda (ab1:AudioBuffer* ab2:AudioBuffer*)
    (if (or (<> (AudioBuffer_samplerate ab1) (AudioBuffer_samplerate ab2))
            (<> (AudioBuffer_channels ab1) (AudioBuffer_channels ab2)))
        (begin (println "Error: cannot concat incompatible audiobuffers") null) ;; return null on error!
        (let ((new (AudioBuffer (+ (AudioBuffer_frames ab1) (AudioBuffer_frames ab2))
                                (AudioBuffer_channels ab1)
                                (AudioBuffer_samplerate ab1)))
              (dat1 (AudioBuffer_ptr new 0 0))
              (dat2 (AudioBuffer_ptr new (AudioBuffer_frames ab1) 0)))
          (memcpy (cast dat1) (cast (AudioBuffer_ptr ab1 0 0)) (* (AudioBuffer_frames ab1) (AudioBuffer_channels ab1) 4))
          (memcpy (cast dat2) (cast (AudioBuffer_ptr ab2 0 0)) (* (AudioBuffer_frames ab2) (AudioBuffer_channels ab2) 4))
          new))))

(impc:aot:insert-footer "xtmaudiobuffer")
(define *xtmlib-audiobuffer-loaded* #t)
