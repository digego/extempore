;;; vu-meter.xtm -- VU (signal level) metering for xtlang

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; Create a vu_meter closure in a DSP callback with vu_meter_c, then
;; wrap any instruments/signals you want to monitor in a call to that
;; closure. The current VU level can then be accessed through vu_level

;; Example code:

;; (bind-func dsp:[SAMPLE,SAMPLE,i64,i64,SAMPLE*]* 100000
;;   ;; VU metering at 30Hz, 4 distinct channels
;;   (let ((vu_meter (vu_meter_c 8 (/ 44100 15))))
;;     (lambda (in time chan dat)
;;       (+ (vu_meter chan 0 (* (random 0.1) (cos (/ (* STWOPI (convert time) 1.0) SR))))
;;          (vu_meter chan 1 (* (random 0.1) (cos (/ (* STWOPI (convert time) 0.1) SR))))))))

;; (dsp:set! dsp)

;; (define vu-print
;;   (lambda (beat dur)
;;     (let ((lev0 (* 30000 (vu_level 0)))
;;           (lev1 (* 30000 (vu_level 1))))
;;       (dotimes (i lev0)
;;         (print "*"))
;;       (println)
;;       (dotimes (i lev1)
;;         (print "-"))
;;       (println))
;;     (callback (*metro* (+ beat (* .5 dur))) 'vu-print (+ beat dur) dur)))

;; (vu-print (*metro* 'get-beat 4) 1/16)

;;; Code:

(bind-val VU_LEVELS_RMS |16,SAMPLE|*)

(bind-func rms_power
  (lambda (data:SAMPLE* len)
    (let ((data_vec:/4,SAMPLE/* (cast data))
          (sum_vec:/4,SAMPLE/* (alloc))
          (j 0))
      (dotimes (j (/ len 4))
        (pset! sum_vec 0 (+ (* (pref-ptr data_vec j)
                               (pref-ptr data_vec j))
                            sum_vec)))
      (/ (+ (vref sum_vec 0) (vref sum_vec 1)
            (vref sum_vec 2) (vref sum_vec 3))
         (convert len)))))

(bind-func vu_meter_c
  "frame_size must be a multiple of 4 (since the RMS sum is SIMD-optimised)"
  (lambda (ninst frame_size)
    (let ((data:SAMPLE* (zalloc (* ninst frame_size)))
          (counters:i64* (zalloc ninst)))
      (lambda (chan inst_idx in)
        (if (or (< inst_idx 0)
                (> inst_idx ninst)
                (<> chan 0))
            in
            (let ((counter (pref counters inst_idx)))
              (pset! data (+ (* inst_idx frame_size) counter) in)
              (pset! counters inst_idx (% (+ counter 1) frame_size))
              (if (= (% counter frame_size) 0)
                  (aset! VU_LEVELS_RMS inst_idx
                         (rms_power (pref-ptr data (* inst_idx frame_size))
                                    frame_size)))
              in))))))

(bind-func vu_level
  (lambda (inst_idx)
    (if (or (< inst_idx 0)
            (> inst_idx 16))
        (begin (println "Error: index must be between 0 and 16.")
               0.)
        (aref VU_LEVELS_RMS inst_idx))))
