;; Copyright (c) 2010-2011, Maciej Pacula & contributors
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or without
;; modification, are permitted provided that the following conditions are met:
;;     * Redistributions of source code must retain the above copyright
;;       notice, this list of conditions and the following disclaimer.
;;     * Redistributions in binary form must reproduce the above copyright
;;       notice, this list of conditions and the following disclaimer in the
;;       documentation and/or other materials provided with the distribution.
;;     * Names of copyright holders may not be used to endorse or promote products
;;       derived from this software without specific prior written permission.
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
;; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
;; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
;; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
;; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
;; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
;; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
;; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
;; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


;;; @name Pattern Matching
;;; @desc Adds native pattern matching to Scheme. Supports pattern-oriented /
;;; dispatch of function arguments (<code>pdefine</code>), pattern bindings in /
;;; <code>let</code>-like statements (<code>plet</code>) and pattern switch statements /
;;; (<code>pcase</code>). The pattern language was inspired by the /
;;; <a href='http://groups.csail.mit.edu/mac/users/gjs/6.945/'>6.945</a> Pattern Matcher, /
;;; although no code was borrowed.<br/><br/> /
;;; Pattern language reference is available /
;;; <a href='http://mpacula.com/scheme-tools/docs/pattern-language.html'>here</a>.



; MATCH RESULT

;;@ignore
(define clone (compose alist->hash-table hash-table->alist))

;;@ignore
(define (match-result:make) (make-strong-eqv-hash-table))

;;@ignore
(define match-result:variables identity)

;;@ignore
(define (match-result:get result name)
  (hash-table/get (match-result:variables result)
                  name #f))
;;@ignore
(define (match-result:bind result name value)
  (let ((cloned-result (clone result)))
    (hash-table/put! (match-result:variables cloned-result)
                     name value)
    cloned-result))



; MATCHER ABSTRACTION
; Patterns compile to matchers.

;;@ignore
;; Creates a new matcher. Supported types: single and segment.
;; Single matchers expect the success continuation to only
;; be a procedure of one argument: the result, whereas segment
;; matchers also pass the number of consumed list elements.
(define (matcher:make type proc #!optional variables)
  (cond ((default-object? variables)
         (set! variables '()))
        ((not (list? variables))
         (set! variables (list variables))))
  (list type proc variables))

;;@ignore
(define matcher:type first)
;;@ignore
(define matcher:proc second)

;;@ignore
;; Returns all pattern variables introduced by this matcher
;; and all submatchers.
(define matcher:variables third)




; IMPLEMENTATION OF VARIOUS MATCHERS

;;@ignore
;; Matches an element iff a predicate holds for that element.
(define (p:predicate predicate?)
  (matcher:make 'single
                (lambda (datum sofar success)
                  (if (predicate? datum)
                      (success sofar)
                      #f))))

;;@ignore
;; Only matches the specified literal.
(define (p:literal val)
  (p:predicate (identity? val)))

;;@ignore
;; A pattern variable. Matches a datum iff the (optional)
;; predicate holds, and binds it to the supplied name. If the
;; name is already bound, matches a datum iff the predicate holds
;; and the datum is c{equal?} to the bound value.
(define (p:variable name #!optional predicate?)

  (if (default-object? predicate?)
      (set! predicate? any?))

  ;;@ignore
  (define (match datum sofar success)
    (let ((current-value (match-result:get sofar name)))
      (cond ((and current-value (equal? current-value datum) (predicate? current-value))
             (success sofar))
            (current-value #f)
            ((predicate? datum) ; variable not yet bound to any values
             (success (if name (match-result:bind sofar name datum) sofar)))
            (else #f))))
  (if name
      (matcher:make 'single match name)
      (matcher:make 'single match)))

;;@ignore
;; Matches a list of patterns against a list. Supports segment variables.
(define (p:list . subpatterns)
  (matcher:make
   'single
   (lambda (datum sofar success)

     (let lp
         ((datum datum)
          (sofar sofar)
          (subpatterns subpatterns))

       (cond ((not (list? datum)) #f)
             ((and (null? subpatterns) (null? datum)) ; all patterns and all elements matched
              (success sofar))
             ((null? subpatterns) #f) ; we still have elements, but no more patterns
             (else
              (let* ((current-pattern (first subpatterns))
                     (type (matcher:type current-pattern))
                     (proc (matcher:proc current-pattern)))
                (cond ((and (eqv? type 'single) (not (null? datum)))
                       (proc (first datum)
                             sofar
                             (lambda (result)
                               (lp (cdr datum) result (cdr subpatterns)))))
                      ((eqv? type 'single) #f)
                      ((eqv? type 'segment)
                       (proc datum
                             sofar
                             (lambda (result n) ; n := number of consumed elements
                               (lp (list-tail datum n)
                                   result
                                   (cdr subpatterns)))))

                      (else
                       (println ";" type)
                       (error "Uknown matcher type"))))))))
   (no-dups (append-map matcher:variables subpatterns))))


;;@ignore
;; Matches a variable number of elements within a list, until either
;; the entire pattern matches, or all possible numbers of elements have been
;; tried.
(define (p:segment name #!optional predicate?)

  (if (default-object? predicate?)
      (set! predicate? any?))

  ;;@ignore
  (define (match datum sofar success)
    (let ((current-value (match-result:get sofar name)))
      (if current-value ; Variable is already bound. Check if it matches datum
          (and (list? current-value)
               (<= (length current-value) (length datum))
               (equal? current-value
                       (list-head datum (length current-value)))
                    (predicate? current-value)
                    (success sofar (length current-value)))
          ; Variable not yet bound
          (let lp
              ((n 0))
            (cond ((> n (length datum)) #f)
                  ((not (predicate? (list-head datum n))) (lp (1+ n)))
                  (else
                   (let ((result (success (if name
                                              (match-result:bind sofar name (list-head datum n))
                                              sofar)
                                          n)))
                     (or result
                         (lp (1+ n))))))))))

  (if name
      (matcher:make 'segment match name)
      (matcher:make 'segment match)))


;;@ignore
;; Matches pairs that are not lists. A cascade of p:pair's can be substituted
;; for p:list only if subpatterns have no segment variables.
(define (p:pair car-pattern cdr-pattern)
  (let ((car-proc (matcher:proc car-pattern))
        (cdr-proc (matcher:proc cdr-pattern)))
    (matcher:make
     'single
     (lambda (datum sofar success)
       (and (pair? datum)
            (car-proc (car datum)
                      sofar
                      (lambda (result)
                        (cdr-proc (cdr datum) result success)))))
     (no-dups (append (matcher:variables car-pattern)
                      (matcher:variables cdr-pattern))))))



; PATTERN LANGUAGE

;;@ignore
;; ?<name>
(define (simple-var? datum)
  (and (symbol? datum)
       (let ((as-list (string->list (symbol->string datum))))
         (and (>= (length as-list) 1)
              (eqv? #\? (first as-list))
              (or (null? (cdr as-list))
                  (not (eqv? (second as-list) #\?)))))))
;;@ignore
;; ?<name> -> <name>
(define (simple-var:name datum)
  (if (eqv? datum '?)
      #f
      (string->symbol (string-tail (symbol->string datum) 1))))

;;@ignore
;; (? <name> [optional: predicate])
(define (predicate-var? datum)
  (and (list? datum)
       (> (length datum) 1)
       (eqv? (first datum) '?)))

;;@ignore
;; ??<name>
(define (simple-segment? datum)
  (and (symbol? datum)
       (let ((as-list (string->list (symbol->string datum))))
         (and (>= (length as-list) 2)
              (eqv? #\? (first as-list))
              (eqv? #\? (second as-list))))))

;;@ignore
;; ?<name> -> <name>
(define (simple-segment:name datum)
  (if (eqv? datum '??)
      #f
      (string->symbol (string-tail (symbol->string datum) 2))))

;;@ignore
;; (?? <name> [optional: predicate])
(define (predicate-segment? datum)
  (and (list? datum)
       (> (length datum) 1)
       (eqv? (first datum) '??)))



; PATTERN LANGUAGE COMPILER

;; @ignore
;; The p:compile generic operator compiles the pattern language into pattern matchers.
;; Be default, if no specialized compiler exists, compile to a literal matcher.
(defgen p:compile 1 (lambda (val) (p:literal val)))

;; Compiling simple variables (e.g. ?x)
(defhandler p:compile (lambda (datum) (p:variable (simple-var:name datum))) simple-var?)

;; Compiling predicate variables (e.g. (? x ,even?))
(defhandler p:compile
  (lambda (datum)
    (cond ((eqv? (length datum) 3)
           (p:variable (second datum) (third datum)))
          ((eqv? (length datum) 2)
           (p:variable (second datum)))))
  predicate-var?)


;; Compiling simple segments (e.g. ??x)
(defhandler p:compile (lambda (datum) (p:segment (simple-segment:name datum))) simple-segment?)

;; Compiling predicate segments (e.g. (?? x ,even?))
(defhandler p:compile
  (lambda (datum)
    (cond ((eqv? (length datum) 3)
           (p:segment (second datum) (third datum)))
          ((eqv? (length datum) 2)
           (p:segment (second datum)))))
  predicate-segment?)



; Compiling lists
(defhandler p:compile (lambda (datum) (apply p:list (improper-map p:compile datum))) list?)

; Compiling pairs
(defhandler p:compile (lambda (datum) (p:pair (p:compile (car datum))
                                              (p:compile (cdr datum))))
  pair?)



;; @ignore
;; Creates a procedure which can be used to match against the given pattern.
(define (p:matcher pattern)
  (let* ((compiled (p:compile pattern))
         (proc (matcher:proc compiled)))
    (lambda (datum)
      (proc datum (match-result:make) identity))))


;; @ignore
;; Matches a datum against a pattern, returning the result.
(define (p:match pattern datum) ((p:matcher pattern) datum))

;; @ignore
;; Like p:match, but fails with an error message if the pattern doesn't match.
(define (p:assert-match pattern datum)
  (or (p:match pattern datum)
      (error "Pattern matching failed.")))


;; @ignore
;; Matches a pattern on datum, and calls consequent-thunk with the match result
;; if the pattern matches, or alternative-thunk with no arguments if it does not.
(define (p:if-matches pattern datum consequent-thunk alternative-thunk)
  (let ((match-result (p:match pattern datum)))
    (cond (match-result ; match succeeded!
           (consequent-thunk match-result))
          (else (alternative-thunk)))))


;; @ignore
;; True if c{pattern} matches c{datum}, false otherwise.
(define (p:matches? pattern datum)
  (p:if-matches pattern datum (constant #t) (constant #f)))





; EXTERNAL API - plet, plet*, pdefine, pcase


;; @ignore
;; A helper method for the c{plet} macro. Given a list of pairs,
;; (pattern datum), plet-make-bindings transforms it into a pair
;; of "let" bindings s.t.:
;;  1. the car of the pair is a list of p:match invocations
;;     bound to named match results. For example:
;;     ((@mr0 (p:match '(?a . ?b) p1)) (@mr1 (p:match '(?c . ?d) p2)))
;;  2. the cdr is a list of pattern variable bindings, e.g.:
;;       ((a (match-result:get @mr0 'a))
;;        (b (match-result:get @mr0 'b))
;;        (c (match-result:get @mr1 'c))
;;        (d (match-result:get @mr1 'd)))
(define (plet-make-bindings pattern-pairs rename)
  (let lp
      ((i 0)
       (pattern-pairs pattern-pairs))
    (cond ((null? pattern-pairs) (cons () ()))
          (else
           (let* ((first-pair (first pattern-pairs))
                  (pattern    (car first-pair))
                  (datum      (cadr first-pair))
                  (compiled   (p:compile pattern))
                  (mr         (rename (string->symbol (string-append "@mr" (number->string i)))))
                  (vars       (matcher:variables compiled))
                  (bindings   (map (lambda (var)
                                     (list var `(match-result:get ,mr (quote ,var))))
                                   vars))
                  (next-bindings (lp (1+ i) (cdr pattern-pairs))))
             (cons (cons `(,mr (p:assert-match ,(list 'quasiquote pattern) ,datum))
                         (car next-bindings))
                   (append bindings (cdr next-bindings))))))))


;; Matches patterns against datums, and executes c{body} in an environment
;; with pattern variables bound. For example, here's how
;; one might use c{plet} to implement vector addition, where a vector is a
;; cons pair:
;; <pre>
;; (define vec1 (cons 1 2))
;; ;Value: vec1
;;
;; (define vec2 (cons 3 4))
;; ;Value: vec2
;;
;; (define (vector-add x y)
;;   (plet (((?x1 . ?x2) x)
;;          ((?y1 . ?y2) y))
;;         (cons (+ x1 y1) (+ x2 y2))))
;; ;Value: vector-add
;;
;; (vector-add vec1 vec2)
;; ;Value 86: (4 . 6)
;;</pre>
;; @args ({(pattern datum)}) body
(define-syntax plet
  (er-macro-transformer
   (lambda (expr rename compare)
     (let ((pattern-pairs (cadr expr))    ; pattern-pairs := {(pattern_i datum_i)}
           (body          (cddr expr)))   ; body of the plet (everything after pattern-pairs)
       (cond ((null? pattern-pairs) `(let () ,@body)) ; no patterns to match, i.e. (plet () body)

             (else ; at least one pattern to match
              (let ((bindings (plet-make-bindings pattern-pairs rename)))
                `(let ,(car bindings)
                   (let ,(cdr bindings)
                     ,@body)))))))))




;; Like c{plet}, but each subsequent pattern-datum pair is evaluated in an environment
;; with all previous matches bound.
;; <pre>
#|
(plet* ((p1 d1)
        (p2 d2)
        ...
        (pn dn))
       e1
       e2
       ...)
|#
;;</pre>
;; is equivalent to
;; <pre>
#|
(plet ((p1 d1))
      (plet ((p2 d2))
            ...
            (plet ((pn dn)
                   e1
                   e2
                   ...)))).
|#
;; </pre>
;; @args ({(pattern datum)}) body
(define-syntax plet*
  (er-macro-transformer
   (lambda (expr rename compare)
     (let ((pattern-pairs (cadr expr))    ; pattern-pairs := {(pattern_i datum_i)}
           (body          (cddr expr)))   ; body of the plet* (everything after pattern-pairs)
       (cond ((null? pattern-pairs) `(let () ,@body)) ; no patterns to match, i.e. (plet () body)
             (else ; at least one pattern to match
              `(plet ,(list (car pattern-pairs))
                     (plet* ,(cdr pattern-pairs)
                            ,@body))))))))


;; @ignore
;; True if c{obj} is a procedure that dispatches
;; based on argument patterns, false otherwise.
(define (pattern-procedure? obj)
  (note:get obj 'is-pattern-procedure #f))


;; @args (name {argument pattern}) body
;; Defines a procedure that dispatches based on argument patterns. For example, c{pdefine}
;; might be used to define the factorial function:
;; <pre>
#|
(pdefine (fact 0) 1)
;Value: ok

(pdefine (fact ?n) (* n (fact (-1+ n))))
;Value: ok

(fact 5)
;Value: 120
|#
;; </pre>
;; Similarly, one might use c{pdefine} to implement vector addition:
;; <pre>
#|
(pdefine (vector-add (?x1 . ?x2) (?y1 . ?y2))
         (cons (+ x1 y1) (+ x2 y2)))
;Value: ok

(vector-add (cons 1 2) (cons 3 4))
;Value 89: (4 . 6)
|#
;; </pre>
;; Argument patterns can utilize all features of the pattern language, such as
;; variable-length segments. In the
;; example below. Anonymous segment patterns are used to check
;; whether a list contains at least one number:
;; <pre>
#|
(pdefine (has-number? (??prefix (? num ,number?) ??suffix)) #t)
;Value: ok

(pdefine (has-number? ?obj) #f)
;Value: ok

(has-number? '(a b c 1 d e))
;Value: #t

(has-number? '(a b c d e))
;Value: #f
|#
;; </pre>
;; <b>Note</b>: Functions created using c{pdefine} are bound in c{user-initial-environment}.
(define-syntax pdefine
  (er-macro-transformer
   (lambda (expr rename compare)
     (let* ((name     (car (second expr)))
            (patterns (cdr (second expr)))
            (body     (cddr expr))
            (predicates (map (lambda (pattern)
                               `(curry p:matches? ,(list 'quasiquote pattern)))
                             patterns)))
       `(begin
          ; register new generic operator if this is the first definition
          ; of the function
          (cond ((not (default-on-error #f (lambda () (pattern-procedure? ,name))))
                 (environment-define
                  user-initial-environment
                  (quote ,name)
                  (genop:make (quote ,name) ,(length patterns)
                              (lambda args
                                (error ,(string-append "Non-exhaustive patterns in function "
                                                       (symbol->string name))))))
                 (note:attach! ,name (quote is-pattern-procedure) #t)))

          ; now register a handler
         (defhandler ,name
            (lambda args
              (plet ,(map (lambda (pattern-index)
                            (let ((pattern (car  pattern-index))
                                  (index   (cadr pattern-index)))
                              `(,pattern (list-ref args ,index))))
                          (zip patterns (range 0 (length patterns))))
                    ,@body))
            ,@predicates))))))



;; @args datum {(pattern {expression})}
;; Looks for the first c{pattern} that matches c{datum}, and executes
;; the associated c{expression}s in an environment with bound pattern
;; variables, returning then result. If no patterns match. the return
;; value is undefined.<br/><br/>
;; Example:
;; <pre>
#|
(pdefine (find ?elt ?a-list)
         (pcase a-list
                ((??prefix ,elt ??suffix) elt)
                (? #f)))
;Value: ok

(find 1 '(2 3 4 5))
;Value: #f

(find 1 '(2 3 a b 1 7 8))
;Value: 1

(find 'b '(2 3 a b 1 7 8))
;Value: b
|#
;; </pre>
(define-syntax pcase
  (syntax-rules ()
    ((pcase datum (pattern1 e1 ...) (pattern2 e2 ...) ...)
     (if (p:matches? (quasiquote pattern1) datum)
         (plet ((pattern1 datum))
               e1 ...)
         (pcase datum (pattern2 e2 ...) ...)))
    ((pcase datum (pattern e1 ...))
     (if (p:matches? (quasiquote pattern) datum)
         (plet ((pattern datum))
               e1 ...)
         (pcase  datum)))
    ((pcase datum)
     #!unspecific)))
