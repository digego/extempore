;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; standard prelude for xtlang
;;

;; prelude loads algebraic data types
(sys:load "libs/base/adt.xtm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; currying

(bind-func curry:[[!r,!a]*,[!r,!a]*]* -> (lambda (r f) (t:closure-size? f 1))
  (lambda (f) f))

(bind-func curry:[[[!r,!b]*,!a]*,[!r,!a,!b]*]* -> (lambda (r f) (t:closure-size? f 2))
  (lambda (f) (lambda (a) (lambda (b) (f a b)))))

(bind-func curry:[[[[!r,!c]*,!b]*,!a]*,[!r,!a,!b,!c]*]* -> (lambda (r f) (t:closure-size? f 3))
  (lambda (f) (lambda (a) (lambda (b) (lambda (c) (f a b c))))))

(bind-func curry:[[[[[!r,!d]*,!c]*,!b]*,!a]*,[!r,!a,!b,!c,!d]*]* -> (lambda (r f) (t:closure-size? f 4))
  (lambda (f) (lambda (a) (lambda (b) (lambda (c) (lambda (d) (f a b c d)))))))

(bind-func curry:[[[[[[!r,!e]*,!d]*,!c]*,!b]*,!a]*,[!r,!a,!b,!c,!d,!e]*]* -> (lambda (r f) (t:closure-size? f 5))
  (lambda (f) (lambda (a) (lambda (b) (lambda (c) (lambda (d) (lambda (e) (f a b c d e))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; List

(bind-data List{!a}
           (Nil)
           (Cons !a List{!a}*))

;; print & toString for lists
(bind-func toString_help:[String*,List{!a}*,String*]*
  (lambda (lst s)
    (Cons$ lst (x xs)
              (Nil$ xs ()
                       (toString_help xs (cat s (toString x)))
                       (toString_help xs (cat s (toString x) (Str ","))))
              (cat s (Str "]")))))

(bind-func print:[void,List{!a}*]*
  (lambda (lst)
    (printout (toString_help lst (Str "[")))
    void))

(bind-func toString:[String*,List{!a}*]*
  (lambda (lst)
    (toString_help lst (Str "["))))

(bind-func append:[List{!a}*,List{!a}*,List{!a}*]*
  (lambda (as bs)
    (Cons$ as (x xs) (Cons x (append xs bs)) bs)))

;; also known as 'flatten'
(bind-func join:[List{!a}*,List{List{!a}*}*]*
  (lambda (M)
    (Cons$ M (xs xss) (append xs (join xss)) (Nil))))

(bind-func fmap:[List{!b}*,[!b,!a]*,List{!a}*]*
  (lambda (f F)
    (Cons$ F (x xs) (Cons (f x) (fmap f xs)) (Nil))))

;; also known as 'bind'
(bind-func flatmap:[List{!b}*,List{!a}*,[List{!b}*,!a]*]*
  (lambda (M f)
    ;; alternate implementation using join and fmap
    ;; (join (fmap f M))))
    (Cons$ M (x xs) (append (f x) (flatmap xs f)) (Nil))))

;; also known as 'pure' or 'return'
(bind-func unit:[List{!a}*,!a]*
  (lambda (x)
    (Cons x (Nil))))

;; also known as 'ap' or '<*>'
(bind-func apply:[List{!b}*,List{[!b,!a]*}*,List{!a}*]*
  (lambda (F1 F2)
    (Cons$ F1 (f fs)
              (Cons$ F2 (x xs)
                        (Cons (f x) (apply fs xs))
                        (Nil))
              (Nil))))

;; also known as 'accum' or 'reduce'
(bind-func foldl:[!b,[!b,!b,!a]*,!b,List{!a}*]*
  (lambda (fn start lst)
    (Cons$ lst (x xs)
           (foldl fn (fn start x) xs)
           start)))

(bind-func foldr:[!b,[!b,!b,!a]*,!b,List{!a}*]*
  (lambda (fn start lst)
    (Cons$ lst (x xs)
           (fn x (foldr fn start xs))
           start)))

;; list range function (inclusive min & max)
;; (bind-func range:[List{!a}*,!a,!a]*
;;   (lambda (mn mx)
;;     (if (> mn mx)
;;         (Nil)
;;         (Cons mn (range (+ mn (convert 1)) mx)))))

;; tail recursive version of range
(bind-func range:[List{!a}*,!a,!a,!a]*
  (lambda (mn mx i)
    (let ((rng (lambda (m x lst)
                 (if (< x m)
                     lst
                     (rng m (- x i) (Cons x lst))))))
      (rng mn mx (Nil)))))

(bind-func range:[List{!a}*,!a,!a]*
  (lambda (mn mx)
    (range mn mx (convert 1))))

(bind-func range:[List{!a}*,!a]*
  (lambda (mx)
    (range (convert 0) mx (convert 1))))

;; (bind-func reverse:[List{!a}*,List{!a}*]*
;;   (lambda (lst)
;;     (Cons$ lst (x xs)
;;            (append (reverse xs) (unit x))
;;            (Nil))))

;; tail recursive reverse
(bind-func reverse:[List{!a}*,List{!a}*]*
  (lambda (lst)
    (let ((rev (lambda (old new)
                 (if (Nil$ lst () #t #f)
                     rlst
                     (rev (Cons$ old (x xs) xs (Nil))
                          (Cons$ old (x xs)
                                    (Cons x new)
                                    (Nil)))))))
      (rev lst (Nil)))))

;; support 'List' abstraction
;; (List 1 2 3 4) etc..
(define (PreludeList . args)
  (if (null? args)
      `(Nil)
      (list 'Cons
            (car args)
            (apply PreludeList (cdr args)))))

(bind-macro (List . args) (apply PreludeList args))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; maybe
;;

(bind-data Option{!a}
           (Some !a)
           (None))

(bind-func toString:[String*,Option{!a}*]*
  (lambda (F)
    (Some$ F (x)
              (toString x)
              '_')))

(bind-func print:[void,Option*]*
  (lambda (F)
    (printout (toString F))))

;; also known as map, lift
(bind-func fmap:[Option{!b}*,[!b,!a]*,Option{!a}*]*
  (lambda (f F)
    (Some$ F (x) (Some (f x)) (None))))

(bind-func join:[Option{!a}*,Option{Option{!a}*}*]*
  (lambda (M)
    (Some$ M (x) x (None))))

;; it's more convenient to have the function in last arg position
(bind-func flatmap:[Option{!b}*,Option{!a}*,[Option{!b}*,!a]*]*
  (lambda (M f)
    ;; (join (fmap f M)))) ;; alternate using join & fmap
    (Some$ M (x) (f x) (None))))

;; also known as return or pure
(bind-func unit:[Option{!a}*,!a]*
  (lambda (x)
    (Some x)))

;; also known as <*> or ap
(bind-func apply:[Option{!b}*,Option{[!b,!a]*}*,Option{!a}*]*
  (lambda (F1 F2)
    (Some$ F1 (f)
              (Some$ F2 (x)
                        (Some (f x))
                        (None))
              (None))))
