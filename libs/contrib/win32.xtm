;;; Code:

;;; win32.xtm -- Win32 api bits and pieces

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: kernel32.dll

;;; Commentary:

;;

;;; Code:

;; load adt!
(sys:load "libs/core/adt.xtm")


(bind-dylib libkernel32 "Kernel32.dll")
(bind-dylib libuser32 "User32.dll")
(bind-dylib libshell32 "Shell32.dll")
(bind-dylib libwmapi "Dwmapi.dll")
(bind-dylib libgdi "Gdi32.dll")

(bind-alias HANDLE i8*)
(bind-alias HINSTANCE i8*)
(bind-alias HBITMAP i8*)
(bind-alias HGDIOBJ i8*)
(bind-alias DWORD i32)
(bind-alias WORD i16)
(bind-alias SHORT i16)
(bind-alias INT i32)
(bind-alias UINT i32)
(bind-alias UINT32 i32)
(bind-alias INT32 i32)
(bind-alias UINT64 i64)
(bind-alias INT64 i64)
(bind-alias LONG i32)
(bind-alias LONGLONG i64)
(bind-alias HRESULT i32)
(bind-alias DWORD_PTR i64)
(bind-alias BOOL i1)
(bind-alias BYTE i8)
(bind-alias PDWORD_PTR i64*) ;; pointer to DWORD_PTR
(bind-alias LONG_PTR i64)  ;; not actually a ptr!
(bind-alias LRESULT i64)
(bind-alias ULONG_PTR i64) ;; not actually a ptr!
(bind-alias ULONGLONG i64)
(bind-alias LPVOID i8*)
(bind-alias LPSTR i8*)
(bind-alias LPCSTR i8*)
(bind-alias LPCTSTR i8*) ;; I think this is OK but wide char might be 16bit??
(bind-alias LPTSTR i8*)

(if (= 64 (sys:pointer-size))
    (bind-alias WPARAM i64)
    (bind-alias WPARAM i32))
(if (= 64 (sys:pointer-size))
    (bind-alias LPARAM i64)
    (bind-alias LPARAM i32))

(bind-type POINT <LONG,LONG>) ;; x y
(bind-type POINTS <SHORT,SHORT>) ;; x y
(bind-alias LPPOINT POINT*)
(bind-type RECT <LONG,LONG,LONG,LONG>) ;; left,top,right,bottom
(bind-alias LPRECT RECT*)

(bind-func left (lambda (r:LPRECT) (tref r 0)))
(bind-func top (lambda (r:LPRECT) (tref r 1)))
(bind-func right (lambda (r:LPRECT) (tref r 2)))
(bind-func bottom (lambda (r:LPRECT) (tref r 3)))

;; typedef struct tagRGBQUAD {
;;   BYTE rgbBlue;
;;   BYTE rgbGreen;
;;   BYTE rgbRed;
;;   BYTE rgbReserved;
;; } RGBQUAD;
(bind-type RGBQUAD <BYTE,BYTE,BYTE,BYTE>)

;; typedef struct tagBITMAPINFOHEADER {
;;   DWORD biSize;
;;   LONG  biWidth;
;;   LONG  biHeight;
;;   WORD  biPlanes;
;;   WORD  biBitCount;
;;   DWORD biCompression;
;;   DWORD biSizeImage;
;;   LONG  biXPelsPerMeter;
;;   LONG  biYPelsPerMeter;
;;   DWORD biClrUsed;
;;   DWORD biClrImportant;
;; } BITMAPINFOHEADER, *PBITMAPINFOHEADER;
(bind-type BITMAPINFOHEADER <DWORD,LONG,LONG,WORD,WORD,DWORD,DWORD,LONG,LONG,DWORD,DWORD>)

(bind-type BITMAPINFO <BITMAPINFOHEADER,|1,RGBQUAD|>)
(bind-alias LPBITMAPINFO BITMAPINFO*)

(bind-func biSize (lambda (obj:BITMAPINFO*) (tref (tref-ptr obj 0) 0)))
(bind-func biWidth (lambda (obj:BITMAPINFO*) (tref (tref-ptr obj 0) 1)))
(bind-func biHeight (lambda (obj:BITMAPINFO*) (tref (tref-ptr obj 0) 2)))
(bind-func biCompression (lambda (obj:BITMAPINFO*) (tref (tref-ptr obj 0) 5)))
(bind-func biCompression (lambda (obj:BITMAPINFO* val:DWORD) (tset! (tref-ptr obj 0) 5 val)))
(bind-func biSizeImage (lambda (obj:BITMAPINFO*) (tref (tref-ptr obj 0) 6))) ;; image size in bytes


;; typedef struct tagBITMAP {
;;   LONG   bmType;
;;   LONG   bmWidth;
;;   LONG   bmHeight;
;;   LONG   bmWidthBytes;
;;   WORD   bmPlanes;
;;   WORD   bmBitsPixel;
;;   LPVOID bmBits;
;; } BITMAP, *PBITMAP;
(bind-type BITMAP <LONG,LONG,LONG,LONG,WORD,WORD,LPVOID>)

(bind-func bmType (lambda (img:BITMAP*) (tref img 0)))
(bind-func bmWidth (lambda (img:BITMAP*) (tref img 1)))
(bind-func bmHeight (lambda (img:BITMAP*) (tref img 2)))
(bind-func bmWidthBytes (lambda (img:BITMAP*) (tref img 3)))
(bind-func bmPlanes (lambda (img:BITMAP*) (tref img 4)))
(bind-func bmBitsPixel (lambda (img:BITMAP*) (tref img 5)))
(bind-func bmBits (lambda (img:BITMAP*) (tref img 6)))

(bind-type MOUSEINPUT <i32,i32,DWORD,DWORD,DWORD,i64>)
(bind-type KEYBDINPUT <WORD,WORD,DWORD,DWORD,i64>)
(bind-type HARDWAREINPUT <DWORD,WORD,WORD>)
(bind-type INPUT <DWORD,MOUSEINPUT>) ;; MOUSEINPUT should really be a union of the above!
(bind-alias LPINPUT INPUT*)

(bind-val REALTIME_PRIORITY_CLASS i32 256)
(bind-val HIGH_PRIORITY_CLASS i32 128)
(bind-val ABOVE_NORMAL_PRIORITY_CLASS i32 32768)
(bind-val NORMAL_PRIORITY_CLASS i32 32)
(bind-val BELOW_NORMAL_PRIORITY_CLASS i32 16384)
(bind-val IDLE_PRIORITY_CLASS i32 64)

(bind-val ALL_PROCESSOR_GROUPS i32 -1)

(bind-lib libkernel32 GetCurrentProcess [HANDLE]*)
(bind-lib libkernel32 SetPriorityClass [i1,HANDLE,DWORD]*)
(bind-lib libkernel32 GetPriorityClass [DWORD,HANDLE]*)
(bind-lib libkernel32 GetProcessAffinityMask [i1,HANDLE,PDWORD_PTR,PDWORD_PTR]*)
(bind-lib libkernel32 SetProcessAffinityMask [i1,HANDLE,DWORD_PTR]*)
(bind-lib libkernel32 GetMaximumProcessorCount [DWORD,DWORD]*)
(bind-lib libkernel32 GetActiveProcessorCount [DWORD,DWORD]*)
(bind-lib libkernel32 SetProcessPriorityBoost [i1,HANDLE,i1]*)
(bind-lib libkernel32 GetLastError [DWORD]*)

(bind-alias HWND i8*)
(bind-alias HDC i8*)
(bind-alias WNDPROC [LRESULT,HWND,UINT,WPARAM,LPARAM]*)

(bind-val GWL_EXSTYLE i32 -20)
(bind-val GWL_HINSTANCE i32 -6)
(bind-val GWL_HWNDPARENT i32 -8)
(bind-val GWL_ID i32 -12)
(bind-val GWL_STYLE i32 -16)
(bind-val GWL_USERDATA i32 -21)
(bind-val GWL_WNDPROC i32 -4)
(bind-val GWLP_WNDPROC i32 -4)

(bind-val WS_OVERLAPPED DWORD #x00000000)
(bind-val WS_CAPTION DWORD #x00C00000)
(bind-val WS_SYSMENU DWORD #x00080000)
(bind-val WS_THICKFRAME DWORD #x00040000)
(bind-val WS_MINIMIZEBOX DWORD #x00020000)
(bind-val WS_MAXIMIZEBOX DWORD #x00010000)
(bind-val WS_POPUP DWORD #x80000000)
(bind-val WS_OVERLAPPEDWINDOW DWORD (+ WS_OVERLAPPED WS_CAPTION WS_SYSMENU WS_THICKFRAME WS_MINIMIZEBOX WS_MAXIMIZEBOX))

(bind-val WM_NULL DWORD #x0000)
(bind-val WM_DESTROY DWORD #x0002)
(bind-val WM_MOVE DWORD #x0003)
(bind-val WM_SIZE DWORD #x0005)
(bind-val WM_SIZING DWORD #x0214)
(bind-val WM_MOVING DWORD #x0216)
(bind-val WM_QUIT DWORD #x0012)
(bind-val WM_SHOWWINDOW DWORD #x0018)
(bind-val WM_WINDOWPOSCHANGING DWORD #x0046)
(bind-val WM_WINDOWPOSCHANGED DWORD #x0047)
(bind-val WM_MOUSEMOVE DWORD #x0200)
(bind-val WM_TOUCH DWORD #x0240)
(bind-val WM_NCPOINTERUPDATE DWORD #x0241)
(bind-val WM_NCPOINTERDOWN DWORD #x0242)
(bind-val WM_NCPOINTERUP DWORD #x0243)
(bind-val WM_POINTERUPDATE DWORD #x0245)
(bind-val WM_POINTERDOWN DWORD #x0246)
(bind-val WM_POINTERUP DWORD #x0247)
(bind-val WM_POINTERWHEEL DWORD #x024E)
(bind-val WM_POINTERHWHEEL DWORD #x024F)

(bind-val WM_GESTURE DWORD #x0119)
(bind-val WM_GESTURENOTIFY DWORD #x011A)

(bind-val GID_BEGIN                       DWORD 1)
(bind-val GID_END                         DWORD 2)
(bind-val GID_ZOOM                        DWORD 3)
(bind-val GID_PAN                         DWORD 4)
(bind-val GID_ROTATE                      DWORD 5)
(bind-val GID_TWOFINGERTAP                DWORD 6)
(bind-val GID_PRESSANDTAP                 DWORD 7)
(bind-val GID_ROLLOVER                    DWORD GID_PRESSANDTAP)

(bind-val GC_ALLGESTURES DWORD #x00000001)
(bind-val GC_ZOOM DWORD #x00000001)
(bind-val GC_PAN DWORD #x00000001)
(bind-val GC_ROTATE DWORD #x00000001)
(bind-val GC_TWOFINGERTAP DWORD #x00000001)
(bind-val GC_PRESSANDTAP DWORD #x00000001)

(bind-val TOUCHEVENTF_MOVE            DWORD #x0001)
(bind-val TOUCHEVENTF_DOWN            DWORD #x0002)
(bind-val TOUCHEVENTF_UP              DWORD #x0004)
(bind-val TOUCHEVENTF_INRANGE         DWORD #x0008)
(bind-val TOUCHEVENTF_PRIMARY         DWORD #x0010)
(bind-val TOUCHEVENTF_NOCOALESCE      DWORD #x0020)
(bind-val TOUCHEVENTF_PEN             DWORD #x0040)
(bind-val TOUCHEVENTF_PALM            DWORD #x0080)

(bind-val GCLP_WNDPROC DWORD -24)

;; system metrics

(bind-val SM_CXSCREEN i32 0)
(bind-val SM_CYSCREEN i32 1)

(bind-lib libuser32 GetSystemMetrics [i32,i32]*)

;; typedef struct _GESTUREINFO {
;;   UINT      cbSize;
;;   DWORD     dwFlags;
;;   DWORD     dwID;
;;   HWND      hwndTarget;
;;   POINTS    ptsLocation;
;;   DWORD     dwInstanceID;
;;   DWORD     dwSequenceID;
;;   ULONGLONG ullArguments;
;;   UINT      cbExtraArgs;
;; } GESTUREINFO, *PGESTUREINFO;

;; DODGY! extra DWORD inserted after POINTS for correct size_of????
(bind-type GESTUREINFO <UINT,DWORD,DWORD,HWND,POINTS,DWORD,DWORD,DWORD,ULONGLONG,UINT>)
(bind-type GESTURECONFIG <DWORD,DWORD,DWORD>)

(bind-val GF_BEGIN   DWORD #x00000001)
(bind-val GF_INERTIA DWORD #x00000002)
(bind-val GF_END DWORD #x00000004)

(bind-alias HGESTUREINFO i8*)

(bind-lib libuser32 SetGestureConfig [BOOL,HWND,DWORD,UINT,GESTURECONFIG*,UINT]*)
(bind-lib libuser32 GetGestureInfo [BOOL,HGESTUREINFO,GESTUREINFO*]*)
(bind-lib libuser32 CloseGestureInfoHandle [BOOL,HGESTUREINFO]*)

;; typedef struct tagTOUCHINPUT {
;;     LONG x;
;;     LONG y;
;;     HANDLE hSource;
;;     DWORD dwID;
;;     DWORD dwFlags;
;;     DWORD dwMask;
;;     DWORD dwTime;
;;     ULONG_PTR dwExtraInfo;
;;     DWORD cxContact;
;;     DWORD cyContact;
;; } TOUCHINPUT, *PTOUCHINPUT;
(bind-type TOUCHINPUT <LONG,LONG,HANDLE,DWORD,DWORD,DWORD,DWORD,ULONG_PTR,DWORD,DWORD> (printer? . #f))

(bind-func print:[void,TOUCHINPUT*]*
  (lambda (obj)
    (printout "<TOUCH id(" (tref obj 3) ") x(" (/ (i32tod (tref obj 0)) 100.0) ") y(" (/ (i32tod (tref obj 1)) 100.0) ")>")
    void))

(bind-func get_touch_id:[i32,TOUCHINPUT*]*
  (lambda (obj)
    (tref obj 3)))

;; touches are 1/100 of a pixel
(bind-func get_touch_x:[float,TOUCHINPUT*]*
  (lambda (obj)
    (/ (i32tof (tref obj 0)) 100.0)))

;; touches are 1/100 of a pixel
(bind-func get_touch_y:[float,TOUCHINPUT*]*
  (lambda (obj)
    (/ (i32tof (tref obj 1)) 100.0)))

;; predicate
(bind-func is_touch_up:[i1,TOUCHINPUT*]*
  (lambda (obj)
    (if (= (& (tref obj 4) TOUCHEVENTF_UP) 0)
        #f #t)))

;; predicate
(bind-func is_touch_down:[i1,TOUCHINPUT*]*
  (lambda (obj)
    (if (= (& (tref obj 4) TOUCHEVENTF_DOWN) 0)
        #f #t)))

;; predicate
(bind-func is_touch_move:[i1,TOUCHINPUT*]*
  (lambda (obj)
    (if (= (& (tref obj 4) TOUCHEVENTF_MOVE) 0)
        #f #t)))

;; predicate
(bind-func is_touch_palm:[i1,TOUCHINPUT*]*
  (lambda (obj)
    (if (= (& (tref obj 4) TOUCHEVENTF_PALM) 0)
        #f #t)))

;; predicate
(bind-func is_touch_pen:[i1,TOUCHINPUT*]*
  (lambda (obj)
    (if (= (& (tref obj 4) TOUCHEVENTF_PEN) 0)
        #f #t)))


(bind-alias PTOUCHINPUT TOUCHINPUT*)
(bind-alias HTOUCHINPUT TOUCHINPUT*)

(bind-lib libuser32 WindowFromDC [HWND,HDC]*)
(bind-lib libuser32 BringWindowToTop [BOOL,HWND]*)
(bind-lib libuser32 SetFocus [HWND,HWND]*)
(bind-lib libuser32 GetWindowLongA [DWORD,HWND,i32]*)
(bind-lib libuser32 GetWindowLongPtrW [LONG_PTR,HWND,i32]*)
(bind-lib libuser32 GetWindowLongPtrA [LONG_PTR,HWND,i32]*)
(bind-lib libuser32 SetWindowLongA [DWORD,HWND,i32,DWORD]*)
(bind-lib libuser32 SetWindowLongPtrW [DWORD,HWND,i32,LONG_PTR]*)
(bind-lib libuser32 SetWindowLongPtrA [DWORD,HWND,i32,LONG_PTR]*)
(bind-lib libuser32 SendInput [UINT,UINT,LPINPUT,i32]*)
;; (bind-lib libuser32 SetWindowsHookEx [HHOOK,i32,HOOKPROC,HINSTANCE,DWORD]*)
(bind-lib libuser32 SetClassLongPtrA [ULONG_PTR,HWND,i32,LONG_PTR]*)
;; where i8* is a char[num] and final i32 is num
(bind-lib libuser32 GetWindowTextA [i32,HWND,i8*,i32]*)
(bind-lib libuser32 SetWindowTextA [BOOL,HWND,i8*]*)
(bind-lib libuser32 GetWindowRect [BOOL,HWND,LPRECT]*)
(bind-lib libuser32 DefWindowProcA [LRESULT,HWND,i32,WPARAM,LPARAM]*)
(bind-lib libuser32 CallWindowProcA [LRESULT,WNDPROC,HWND,i32,WPARAM,LPARAM]*)
(bind-lib libuser32 RegisterTouchWindow [BOOL,HWND,i64]*)
(bind-lib libuser32 IsTouchWindow [BOOL,HWND,i64*]*)
(bind-lib libuser32 GetTouchInputInfo [BOOL,HTOUCHINPUT,i32,PTOUCHINPUT,i32]*)
(bind-lib libuser32 CloseTouchInputHandle [BOOL,HTOUCHINPUT]*)
(bind-lib libuser32 FindWindowA [HWND,LPCTSTR,LPCTSTR]*)
(bind-lib libuser32 GetForegroundWindow [HWND]*)
(bind-lib libuser32 GetClientRect [BOOL,HWND,LPRECT]*)
(bind-lib libuser32 GetDC [HDC,HWND]*)
(bind-lib libuser32 PrintWindow [BOOL,HWND,HDC,UINT]*)
(bind-lib libuser32 ReleaseDC [i32,HWND,HDC]*)
(bind-lib libuser32 SetActiveWindow [HWND,HWND]*)
(bind-lib libuser32 SetForegroundWindow [BOOL,HWND]*)
(bind-lib libuser32 SetCursorPos [BOOL,INT,INT]*)
(bind-lib libuser32 GetCursorPos [BOOL,LPPOINT]*)
(bind-lib libuser32 GetAsyncKeyState [SHORT,INT]*)
(bind-lib libuser32 mouse_event [void,DWORD,DWORD,DWORD,DWORD,ULONG_PTR]*)

(bind-lib libkernel32 GetConsoleWindow [HWND]*)

(bind-val OLD_WINDOWS_WNDPROC i8*)

(bind-func get_cursor_pos:[<float,float>]*
  (let ((p:LPPOINT (alloc)))
    (lambda ()
      (GetCursorPos p)
      (tuple (convert (tref p 0) float) (convert (tref p 1) float)))))

(bind-func set_window_wndproc
  (lambda (window:HWND proc:i8*)  ;; proc must be native [LRESULT,HWND,UINT,WPARAM,LPARAM]*
    (let (;; (res (SetClassLongPtrA window GCLP_WNDPROC (ptrtoi64 proc)))
          ;; (oldproc (i64toptr (GetWindowLongPtrW window GWL_WNDPROC)))
          ;; (res (SetWindowLongPtrW window GWL_WNDPROC (ptrtoi64 proc))))
          (oldproc (i64toptr (GetWindowLongPtrA window GWL_WNDPROC)))
          (res (SetWindowLongPtrA window GWL_WNDPROC (ptrtoi64 proc))))
      (if (null? oldproc)
          (println "Error retrieving OLDPROC")
          (println "Success retrieving OLDPROC"))
      (set! OLD_WINDOWS_WNDPROC oldproc)
      (if (= res 0)
          (println "Error setting wndproc: err(" (GetLastError) ")")
          (println "Sucessess setting wndproc!")))
    void))

(bind-val INPUT_MOUSE i32 0)
(bind-val INPUT_KEYBOARD i32 1)
(bind-val INPUT_HARDWARE i32 2)
(bind-val XBUTTON1 i32 #x0001)
(bind-val XBUTTON2 i32 #x0002)
(bind-val MOUSEEVENTF_ABSOLUTE i32 #x8000)
(bind-val MOUSEEVENTF_HWHEEL i32 #x01000)
(bind-val MOUSEEVENTF_MOVE i32 #x0001)
(bind-val MOUSEEVENTF_MOVE_NOCOALESCE i32 #x2000)
(bind-val MOUSEEVENTF_VIRTUALDESK i32 #x4000)
(bind-val MOUSEEVENTF_LEFTDOWN i32 #x0002)
(bind-val MOUSEEVENTF_LEFTUP i32 #x0004)
(bind-val MOUSEEVENTF_RIGHTDOWN i32 #x0008)
(bind-val MOUSEEVENTF_RIGHTUP i32 #x0010)
(bind-val MOUSEEVENTF_MIDDLEDOWN i32 #x0020)
(bind-val MOUSEEVENTF_MIDDLETUP i32 #x0040)

;; mouse down = -1
;; mouse up = 1
;; otherwise = 0
;; (bind-func mouse_injection2
;;   (let ((evt:LPINPUT (alloc 1))
;;         (mi (tref-ptr evt 1)))
;;     (memset (cast evt i8*) 0 40)
;;     (tset! evt 0 INPUT_MOUSE)
;;     (lambda (x:float y:float down_or_up:i32)
;;       (let ((md (cond ((< down_or_up 0:i32)
;;                        (bitwise-or 0:i32 MOUSEEVENTF_LEFTDOWN))
;;                       ((> down_or_up 0:i32)
;;                        (bitwise-or 0:i32 MOUSEEVENTF_LEFTUP))
;;                       (else
;;                        (bitwise-or MOUSEEVENTF_MOVE MOUSEEVENTF_ABSOLUTE MOUSEEVENTF_VIRTUALDESK)))))
;;         (if (= 0:i32 down_or_up)
;;             (tfill! mi
;;                     (ftoi32 (* 65536.0:f (/ x (i32tof (GetSystemMetrics SM_CXSCREEN)))))
;;                     (ftoi32 (* 65536.0:f (/ y (i32tof (GetSystemMetrics SM_CYSCREEN)))))
;;                     0
;;                     md
;;                     0 0)
;;             (tfill! mi 0 0 0 md 0 0))
;;         ;;(mi (MOUSEINPUT x y (i64toi32 #x0001) (+ md (i64toi32 #x8000)) 0 0))
;;         (SendInput 1 evt 40)))))

(bind-func mouse_injection
  (lambda (x y down_or_up:i32)
    (let ((md (cond ((< down_or_up 0:i32) (bitwise-or MOUSEEVENTF_LEFTDOWN
                                                      MOUSEEVENTF_ABSOLUTE
                                                      MOUSEEVENTF_VIRTUALDESK))
                    ((> down_or_up 0:i32) (bitwise-or MOUSEEVENTF_LEFTUP
                                                      MOUSEEVENTF_ABSOLUTE
                                                      MOUSEEVENTF_VIRTUALDESK))
                    (else (bitwise-or MOUSEEVENTF_MOVE
                                      MOUSEEVENTF_ABSOLUTE
                                      MOUSEEVENTF_VIRTUALDESK)))))
      (mouse_event md
                   (ftoi32 (* 65536.0:f (/ x (i32tof (GetSystemMetrics SM_CXSCREEN)))))
                   (ftoi32 (* 65536.0:f (/ y (i32tof (GetSystemMetrics SM_CYSCREEN)))))
                   0 0))))


(bind-alias HRGN i8*)
(bind-type DWM_BLURBEHIND <DWORD,BOOL,HRGN,BOOL>)
(bind-val DWM_BB_ENABLE DWORD #x00000001)
(bind-val DWM_BB_BLURREGION DWORD #x00000002)

(bind-lib libwmapi DwmEnableBlurBehindWindow [HRESULT,HWND,DWM_BLURBEHIND*]*)
;; x upper left, upper left, x lower right, y lower right
(bind-lib libgdi CreateRectRgn [HRGN,i32,i32,i32,i32]*)
(bind-lib libgdi GetBitmapBits [LONG,HBITMAP,LONG,LPVOID]*)
(bind-lib libgdi CreateCompatibleBitmap [HBITMAP,HDC,i32,i32]*)
(bind-lib libgdi SelectObject [HGDIOBJ,HDC,HGDIOBJ]*)
(bind-lib libgdi DeleteDC [BOOL,HDC]*)
(bind-lib libgdi DeleteObject [BOOL,HGDIOBJ]*)
(bind-lib libgdi CreateCompatibleDC [HDC,HDC]*)
;; int GetDIBits(
;;   _In_    HDC          hdc,
;;   _In_    HBITMAP      hbmp,
;;   _In_    UINT         uStartScan,
;;   _In_    UINT         cScanLines,
;;   _Out_   LPVOID       lpvBits,
;;   _Inout_ LPBITMAPINFO lpbi,
;;   _In_    UINT         uUsage
;; );
(bind-lib libgdi GetDIBits [i32,HDC,HBITMAP,UINT,UINT,LPVOID,LPBITMAPINFO,UINT]*)

(bind-func make_window_transparent
  (lambda (win32dow)
    (let ((rect (CreateRectRgn 0 0 -1 -1))
          ;(style (GetWindowLongA win32dow GWL_STYLE))
          (bb (DWM_BLURBEHIND (+ DWM_BB_ENABLE DWM_BB_BLURREGION) #t rect #t)))
      ;; (set! style (bitwise-and style (bitwise-not WS_OVERLAPPED)))
      ;; (set! style (bitwise-or style WS_POPUP))
      ;; (SetWindowLongA win32dow GWL_STYLE style)
      (DwmEnableBlurBehindWindow win32dow bb)
      (println "make window transparent:" win32dow)
      void)))


(bind-val MAX_TOUCH_COUNT DWORD 256)
(bind-val TOUCH_FEEDBACK_DEFAULT DWORD #x1)
(bind-val TOUCH_FEEDBACK_INDIRECT DWORD #x2)
(bind-val TOUCH_FEEDBACK_NONE DWORD #x3)

(bind-alias TouchMask DWORD)
(bind-val TOUCH_MASK_NONE TouchMask #x00000000)
(bind-val TOUCH_MASK_CONTACTAREA TouchMask #x00000000)
(bind-val TOUCH_MASK_ORIENTATION TouchMask #x00000000)
(bind-val TOUCH_MASK_PRESSURE TouchMask #x00000000)

(bind-alias TouchFlags DWORD)
(bind-val TOUCH_FLAG_NONE TouchFlags #x00000000)

(bind-alias POINTER_INPUT_TYPE DWORD)
(bind-val PT_POINTER POINTER_INPUT_TYPE #x00000001)
(bind-val PT_TOUCH POINTER_INPUT_TYPE #x00000002)
(bind-val PT_PEN POINTER_INPUT_TYPE #x00000003)
(bind-val PT_MOUSE POINTER_INPUT_TYPE #x00000004)
(bind-val PT_TOUCHPAD POINTER_INPUT_TYPE #x00000005)

(bind-alias POINTER_FLAGS DWORD)
(bind-val POINTER_FLAG_NONE POINTER_FLAGS #x00000000)
(bind-val POINTER_FLAG_NEW POINTER_FLAGS #x00000001)
(bind-val POINTER_FLAG_INRANGE POINTER_FLAGS #x0000002)
(bind-val POINTER_FLAG_INCONTACT POINTER_FLAGS #x00000004)
(bind-val POINTER_FLAG_FIRSTBUTTON POINTER_FLAGS #x00000010)
(bind-val POINTER_FLAG_SECONDBUTTON POINTER_FLAGS #x00000020)
(bind-val POINTER_FLAG_THIRDBUTTON POINTER_FLAGS #x00000040)
(bind-val POINTER_FLAG_FIFTHBUTTON POINTER_FLAGS #x00000100)
(bind-val POINTER_FLAG_PRIMARY POINTER_FLAGS #x00002000)
(bind-val POINTER_FLAG_CONFIDENCE POINTER_FLAGS #x00004000)
(bind-val POINTER_FLAG_CANCELED POINTER_FLAGS #x00008000)
(bind-val POINTER_FLAG_DOWN POINTER_FLAGS #x00010000)
(bind-val POINTER_FLAG_UPDATE POINTER_FLAGS #x00020000)
(bind-val POINTER_FLAG_UP POINTER_FLAGS #x00040000)
(bind-val POINTER_FLAG_WHEEL POINTER_FLAGS #x00080000)
(bind-val POINTER_FLAG_HWHEEL POINTER_FLAGS #x00100000)
(bind-val POINTER_FLAG_CAPTURECHANGED POINTER_FLAGS #x00200000)

(bind-alias POINTER_BUTTON_CHANGE_TYPE DWORD)
;; typedef struct tagPOINTER_INFO {
;;   POINTER_INPUT_TYPE         pointerType;
;;   UINT32                     pointerId;
;;   UINT32                     frameId;
;;   POINTER_FLAGS              pointerFlags;
;;   HANDLE                     sourceDevice;
;;   HWND                       hwndTarget;
;;   POINT                      ptPixelLocation;
;;   POINT                      ptHimetricLocation;
;;   POINT                      ptPixelLocationRaw;
;;   POINT                      ptHimetricLocationRaw;
;;   DWORD                      dwTime;
;;   UINT32                     historyCount;
;;   INT32                      inputData;
;;   DWORD                      dwKeyStates;
;;   UINT64                     PerformanceCount;
;;   POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
;; } POINTER_INFO;
(bind-type POINTER_INFO <POINTER_INPUT_TYPE,UINT32,UINT32,POINTER_FLAGS,HANDLE,HWND,POINT,POINT,POINT,POINT,DWORD,UINT32,INT32,DWORD,UINT64,POINTER_BUTTON_CHANGE_TYPE>)
;; typedef struct tagPOINTER_TOUCH_INFO {
;;   POINTER_INFO pointerInfo;
;;   Touch Flags  touchFlags;
;;   Touch Mask   touchMask;
;;   RECT         rcContact;
;;   RECT         rcContactRaw;
;;   UINT32       orientation;
;;   UINT32       pressure;
;; } POINTER_TOUCH_INFO;
(bind-type POINTER_TOUCH_INFO <POINTER_INFO,DWORD,DWORD,RECT,RECT,UINT32,UINT32>)
(bind-lib libuser32 InitializeTouchInjection [BOOL,UINT32,DWORD]*)
(bind-lib libuser32 InjectTouchInput [BOOL,UINT32,POINTER_TOUCH_INFO*]*)


;;;;;;;;;; mem mapping ;;;;;;;

(bind-alias LPSECURITY_ATTRIBUTES i8*)
(bind-val PAGE_READONLY DWORD #x02)
(bind-val PAGE_READWRITE DWORD #x04)
(bind-val PAGE_WRITECOPY DWORD #x08)
(bind-val INVALID_HANDLE_VALUE HANDLE (i64toptr -1))

(bind-val STANDARD_RIGHTS_REQUIRED DWORD #x000F0000)
(bind-val SECTION_QUERY DWORD #x0001)
(bind-val SECTION_MAP_WRITE DWORD  #x0002)
(bind-val SECTION_MAP_READ DWORD #x0004)
(bind-val SECTION_MAP_EXECUTE DWORD #x0008)
(bind-val SECTION_EXTEND_SIZE DWORD #x0010)
(bind-val SECTION_ALL_ACCESS DWORD (bor STANDARD_RIGHTS_REQUIRED (bor SECTION_QUERY (bor SECTION_MAP_WRITE (bor SECTION_MAP_READ (bor SECTION_MAP_EXECUTE SECTION_EXTEND_SIZE))))))
(bind-val FILE_MAP_ALL_ACCESS DWORD SECTION_ALL_ACCESS)

;; CreateFileMapping
(bind-lib libkernel32 CreateFileMappingA [HANDLE,HANDLE,LPSECURITY_ATTRIBUTES,DWORD,DWORD,DWORD,LPCTSTR]*)
(bind-lib libkernel32 OpenFileMappingA [HANDLE,DWORD,BOOL,LPCTSTR]*)
(bind-lib libkernel32 MapViewOfFile [LPVOID,HANDLE,DWORD,DWORD,DWORD,size_t]*)

;; file path stuff
(bind-lib libkernel32 GetFullPathNameA [DWORD,LPCTSTR,DWORD,LPTSTR,LPTSTR]*)

;; execute
;; (bind-lib libkenrel32 CreateProcessA [BOOL,LPCTSTR,LPTSTR,LPSECURITY_ATTRIBUTES,LPSECURITY_ATTRIBUTES,BOOL,DWORD,LPVOID,LPCTSTR,LPSTARTUPINFO,LPPROCESS_INFORMATION]*)
(bind-lib libshell32 ShellExecuteA [HINSTANCE,HWND,LPCTSTR,LPCTSTR,LPCTSTR,LPCTSTR,INT]*)

;;; xtlang wrappers ;;;;;
(bind-func bitmap_from_window
  (lambda (window_name:i8*)
    (let ((hwnd (if (null? window_name)
                    (GetForegroundWindow)
                    (FindWindowA window_name null)))
          (rc (RECT 0 0 0 0)))
      (if (null? hwnd)
          (begin (println "could not find window named" (Str hwnd))
                 (tuple 0 0 3:i32 (cast null i8*)))
          (let ((PW_CLIENTONLY 1) ;; to grab full window set to 0
                (DIB_RGB_COLORS 0)
                (BI_RGB 0)
                (BI_PNG:i32 5)
                (res (GetClientRect hwnd rc)) ;; fills rc
                (hdcScreen (GetDC null))
                (info:BITMAPINFO* (alloc))
                (hdc (CreateCompatibleDC hdcScreen))
                (bmp (CreateCompatibleBitmap hdcScreen
                                             (- (right rc) (left rc))
                                             (- (bottom rc) (top rc)))))

            (SelectObject hdc bmp)
            (PrintWindow hwnd hdc PW_CLIENTONLY)
            ;; first populate 'info'
            (GetDIBits hdc bmp 0 0 null info DIB_RGB_COLORS)
            (let ((buf:i8* (alloc (biSizeImage info))))
              ;; set compression value (not compressed!)
              (biCompression info BI_RGB)
              ;; now fill for reals!
              (GetDIBits hdc bmp 0 (biHeight info) buf info DIB_RGB_COLORS)
              ;; release stuff
              (DeleteDC hdc)
              (DeleteObject bmp)
              (ReleaseDC null hdcScreen)
              ;; and return as vector of <width,height,channels,data>
              (tuple (biWidth info) (biHeight info) 3:i32 buf)))))))


;; FILE IO
(bind-val GENERIC_ALL DWORD #x10000000)
(bind-val GENERIC_EXECUTE DWORD #x20000000)
(bind-val GENERIC_WRITE DWORD #x40000000)
(bind-val GENERIC_READ DWORD #x80000000)

(bind-type FILETIME <DWORD,DWORD>)
(bind-type WIN32_FIND_DATA <DWORD,FILETIME,FILETIME,FILETIME,DWORD,DWORD,DWORD,DWORD,|260,i8|,|14,i8|> (constructor? . #f) (printer? . #f))
(bind-alias LPWIN32_FIND_DATA WIN32_FIND_DATA*)
(bind-func get_file_name (lambda (dat:WIN32_FIND_DATA*) (String (cast (tref-ptr dat 8) i8*))))

(bind-lib libkernel32 FindFirstFileA [HANDLE,LPCTSTR,LPWIN32_FIND_DATA]*)
(bind-lib libkernel32 FindNextFileA [BOOL,HANDLE,LPWIN32_FIND_DATA]*)
(bind-lib libkernel32 FindClose [BOOL,HANDLE]*)
(bind-lib libkernel32 CreateFileA [HANDLE,LPCTSTR,DWORD,DWORD,LPSECURITY_ATTRIBUTES,DWORD,DWORD,HANDLE]*)

;; returns a list of file names in dir
;;
;; for example:
;; (win32_list_dir2 (Str "c:/Users/andrew/Documents/code/extempore/*"))
;; (win32_list_dir2 (Str "c:/Users/andrew/Documents/code/extempore/*.exe"))
(bind-func win32_list_dir
  (lambda (dir:String*)
    (let ((data:WIN32_FIND_DATA* (salloc))
          (hfind:HANDLE (FindFirstFileA (cstring dir) data))
          (lst:List{String*}* (list)))
      (if (= hfind INVALID_HANDLE_VALUE)
          lst
          (begin
            (set! lst (cons (get_file_name data) lst))
            (while (FindNextFileA hfind data)
              (set! lst (cons (get_file_name data) lst)))
            (FindClose hfind)
            lst)))))


;; #define DELETE                           (0x00010000L)
;; #define READ_CONTROL                     (0x00020000L)
;; #define WRITE_DAC                        (0x00040000L)
;; #define WRITE_OWNER                      (0x00080000L)
;; #define SYNCHRONIZE                      (0x00100000L)

;; #define STANDARD_RIGHTS_REQUIRED         (0x000F0000L)

;; #define STANDARD_RIGHTS_READ             (READ_CONTROL)
;; #define STANDARD_RIGHTS_WRITE            (READ_CONTROL)
;; #define STANDARD_RIGHTS_EXECUTE          (READ_CONTROL)

;; #define FILE_READ_DATA            ( 0x0001 )    // file & pipe
;; #define FILE_LIST_DIRECTORY       ( 0x0001 )    // directory

;; #define FILE_WRITE_DATA           ( 0x0002 )    // file & pipe
;; #define FILE_ADD_FILE             ( 0x0002 )    // directory

;; #define FILE_APPEND_DATA          ( 0x0004 )    // file
;; #define FILE_ADD_SUBDIRECTORY     ( 0x0004 )    // directory
;; #define FILE_CREATE_PIPE_INSTANCE ( 0x0004 )    // named pipe


;; #define FILE_READ_EA              ( 0x0008 )    // file & directory

;; #define FILE_WRITE_EA             ( 0x0010 )    // file & directory

;; #define FILE_EXECUTE              ( 0x0020 )    // file
;; #define FILE_TRAVERSE             ( 0x0020 )    // directory

;; #define FILE_DELETE_CHILD         ( 0x0040 )    // directory

;; #define FILE_READ_ATTRIBUTES      ( 0x0080 )    // all

;; #define FILE_WRITE_ATTRIBUTES     ( 0x0100 )    // all

;; #define FILE_ALL_ACCESS (STANDARD_RIGHTS_REQUIRED | SYNCHRONIZE | 0x1FF)

;; #define FILE_GENERIC_READ         (STANDARD_RIGHTS_READ     |\
;;                                    FILE_READ_DATA           |\
;;                                    FILE_READ_ATTRIBUTES     |\
;;                                    FILE_READ_EA             |\
;;                                    SYNCHRONIZE)

;; #define FILE_GENERIC_WRITE        (STANDARD_RIGHTS_WRITE    |\
;;                                    FILE_WRITE_DATA          |\
;;                                    FILE_WRITE_ATTRIBUTES    |\
;;                                    FILE_WRITE_EA            |\
;;                                    FILE_APPEND_DATA         |\
;;                                    SYNCHRONIZE)

;; #define FILE_GENERIC_EXECUTE      (STANDARD_RIGHTS_EXECUTE  |\
;;                                    FILE_READ_ATTRIBUTES     |\
;;                                    FILE_EXECUTE             |\
;;                                    SYNCHRONIZE)
