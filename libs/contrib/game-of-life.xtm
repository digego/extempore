;;; game-of-life.xtm -- Conway's Game of Life

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; a simple Conway's game of life in Extempore. Uses ASCII-art (to
;; stdout) for display.

;;; Code:

(sys:load-preload-check 'gameoflife)
(define *xtmlib-gameoflife-loaded* #t)

(sys:load "libs/core/adt.xtm")

;;                w   h   dat generation
(bind-type World <i64,i64,i8*,i64> (printer? . #f))

(bind-func world_width
  (lambda (w:World*)
    (tref w 0)))

(bind-func world_height
  (lambda (w:World*)
    (tref w 1)))

(bind-func world_data
  (lambda (w:World*)
    (tref w 2)))

(bind-func world_generation
  (lambda (w:World*)
    (tref w 3)))

(bind-func world_set_generation
  (lambda (w:World* gen)
    (tset! w 3 gen)))

(bind-func world_increment_generation
  (lambda (w:World*)
    (tset! w 3 (+ 1 (tref w 3)))))

(bind-func print
  (lambda (w:World*)
    (printf "World: %lld x %lld, generation %lld (data %p)\n"
            (world_width w)
            (world_height w)
            (world_generation w)
            (world_data w))))

(bind-func world_create
  (lambda (w h)
    (let ((data (zalloc (* w h)))
          (res (World w h data 0)))
      (printf "Created Game of Life ")
      (printout res)
      res)))

(bind-func world_data_index
  (lambda (w x y)
    (let ((width (world_width w))
          (height (world_height w))
          (xrem (% x width))
          (yrem (% y height)))
      (+ (* (+ yrem (if (< yrem 0) height 0)) width)
         (+ xrem (if (< xrem 0) width 0))))))

(bind-func world_data_size
  (lambda (w)
    (* (world_width w)
       (world_height w))))

(bind-func world_copy
  (lambda (w)
    (let ((new_world (world_create (world_width w)
                                   (world_height w)))
          (old_data (world_data w))
          (new_data (world_data new_world)))
      ;; copy the world data
      (doloop (i (world_data_size w))
        (pset! new_data i (pref old_data i)))
      new_world)))

(bind-func world_equal
  (lambda (w1 w2)
    (if (or (<> (world_width w1)
                (world_width w2))
            (<> (world_height w1)
                (world_height w2)))
        #f
        (let ((data1 (world_data w1))
              (data2 (world_data w2))
              (size (world_data_size w1))
              (count 0))
          (while (and (< count size)
                      (= (pref data1 count)
                         (pref data2 count)))
            (set! count (+ count 1)))
          (= size count)))))

(bind-func cell_value
  (lambda (w x y)
    (pref (world_data w)
          (world_data_index w x y))))

(bind-func cell_set_value
  (lambda (w x y value)
    (pset! (world_data w)
           (world_data_index w x y)
           value)))

(bind-func world_init
  (lambda (w density)
    (let ((data (world_data w)))
      (doloop (k (world_data_size w))
        (pset! data k 0))
      (doloop (i (world_height w))
        (doloop (j (world_width w))
          (cell_set_value w i j
                          (if (< (random) density) 1 0)))))))

(bind-func world_reset
  (lambda (w)
    (world_init w 0.0)
    (world_set_generation w 0)))

(bind-func cell_count_neighbors
  (lambda (w x y)
    (+ (cell_value w (- x 1) (- y 1))
       (cell_value w (- x 1) y)
       (cell_value w (- x 1) (+ y 1))
       (cell_value w x (- y 1))
       (cell_value w x (+ y 1))
       (cell_value w (+ x 1) (- y 1))
       (cell_value w (+ x 1) y)
       (cell_value w (+ x 1) (+ y 1)))))

;; each "update" element is <x,y,newvalue>
(bind-type CellUpdate <i64,i64,i8>)

(bind-func world_step
  (lambda (w)
    (letz ((cv 0)
           (n 0)
           (pending_updates:List* null))
      (doloop (i (world_height w))
        (doloop (j (world_width w))
          (set! cv (cell_value w i j))
          (set! n (cell_count_neighbors w i j))
          (if (= cv 0:i8)
              ;; birth
              (if (= n 3:i8)
                  (set! pending_updates (cons (CellUpdate i j 1) pending_updates)))
              ;; cell is dead
              (if (not (or (= n 2:i8)
                           (= n 3:i8)))
                  (set! pending_updates (cons (CellUpdate i j 0) pending_updates))))))
      ;; do all the updates
      (for-each (lambda (cu)
                  ;; (println "performing update: x =" (tref cu 0)
                  ;;          "y =" (tref cu 1)
                  ;;          "newvalue =" (tref cu 2))
                  (cell_set_value w (tref cu 0) (tref cu 1) (tref cu 2)))
                pending_updates)
      (world_increment_generation w))))

(bind-func world_basic_print
  (lambda (w)
    (doloop (i (world_data_size w))
      (printf "%c " (if (<> (pref (world_data w) i) 0)
                        (pref "O" 0)
                        (pref "." 0))))
    (println)
    (println)))

(bind-func world_ascii_print
  (lambda (w)
    (let ((width (world_width w))
          (height (world_height w))
          (world_string_length (* (+ width 1) height))
          (world_string:i8* (zalloc world_string_length)))
      (doloop (i height)
        (doloop (j width)
          (if (<> (cell_value w i j) 0)
              (pset! world_string (+ (* i (+ width 1)) j) (pref "0" 0))
              (pset! world_string (+ (* i (+ width 1)) j) (pref " " 0)))
          (if (= j (- width 1))
              (pset! world_string
                     (- (* (+ 1 i) (+ width 1)) 1)
                     (pref "\n" 0)))))
      (printf "\n%.*s"
              world_string_length
              world_string))))

;; miscellaneous helpers

(bind-func world_add_blinker
  "add a (horizontal) blinker, centred at [x,y]"
  (lambda (w x y)
    (doloop (i 3)
      (cell_set_value w x (+ y i -1) 1))))

(bind-func world_set_to_checkerboard
  (lambda (w)
    (doloop (i (world_height w))
      (doloop (j (world_width w))
        (cell_set_value w i j (convert (% (+ i j) 2)))))))

(bind-func world_set_to_inverse
  (lambda (w)
    (doloop (i (world_height w))
      (doloop (j (world_width w))
        (cell_set_value w i j (% (cell_value w i j) 2))))))

(define *xtmlib-gameoflife-loaded* #t)
