;;; cairo.xtm -- cairo 2D graphics library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libcairo

;;; Commentary:

;; Extempore supports nanovg for doing 2D graphics as well, which is
;; (in general) more performant than cairo - see
;; examples/external/openvg.xtm

;;; Code:

;; lib-loading config
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/cairo.xtm" 'quiet))
(sys:load-preload-check 'cairo)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmcairo")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libcairo
  (cond ((string=? (sys:platform) "OSX")
         "libcairo.dylib")
        ((string=? (sys:platform) "Linux")
         "libcairo.so")
        ((string=? (sys:platform) "Windows")
         "libcairo-2.dll")))

(define *xtmlib-cairo-loaded* #t)

;; complex structs with i8 name cheat (i.e. must be pointers)
(bind-alias cairo_t i8)
(bind-alias cairo_device_t i8)
(bind-alias cairo_surface_t i8)
(bind-alias cairo_pattern_t i8)
(bind-alias cairo_scaled_font_t i8)
(bind-alias cairo_font_face_t i8)
(bind-alias cairo_font_options_t i8)
(bind-alias cairo_region_t i8)

(bind-alias cairo_bool_t i1)
(bind-alias cairo_destroy_func_t [void,i8*]*)

;; typedef enum cairo_pattern_type_t
(bind-alias cairo_pattern_type_t i32)
(bind-val    CAIRO_PATTERN_TYPE_SOLID i32 0)
(bind-val    CAIRO_PATTERN_TYPE_SURFACE i32 1)
(bind-val    CAIRO_PATTERN_TYPE_LINEAR i32 2)
(bind-val    CAIRO_PATTERN_TYPE_RADIAL i32 3)

;; typedef enum _cairo_operator_t
(bind-alias cairo_operator_t i32)

(bind-val CAIRO_OPERATOR_CLEAR i32 0)
(bind-val CAIRO_OPERATOR_SOURCE i32 1)
(bind-val CAIRO_OPERATOR_OVER i32 2)
(bind-val CAIRO_OPERATOR_IN i32 3)
(bind-val CAIRO_OPERATOR_OUT i32 4)
(bind-val CAIRO_OPERATOR_ATOP i32 5)
(bind-val CAIRO_OPERATOR_DEST i32 6)
(bind-val CAIRO_OPERATOR_DEST_OVER i32 7)
(bind-val CAIRO_OPERATOR_DEST_IN i32 8)
(bind-val CAIRO_OPERATOR_DEST_OUT i32 9)
(bind-val CAIRO_OPERATOR_DEST_ATOP i32 10)
(bind-val CAIRO_OPERATOR_XOR i32 11)
(bind-val CAIRO_OPERATOR_ADD i32 12)
(bind-val CAIRO_OPERATOR_SATURATE i32 13)
(bind-val CAIRO_OPERATOR_MULTIPLY i32 14)
(bind-val CAIRO_OPERATOR_SCREEN i32 15)
(bind-val CAIRO_OPERATOR_OVERLAY i32 16)
(bind-val CAIRO_OPERATOR_DARKEN i32 17)
(bind-val CAIRO_OPERATOR_LIGHTEN i32 18)
(bind-val CAIRO_OPERATOR_COLOR_DODGE i32 19)
(bind-val CAIRO_OPERATOR_COLOR_BURN i32 20)
(bind-val CAIRO_OPERATOR_HARD_LIGHT i32 21)
(bind-val CAIRO_OPERATOR_SOFT_LIGHT i32 22)
(bind-val CAIRO_OPERATOR_DIFFERENCE i32 23)
(bind-val CAIRO_OPERATOR_EXCLUSION i32 24)
(bind-val CAIRO_OPERATOR_HSL_HUE i32 25)
(bind-val CAIRO_OPERATOR_HSL_SATURATION i32 26)
(bind-val CAIRO_OPERATOR_HSL_COLOR i32 27)
(bind-val CAIRO_OPERATOR_HSL_LUMINOSITY i32 28)


;; typedef eum cairo_status_t
(bind-alias cairo_status_t i32)

(bind-val     CAIRO_STATUS_SUCCESS i32 0)
(bind-val     CAIRO_STATUS_NO_MEMORY i32 1)
(bind-val     CAIRO_STATUS_INVALID_RESTORE i32 2)
(bind-val     CAIRO_STATUS_INVALID_POP_GROUP i32 3)
(bind-val     CAIRO_STATUS_NO_CURRENT_POINT i32 4)
(bind-val     CAIRO_STATUS_INVALID_MATRIX i32 5)
(bind-val     CAIRO_STATUS_INVALID_STATUS i32 6)
(bind-val     CAIRO_STATUS_NULL_POINTER i32 7)
(bind-val     CAIRO_STATUS_INVALID_STRING i32 8)
(bind-val     CAIRO_STATUS_INVALID_PATH_DATA i32 9)
(bind-val     CAIRO_STATUS_READ_ERROR i32 10)
(bind-val     CAIRO_STATUS_WRITE_ERROR i32 11)
(bind-val     CAIRO_STATUS_SURFACE_FINISHED i32 12)
(bind-val     CAIRO_STATUS_SURFACE_TYPE_MISMATCH i32 13)
(bind-val     CAIRO_STATUS_PATTERN_TYPE_MISMATCH i32 14)
(bind-val     CAIRO_STATUS_INVALID_CONTENT i32 15)
(bind-val     CAIRO_STATUS_INVALID_FORMAT i32 16)
(bind-val     CAIRO_STATUS_INVALID_VISUAL i32 17)
(bind-val     CAIRO_STATUS_FILE_NOT_FOUND i32 18)
(bind-val     CAIRO_STATUS_INVALID_DASH i32 19)
(bind-val     CAIRO_STATUS_INVALID_DSC_COMMENT i32 20)
(bind-val     CAIRO_STATUS_INVALID_INDEX i32 21)
(bind-val     CAIRO_STATUS_CLIP_NOT_REPRESENTABLE i32 22)
(bind-val     CAIRO_STATUS_TEMP_FILE_ERROR i32 23)
(bind-val     CAIRO_STATUS_INVALID_STRIDE i32 24)
(bind-val     CAIRO_STATUS_FONT_TYPE_MISMATCH i32 25)
(bind-val     CAIRO_STATUS_USER_FONT_IMMUTABLE i32 26)
(bind-val     CAIRO_STATUS_USER_FONT_ERROR i32 27)
(bind-val     CAIRO_STATUS_NEGATIVE_COUNT i32 28)
(bind-val     CAIRO_STATUS_INVALID_CLUSTERS i32 29)
(bind-val     CAIRO_STATUS_INVALID_SLANT i32 30)
(bind-val     CAIRO_STATUS_INVALID_WEIGHT i32 31)
(bind-val     CAIRO_STATUS_INVALID_SIZE i32 32)
(bind-val     CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED i32 33)
(bind-val     CAIRO_STATUS_DEVICE_TYPE_MISMATCH i32 34)
(bind-val     CAIRO_STATUS_DEVICE_ERROR i32 35)
(bind-val     CAIRO_STATUS_LAST_STATUS i32 36)


;; enum cairo_content_t
(bind-alias cairo_content_t i32)
(bind-val    CAIRO_CONTENT_COLOR i32 4096)
(bind-val    CAIRO_CONTENT_ALPHA i32 8192)
(bind-val    CAIRO_CONTENT_COLOR_ALPHA i32 12288)


;; enum cairo_font_slant_t
(bind-alias cairo_font_slant_t i32)
(bind-val    CAIRO_FONT_SLANT_NORMAL i32 0)
(bind-val    CAIRO_FONT_SLANT_ITALIC i32 1)
(bind-val    CAIRO_FONT_SLANT_OBLIQUE i32 2)

;; enum cairo_font_weight_t
(bind-alias cairo_font_weight_t i32)
(bind-val    CAIRO_FONT_WEIGHT_NORMAL i32 0)
(bind-val    CAIRO_FONT_WEIGHT_BOLD i32 1)

;; enum cairo_subpixel_order_t
(bind-alias cairo_subpixel_order_t i32)
(bind-val     CAIRO_SUBPIXEL_ORDER_DEFAULT i32 0)
(bind-val     CAIRO_SUBPIXEL_ORDER_RGB i32 1)
(bind-val     CAIRO_SUBPIXEL_ORDER_BGR i32 2)
(bind-val     CAIRO_SUBPIXEL_ORDER_VRGB i32 3)
(bind-val     CAIRO_SUBPIXEL_ORDER_VBGR i32 4)

;; enum cairo_hint_style_t
(bind-alias cairo_hint_style_t i32)
(bind-val     CAIRO_HINT_STYLE_DEFAULT i32 0)
(bind-val     CAIRO_HINT_STYLE_NONE i32 1)
(bind-val     CAIRO_HINT_STYLE_SLIGHT i32 2)
(bind-val     CAIRO_HINT_STYLE_MEDIUM i32 3)
(bind-val     CAIRO_HINT_STYLE_FULL i32 4)

;; enum cairo_antialias_t
(bind-alias cairo_antialias_t i32)
(bind-val     CAIRO_ANTIALIAS_DEFAULT i32 0)
(bind-val     CAIRO_ANTIALIAS_NONE i32 1)
(bind-val     CAIRO_ANTIALIAS_GRAY i32 2)
(bind-val     CAIRO_ANTIALIAS_SUBPIXEL i32 3)

;; enum cairo_font_type_t
(bind-alias cairo_font_type_t i32)
(bind-val     CAIRO_FONT_TYPE_TOY i32 0)
(bind-val     CAIRO_FONT_TYPE_FT i32 1)
(bind-val     CAIRO_FONT_TYPE_WIN32 i32 2)
(bind-val     CAIRO_FONT_TYPE_QUARTZ i32 3)
(bind-val     CAIRO_FONT_TYPE_USER i32 4)

;; enum cairo_fill_rule_t
(bind-alias cairo_fill_rule_t i32)
(bind-val    CAIRO_FILL_RULE_WINDING i32 0)
(bind-val    CAIRO_FILL_RULE_EVEN_ODD i32 1)

;; enum cairo_line_cap_t
(bind-alias cairo_line_cap_t i32)
(bind-val    CAIRO_LINE_CAP_BUTT i32 0)
(bind-val    CAIRO_LINE_CAP_ROUND i32 1)
(bind-val    CAIRO_LINE_CAP_SQUARE i32 2)

;; enum cairo_line_join_t
(bind-alias cairo_line_join_t i32)
(bind-val    CAIRO_LINE_JOIN_MITER i32 0)
(bind-val    CAIRO_LINE_JOIN_ROUND i32 1)
(bind-val    CAIRO_LINE_JOIN_BEVEL i32 2)

;; enum cairo_path_data_type_t
(bind-alias cairo_path_data_type_t i32)
(bind-val     CAIRO_PATH_MOVE_TO i32 0)
(bind-val     CAIRO_PATH_LINE_TO i32 1)
(bind-val     CAIRO_PATH_CURVE_TO i32 2)
(bind-val     CAIRO_PATH_CLOSE_PATH i32 3)

;; enum cairo_device_type_t
(bind-alias cairo_device_type_t i32)
(bind-val     CAIRO_DEVICE_TYPE_DRM i32 0)
(bind-val     CAIRO_DEVICE_TYPE_GL i32 1)
(bind-val     CAIRO_DEVICE_TYPE_SCRIPT i32 2)
(bind-val     CAIRO_DEVICE_TYPE_XCB i32 3)
(bind-val     CAIRO_DEVICE_TYPE_XLIB i32 4)
(bind-val     CAIRO_DEVICE_TYPE_XML i32 5)

;; snum cairo_surface_type_t
(bind-alias cairo_surface_type_t i32)
(bind-val     CAIRO_SURFACE_TYPE_IMAGE i32 0)
(bind-val     CAIRO_SURFACE_TYPE_PDF i32 1)
(bind-val     CAIRO_SURFACE_TYPE_PS i32 2)
(bind-val     CAIRO_SURFACE_TYPE_XLIB i32 3)
(bind-val     CAIRO_SURFACE_TYPE_XCB i32 4)
(bind-val     CAIRO_SURFACE_TYPE_GLITZ i32 5)
(bind-val     CAIRO_SURFACE_TYPE_QUARTZ i32 6)
(bind-val     CAIRO_SURFACE_TYPE_WIN32 i32 7)
(bind-val     CAIRO_SURFACE_TYPE_BEOS i32 8)
(bind-val     CAIRO_SURFACE_TYPE_DIRECTFB i32 9)
(bind-val     CAIRO_SURFACE_TYPE_SVG i32 10)
(bind-val     CAIRO_SURFACE_TYPE_OS2 i32 11)
(bind-val     CAIRO_SURFACE_TYPE_WIN32_PRINTING i32 12)
(bind-val     CAIRO_SURFACE_TYPE_QUARTZ_IMAGE i32 13)
(bind-val     CAIRO_SURFACE_TYPE_SCRIPT i32 14)
(bind-val     CAIRO_SURFACE_TYPE_QT i32 15)
(bind-val     CAIRO_SURFACE_TYPE_RECORDING i32 16)
(bind-val     CAIRO_SURFACE_TYPE_VG i32 17)
(bind-val     CAIRO_SURFACE_TYPE_GL i32 18)
(bind-val     CAIRO_SURFACE_TYPE_DRM i32 19)
(bind-val     CAIRO_SURFACE_TYPE_TEE i32 20)
(bind-val     CAIRO_SURFACE_TYPE_XML i32 21)
(bind-val     CAIRO_SURFACE_TYPE_SKIA i32 22)
(bind-val     CAIRO_SURFACE_TYPE_SUBSURFACE i32 23)

;; enum cairo_format_t
(bind-alias cairo_format_t i32)
(bind-val     CAIRO_FORMAT_INVALID   i32 -1)
(bind-val     CAIRO_FORMAT_ARGB32    i32 0)
(bind-val     CAIRO_FORMAT_RGB24     i32 1)
(bind-val     CAIRO_FORMAT_A8        i32 2)
(bind-val     CAIRO_FORMAT_A1        i32 3)
(bind-val     CAIRO_FORMAT_RGB16_565 i32 4)

;; enum cairo_extend_t
(bind-alias cairo_extend_t i32)
(bind-val     CAIRO_EXTEND_NONE i32 0)
(bind-val     CAIRO_EXTEND_REPEAT i32 1)
(bind-val     CAIRO_EXTEND_REFLECT i32 2)
(bind-val     CAIRO_EXTEND_PAD i32 3)

;; enum cairo_filter_t
(bind-alias cairo_filter_t i32)
(bind-val     CAIRO_FILTER_FAST i32 0)
(bind-val     CAIRO_FILTER_GOOD i32 1)
(bind-val     CAIRO_FILTER_BEST i32 2)
(bind-val     CAIRO_FILTER_NEAREST i32 3)
(bind-val     CAIRO_FILTER_BILINEAR i32 4)
(bind-val     CAIRO_FILTER_GAUSSIAN i32 5)

;; enum cairo_region_overlap_t
(bind-alias cairo_region_overlap_t i32)
(bind-val     CAIRO_REGION_OVERLAP_IN	 i32 0)
(bind-val     CAIRO_REGION_OVERLAP_OUT	 i32 1)
(bind-val     CAIRO_REGION_OVERLAP_PART  i32 2)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; types
(bind-type cairo_rectangle_t <double,double,double,double>)
(bind-type cairo_rectangle_list_t <cairo_status_t,cairo_rectangle_t*,i32>)
(bind-type cairo_glyph_t <i64,double,double>)
(bind-type cairo_text_cluster_t <i32,i32>)
(bind-type cairo_text_extents_t <double,double,double,double,double,double>)
(bind-type cairo_font_extents_t <double,double,double,double,double>)
(bind-type cairo_user_data_key_t <i32>)
(bind-type cairo_path_data_t <double,double>) ;; cairo_path_data_t is actually a union of either <i32,i32> or <double,double>
(bind-type cairo_path_t <cairo_status_t,cairo_path_data_t*,i32>)
(bind-type cairo_matrix_t <double,double,double,double,double,double>)
(bind-type cairo_rectangle_int_t <i32,i32,i32,i32>)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-lib libcairo cairo_create [cairo_t*,cairo_surface_t*]*)
(bind-lib libcairo cairo_destroy [void,cairo_t*]*)
(bind-lib libcairo cairo_save [void,cairo_t*]*)
(bind-lib libcairo cairo_restore [void,cairo_t*]*)

(bind-lib libcairo cairo_set_operator [void,cairo_t*,cairo_operator_t]*)
(bind-lib libcairo cairo_set_source [void,cairo_t*,cairo_pattern_t*]*)
;; rgb
(bind-lib libcairo cairo_set_source_rgb [void,cairo_t*,double,double,double]*)
;; rgba
(bind-lib libcairo cairo_set_source_rgba [void,cairo_t*,double,double,double,double]*)
;; x and y
(bind-lib libcairo cairo_set_source_surface [void,cairo_t*,cairo_surface_t*,double,double]*)
(bind-lib libcairo cairo_set_tolerance [void,cairo_t*,double]*)
(bind-lib libcairo cairo_set_fill_rule [void,cairo_t*,cairo_fill_rule_t]*)
(bind-lib libcairo cairo_set_line_width [void,cairo_t*,double]*)
(bind-lib libcairo cairo_set_line_cap [void,cairo_t*,cairo_line_cap_t]*)
;; i32 is 0(miter) 1(round) 2(bevel)
(bind-lib libcairo cairo_set_line_join [void,cairo_t*,cairo_line_join_t]*)
(bind-lib libcairo cairo_set_dash [void,cairo_t*,double*,i32,double]*)
;; tx ty
(bind-lib libcairo cairo_translate [void,cairo_t*,double,double]*)
;; sx sy
(bind-lib libcairo cairo_scale [void,cairo_t*,double,double]*)
(bind-lib libcairo cairo_rotate [void,cairo_t*,double]*)
(bind-lib libcairo cairo_transform [void,cairo_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_set_matrix [void,cairo_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_identity_matrix [void,cairo_t*,cairo_matrix_t*]*)

;; path creation
(bind-lib libcairo cairo_new_path [void,cairo_t*]*)
(bind-lib libcairo cairo_close_path [void,cairo_t*]*)
(bind-lib libcairo cairo_move_to [void,cairo_t*,double,double]*)
(bind-lib libcairo cairo_new_sub_path [void,cairo_t*]*)
(bind-lib libcairo cairo_line_to [void,cairo_t*,double,double]*)
;; x1 y1 x2 y2 x3 y3
(bind-lib libcairo cairo_curve_to [void,cairo_t*,double,double,double,double,double,double]*)
;; xc yc radius angle1 angle2
(bind-lib libcairo cairo_arc [void,cairo_t*,double,double,double,double,double]*)
(bind-lib libcairo cairo_arc_negative [void,cairo_t*,double,double,double,double,double]*)
(bind-lib libcairo cairo_rel_move_to [void,cairo_t*,double,double]*)
(bind-lib libcairo cairo_rel_line_to [void,cairo_t*,double,double]*)
(bind-lib libcairo cairo_rel_curve_to [void,cairo_t*,double,double,double,double,double,double]*)
(bind-lib libcairo cairo_rectangle [void,cairo_t*,double,double,double,double]*)
(bind-lib libcairo cairo_path_extents [void,cairo_t*,double,double,double,double]*)

;; painting functions
(bind-lib libcairo cairo_paint [void,cairo_t*]*)
(bind-lib libcairo cairo_paint_with_alpha [void,cairo_t*,double]*)
(bind-lib libcairo cairo_mask [void,cairo_t*,cairo_pattern_t*]*)
(bind-lib libcairo cairo_mask_surface [void,cairo_t*,cairo_pattern_t*,double,double]*)
(bind-lib libcairo cairo_stroke [void,cairo_t*]*)
(bind-lib libcairo cairo_stroke_preserve [void,cairo_t*]*)
(bind-lib libcairo cairo_fill [void,cairo_t*]*)
(bind-lib libcairo cairo_fill_preserve [void,cairo_t*]*)
(bind-lib libcairo cairo_copy_page [void,cairo_t*]*)
(bind-lib libcairo cairo_show_page [void,cairo_t*]*)
(bind-lib libcairo cairo_in_stroke [cairo_bool_t,cairo_t*,double,double]*)
(bind-lib libcairo cairo_in_fill [cairo_bool_t,cairo_t*,double,double]*)
(bind-lib libcairo cairo_in_clip [cairo_bool_t,cairo_t*,double,double]*)
(bind-lib libcairo cairo_stroke_extents [void,cairo_t*,double,double,double,double]*)
(bind-lib libcairo cairo_fill_extents [void,cairo_t*,double,double,double,double]*)
(bind-lib libcairo cairo_reset_clip [void,cairo_t*]*)
(bind-lib libcairo cairo_clip [void,cairo_t*]*)
(bind-lib libcairo cairo_clip_preserve [void,cairo_t*]*)
(bind-lib libcairo cairo_clip_extents [void,cairo_t*,double*,double*,double*,double*]*)

(bind-lib libcairo cairo_copy_clip_rectangle_list [cairo_rectangle_list_t*,cairo_t*]*)
(bind-lib libcairo cairo_rectangle_list_destroy [void,cairo_rectangle_list_t*]*)

;; text/font stuff
(bind-lib libcairo cairo_glyph_allocate [cairo_glyph_t*,i32]*)
(bind-lib libcairo cairo_glyph_free [void,cairo_glyph_t*]*)
(bind-lib libcairo cairo_text_cluster_allocate [cairo_text_cluster_t*,i32]*)
(bind-lib libcairo cairo_text_cluster_free [void,cairo_text_cluster_t*]*)
(bind-lib libcairo cairo_font_options_create [cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_destroy [void,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_copy [cairo_font_options_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_status [cairo_status_t,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_merge [void,cairo_font_options_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_equal [void,cairo_font_options_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_hash [i64,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_set_antialias [void,cairo_font_options_t*,cairo_antialias_t]*)
(bind-lib libcairo cairo_font_options_get_antialias [cairo_antialias_t,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_set_subpixel_order [void,cairo_font_options_t*,cairo_subpixel_order_t]*)
(bind-lib libcairo cairo_font_options_get_subpixel_order [cairo_subpixel_order_t,cairo_font_options_t*]*)
(bind-lib libcairo cairo_font_options_set_hint_style [void,cairo_font_options_t*,cairo_hint_style_t]*)
(bind-lib libcairo cairo_font_options_get_hint_style [cairo_hint_style_t,cairo_font_options_t*]*)
(bind-lib libcairo cairo_select_font_face [void,cairo_t*,i8*,cairo_font_slant_t,cairo_font_weight_t]*)
(bind-lib libcairo cairo_set_font_size [void,cairo_t*,double]*)
(bind-lib libcairo cairo_set_font_matrix [void,cairo_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_get_font_matrix [void,cairo_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_set_font_options [void,cairo_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_get_font_options [void,cairo_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_set_font_face [void,cairo_t*,cairo_font_face_t*]*)
(bind-lib libcairo cairo_get_font_face [void,cairo_t*,cairo_font_face_t*]*)
(bind-lib libcairo cairo_set_scaled_font [void,cairo_t*,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_get_scaled_font [cairo_scaled_font_t*,cairo_t*]*)
(bind-lib libcairo cairo_show_text [void,cairo_t*,i8*]*)
(bind-lib libcairo cairo_show_glyphs [void,cairo_t*,cairo_glyph_t*,i32]*)
(bind-lib libcairo cairo_show_text_glyphs [void,cairo_t*,i8*,i32,cairo_glyph_t*,i32,cairo_text_cluster_t*,i32,i32]*)
(bind-lib libcairo cairo_text_path [void,cairo_t*,i8*]*)
(bind-lib libcairo cairo_glyph_path [void,cairo_t*,cairo_glyph_t*,i32]*)
(bind-lib libcairo cairo_text_extents [void,cairo_t*,i8*,cairo_text_extents_t*]*)
(bind-lib libcairo cairo_glyph_extents [void,cairo_t*,cairo_glyph_t*,i32]*)
(bind-lib libcairo cairo_font_extents [void,cairo_t*,cairo_font_extents_t*]*)
(bind-lib libcairo cairo_font_face_reference [cairo_font_face_t*,cairo_font_face_t*]*)
(bind-lib libcairo cairo_font_face_destroy [void,cairo_font_face_t*]*)
(bind-lib libcairo cairo_font_face_get_reference_count [i32,cairo_font_face_t*]*)
(bind-lib libcairo cairo_font_face_status [cairo_status_t,cairo_font_face_t*]*)
(bind-lib libcairo cairo_font_face_get_type [cairo_font_type_t,cairo_font_face_t*]*)
(bind-lib libcairo cairo_font_face_get_user_data [i8*,cairo_font_face_t*,cairo_user_data_key_t*]*)
(bind-lib libcairo cairo_font_face_set_user_data [cairo_status_t,cairo_font_face_t*,cairo_user_data_key_t*,i8*,cairo_destroy_func_t]*)

(bind-lib libcairo cairo_scaled_font_create [cairo_scaled_font_t*,cairo_font_face_t*,cairo_matrix_t*,cairo_matrix_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_scaled_font_reference [cairo_scaled_font_t*,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_scaled_font_destroy [void,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_scaled_font_get_reference_count [i32,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_scaled_font_status [cairo_status_t,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_scaled_font_get_type [cairo_font_type_t,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_scaled_font_get_user_data [i8*,cairo_scaled_font_t*,cairo_user_data_key_t*]*)
(bind-lib libcairo cairo_scaled_font_set_user_data [cairo_status_t,cairo_scaled_font_t*,cairo_user_data_key_t*,i8*,cairo_destroy_func_t]*)
(bind-lib libcairo cairo_scaled_font_extents [void,cairo_scaled_font_t*,cairo_font_extents_t*]*)
(bind-lib libcairo cairo_scaled_font_text_extents [void,cairo_scaled_font_t*,i8*,cairo_font_extents_t*]*)
(bind-lib libcairo cairo_scaled_font_glyph_extents [void,cairo_scaled_font_t*,cairo_glyph_t*,i8*,cairo_text_extents_t*]*)
(bind-lib libcairo cairo_scaled_font_text_to_glyphs [cairo_status_t,cairo_scaled_font_t*,double,double,i8*,i32,cairo_glyph_t**,i32,cairo_text_cluster_t**,i32,i8*]*)
(bind-lib libcairo cairo_scaled_font_get_font_face [cairo_font_face_t*,cairo_scaled_font_t*]*)
(bind-lib libcairo cairo_scaled_font_get_font_matrix [void,cairo_scaled_font_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_scaled_font_get_ctm [void,cairo_scaled_font_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_scaled_font_get_scale_matrix [void,cairo_scaled_font_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_scaled_font_get_font_options [void,cairo_scaled_font_t*,cairo_font_options_t*]*)

;; query operations
(bind-lib libcairo cairo_get_operator [cairo_operator_t,cairo_t*]*)
(bind-lib libcairo cairo_get_source [cairo_pattern_t*,cairo_t*]*)
(bind-lib libcairo cairo_get_tolerance [double,cairo_t*]*)
(bind-lib libcairo cairo_get_antialias [cairo_antialias_t,cairo_t*]*)
(bind-lib libcairo cairo_set_antialias [void,cairo_t*,cairo_antialias_t]*)
(bind-lib libcairo cairo_has_current_point [cairo_bool_t,cairo_t*]*)
(bind-lib libcairo cairo_get_current_point [cairo_bool_t,cairo_t*,double,double]*)
(bind-lib libcairo cairo_get_fill_rule [cairo_fill_rule_t,cairo_t*]*)
(bind-lib libcairo cairo_get_line_width [double,cairo_t*]*)
(bind-lib libcairo cairo_get_line_cap [cairo_line_cap_t,cairo_t*]*)
(bind-lib libcairo cairo_get_line_join [cairo_line_join_t,cairo_t*]*)
(bind-lib libcairo cairo_get_miter_limit [double,cairo_t*]*)
(bind-lib libcairo cairo_get_dash_count [i32,cairo_t*]*)
(bind-lib libcairo cairo_get_dash [void,cairo_t*,double*,double*]*)
(bind-lib libcairo cairo_get_matrix [void,cairo_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_get_target [cairo_surface_t*,cairo_t*]*)
(bind-lib libcairo cairo_get_group_target [cairo_surface_t*,cairo_t*]*)

;; more path stuff
(bind-lib libcairo cairo_copy_path [cairo_path_t*,cairo_t*]*)
(bind-lib libcairo cairo_copy_path_flat [cairo_path_t*,cairo_t*]*)
(bind-lib libcairo cairo_append_path [void,cairo_t*,cairo_path_t*]*)
(bind-lib libcairo cairo_path_destroy [void,cairo_path_t*]*)

;; status stuff
(bind-lib libcairo cairo_status [cairo_status_t,cairo_t*]*)
(bind-lib libcairo cairo_status_to_string [i8*,cairo_status_t]*)

;; device stuff
(bind-lib libcairo cairo_device_reference [cairo_device_t*,cairo_device_t*]*)
(bind-lib libcairo cairo_device_get_type [cairo_device_type_t,cairo_device_t*]*)
(bind-lib libcairo cairo_device_status [cairo_status_t,cairo_device_t*]*)
(bind-lib libcairo cairo_device_acquire [cairo_status_t,cairo_device_t*]*)
(bind-lib libcairo cairo_device_release [void,cairo_device_t*]*)
(bind-lib libcairo cairo_device_flush [void,cairo_device_t*]*)
(bind-lib libcairo cairo_device_finish [void,cairo_device_t*]*)
(bind-lib libcairo cairo_device_destroy [void,cairo_device_t*]*)
(bind-lib libcairo cairo_device_get_reference_count [i32,cairo_device_t*]*)
(bind-lib libcairo cairo_device_get_user_data [i8*,cairo_device_t*,cairo_user_data_key_t*]*)
(bind-lib libcairo cairo_device_set_user_data [cairo_status_t,cairo_device_t*,cairo_user_data_key_t*,i8*,cairo_destroy_func_t]*)

;; surface stuff
(bind-lib libcairo cairo_surface_create_similar [cairo_surface_t*,cairo_surface_t*,cairo_content_t,i32,i32]*)
(bind-lib libcairo cairo_surface_create_for_rectangle [cairo_surface_t*,cairo_surface_t*,double,double,double,double]*)
(bind-lib libcairo cairo_surface_reference [cairo_surface_t*,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_finish [void,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_destroy [void,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_get_device [cairo_device_t,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_get_reference_count [i32,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_status [cairo_status_t,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_get_type [cairo_surface_type_t,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_get_content [cairo_content_t,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_write_to_png [cairo_status_t,cairo_surface_t*,i8*]*)
(bind-lib libcairo cairo_surface_get_user_data [i8*,cairo_surface_t*,cairo_user_data_key_t*]*)
(bind-lib libcairo cairo_surface_set_user_data [cairo_status_t,cairo_surface_t*,cairo_user_data_key_t*,i8*,cairo_destroy_func_t]*)
(bind-lib libcairo cairo_surface_get_font_options [void,cairo_surface_t*,cairo_font_options_t*]*)
(bind-lib libcairo cairo_surface_flush [void,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_mark_dirty [void,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_mark_dirty_rectangle [void,cairo_surface_t*,i32,i32,i32,i32]*)
(bind-lib libcairo cairo_surface_set_device_offset [void,cairo_surface_t*,double,double]*)
(bind-lib libcairo cairo_surface_get_device_offset [void,cairo_surface_t*,double*,double*]*)
(bind-lib libcairo cairo_surface_set_fallback_resolution [void,cairo_surface_t*,double,double]*)
(bind-lib libcairo cairo_surface_get_fallback_resolution [void,cairo_surface_t*,double*,double*]*)
(bind-lib libcairo cairo_surface_copy_page [void,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_show_page [void,cairo_surface_t*]*)
(bind-lib libcairo cairo_surface_has_show_text_glyphs [void,cairo_surface_t*]*)

;; image surface stuff
(bind-lib libcairo cairo_image_surface_create [cairo_surface_t*,cairo_format_t,i32,i32]*)
(bind-lib libcairo cairo_format_stride_for_width [i32,cairo_format_t,i32]*)
(bind-lib libcairo cairo_image_surface_create_for_data [cairo_surface_t*,i8*,cairo_format_t,i32,i32,i32]*)
(bind-lib libcairo cairo_image_surface_get_data [i8*,cairo_surface_t*]*)
(bind-lib libcairo cairo_image_surface_get_format [cairo_format_t,cairo_surface_t*]*)
(bind-lib libcairo cairo_image_surface_get_width [i32,cairo_surface_t*]*)
(bind-lib libcairo cairo_image_surface_get_height [i32,cairo_surface_t*]*)
(bind-lib libcairo cairo_image_surface_get_stride [i32,cairo_surface_t*]*)
(bind-lib libcairo cairo_image_surface_create_from_png [cairo_surface_t*,i8*]*)

;; recording surface stuff
(bind-lib libcairo cairo_recording_surface_create [cairo_surface_t*,cairo_content_t,cairo_rectangle_t*]*)
(bind-lib libcairo cairo_recording_surface_ink_extents [void,cairo_surface_t*,double*,double*,double*,double*]*)

;; more pattern stuff
(bind-lib libcairo cairo_pattern_create_rgb [cairo_pattern_t*,double,double,double]*)
(bind-lib libcairo cairo_pattern_create_rgba [cairo_pattern_t*,double,double,double,double]*)
(bind-lib libcairo cairo_pattern_create_for_surface [cairo_pattern_t*,cairo_surface_t*]*)
(bind-lib libcairo cairo_pattern_create_linear [cairo_pattern_t*,double,double,double,double]*)
(bind-lib libcairo cairo_pattern_create_radial [cairo_pattern_t*,double,double,double,double,double,double]*)
(bind-lib libcairo cairo_pattern_reference [cairo_pattern_t*,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_destroy [void,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_get_reference_count [i32,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_status [cairo_status_t,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_get_user_data [i8*,cairo_pattern_t*,cairo_user_data_key_t*]*)
(bind-lib libcairo cairo_pattern_set_user_data [cairo_status_t,cairo_pattern_t*,cairo_user_data_key_t*,i8*,cairo_destroy_func_t]*)
(bind-lib libcairo cairo_pattern_get_type [cairo_pattern_type_t,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_add_color_stop_rgb [void,cairo_pattern_t*,double,double,double,double]*)
(bind-lib libcairo cairo_pattern_add_color_stop_rgba [void,cairo_pattern_t*,double,double,double,double,double]*)
(bind-lib libcairo cairo_pattern_get_matrix [void,cairo_pattern_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_pattern_set_extend [void,cairo_pattern_t*,cairo_extend_t]*)
(bind-lib libcairo cairo_pattern_get_extend [cairo_extend_t,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_set_filter [void,cairo_pattern_t*,cairo_filter_t]*)
(bind-lib libcairo cairo_pattern_get_filter [cairo_filter_t,cairo_pattern_t*]*)
(bind-lib libcairo cairo_pattern_get_rgba [cairo_status_t,cairo_pattern_t*,double*,double*,double*,double*]*)
(bind-lib libcairo cairo_pattern_get_color_stop_rgba [cairo_status_t,cairo_pattern_t*,i32,double*,double*,double*,double*,double*]*)
(bind-lib libcairo cairo_pattern_get_surface [cairo_status_t,cairo_pattern_t*,cairo_surface_t**]*)
(bind-lib libcairo cairo_pattern_get_color_stop_count [cairo_status_t,cairo_pattern_t*,i32*]*)
(bind-lib libcairo cairo_pattern_get_linear_points [cairo_status_t,cairo_pattern_t*,double*,double*,double*,double*]*)
(bind-lib libcairo cairo_pattern_get_radial_circles [cairo_status_t,cairo_pattern_t*,double*,double*,double*]*)

;; matrix functions
(bind-lib libcairo cairo_matrix_init [void,cairo_matrix_t*,double,double,double,double,double,double]*)
(bind-lib libcairo cairo_matrix_init_identity [void,cairo_matrix_t*]*)
(bind-lib libcairo cairo_matrix_init_translate [void,cairo_matrix_t*,double,double]*)
(bind-lib libcairo cairo_matrix_init_scale [void,cairo_matrix_t*,double,double]*)
(bind-lib libcairo cairo_matrix_init_rotate [void,cairo_matrix_t*,double]*)
(bind-lib libcairo cairo_matrix_translate [void,cairo_matrix_t*,double,double]*)
(bind-lib libcairo cairo_matrix_scale [void,cairo_matrix_t*,double,double]*)
(bind-lib libcairo cairo_matrix_rotate [void,cairo_matrix_t*,double]*)
(bind-lib libcairo cairo_matrix_invert [cairo_status_t,cairo_matrix_t*]*)
(bind-lib libcairo cairo_matrix_multiply [void,cairo_matrix_t*,cairo_matrix_t*,cairo_matrix_t*]*)
(bind-lib libcairo cairo_matrix_transform_distance [void,cairo_matrix_t*,double*,double*]*)
(bind-lib libcairo cairo_matrix_transform_point [void,cairo_matrix_t*,double*,double*]*)

;; region stuff
(bind-lib libcairo cairo_region_create [cairo_region_t*]*)
(bind-lib libcairo cairo_region_create_rectangle [cairo_region_t*,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_create_rectangles [cairo_region_t*,cairo_rectangle_int_t*,i32]*)
(bind-lib libcairo cairo_region_copy [cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_reference [cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_equal [cairo_bool_t,cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_destroy [void,cairo_region_t*]*)
(bind-lib libcairo cairo_region_status [cairo_status_t,cairo_region_t*]*)
(bind-lib libcairo cairo_region_get_extents [void,cairo_region_t*,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_num_rectangles [i32,cairo_region_t*]*)
(bind-lib libcairo cairo_region_get_rectangle [void,cairo_region_t*,i32,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_is_empty [cairo_bool_t,cairo_region_t*]*)
(bind-lib libcairo cairo_region_contains_rectangle [cairo_region_overlap_t,cairo_region_t*,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_contains_point [cairo_bool_t,cairo_region_t*,i32,i32]*)
(bind-lib libcairo cairo_region_translate [void,cairo_region_t*,i32,i32]*)
(bind-lib libcairo cairo_region_subtract [cairo_status_t,cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_intersect [cairo_status_t,cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_union [cairo_status_t,cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_xor [cairo_status_t,cairo_region_t*,cairo_region_t*]*)
(bind-lib libcairo cairo_region_subtract_rectangle [cairo_status_t,cairo_region_t*,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_intersect_rectangle [cairo_status_t,cairo_region_t*,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_union_rectangle [cairo_status_t,cairo_region_t*,cairo_rectangle_int_t*]*)
(bind-lib libcairo cairo_region_xor_rectangle [cairo_status_t,cairo_region_t*,cairo_rectangle_int_t*]*)

;; svg
(bind-lib libcairo cairo_svg_surface_create [cairo_surface_t*,i8*,double,double]*)
;; pdf
(bind-lib libcairo cairo_pdf_surface_create [cairo_surface_t*,i8*,double,double]*)
(bind-lib libcairo cairo_pdf_surface_set_size [void,cairo_surface_t*,double,double]*)

(define *xtmlib-cairo-loaded* #t)

(impc:aot:insert-footer "xtmcairo")
