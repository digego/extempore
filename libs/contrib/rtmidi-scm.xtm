(define *midi-note-off* 8)              ;; key, velocity
(define *midi-note-on* 9)               ;; key, velocity
(define *midi-aftertouch* 10)           ;; key, touch
(define *midi-control-change* 11)       ;; controller, value
(define *midi-cc* 11)                   ;; controller, value
(define *midi-program-change* 12)       ;; value, ignored
(define *midi-channel-pressure* 13)     ;; value, ignored
(define *midi-pitch-bend* 14)           ;; lsb (7 bits), msb (7 bits)

(define play-midi-note
  (lambda (time device pitch velocity duration channel)
    (callback time 'midi_send device *midi-note-on* channel pitch velocity)
    (callback (+ time duration) 'midi_send device *midi-note-off* channel pitch velocity)))

;; homophonic playnote
(define homo-play-midi-note
  (let ((notes (make-vector 127 0)))
    (lambda (time device pitch velocity duration channel)
      (if (> time (vector-ref notes pitch))
    (let ((dur (- duration (* 2 *au:block-size*))))
      (vector-set! notes pitch (+ time dur))
      (callback time 'midi_send device *midi-note-on* channel pitch velocity)
      (callback (+ time dur) 'midi_send device *midi-note-off* channel pitch velocity))))))

;; A midi-specific play macro

(define-macro (mplay . args)
  (if (symbol? (car args))
      `(play-midi-note (*metro* beat) ,(car args)
           (real->integer ,(cadr args))
           (real->integer ,(caddr args))
           (*metro* 'dur ,(car (cdddr args))) 0)
      `(play-midi-note (*metro* (+ beat ,(car args))) ,(cadr args)
           (real->integer ,(caddr args))
           (real->integer ,(car (cdddr args)))
           (*metro* 'dur ,(cadr (cdddr args))) 0)))


(define-macro (mplayob o b . args)
  `(if (= 0 (modulo (+ ,o beat) ,b))
       (mplay ,@args)
       #f))

(define-macro (mplayobs l b . args)
  `(if (member (modulo beat ,b) ,l)
       (mplay ,@args)
       #f))
