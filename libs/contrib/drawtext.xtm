;;; drawtext.xtm -- Extempore bindings for libdrawtext

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libdrawtext

;;; Commentary:

;; libdrawtext is a simple library for drawing text to an OpenGL
;; canvas.

;; http://nuclear.mutantstargoat.com/sw/libdrawtext/

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/drawtext.xtm" 'quiet))
(sys:load-preload-check 'drawtext)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmdrawtext")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib libdrawtext
  (cond ((string=? (sys:platform) "OSX")
         "libdrawtext.dylib")
        ((string=? (sys:platform) "Linux")
         "libdrawtext.so")
        ((string=? (sys:platform) "Windows")
         "libdrawtext.dll")))

(define *xtmlib-drawtext-loaded* #t)

(bind-alias dtx_font i8)
(bind-alias dtx_glyphmap i8)

(bind-val DTX_NBF enum 0)	;; unbuffered
(bind-val DTX_LBF enum 1)	;; line buffered
(bind-val DTX_FBF enum 2)	;; fully buffered

;; <x,y,width,height>
(bind-type dtx_box <float,float,float,float>)

;; Open a truetype/opentype/whatever font.

;; If sz is non-zero, the default ASCII glyphmap at the requested
;; point size is automatically created as well, and ready to use.

;; To use other unicode ranges and different font sizes you must first
;; call dtx_prepare or dtx_prepare_range before issuing any drawing
;; calls, otherwise nothing will be rendered.

;; struct dtx_font *dtx_open_font(const char *fname, int sz);
(bind-lib libdrawtext dtx_open_font [dtx_font*,i8*,i32]*)
;; void dtx_close_font(struct dtx_font *fnt);
(bind-lib libdrawtext dtx_close_font [void,dtx_font*]*)

;; prepare an ASCII glyphmap for the specified font size
;; void dtx_prepare(struct dtx_font *fnt, int sz);
(bind-lib libdrawtext dtx_prepare [void,dtx_font*,i32]*)

;; prepare an arbitrary unicode range glyphmap for the specified font size
;; void dtx_prepare_range(struct dtx_font *fnt, int sz, int cstart, int cend);
(bind-lib libdrawtext dtx_prepare_range [void,dtx_font*,i32,i32,i32]*)

;; Finds the glyphmap that contains the specified character code and
;; matches the requested size. Returns null if it hasn't been created
;; (you should call dtx_prepare/dtx_prepare_range).
;; struct dtx_glyphmap *dtx_get_font_glyphmap(struct dtx_font *fnt, int sz, int code);
(bind-lib libdrawtext dtx_get_font_glyphmap [dtx_glyphmap*,dtx_font*,i32,i32]*)

;; Finds the glyphmap that contains the specified unicode range and
;; matches the rested font size. Will automatically generate one if it
;; can't find it.
;; struct dtx_glyphmap *dtx_get_font_glyphmap_range(struct dtx_font *fnt, int sz, int cstart, int cend);
(bind-lib libdrawtext dtx_get_font_glyphmap_range [dtx_glyphmap*,dtx_font*,i32,i32,i32]*)

;; Creates and returns a glyphmap for a particular unicode range and
;; font size. The generated glyphmap is added to the font's list of
;; glyphmaps.

;; struct dtx_glyphmap *dtx_create_glyphmap_range(struct dtx_font *fnt, int sz, int cstart, int cend);
(bind-lib libdrawtext dtx_create_glyphmap_range [dtx_glyphmap*,dtx_font*,i32,i32,i32]*)

(bind-lib libdrawtext dtx_free_glyphmap [void,dtx_glyphmap*]*)

;; returns a pointer to the raster image of a glyphmap (1 byte per
;; pixel grayscale)
;; unsigned char *dtx_get_glyphmap_image(struct dtx_glyphmap *gmap);
;; (bind-lib libdrawtext dtx_get_glyphmap_image [i8*,dtx_glyphmap*]*)

;; returns the width of the glyphmap image in pixels
;; int dtx_get_glyphmap_width(struct dtx_glyphmap *gmap);
(bind-lib libdrawtext dtx_get_glyphmap_width [i32,dtx_glyphmap*]*)
;; returns the height of the glyphmap image in pixels
;; int dtx_get_glyphmap_height(struct dtx_glyphmap *gmap);
(bind-lib libdrawtext dtx_get_glyphmap_height [i32,dtx_glyphmap*]*)

;; The following functions can be used even when the library is
;; compiled without freetype support. (TODO)

;; struct dtx_glyphmap *dtx_load_glyphmap(const char *fname);
;; struct dtx_glyphmap *dtx_load_glyphmap_stream(FILE *fp);
;; int dtx_save_glyphmap(const char *fname, const struct dtx_glyphmap *gmap);
;; int dtx_save_glyphmap_stream(FILE *fp, const struct dtx_glyphmap *gmap);


;;;;;;;;;;;;;;;
;; rendering ;;
;;;;;;;;;;;;;;;

;; before drawing anything this function must set the font to use
;; void dtx_use_font(struct dtx_font *fnt, int sz);
(bind-lib libdrawtext dtx_use_font [void,dtx_font*,i32]*)

;; /sets the buffering mode
;;  - DTX_NBUF: every call to dtx_string gets rendered immediately.
;;  - DTX_LBUF: renders when the buffer is full or the string contains a newline.
;;  - DTX_FBUF: renders only when the buffer is full (you must call dtx_flush explicitly).

;; (bind-lib libdrawtext dtx_draw_buffering [void,enum]*)

;; Sets the vertex attribute indices to use for passing vertex and
;; texture coordinate data. By default both are -1 which means you
;; don't have to use a shader, and if you do they are accessible
;; through gl_Vertex and gl_MultiTexCoord0, as usual.
;;
;; NOTE: If you are using OpenGL ES 2.x or OpenGL >= 3.1 pure
;; (non-compatibility) context you must specify valid attribute
;; indices.
;; void dtx_vertex_attribs(int vert_attr, int tex_attr);
(bind-lib libdrawtext dtx_vertex_attribs [void,i32,i32]*)

;; draws a single glyph at the origin
;; void dtx_glyph(int code);
(bind-lib libdrawtext dtx_glyph [void,i32]*)
;; draws a utf-8 string starting at the origin. \n \r and \t are handled appropriately.
;; void dtx_string(const char *str);
(bind-lib libdrawtext dtx_string [void,i8*]*)

;; render any pending glyphs (see dtx_draw_buffering)
;; void dtx_flush(void);
(bind-lib libdrawtext dtx_flush [void]*)

;;;;;;;;;;;;;;;
;; encodings ;;
;;;;;;;;;;;;;;;

;; returns a pointer to the next character in a utf-8 stream
;; char *dtx_utf8_next_char(char *str);
(bind-lib libdrawtext dtx_utf8_next_char [i8*,i8*]*)

;; returns the unicode character codepoint of the utf-8 character starting at str
;; int dtx_utf8_char_code(const char *str);
(bind-lib libdrawtext dtx_utf8_char_code [i32,i8*]*)

;; returns the number of bytes of the utf-8 character starting at str
;; int dtx_utf8_nbytes(const char *str);
(bind-lib libdrawtext dtx_utf8_nbytes [i32,i8*]*)

;; returns the number of utf-8 character in a zero-terminated utf-8 string
;; int dtx_utf8_char_count(const char *str);
(bind-lib libdrawtext dtx_utf8_char_count [i32,i8*]*)

;; Converts a unicode code-point to a utf-8 character by filling in
;; the buffer passed at the second argument, and returns the number of
;; bytes taken by that utf-8 character.
;;
;; It's valid to pass a null buffer pointer, in which case only the
;; byte count is returned (useful to figure out how much memory to
;; allocate for a buffer).
;; size_t dtx_utf8_from_char_code(int code, char *buf);
(bind-lib libdrawtext dtx_utf8_from_char_code [size_t,i32,i8*]*)

;; Converts a unicode utf-16 wchar_t string to utf-8, filling in the
;; buffer passed at the second argument. Returns the size of the
;; resulting string in bytes.

;; It's valid to pass a null buffer pointer, in which case only the
;; size gets calculated and returned, which is useful for figuring out
;; how much memory to allocate for the utf-8 buffer.
;; size_t dtx_utf8_from_string(const wchar_t *str, char *buf);
(bind-lib libdrawtext dtx_utf8_from_string [size_t,i32,i8*]*)


;;;;;;;;;;;;;
;; metrics ;;
;;;;;;;;;;;;;

;; float dtx_line_height(void);
(bind-lib libdrawtext dtx_line_height [float]*)

;; rendered dimensions of a single glyph
;; void dtx_glyph_box(int code, struct dtx_box *box);
(bind-lib libdrawtext dtx_glyph_box [void,i32,dtx_box*]*)
;; float dtx_glyph_width(int code);
(bind-lib libdrawtext dtx_glyph_width [float,i32]*)
;; float dtx_glyph_height(int code);
(bind-lib libdrawtext dtx_glyph_height [float,i32]*)

;; rendered dimensions of a string
;; void dtx_string_box(const char *str, struct dtx_box *box);
(bind-lib libdrawtext dtx_string_box [void,i8*,dtx_box*]*)
;; float dtx_string_width(const char *str);
(bind-lib libdrawtext dtx_string_width [float,i8*]*)
;; float dtx_string_height(const char *str);
(bind-lib libdrawtext dtx_string_height [float,i8*]*)

;; returns the horizontal position of the n-th character of the
;; rendered string (useful for placing cursors)
;; float dtx_char_pos(const char *str, int n);
(bind-lib libdrawtext dtx_char_pos [float,i8*,i32]*)

;; int dtx_char_at_pt(const char *str, float pt);
(bind-lib libdrawtext dtx_char_at_pt [i32,i8*,float]*)

(define *xtmlib-drawtext-loaded* #t)

(impc:aot:insert-footer "xtmdrawtext")
