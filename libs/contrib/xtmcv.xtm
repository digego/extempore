;;; xtmcv.xtm -- OpenCV 4 for Extempore

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: xtmcv.dll

;;; Commentary:
;;
;; starting point for opencv4 for Extempore
;;
;; requires dynamic lib from xtmcv project:
;; https://github.com/extemporelang/xtmcv
;;

;;; Code:

(bind-dylib cvlib
  (cond ((string=? (sys:platform) "OSX")
         (begin (println "OpenCV Not Supported on OSX") #f))
        ((string=? (sys:platform) "Linux")
         (begin (println "OpenCV Not Supported on Linux") #f))
        ((string=? (sys:platform) "Windows") "xtmcv.dll")))

;; OCV XTM TYPES
(bind-val OCV_XTM_Mat_T i32 1)
(bind-val OCV_XTM_VideoCapture_T i32 2)
(bind-val OCV_XTM_VideoWriter_T i32 3)

;; scheme zone stuff

(bind-func what-zone
  (lambda ()
    (println (peek_zone))))

;; create-zone
(bind-func create-zone1 (lambda () (create_zone (* 256 1024))))
(bind-func create-zone2 (lambda (size) (create_zone size)))
(define create-zone
  (lambda args
    (if (null? args)
        (create-zone1)
        (create-zone2 (car args)))))
;; push-zone
(bind-func push-zone (lambda (zone) (push_zone zone) void))
;; pop-zone
(bind-func pop-zone (lambda () (pop_zone)))
;; reset-zone
(bind-func reset-zone (lambda (zone) (reset_zone zone)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OpenCV Core module
;;

(bind-val CV_8U i32 0)
(bind-val CV_8S i32 1)
(bind-val CV_16U i32 2)
(bind-val CV_16S i32 3)
(bind-val CV_32S i32 4)
(bind-val CV_32F i32 5)
(bind-val CV_64F i32 6)
(bind-val CV_USRTYPE1 i32 7)

;; where depth is one of the above
;; and cn is the number of
;; for example: RGB colour would be:
;; CV_8U * 3 = (CV_MAKE_TYPE CV_8U 3) = 16
(bind-func CV_MAKE_TYPE
  (lambda (depth:i32 cn:i32)
    (+ (bitwise-and depth (- (<< 1:i32 3) 1))
       (<< (- cn 1) 3))))

;;
;; opaque aliases
;;
;; these must all be constructed & released through the ocv lib
;;
;; this is *usually* in the form of (Mat is one common exception)
;; constructor: toRect, toByteArray, toPoint etc..
;; release: Rect_Release, ByteArray_Release, Point_Release etc..
;;

(bind-alias ocv_PointT i8*) ;; x, y
(bind-lib cvlib toPoint [ocv_PointT,i32,i32]*)
(bind-lib cvlib Point_Release [void,ocv_PointT]*)

(bind-alias ocv_ScalarT i8*) ;; v1, v2, v3, v4
(bind-lib cvlib toScalar [ocv_ScalarT,double,double,double,double]*)
(bind-lib cvlib Scalar_Release [void,ocv_ScalarT]*)

(bind-alias ocv_IntVectorT i8*)
;; buf of i32* and # elts in buf
(bind-lib cvlib toIntVector [ocv_IntVectorT,i32*,i32]*)
(bind-lib cvlib IntVector_Release [void,ocv_IntVectorT]*)

(bind-alias ocv_FloatVectorT i8*)
;; buf of float* and # elts in buf
(bind-lib cvlib toFloatVector [ocv_FloatVectorT,float*,i32]*)
(bind-lib cvlib FloatVector_Release [void,ocv_FloatVectorT]*)

(bind-alias ocv_ByteArrayT i8*)
;; buf of i8* and # elts in buf
(bind-lib cvlib toByteArray [ocv_ByteArrayT,i8*,i32]*)
(bind-lib cvlib ByteArray_Release [void,ocv_ByteArrayT]*)

(bind-alias ocv_RectT i8*) ;; x, y, w, h
(bind-lib cvlib toRect [ocv_RectT,i32,i32,i32,i32]*)
(bind-lib cvlib Rect_Release [void,ocv_RectT]*)

(bind-alias ocv_RectsT i8*)
;; a buf of RectT and # elts in buf
(bind-lib cvlib toRects [ocv_RectsT,ocv_RectT,i32]*)
(bind-lib cvlib Rects_Release [void,ocv_RectsT]*)

(bind-alias ocv_SizeT i8*) ;; w, h
(bind-lib cvlib toSize [ocv_SizeT,i32,i32]*)
(bind-lib cvlib Size_Release [void,ocv_SizeT]*)

(bind-alias ocv_PointsT i8*)
(bind-lib cvlib toPoints [ocv_PointsT,ocv_PointT,i32]*)
(bind-lib cvlib Points_Release [void,ocv_PointsT]*)

(bind-alias ocv_KeyPointT i8*) ;; x, y, size, angle, response, octave, classID
(bind-lib cvlib toKeyPoint [ocv_KeyPointT,double,double,double,double,double,i32,i32]*)
(bind-lib cvlib KeyPoint_Release [void,ocv_KeyPointT]*)

(bind-alias ocv_KeyPointsT i8*)
(bind-lib cvlib toKeyPoints [ocv_KeyPointsT,ocv_KeyPointT,i32]*)
(bind-lib cvlib KeyPoints_Release [void,ocv_KeyPointsT]*)

(bind-alias ocv_DMatchT i8*) ;; queryIdx, trainIdx, imgIdx, distance
(bind-lib cvlib toDMatch [ocv_DMatchT,i32,i32,i32,i32]*)
(bind-lib cvlib DMatch_Release [void,ocv_DMatchT]*)

(bind-alias ocv_DMatchesT i8*)
(bind-lib cvlib toDMatches [ocv_KeyPointsT,ocv_DMatchT,i32]*)
(bind-lib cvlib DMatches_Release [void,ocv_DMatchesT]*)



;;
;; struct types
;;
(bind-type ocv_CStrings <i8**,i32>)
(bind-type ocv_ByteArray <i8*,i32>)
(bind-type ocv_IntVector <i32*,i32>)
(bind-type ocv_FloatVector <float*,i32>)
(bind-type ocv_RawData <i32,i32,ocv_ByteArray>)
(bind-type ocv_Point <i32,i32>)
(bind-type ocv_Points <ocv_Point*,i32>)
(bind-type ocv_Contour <ocv_Point*,i32>)
(bind-type ocv_Contours <ocv_Contour*,i32>)
(bind-type ocv_Rect <i32,i32,i32,i32>)
(bind-type ocv_Rects <ocv_Rect*,i32>)
(bind-type ocv_Size <i32,i32>)
(bind-type ocv_RotatedRect <ocv_Contour,ocv_Rect,ocv_Point,ocv_Size,double>)
(bind-type ocv_Scalar <double,double,double,double>)
(bind-type ocv_KeyPoint <double,double,double,double,double,i32,i32>)
(bind-type ocv_KeyPoints <ocv_KeyPoint*,i32>)
(bind-type ocv_DMatch <i32,i32,i32,float>)
(bind-type ocv_DMatches <ocv_DMatch*,i32>)
(bind-type ocv_MultiDMatches <ocv_DMatches*,i32>)

;; (bind-type ocv_Moment <double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double,double>)


(bind-alias ocv_MatT i8*)

(bind-type ocv_MatTs <ocv_MatT*,i32>)

;;
;; opencv Mat
;;
(bind-lib cvlib Mat_New [ocv_MatT]*)
(bind-lib cvlib Mat_NewWithSize [ocv_MatT,i32,i32,i32]*)
(bind-lib cvlib Mat_Close [void,ocv_MatT]*)
(bind-lib cvlib Mat_DataPtr [void,ocv_MatT,i8**,i32*]*)
(bind-lib cvlib Mat_NewFromBytes [ocv_MatT,i32,i32,i32,i8*]*)

(bind-type ocv_Mat <ocv_MatT,i32> (constructor? . #f) (printer? . #f))
(bind-type ocv_Mats <ocv_Mat*,i32>)

(bind-func ocv_Mat:[ocv_Mat*,ocv_MatT]*
  (lambda (in)
    (let ((obj (alloc)))
      (tfill! obj in OCV_XTM_Mat_T)
      obj)))

(bind-func ocv_Mat
  (lambda (rows:i32 cols:i32 type:i32)
    (let ((mat (Mat_NewWithSize rows cols type)))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat:[ocv_Mat*,ocv_MatT]* mat))))

(bind-func ocv_Mat
  (lambda (rows:i32 cols:i32 type:i32 data:i8*)
    (let ((mat (Mat_NewFromBytes rows cols type data)))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat:[ocv_Mat*,ocv_MatT]* mat))))

(bind-func ocv_dataPtr
  (lambda (mat:ocv_Mat* size:i32*)
    (let ((dat:i8* (alloc)))
      (Mat_DataPtr (tref mat 0) (ref dat) size)
      dat)))

(bind-func ocv_dataPtr
  (lambda (mat:ocv_Mat*)
    (let ((dat:i8* (alloc))
          (size:i32 0))
      (Mat_DataPtr (tref mat 0) (ref dat) (ref size))
      dat)))

;; override wrapper
(bind-func ocv_Mat1 (lambda (rows cols type) (ocv_Mat rows cols type)))
(define ocv_Mat
  (lambda (rows cols type)
    (ocv_Mat1 rows cols type)))

;; Mat crop/roi
(bind-lib cvlib Mat_Region [ocv_MatT,ocv_MatT,ocv_RectT]*)
(bind-func ocv_region
  (lambda (in:ocv_Mat* rect:ocv_RectT)
    (let ((mat (Mat_Region (tref in 0) rect)))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat mat))))
;;
;; opencv mat clone
;;
(bind-lib cvlib Mat_Clone [ocv_MatT,ocv_MatT]*)

(bind-func ocv_clone
  (lambda (in:ocv_Mat*)
    (let ((mat (Mat_Clone (tref in 0))))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat mat))))

;;
;; Mat absolute difference
;;
(bind-lib cvlib Mat_AbsDiff [void,ocv_MatT,ocv_MatT,ocv_MatT]*)
(bind-func ocv_absdiff
  (lambda (in1:ocv_Mat* in2:ocv_Mat* out:ocv_Mat*)
    (Mat_AbsDiff (tref in1 0) (tref in2 0) (tref out 0))
    void))

;;
;; opencv mat copy
;;
(bind-lib cvlib Mat_CopyTo [void,ocv_MatT,ocv_MatT]*)

(bind-func ocv_copyto
  (lambda (in:ocv_Mat* out:ocv_Mat*)
    (Mat_CopyTo (tref in 0) (tref out 0))))

;;
;; opencv mat empty
;;
(bind-lib cvlib Mat_Empty [i32,ocv_MatT]*) ;; essentially boolean

(bind-func ocv_empty
  (lambda (in:ocv_Mat*)
    (Mat_Empty (tref in 0))))

;;
;; opencv mat size
;;
(bind-lib cvlib Mat_Size [i32,ocv_MatT,ocv_IntVector*]*)
(bind-lib cvlib Mat_Total [i32,ocv_MatT]*)
;; (bind-lib cvlib toIntVector [IntVector*])

(bind-func ocv_size
  (lambda (in:ocv_Mat* vec:ocv_IntVector*)
    (Mat_Size (tref in 0) vec)))

(bind-func ocv_total
  (lambda (in:ocv_Mat*)
    (Mat_Total (tref in 0))))

;;
;; opencv mat props
;;
(bind-lib cvlib Mat_Rows [i32,ocv_MatT]*)
(bind-lib cvlib Mat_Cols [i32,ocv_MatT]*)
(bind-lib cvlib Mat_Channels [i32,ocv_MatT]*)
(bind-lib cvlib Mat_Type [i32,ocv_MatT]*)

(bind-func ocv_rows (lambda (in:ocv_Mat*) (Mat_Rows (tref in 0))))
(bind-func ocv_cols (lambda (in:ocv_Mat*) (Mat_Cols (tref in 0))))
(bind-func ocv_channels (lambda (in:ocv_Mat*) (Mat_Channels (tref in 0))))
(bind-func ocv_type (lambda (in:ocv_Mat*) (Mat_Type (tref in 0))))




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OpenCV ImgProc module
;;

;;
;; ColorConversionCodes
;;
(bind-val ocv_COLOR_BGR2BGRA i32 0)
(bind-val ocv_COLOR_RGB2RGBA i32 ocv_COLOR_BGR2BGRA)
(bind-val ocv_COLOR_BGRA2BGR i32 1)
(bind-val ocv_COLOR_RGBA2RGB i32 ocv_COLOR_BGRA2BGR)
(bind-val ocv_COLOR_BGR2RGBA i32 2)
(bind-val ocv_COLOR_RGB2BGRA i32 ocv_COLOR_BGR2RGBA)
(bind-val ocv_COLOR_RGBA2BGR i32 3)
(bind-val ocv_COLOR_BGRA2RGB i32 ocv_COLOR_RGBA2BGR)
(bind-val ocv_COLOR_BGR2RGB i32 4)
(bind-val ocv_COLOR_RGB2BGR i32 ocv_COLOR_BGR2RGB)
(bind-val ocv_COLOR_BGRA2RGBA i32 5)
(bind-val ocv_COLOR_RGBA2BGRA i32 ocv_COLOR_BGRA2RGBA)
(bind-val ocv_COLOR_BGR2GRAY i32 6)
(bind-val ocv_COLOR_RGB2GRAY i32 7)
(bind-val ocv_COLOR_GRAY2BGR i32 8)
(bind-val ocv_COLOR_GRAY2RGB i32 ocv_COLOR_GRAY2BGR)
(bind-val ocv_COLOR_GRAY2BGRA i32 9)
(bind-val ocv_COLOR_GRAY2RGBA i32 ocv_COLOR_GRAY2BGRA)
(bind-val ocv_COLOR_BGRA2GRAY i32 10)
(bind-val ocv_COLOR_RGBA2GRAY i32 11)
(bind-val ocv_COLOR_BGR2BGR565 i32 12)
(bind-val ocv_COLOR_RGB2BGR565 i32 13)
(bind-val ocv_COLOR_BGR5652BGR i32 14)
(bind-val ocv_COLOR_BGR5652RGB i32 15)
(bind-val ocv_COLOR_BGRA2BGR565 i32 16)
(bind-val ocv_COLOR_RGBA2BGR565 i32 17)
(bind-val ocv_COLOR_BGR5652BGRA i32 18)
(bind-val ocv_COLOR_BGR5652RGBA i32 19)
(bind-val ocv_COLOR_GRAY2BGR565 i32 20)
(bind-val ocv_COLOR_BGR5652GRAY i32 21)
(bind-val ocv_COLOR_BGR2BGR555 i32 22)
(bind-val ocv_COLOR_RGB2BGR555 i32 23)
(bind-val ocv_COLOR_BGR5552BGR i32 24)
(bind-val ocv_COLOR_BGR5552RGB i32 25)
(bind-val ocv_COLOR_BGRA2BGR555 i32 26)
(bind-val ocv_COLOR_RGBA2BGR555 i32 27)
(bind-val ocv_COLOR_BGR5552BGRA i32 28)
(bind-val ocv_COLOR_BGR5552RGBA i32 29)
(bind-val ocv_COLOR_GRAY2BGR555 i32 30)
(bind-val ocv_COLOR_BGR5552GRAY i32 31)
(bind-val ocv_COLOR_BGR2XYZ i32 32)
(bind-val ocv_COLOR_RGB2XYZ i32 33)
(bind-val ocv_COLOR_XYZ2BGR i32 34)
(bind-val ocv_COLOR_XYZ2RGB i32 35)
(bind-val ocv_COLOR_BGR2YCrCb i32 36)
(bind-val ocv_COLOR_RGB2YCrCb i32 37)
(bind-val ocv_COLOR_YCrCb2BGR i32 38)
(bind-val ocv_COLOR_YCrCb2RGB i32 39)
(bind-val ocv_COLOR_BGR2HSV i32 40)
(bind-val ocv_COLOR_RGB2HSV i32 41)
(bind-val ocv_COLOR_BGR2Lab i32 44)
(bind-val ocv_COLOR_RGB2Lab i32 45)
(bind-val ocv_COLOR_BGR2Luv i32 50)
(bind-val ocv_COLOR_RGB2Luv i32 51)
(bind-val ocv_COLOR_BGR2HLS i32 52)
(bind-val ocv_COLOR_RGB2HLS i32 53)
(bind-val ocv_COLOR_HSV2BGR i32 54)
(bind-val ocv_COLOR_HSV2RGB i32 55)
(bind-val ocv_COLOR_Lab2BGR i32 56)
(bind-val ocv_COLOR_Lab2RGB i32 57)
(bind-val ocv_COLOR_Luv2BGR i32 58)
(bind-val ocv_COLOR_Luv2RGB i32 59)
(bind-val ocv_COLOR_HLS2BGR i32 60)
(bind-val ocv_COLOR_HLS2RGB i32 61)
(bind-val ocv_COLOR_BGR2HSV_FULL i32 66)
(bind-val ocv_COLOR_RGB2HSV_FULL i32 67)
(bind-val ocv_COLOR_BGR2HLS_FULL i32 68)
(bind-val ocv_COLOR_RGB2HLS_FULL i32 69)
(bind-val ocv_COLOR_HSV2BGR_FULL i32 70)
(bind-val ocv_COLOR_HSV2RGB_FULL i32 71)
(bind-val ocv_COLOR_HLS2BGR_FULL i32 72)
(bind-val ocv_COLOR_HLS2RGB_FULL i32 73)
(bind-val ocv_COLOR_LBGR2Lab i32 74)
(bind-val ocv_COLOR_LRGB2Lab i32 75)
(bind-val ocv_COLOR_LBGR2Luv i32 76)
(bind-val ocv_COLOR_LRGB2Luv i32 77)
(bind-val ocv_COLOR_Lab2LBGR i32 78)
(bind-val ocv_COLOR_Lab2LRGB i32 79)
(bind-val ocv_COLOR_Luv2LBGR i32 80)
(bind-val ocv_COLOR_Luv2LRGB i32 81)
(bind-val ocv_COLOR_BGR2YUV i32 82)
(bind-val ocv_COLOR_RGB2YUV i32 83)
(bind-val ocv_COLOR_YUV2BGR i32 84)
(bind-val ocv_COLOR_YUV2RGB i32 85)
(bind-val ocv_COLOR_YUV2RGB_NV12 i32 90)
(bind-val ocv_COLOR_YUV2BGR_NV12 i32 91)
(bind-val ocv_COLOR_YUV2RGB_NV21 i32 92)
(bind-val ocv_COLOR_YUV2BGR_NV21 i32 93)
(bind-val ocv_COLOR_YUV420sp2RGB i32 ocv_COLOR_YUV2RGB_NV21)
(bind-val ocv_COLOR_YUV420sp2BGR i32 ocv_COLOR_YUV2BGR_NV21)
(bind-val ocv_COLOR_YUV2RGBA_NV12 i32 94)
(bind-val ocv_COLOR_YUV2BGRA_NV12 i32 95)
(bind-val ocv_COLOR_YUV2RGBA_NV21 i32 96)
(bind-val ocv_COLOR_YUV2BGRA_NV21 i32 97)
(bind-val ocv_COLOR_YUV420sp2RGBA i32 ocv_COLOR_YUV2RGBA_NV21)
(bind-val ocv_COLOR_YUV420sp2BGRA i32 ocv_COLOR_YUV2BGRA_NV21)
(bind-val ocv_COLOR_YUV2RGB_YV12 i32 98)
(bind-val ocv_COLOR_YUV2BGR_YV12 i32 99)
(bind-val ocv_COLOR_YUV2RGB_IYUV i32 100)
(bind-val ocv_COLOR_YUV2BGR_IYUV i32 101)
(bind-val ocv_COLOR_YUV2RGB_I420 i32 ocv_COLOR_YUV2RGB_IYUV)
(bind-val ocv_COLOR_YUV2BGR_I420 i32 ocv_COLOR_YUV2BGR_IYUV)
(bind-val ocv_COLOR_YUV420p2RGB i32 ocv_COLOR_YUV2RGB_YV12)
(bind-val ocv_COLOR_YUV420p2BGR i32 ocv_COLOR_YUV2BGR_YV12)
(bind-val ocv_COLOR_YUV2RGBA_YV12 i32 102)
(bind-val ocv_COLOR_YUV2BGRA_YV12 i32 103)
(bind-val ocv_COLOR_YUV2RGBA_IYUV i32 104)
(bind-val ocv_COLOR_YUV2BGRA_IYUV i32 105)
(bind-val ocv_COLOR_YUV2RGBA_I420 i32 ocv_COLOR_YUV2RGBA_IYUV)
(bind-val ocv_COLOR_YUV2BGRA_I420 i32 ocv_COLOR_YUV2BGRA_IYUV)
(bind-val ocv_COLOR_YUV420p2RGBA i32 ocv_COLOR_YUV2RGBA_YV12)
(bind-val ocv_COLOR_YUV420p2BGRA i32 ocv_COLOR_YUV2BGRA_YV12)
(bind-val ocv_COLOR_YUV2GRAY_420 i32 106)
(bind-val ocv_COLOR_YUV2GRAY_NV21 i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV2GRAY_NV12 i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV2GRAY_YV12 i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV2GRAY_IYUV i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV2GRAY_I420 i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV420sp2GRAY i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV420p2GRAY i32 ocv_COLOR_YUV2GRAY_420)
(bind-val ocv_COLOR_YUV2RGB_UYVY i32 107)
(bind-val ocv_COLOR_YUV2BGR_UYVY i32 108)
(bind-val ocv_COLOR_YUV2RGB_Y422 i32 ocv_COLOR_YUV2RGB_UYVY)
(bind-val ocv_COLOR_YUV2BGR_Y422 i32 ocv_COLOR_YUV2BGR_UYVY)
(bind-val ocv_COLOR_YUV2RGB_UYNV i32 ocv_COLOR_YUV2RGB_UYVY)
(bind-val ocv_COLOR_YUV2BGR_UYNV i32 ocv_COLOR_YUV2BGR_UYVY)
(bind-val ocv_COLOR_YUV2RGBA_UYVY i32 111)
(bind-val ocv_COLOR_YUV2BGRA_UYVY i32 112)
(bind-val ocv_COLOR_YUV2RGBA_Y422 i32 ocv_COLOR_YUV2RGBA_UYVY)
(bind-val ocv_COLOR_YUV2BGRA_Y422 i32 ocv_COLOR_YUV2BGRA_UYVY)
(bind-val ocv_COLOR_YUV2RGBA_UYNV i32 ocv_COLOR_YUV2RGBA_UYVY)
(bind-val ocv_COLOR_YUV2BGRA_UYNV i32 ocv_COLOR_YUV2BGRA_UYVY)
(bind-val ocv_COLOR_YUV2RGB_YUY2 i32 115)
(bind-val ocv_COLOR_YUV2BGR_YUY2 i32 116)
(bind-val ocv_COLOR_YUV2RGB_YVYU i32 117)
(bind-val ocv_COLOR_YUV2BGR_YVYU i32 118)
(bind-val ocv_COLOR_YUV2RGB_YUYV i32 ocv_COLOR_YUV2RGB_YUY2)
(bind-val ocv_COLOR_YUV2BGR_YUYV i32 ocv_COLOR_YUV2BGR_YUY2)
(bind-val ocv_COLOR_YUV2RGB_YUNV i32 ocv_COLOR_YUV2RGB_YUY2)
(bind-val ocv_COLOR_YUV2BGR_YUNV i32 ocv_COLOR_YUV2BGR_YUY2)
(bind-val ocv_COLOR_YUV2RGBA_YUY2 i32 119)
(bind-val ocv_COLOR_YUV2BGRA_YUY2 i32 120)
(bind-val ocv_COLOR_YUV2RGBA_YVYU i32 121)
(bind-val ocv_COLOR_YUV2BGRA_YVYU i32 122)
(bind-val ocv_COLOR_YUV2RGBA_YUYV i32 ocv_COLOR_YUV2RGBA_YUY2)
(bind-val ocv_COLOR_YUV2BGRA_YUYV i32 ocv_COLOR_YUV2BGRA_YUY2)
(bind-val ocv_COLOR_YUV2RGBA_YUNV i32 ocv_COLOR_YUV2RGBA_YUY2)
(bind-val ocv_COLOR_YUV2BGRA_YUNV i32 ocv_COLOR_YUV2BGRA_YUY2)
(bind-val ocv_COLOR_YUV2GRAY_UYVY i32 123)
(bind-val ocv_COLOR_YUV2GRAY_YUY2 i32 124)
(bind-val ocv_COLOR_YUV2GRAY_Y422 i32 ocv_COLOR_YUV2GRAY_UYVY)
(bind-val ocv_COLOR_YUV2GRAY_UYNV i32 ocv_COLOR_YUV2GRAY_UYVY)
(bind-val ocv_COLOR_YUV2GRAY_YVYU i32 ocv_COLOR_YUV2GRAY_YUY2)
(bind-val ocv_COLOR_YUV2GRAY_YUYV i32 ocv_COLOR_YUV2GRAY_YUY2)
(bind-val ocv_COLOR_YUV2GRAY_YUNV i32 ocv_COLOR_YUV2GRAY_YUY2)
(bind-val ocv_COLOR_RGBA2mRGBA i32 125)
(bind-val ocv_COLOR_mRGBA2RGBA i32 126)
(bind-val ocv_COLOR_RGB2YUV_I420 i32 127)
(bind-val ocv_COLOR_BGR2YUV_I420 i32 128)
(bind-val ocv_COLOR_RGB2YUV_IYUV i32 ocv_COLOR_RGB2YUV_I420)
(bind-val ocv_COLOR_BGR2YUV_IYUV i32 ocv_COLOR_BGR2YUV_I420)
(bind-val ocv_COLOR_RGBA2YUV_I420 i32 129)
(bind-val ocv_COLOR_BGRA2YUV_I420 i32 130)
(bind-val ocv_COLOR_RGBA2YUV_IYUV i32 ocv_COLOR_RGBA2YUV_I420)
(bind-val ocv_COLOR_BGRA2YUV_IYUV i32 ocv_COLOR_BGRA2YUV_I420)
(bind-val ocv_COLOR_RGB2YUV_YV12 i32 131)
(bind-val ocv_COLOR_BGR2YUV_YV12 i32 132)
(bind-val ocv_COLOR_RGBA2YUV_YV12 i32 133)
(bind-val ocv_COLOR_BGRA2YUV_YV12 i32 134)
(bind-val ocv_COLOR_BayerBG2BGR i32 46)
(bind-val ocv_COLOR_BayerGB2BGR i32 47)
(bind-val ocv_COLOR_BayerRG2BGR i32 48)
(bind-val ocv_COLOR_BayerGR2BGR i32 49)
(bind-val ocv_COLOR_BayerBG2RGB i32 ocv_COLOR_BayerRG2BGR)
(bind-val ocv_COLOR_BayerGB2RGB i32 ocv_COLOR_BayerGR2BGR)
(bind-val ocv_COLOR_BayerRG2RGB i32 ocv_COLOR_BayerBG2BGR)
(bind-val ocv_COLOR_BayerGR2RGB i32 ocv_COLOR_BayerGB2BGR)
(bind-val ocv_COLOR_BayerBG2GRAY i32 86)
(bind-val ocv_COLOR_BayerGB2GRAY i32 87)
(bind-val ocv_COLOR_BayerRG2GRAY i32 88)
(bind-val ocv_COLOR_BayerGR2GRAY i32 89)
(bind-val ocv_COLOR_BayerBG2BGR_VNG i32 62)
(bind-val ocv_COLOR_BayerGB2BGR_VNG i32 63)
(bind-val ocv_COLOR_BayerRG2BGR_VNG i32 64)
(bind-val ocv_COLOR_BayerGR2BGR_VNG i32 65)
(bind-val ocv_COLOR_BayerBG2RGB_VNG i32 ocv_COLOR_BayerRG2BGR_VNG)
(bind-val ocv_COLOR_BayerGB2RGB_VNG i32 ocv_COLOR_BayerGR2BGR_VNG)
(bind-val ocv_COLOR_BayerRG2RGB_VNG i32 ocv_COLOR_BayerBG2BGR_VNG)
(bind-val ocv_COLOR_BayerGR2RGB_VNG i32 ocv_COLOR_BayerGB2BGR_VNG)
(bind-val ocv_COLOR_BayerBG2BGR_EA i32 135)
(bind-val ocv_COLOR_BayerGB2BGR_EA i32 136)
(bind-val ocv_COLOR_BayerRG2BGR_EA i32 137)
(bind-val ocv_COLOR_BayerGR2BGR_EA i32 138)
(bind-val ocv_COLOR_BayerBG2RGB_EA i32 ocv_COLOR_BayerRG2BGR_EA)
(bind-val ocv_COLOR_BayerGB2RGB_EA i32 ocv_COLOR_BayerGR2BGR_EA)
(bind-val ocv_COLOR_BayerRG2RGB_EA i32 ocv_COLOR_BayerBG2BGR_EA)
(bind-val ocv_COLOR_BayerGR2RGB_EA i32 ocv_COLOR_BayerGB2BGR_EA)
(bind-val ocv_COLOR_COLORCVT_MAX i32 139)

(bind-val ocv_INTER_NEAREST i32 0)
(bind-val ocv_INTER_LINEAR i32 1)
(bind-val ocv_INTER_CUBIC i32 2)
(bind-val ocv_INTER_AREA i32 3)
(bind-val ocv_INTER_LANCZOS4 i32 4)
(bind-val ocv_INTER_LINEAR_EXACT i32 5)
(bind-val ocv_INTER_MAX i32 7)
(bind-val ocv_WARP_FILL_OUTLIERS i32 8)
(bind-val ocv_WARP_INVERSE_MAP i32 16)

;;
;; ocv_cvtColor
;;
(bind-lib cvlib CvtColor [void,ocv_MatT,ocv_MatT,i32]*)

(bind-func ocv_cvtColor
  "Convert color
  "
  (lambda (img:ocv_Mat* code:i32)
    (let ((out (Mat_New)))
      (zone_cleanup (Mat_Close out))
      (CvtColor (tref img 0) out code)
      (ocv_Mat out))))

;;
;; ocv_rectangle
;;
(bind-lib cvlib Rectangle [void,ocv_MatT,ocv_RectT,ocv_ScalarT,i32]*)

(bind-func ocv_rectangle
  (lambda (mat:ocv_Mat* rect color thinkness)
    (Rectangle (tref mat 0) rect color thinkness)))

;;
;; ocv_puttext
;;
(bind-lib cvlib PutText [void,ocv_MatT,i8*,ocv_PointT,i32,double,ocv_ScalarT,i32])

(bind-func ocv_puttext
  (lambda (mat:ocv_Mat* text location fontFace fontScale color thinkness)
    (PutText (tref mat 0) text location fontFace fontScale color thinkness)))


;;
;; ocv_resize
;;
(bind-lib cvlib Resize [void,ocv_MatT,ocv_MatT,ocv_Size,double,double,i32]*)

(bind-func ocv_resize
  "Resize image
  "
  (lambda (img:ocv_Mat* size fx fy interp)
    (let ((out (Mat_New)))
      (Resize (tref img 0) out size fx fy interp)
      (ocv_Mat out))))

(bind-func ocv_resize
  "Resize image
  "
  (lambda (img:ocv_Mat* size)
    (ocv_resize:[ocv_Mat*,ocv_Mat*,ocv_Size,double,double,i32]* img size 0.0 0.0 ocv_INTER_LINEAR)))

(bind-func ocv_resize1 (lambda (img:ocv_Mat* size fx fy interp) (ocv_resize img size fx fy interp)))
(bind-func ocv_resize2 (lambda (img:ocv_Mat* size) (ocv_resize img size)))
(define ocv_resize
  (lambda (img size args)
    (if (null? args)
        (ocv_resize2 img size)
        (apply ocv_resize1 img size args))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; IMG processing
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-lib cvlib Blur [void,ocv_MatT,ocv_MatT,ocv_Size]*)

(bind-func ocv_blur
  "Blur image
  "
  (lambda (img:ocv_Mat* size:ocv_Size)
    (let ((out (Mat_New)))
      (Blur (tref img 0) out size)
      (ocv_Mat out))))

(bind-func ocv_blur
  "Blur image
  "
  (lambda (img:ocv_Mat* out:ocv_Mat* size:ocv_Size)
    (Blur (tref img 0) (tref out 0) size)
    out))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OpenCV HighGUI module
;;

(bind-val ocv_WINDOW_NORMAL i32 #x00000000)
(bind-val ocv_WINDOW_AUTOSIZE i32 #x00000001)
(bind-val ocv_WINDOW_OPENGL i32 #x00001000)
(bind-val ocv_WINDOW_FULLSCREEN i32 1)
(bind-val ocv_WINDOW_FREERATIO i32 #x00000100)
(bind-val ocv_WINDOW_KEEPRATIO i32 #x00000000)

(bind-val ocv_WND_PROP_FULLSCREEN i32 0)
(bind-val ocv_WND_PROP_AUTOSIZE i32 1)
(bind-val ocv_WND_PROP_ASPECT_RATIO i32 2)
(bind-val ocv_WND_PROP_OPENGL i32 3)
(bind-val ocv_WND_PROP_VISIBLE i32 4)

(bind-lib cvlib Window_IMShow [void,i8*,ocv_MatT]*)
(bind-lib cvlib Window_New [void,i8*,i32]*)
(bind-lib cvlib Window_Close [void,i8*]*)
(bind-lib cvlib Window_WaitKey [i32,i32]*)
(bind-lib cvlib Window_Resize [void,i8*,i32,i32]*)
(bind-lib cvlib Window_Move [void,i8*,i32,i32]*)

;;
;; ocv_namedWindow
;;

(bind-func ocv_namedWindow
  "Open a window
  @param name - name of window
  @return void"
  (lambda (name:String*)
    (Window_New (cstring name) ocv_WINDOW_NORMAL)))

(bind-func ocv_namedWindow
  "Open a window
  @param name - name of window
  @param flags - window flags
  @return void"
  (lambda (name:String* flags:i32)
    (Window_New (cstring name) flags)))

;; override scheme wrapper
(bind-func ocv_namedWindow1 (lambda (name:i8*) (ocv_namedWindow (Str name))))
(bind-func ocv_namedWindow2 (lambda (name:i8* flags:i32) (ocv_namedWindow (Str name) flags)))
(define ocv_namedWindow
  (lambda (name . args)
    (if (null? args)
        (ocv_namedWindow1 name)
        (ocv_namedWindow2 name (car args)))))

;;
;; ocv release window
;;

(bind-func ocv_close
  "Closes a window

  @param name - window name
  @return void"
  (lambda (name:String*)
    (Window_Close (cstring name))
    void))

;; override scheme wrapper
; (bind-func ocv_destroyWindow1 (lambda (name:i8*) (ocv_destroyWindow (Str name))))
; (define ocv_destroyWindow (lambda (name) (ocv_destroyWindow1 name)))
; (define ocv_closeWindow ocv_destroyWindow)
; (define ocv_closeNamedWindow ocv_destroyWindow)


;;
;; ocv_imshow
;;

(bind-func ocv_imshow
  "Show image in window named 'name'
  @param name - name of window
  @param img - image Mat
  @return void"
  (lambda (name:String* img:ocv_Mat*)
    (Window_IMShow (cstring name) (tref img 0))
    void))

;; for scheme
(bind-func ocv_imshow1 (lambda (name:i8* img:ocv_Mat*) (ocv_imshow (Str name) img)))
(define ocv_imshow (lambda (name img) (ocv_imshow1 name img)))

;;
;; ocv_waitKey
;;

(bind-func ocv_waitKey
    "Delay in ms - if '0' then wait indefinitely for a key press"
    "otherwise if greater than 0 wait at most delay milliseconds"

    "@param delay - time in milliseconds to wait for keypress"
    "@return an ascii key value or -1 of delay was reached"
  (lambda (delay:i32)
    (Window_WaitKey delay)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OpenCV ImgCodecs
;;
;; i.e. image fileIO
;;

;;
;; Image read flags
;;
(bind-val ocv_IMREAD_UNCHANGED i32 -1)
(bind-val ocv_IMREAD_GRAYSCALE i32 0)
(bind-val ocv_IMREAD_COLOR i32 1)
(bind-val ocv_IMREAD_ANYDEPTH i32 2)
(bind-val ocv_IMREAD_ANYCOLOR i32 4)
(bind-val ocv_IMREAD_LOAD_GDAL i32 8)
(bind-val ocv_IMREAD_REDUCED_GRAYSCALE_2 i32 16)
(bind-val ocv_IMREAD_REDUCED_COLOR_2 i32 17)
(bind-val ocv_IMREAD_REDUCED_GRAYSCALE_4 i32 32)
(bind-val ocv_IMREAD_REDUCED_COLOR_4 i32 33)
(bind-val ocv_IMREAD_REDUCED_GRAYSCALE_8 i32 64)
(bind-val ocv_IMREAD_REDUCED_COLOR_8 i32 65)

;;
;; Image Write Flags
;;
(bind-val ocv_IMWRITE_JPEG_QUALITY i32 1)
(bind-val ocv_IMWRITE_JPEG_PROGRESSIVE i32 2)
(bind-val ocv_IMWRITE_JPEG_OPTIMIZE i32 3)
(bind-val ocv_IMWRITE_JPEG_RST_INTERVAL i32 4)
(bind-val ocv_IMWRITE_JPEG_LUMA_QUALITY i32 5)
(bind-val ocv_IMWRITE_JPEG_CHROMA_QUALITY i32 6)
(bind-val ocv_IMWRITE_PNG_COMPRESSION i32 16)
(bind-val ocv_IMWRITE_PNG_STRATEGY i32 17)
(bind-val ocv_IMWRITE_PNG_BILEVEL i32 18)
(bind-val ocv_IMWRITE_PXM_BINARY i32 32)
(bind-val ocv_IMWRITE_WEBP_QUALITY i32 64)
(bind-val ocv_IMWRITE_TIFF_RESUNIT i32 256)
(bind-val ocv_IMWRITE_TIFF_XDPI i32 257)
(bind-val ocv_IMWRITE_TIFF_YDPI i32 258)

;;
;; write PNG flags
;;
(bind-val ocv_IMWRITE_PNG_STRATEGY_DEFAULT i32 0)
(bind-val ocv_IMWRITE_PNG_STRATEGY_FILTERED i32 1)
(bind-val ocv_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY i32 2)
(bind-val ocv_IMWRITE_PNG_STRATEGY_RLE i32 3)
(bind-val ocv_IMWRITE_PNG_STRATEGY_FIXED i32 4)

;;
;; ocv_imread
;;
(bind-lib cvlib Image_IMRead [ocv_MatT,i8*,i32]*)

(bind-func ocv_imread
  (lambda (filename:String* flags)
    (let ((mat (Image_IMRead (cstring filename) flags)))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat mat))))

(bind-func ocv_imread
  (lambda (filename:String*)
    (ocv_imread:[ocv_Mat*,String*,i32]* filename ocv_IMREAD_COLOR)))

;; override scheme wrapper
(bind-func ocv_imread1 (lambda (name:i8*) (ocv_imread (Str name))))
(bind-func ocv_imread2 (lambda (name:i8* flags:i32) (ocv_imread (Str name) flags)))
(define ocv_imread
  (lambda (name . args)
    (if (null? args)
        (ocv_imread1 name)
        (ocv_imread2 name (car args)))))

;;
;; ocv_imwrite
;;
(bind-lib cvlib Image_IMWrite [i1,i8*,ocv_MatT]*)
(bind-lib cvlib Image_IMWrite_WithParams [i1,i8*,ocv_MatT,ocv_IntVector]*)

(bind-func ocv_imwrite
  (lambda (filename:String* img:ocv_Mat*)
    (Image_IMWrite (cstring filename) (tref img 0))))

(bind-func ocv_imwrite
  (lambda (filename:String* img:ocv_Mat* params:ocv_IntVector)
    (Image_IMWrite_WithParams (cstring filename) (tref img 0) params)))

;; override scheme wrapper
(bind-func ocv_imwrite1 (lambda (name:i8* img) (ocv_imwrite (Str name) img)))
(bind-func ocv_imwrite2 (lambda (name:i8* img flags) (ocv_imwrite (Str name) img (pref flags 0))))

(define ocv_imwrite
  (lambda (name img . args)
    (if (null? args)
        (ocv_imwrite1 name img)
        (ocv_imwrite2 name img (car args)))))

;;
;; ocv_imdecode
;;
(bind-lib cvlib Image_IMDecode [ocv_MatT,ocv_ByteArray,i32])

(bind-func ocv_imdecode
  (lambda (buf:ocv_ByteArray flags)
    (let ((mat (Image_IMDecode buf flags)))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat mat))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; OpenCV VideoIO module
;;

;;
;; ocv_VideoCaptureProperties
;;
(bind-val ocv_CAP_PROP_POS_MSEC i32 0)
(bind-val ocv_CAP_PROP_POS_FRAMES i32 1)
(bind-val ocv_CAP_PROP_POS_AVI_RATIO i32 2)
(bind-val ocv_CAP_PROP_FRAME_WIDTH i32 3)
(bind-val ocv_CAP_PROP_FRAME_HEIGHT i32 4)
(bind-val ocv_CAP_PROP_FPS i32 5)
(bind-val ocv_CAP_PROP_FOURCC i32 6)
(bind-val ocv_CAP_PROP_FRAME_COUNT i32 7)
(bind-val ocv_CAP_PROP_FORMAT i32 8)
(bind-val ocv_CAP_PROP_MODE i32 9)
(bind-val ocv_CAP_PROP_BRIGHTNESS i32 10)
(bind-val ocv_CAP_PROP_CONTRAST i32 11)
(bind-val ocv_CAP_PROP_SATURATION i32 12)
(bind-val ocv_CAP_PROP_HUE i32 13)
(bind-val ocv_CAP_PROP_GAIN i32 14)
(bind-val ocv_CAP_PROP_EXPOSURE i32 15)
(bind-val ocv_CAP_PROP_CONVERT_RGB i32 16)
(bind-val ocv_CAP_PROP_WHITE_BALANCE_BLUE_U i32 17)
(bind-val ocv_CAP_PROP_RECTIFICATION i32 18)
(bind-val ocv_CAP_PROP_MONOCHROME i32 19)
(bind-val ocv_CAP_PROP_SHARPNESS i32 20)
(bind-val ocv_CAP_PROP_AUTO_EXPOSURE i32 21)
(bind-val ocv_CAP_PROP_GAMMA i32 22)
(bind-val ocv_CAP_PROP_TEMPERATURE i32 23)
(bind-val ocv_CAP_PROP_TRIGGER i32 24)
(bind-val ocv_CAP_PROP_TRIGGER_DELAY i32 25)
(bind-val ocv_CAP_PROP_WHITE_BALANCE_RED_V i32 26)
(bind-val ocv_CAP_PROP_ZOOM i32 27)
(bind-val ocv_CAP_PROP_FOCUS i32 28)
(bind-val ocv_CAP_PROP_GUID i32 29)
(bind-val ocv_CAP_PROP_ISO_SPEED i32 30)
(bind-val ocv_CAP_PROP_BACKLIGHT i32 32)
(bind-val ocv_CAP_PROP_PAN i32 33)
(bind-val ocv_CAP_PROP_TILT i32 34)
(bind-val ocv_CAP_PROP_ROLL i32 35)
(bind-val ocv_CAP_PROP_IRIS i32 36)
(bind-val ocv_CAP_PROP_SETTINGS i32 37)
(bind-val ocv_CAP_PROP_BUFFERSIZE i32 38)
(bind-val ocv_CAP_PROP_AUTOFOCUS i32 39)
(bind-val ocv_CAP_PROP_SAR_NUM i32 40)
(bind-val ocv_CAP_PROP_SAR_DEN i32 41)
(bind-val ocv_CAP_PROP_BACKEND i32 42)
(bind-val ocv_CAP_PROP_CHANNEL i32 43)
(bind-val ocv_CAP_PROP_AUTO_WB i32 44)
(bind-val ocv_CAP_PROP_WB_TEMPERATURE i32 45)

;;
;; ocv_VideoWriter
;;
(bind-alias ocv_VideoWriterA i8*)
(bind-lib cvlib VideoWriter_New [ocv_VideoWriterA]*)
(bind-lib cvlib VideoWriter_Open [void,ocv_VideoWriterA,i8*,i8*,double,i32,i32,i1]*)

(bind-type ocv_VideoWriter <ocv_VideoWriterA,i32> (constructor? . #f) (printer? . #f))

(bind-func ocv_VideoWriter:[ocv_VideoWriter*,ocv_VideoWriterA]*
  (lambda (in)
    (let ((obj (alloc)))
      (tfill! obj in OCV_XTM_VideoWriter_T)
      obj)))

(bind-func ocv_VideoWriter
  "Return an OpenCV VideoWriter object

  @param name - filename to write video too
  @param fourcc - the video fourcc (e.g. 'MJPG' or 'MP4V')
  @param fps - fps of video output
  @param width
  @param height
  @param isColour - colour output?
  @return opaque video writer structure - you can check ocv_IsOpened to see if the writer was opened succesfully"
  (lambda (name:String* fourcc:String* fps:double width:i32 height:i32 isColour:i1)
    (let ((vw (VideoWriter_New)))
      (VideoWriter_Open vw (cstring name) (cstring fourcc) fps width height isColour)
      (ocv_VideoWriter:[ocv_VideoWriter*,ocv_VideoWriterA]* vw))))

;; override scheme wrapper
(bind-func ocv_VideoWriter1
  (lambda (name:i8* fourcc:i8* fps:double width:i32 height:i32 isColour:i1)
    (ocv_VideoWriter (Str name) (Str fourcc) fps width height isColour)))

(define ocv_VideoWriter
  (lambda (name fourcc fps width height isColour)
    (ocv_VideoWriter1 name fourcc fps width height isColour)))

;;
;; ocv_VideoWriter_IsOpened
;;
(bind-lib cvlib VideoWriter_IsOpened [i32,ocv_VideoWriterA]*)

(bind-func ocv_isopen
  (lambda (vw:ocv_VideoWriter*)
    (VideoWriter_IsOpened (tref vw 0))))

;;
;; ocv_VideoWriter_Write
;;
(bind-lib cvlib VideoWriter_Write [void,ocv_VideoWriterA,ocv_MatT]*)

(bind-func ocv_write
  "add image to video writer
  @param vw - video writer instance to write image too
  @param img - image to write
  @return void"
  (lambda (vw:ocv_VideoWriter* img:ocv_Mat*)
    (VideoWriter_Write (tref vw 0) (tref img 0))))

;;
;; ocv_VideoWriter_Close
;;
(bind-lib cvlib VideoWriter_Close [void,ocv_VideoWriterA]*)

(bind-func ocv_close
  "close the open video writer, which should save file to disk

  @param vw - video writer to Closes
  @return void"
  (lambda (vw:ocv_VideoWriter*)
    (VideoWriter_Close (tref vw 0))))


;;
;; ocv_VideoCapture
;;
(bind-alias ocv_VideoCaptureA i8*)
(bind-lib cvlib VideoCapture_New [ocv_VideoCaptureA])
(bind-lib cvlib VideoCapture_Open [void,ocv_VideoCaptureA,i8*])
(bind-lib cvlib VideoCapture_OpenDevice [void,ocv_VideoCaptureA,i32])

(bind-type ocv_VideoCapture <ocv_VideoCaptureA,i32> (constructor? . #f) (printer? . #f))

(bind-func ocv_VideoCapture:[ocv_VideoCapture*,ocv_VideoCaptureA]*
  (lambda (in)
    (let ((obj (alloc)))
      (tfill! obj in OCV_XTM_VideoCapture_T)
      obj)))

(bind-func ocv_VideoCapture
  "Return an OpenCV 4 VideoCapture Object.
  Object is automatically destroyed upon exiting memory zone!

  @param uri - the video file to read from
  @returns Opaque VideoCapture"
  (lambda (uri:String*)
    (let ((vc (VideoCapture_New)))
      (VideoCapture_Open vc (cstring uri))
      (ocv_VideoCapture:[ocv_VideoCapture*,i8*]* vc))))

(bind-func ocv_VideoCapture
  "Return an OpenCV VideoCapture Object.
  Object is automatically destroyed upon exiting memory zone!

  @param id - a video camera to read from, indexed from 0
  @returns Opaque VideoCapture"
  (lambda (id)
    (let ((vc (VideoCapture_New)))
      (VideoCapture_OpenDevice vc id)
      (ocv_VideoCapture:[ocv_VideoCapture*,i8*]* vc))))

;; override scheme wrapper
(bind-func ocv_VideoCapture1 (lambda (uri:String*) (ocv_VideoCapture uri)))
(bind-func ocv_VideoCapture2 (lambda (id:i32) (ocv_VideoCapture id)))
(define ocv_VideoCapture
  (lambda (arg)
    (if (string? arg)
        (ocv_VideoCapture1 arg)
        (ocv_VideoCapture2 arg))))

;;
;; ocv_VideoCapture_Read
;;
(bind-lib cvlib VideoCapture_Read [i32,ocv_VideoCaptureA,ocv_MatT])

(bind-func ocv_read
  "Returns an OpenCV Mat Object
  note that Mat maybe empty if no image available
  check with call to ocv_MatEmpty

  @param vc - an OpenCV video capture object
  @returns an image - maybe empty (destroyed on zone exit)"
  (lambda (vc:ocv_VideoCapture*)
    (let ((mat (Mat_New))
          (res (VideoCapture_Read (tref vc 0) mat)))
      (zone_cleanup (Mat_Close mat))
      (ocv_Mat mat))))

(bind-func ocv_read
  "Returns an OpenCV Mat Object
  note that Mat maybe empty if no image available
  check with call to ocv_MatEmpty

  @param vc - an OpenCV video capture object
  @returns mat - return 'modified' input mat"
  (lambda (vc:ocv_VideoCapture* mat:ocv_Mat*)
    (VideoCapture_Read (tref vc 0) (tref mat 0))
    mat))

;; override scheme wrapper
(bind-func ocv_read1 (lambda (vc:ocv_VideoCapture*) (ocv_read vc)))
(bind-func ocv_read2 (lambda  (vc:ocv_VideoCapture* mat:ocv_Mat*) (ocv_read vc mat)))
(define ocv_read
  (lambda (vc . args)
    (if (null? args)
        (ocv_read1 vc)
        (ocv_read2 vc (car args)))))


;;
;; ocv_VideoCapture_Close
;;
(bind-lib cvlib VideoCapture_Close [void,ocv_VideoCaptureA])

(bind-func ocv_close
  "Close video capture

  @param vc - video capture object to close
  @return void"
  (lambda (vc:ocv_VideoCapture*)
    (VideoCapture_Close (tref vc 0))))


;;
;; ocv_VideoCapture_Set
;;
(bind-lib cvlib VideoCapture_Set [void,ocv_VideoCaptureA,i32,double]*)

(bind-func ocv_set
  (lambda (vc:ocv_VideoCapture* prop param)
    (VideoCapture_Set (tref vc 0) prop param)))

;;
;; ocv_VideoCapture_Get
;;
(bind-lib cvlib VideoCapture_Get [double,ocv_VideoCaptureA,i32]*)

(bind-func ocv_get
  (lambda (vc:ocv_VideoCapture* prop)
    (VideoCapture_Get (tref vc 0) prop)))

;;
;; ocv_VideoCapture_Grab
;;
(bind-lib cvlib VideoCapture_Grab [void,ocv_VideoCaptureA,i32]*)

(bind-func ocv_grab
  (lambda (vc:ocv_VideoCapture* skip)
    (VideoCapture_Grab (tref vc 0) skip)))

;;
;; ocv_VideoCapture_IsOpened
;;
(bind-lib cvlib VideoCapture_IsOpened [i32,ocv_VideoCaptureA]*)

(bind-func ocv_isopen
  (lambda (vc:ocv_VideoCapture*)
    (VideoCapture_IsOpened (tref vc 0))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; extra 'dynamic' scheme wrappers
;;

;;
;; ocv_close
;;

(bind-func ocv_scheme_release_window
  (lambda (obj:i8*)
    (ocv_close (Str obj))))

(bind-func ocv_scheme_release_object
  (lambda (obj:<i8*,i32>*)
    (let ((type (tref obj 1)))
      (cond ((= type OCV_XTM_VideoCapture_T) (ocv_close (convert obj ocv_VideoCapture*)))
            ((= type OCV_XTM_VideoWriter_T) (ocv_close (convert obj ocv_VideoWriter*)))
            (else (println "Error - bad ocv type:" type))))))

(define ocv_close
  (lambda (obj)
    (if (string? obj)
        (ocv_scheme_release_window obj)
        (ocv_scheme_release_object obj))))

;;
;; ocv_isopen
;;
(bind-func ocv_scheme_isopen_object
  (lambda (obj:<i8*,i32>*)
    (let ((type (tref obj 1)))
      (cond ((= type OCV_XTM_VideoCapture_T) (ocv_isopen (convert obj ocv_VideoCapture*)))
            ((= type OCV_XTM_VideoWriter_T) (ocv_isopen (convert obj ocv_VideoWriter*)))
            (else (println "Error - bad ocv type:" type) 0)))))

(define ocv_isopen
  (lambda (obj)
    (ocv_scheme_isopen_object obj)))
