;;; svm.xtm -- libSVM bindings for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libsvm

;;; Commentary:

;;

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/svm.xtm" 'quiet))
(sys:load-preload-check 'svm)
(define *xtmlib-svm-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/core/std.xtm"))
(impc:aot:insert-forms (sys:load "libs/core/std.xtm" 'quiet))

(impc:aot:insert-header "xtmsvm")

(bind-dylib libsvm
  (cond ((string=? (sys:platform) "OSX") "libsvm.dylib")
        ((string=? (sys:platform) "Linux") "libsvm.so")
        ((string=? (sys:platform) "Windows") "libsvm.dll")))

(bind-lib-val libsvm libsvm_version i32)

;; struct svm_node
;; {
;;  int index;
;;  double value;
;; };

(bind-type svm_node <i32,double>)

;; struct svm_problem
;; {
;;  int l;
;;  double *y;
;;  struct svm_node **x;
;; };

(bind-type svm_problem <i32,double*,svm_node**>)

;; svm_type
(bind-val C_SVC enum 0)
(bind-val NU_SVC enum 1)
(bind-val ONE_CLASS enum 2)
(bind-val EPSILON_SVR enum 3)
(bind-val NU_SVR enum 4)

;; kernel_type
(bind-val LINEAR enum 0)
(bind-val POLY enum 1)
(bind-val RBF enum 2)
(bind-val SIGMOID enum 3)
(bind-val PRECOMPUTED enum 4)

;; struct svm_parameter
;; {
;;  int svm_type;
;;  int kernel_type;
;;  int degree;	/* for poly */
;;  double gamma;	/* for poly/rbf/sigmoid */
;;  double coef0;	/* for poly/sigmoid */

;;  /* these are for training only */
;;  double cache_size; /* in MB */
;;  double eps;	/* stopping criteria */
;;  double C;	/* for C_SVC, EPSILON_SVR and NU_SVR */
;;  int nr_weight;		/* for C_SVC */
;;  int *weight_label;	/* for C_SVC */
;;  double* weight;		/* for C_SVC */
;;  double nu;	/* for NU_SVC, ONE_CLASS, and NU_SVR */
;;  double p;	/* for EPSILON_SVR */
;;  int shrinking;	/* use the shrinking heuristics */
;;  int probability; /* do probability estimates */
;; };

(bind-type svm_parameter <i32,i32,i32,double,double,double,double,double,double,i32,i32*,double*,double,double,i32,i32>)

;; struct svm_model
;; {
;;  struct svm_parameter param;	/* parameter */
;;  int nr_class;		/* number of classes, = 2 in regression/one class svm */
;;  int l;			/* total #SV */
;;  struct svm_node **SV;		/* SVs (SV[l]) */
;;  double **sv_coef;	/* coefficients for SVs in decision functions (sv_coef[k-1][l]) */
;;  double *rho;		/* constants in decision functions (rho[k*(k-1)/2]) */
;;  double *probA;		/* pariwise probability information */
;;  double *probB;
;;  int *sv_indices;        /* sv_indices[0,...,nSV-1] are values in [1,...,num_traning_data] to indicate SVs in the training set */

;;  /* for classification only */

;;  int *label;		/* label of each class (label[k]) */
;;  int *nSV;		/* number of SVs for each class (nSV[k]) */
;;        /* nSV[0] + nSV[1] + ... + nSV[k-1] = l */
;;  /* XXX */
;;  int free_sv;		/* 1 if svm_model is created by svm_load_model*/
;;        /* 0 if svm_model is created by svm_train */
;; };

(bind-type svm_model <svm_parameter,i32,i32,svm_node**,double**,double*,double*,double*,i32*,i32*,i32*,i32>)

(bind-lib libsvm svm_train [svm_model*,svm_problem*,svm_parameter*]*)
(bind-lib libsvm svm_cross_validation [void,svm_problem*,svm_parameter*,i32,double*]*)

(bind-lib libsvm svm_save_model [i32,i8*,svm_model*]*)
(bind-lib libsvm svm_load_model [svm_model*,i8*]*)

(bind-lib libsvm svm_get_svm_type [i32,svm_model*]*)
(bind-lib libsvm svm_get_nr_class [i32,svm_model*]*)
(bind-lib libsvm svm_get_labels [void,svm_model*,i32*]*)
(bind-lib libsvm svm_get_sv_indices [void,svm_model*,i32*]*)
(bind-lib libsvm svm_get_nr_sv [i32,svm_model*]*)
(bind-lib libsvm svm_get_svr_probability [double,svm_model*]*)

(bind-lib libsvm svm_predict_values [double,svm_model*,svm_node*,double*]*)
(bind-lib libsvm svm_predict [double,svm_model*,svm_node*]*)
(bind-lib libsvm svm_predict_probability [double,svm_model*,svm_node*,double*]*)

(bind-lib libsvm svm_free_model_content [void,svm_model*]*)
(bind-lib libsvm svm_free_and_destroy_model [void,svm_model**]*)
(bind-lib libsvm svm_destroy_param [void,svm_parameter*]*)

(bind-lib libsvm svm_check_parameter [i8*,svm_problem*,svm_parameter*]*)
(bind-lib libsvm svm_check_probability_model [i32,svm_model*]*)

(bind-lib libsvm svm_set_print_string_function [void,i8*]*)

(bind-func svm_read_line
  (lambda (buf fp max_len)
    (let ((res (fgets buf max_len fp)))
      (cond ((null? res)
             (if (<> (feof fp) 0)
                 (println "Warning: error reading string"))
             #f)
            ((> (strnlen res max_len) max_len)
             (println "Error: encountered line length longer than" max_len)
             #f)
            (else #t)))))

(bind-func svm_num_elements
  "unsafe - munges the input buffer"
  (lambda (buf)
    (let ((count 0))
      (set! p (strtok buf " \t")) ;; label
      (while (not (or (null? p) (= (pref p 0) 10)))
        (set! count (+ count 1))
        (strtok null " \t"))
      count)))


(bind-func svm_read_problem 1100000
  (let ((max_line_length    1000000)
        (line (zalloc max_line_length))))
  (lambda (filename)
    (let ((prob (svm_problem 0 null null))
          (max_index 0)
          (inst_max_index 0)
          (elements 0)
          (i 0)
          (j 0)
          (fp (fopen filename "r"))
          (endptr:i8* null)
          (idx:i8* null)
          (val:i8* null)
          (label:i8* null))
      (if (null? fp)
          (begin
            (printf "Error: cannot open input file %s\n" filename)
            null)
          (while (fgets line max_line_len fp)
            (while)
            )))))

  while(readline(fp)!=NULL)
  {
    char *p = strtok(line," \t"); // label

    // features
    while(1)
    {
      p = strtok(NULL," \t");
      if(p == NULL || *p == '\n') // check '\n' as ' ' may be after the last feature
        break;
      ++elements;
    }
    ++elements;
    ++prob.l;
  }
  rewind(fp);

  prob.y = Malloc(double,prob.l);
  prob.x = Malloc(struct svm_node *,prob.l);
  x_space = Malloc(struct svm_node,elements);

  max_index = 0;
  j=0;
  for(i=0;i<prob.l;i++)
  {
    inst_max_index = -1; // strtol gives 0 if wrong format, and precomputed kernel has <index> start from 0
    readline(fp);
    prob.x[i] = &x_space[j];
    label = strtok(line," \t\n");
    if(label == NULL) // empty line
      exit_input_error(i+1);

    prob.y[i] = strtod(label,&endptr);
    if(endptr == label || *endptr != '\0')
      exit_input_error(i+1);

    while(1)
    {
      idx = strtok(NULL,":");
      val = strtok(NULL," \t");

      if(val == NULL)
        break;

      errno = 0;
      x_space[j].index = (int) strtol(idx,&endptr,10);
      if(endptr == idx || errno != 0 || *endptr != '\0' || x_space[j].index <= inst_max_index)
        exit_input_error(i+1);
      else
        inst_max_index = x_space[j].index;

      errno = 0;
      x_space[j].value = strtod(val,&endptr);
      if(endptr == val || errno != 0 || (*endptr != '\0' && !isspace(*endptr)))
        exit_input_error(i+1);

      ++j;
    }

    if(inst_max_index > max_index)
      max_index = inst_max_index;
    x_space[j++].index = -1;
  }

  if(param.gamma == 0 && max_index > 0)
    param.gamma = 1.0/max_index;

  if(param.kernel_type == PRECOMPUTED)
    for(i=0;i<prob.l;i++)
    {
      if (prob.x[i][0].index != 0)
      {
        fprintf(stderr,"Wrong input format: first column must be 0:sample_serial_number\n");
        exit(1);
      }
      if ((int)prob.x[i][0].value <= 0 || (int)prob.x[i][0].value > max_index)
      {
        fprintf(stderr,"Wrong input format: sample_serial_number out of range\n");
        exit(1);
      }
    }

  fclose(fp);
}

(call-as-xtlang
 (let ((line (strtok "1 3:236 5:53.3" " \t\n"))
       (idx (strtok null ":"))
       (val (strtok null " \t")))
   (println "idx:" (convert idx i64) "val:" (String val))))

(bind-func svm_parse_line
  (lambda (line )
    (let ((label (strtok line " \t\n")))
      (if (null? label)
          (begin (println "error on line"))))))

    label = strtok(line," \t\n");
    if(label == NULL) // empty line
      exit_input_error(i+1);

    prob.y[i] = strtod(label,&endptr);
    if(endptr == label || *endptr != '\0')
      exit_input_error(i+1);

    while(1)
    {
      idx = strtok(NULL,":");
      val = strtok(NULL," \t");

      if(val == NULL)
        break;

      errno = 0;
      x_space[j].index = (int) strtol(idx,&endptr,10);
      if(endptr == idx || errno != 0 || *endptr != '\0' || x_space[j].index <= inst_max_index)
        exit_input_error(i+1);
      else
        inst_max_index = x_space[j].index;

      errno = 0;
      x_space[j].value = strtod(val,&endptr);
      if(endptr == val || errno != 0 || (*endptr != '\0' && !isspace(*endptr)))
        exit_input_error(i+1);

      ++j;
    }


    label = strtok(line,);



(impc:aot:insert-footer "xtmsvm")
(define *xtmlib-svm-loaded* #t)
