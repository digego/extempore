;;; libclang.xtm -- libclang-c bindings

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libclang

;;; Commentary:

;; Based on LLVM 3.8.1

;;; Code:



(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/libclang.xtm" 'quiet))
(sys:load-preload-check 'libclang)
(define *xtmlib-libclang-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmlibclang")

(bind-dylib libclang
  (cond ((string=? (sys:platform) "OSX") "/usr/local/opt/llvm/lib/libclang.dylib")
        ((string=? (sys:platform) "Linux") "libclang.so")
        ((string=? (sys:platform) "Windows") "libclang.dll")))
;; xtlang bindings automatically generated from /usr/local/opt/llvm/include/clang-c/CXErrorCode.h
;; by extempore-debovinator.el on 2017-09-28

(bind-alias CXErrorCode enum)
(bind-val CXError_Success enum 0)
(bind-val CXError_Failure enum 1)
(bind-val CXError_Crashed enum 2)
(bind-val CXError_InvalidArguments enum 3)
(bind-val CXError_ASTReadError enum 4)

;; xtlang bindings automatically generated from /usr/local/opt/llvm/include/clang-c/CXString.h
;; by extempore-debovinator.el on 2017-09-28

(bind-type CXString <i8*,i32>
  "@member data - index 0
@member private_flags - index 1")
(bind-type CXStringSet <CXString*,i32>
  "@member Strings - index 0
@member Count - index 1")
(bind-lib libclang clang_getCString [i8*,CXString]*
  "@param string - index 0")
(bind-lib libclang clang_disposeString [void,CXString]*
  "@param string - index 0")
(bind-lib libclang clang_disposeStringSet [void,CXStringSet*]*
  "@param set - index 0")

;; xtlang bindings automatically generated from /usr/local/opt/llvm/include/clang-c/Index.h
;; by extempore-debovinator.el on 2017-09-28

(bind-alias CXIndex i8)
(bind-alias CXClientData i8)
(bind-type CXUnsavedFile <i8*,i8*,i32>
  "@member Filename - index 0
@member Contents - index 1
@member Length - index 2")
(bind-alias CXAvailabilityKind enum)
(bind-val CXAvailability_Available enum 0)
(bind-val CXAvailability_Deprecated enum 1)
(bind-val CXAvailability_NotAvailable enum 2)
(bind-val CXAvailability_NotAccessible enum 3)
(bind-type CXVersion <i32,i32,i32>
  "@member Major - index 0
@member Minor - index 1
@member Subminor - index 2")
(bind-alias CXCursor_ExceptionSpecificationKind enum)
(bind-val CXCursor_ExceptionSpecificationKind_None enum 0)
(bind-val CXCursor_ExceptionSpecificationKind_DynamicNone enum 1)
(bind-val CXCursor_ExceptionSpecificationKind_Dynamic enum 2)
(bind-val CXCursor_ExceptionSpecificationKind_MSAny enum 3)
(bind-val CXCursor_ExceptionSpecificationKind_BasicNoexcept enum 4)
(bind-val CXCursor_ExceptionSpecificationKind_ComputedNoexcept enum 5)
(bind-val CXCursor_ExceptionSpecificationKind_Unevaluated enum 6)
(bind-val CXCursor_ExceptionSpecificationKind_Uninstantiated enum 7)
(bind-val CXCursor_ExceptionSpecificationKind_Unparsed enum 8)
(bind-lib libclang clang_createIndex [CXIndex,i32,i32]*
  "@param excludeDeclarationsFromPCH - index 0
@param displayDiagnostics - index 1")
(bind-lib libclang clang_disposeIndex [void,CXIndex]*
  "@param index - index 0")
(bind-alias CXGlobalOptFlags enum)
(bind-val CXGlobalOpt_None CXGlobalOptFlags #x0)
(bind-val CXGlobalOpt_ThreadBackgroundPriorityForIndexing CXGlobalOptFlags #x1)
(bind-val CXGlobalOpt_ThreadBackgroundPriorityForEditing CXGlobalOptFlags #x2)
(bind-val CXGlobalOpt_ThreadBackgroundPriorityForAll CXGlobalOptFlags
  (bitwise-or CXGlobalOpt_ThreadBackgroundPriorityForIndexing CXGlobalOpt_ThreadBackgroundPriorityForEditing))
(bind-lib libclang clang_CXIndex_setGlobalOptions [void,CXIndex,i32]*
  "@param  - index 0
@param options - index 1")
(bind-lib libclang clang_CXIndex_getGlobalOptions [i32,CXIndex]*
  "@param  - index 0")
(bind-alias CXFile i8)
(bind-lib libclang clang_getFileName [CXString,CXFile]*
  "@param SFile - index 0")
(bind-lib libclang clang_getFileTime [i64,CXFile]* ;; the i64 is actually a time_t
  "@param SFile - index 0")
(bind-type CXFileUniqueID <i64*>
  "@member data - index 0")
(bind-lib libclang clang_getFileUniqueID [i32,CXFile,CXFileUniqueID*]*
  "@param file - index 0
@param outID - index 1")
(bind-alias CXTranslationUnit i8*) ;; for use as a void pointer
(bind-lib libclang clang_isFileMultipleIncludeGuarded [i32,CXTranslationUnit,CXFile]*
  "@param tu - index 0
@param file - index 1")
(bind-lib libclang clang_getFile [CXFile,CXTranslationUnit,i8*]*
  "@param tu - index 0
@param file_name - index 1")
(bind-lib libclang clang_File_isEqual [i32,CXFile,CXFile]*
  "@param file1 - index 0
@param file2 - index 1")
(bind-type CXSourceLocation <i8*,i32>
  "@member ptr_data - index 0
@member int_data - index 1")
(bind-type CXSourceRange <i8*,i32,i32>
  "@member ptr_data - index 0
@member begin_int_data - index 1
@member end_int_data - index 2")
(bind-lib libclang clang_getNullLocation [CXSourceLocation]*
  "")
(bind-lib libclang clang_equalLocations [i32,CXSourceLocation,CXSourceLocation]*

  "@param loc1 - index 0
@param loc2 - index 1")
(bind-lib libclang clang_getLocation [CXSourceLocation,CXTranslationUnit,CXFile,i32,i32]*
  "@param tu - index 0
@param file - index 1
@param line - index 2
@param column - index 3")
(bind-lib libclang clang_getLocationForOffset [CXSourceLocation,CXTranslationUnit,CXFile,i32]*
  "@param tu - index 0
@param file - index 1
@param offset - index 2")
(bind-lib libclang clang_Location_isInSystemHeader [i32,CXSourceLocation]*
  "@param location - index 0")
(bind-lib libclang clang_Location_isFromMainFile [i32,CXSourceLocation]*
  "@param location - index 0")
(bind-lib libclang clang_getNullRange [CXSourceRange]*
  "")
(bind-lib libclang clang_getRange [CXSourceRange,CXSourceLocation,CXSourceLocation]*
  "@param begin - index 0
@param end - index 1")
(bind-lib libclang clang_equalRanges [i32,CXSourceRange,CXSourceRange]*
  "@param range1 - index 0
@param range2 - index 1")
(bind-lib libclang clang_Range_isNull [i32,CXSourceRange]*
  "@param range - index 0")
(bind-lib libclang clang_getExpansionLocation [void,CXSourceLocation,CXFile*,i32*,i32*,i32*]*
  "@param location - index 0
@param file - index 1
@param line - index 2
@param column - index 3
@param offset - index 4")
(bind-lib libclang clang_getPresumedLocation [void,CXSourceLocation,CXString*,i32*,i32*]*
  "@param location - index 0
@param filename - index 1
@param line - index 2
@param column - index 3")
(bind-lib libclang clang_getInstantiationLocation [void,CXSourceLocation,CXFile*,i32*,i32*,i32*]*
  "@param location - index 0
@param file - index 1
@param line - index 2
@param column - index 3
@param offset - index 4")
(bind-lib libclang clang_getSpellingLocation [void,CXSourceLocation,CXFile*,i32*,i32*,i32*]*
  "@param location - index 0
@param file - index 1
@param line - index 2
@param column - index 3
@param offset - index 4")
(bind-lib libclang clang_getFileLocation [void,CXSourceLocation,CXFile*,i32*,i32*,i32*]*
  "@param location - index 0
@param file - index 1
@param line - index 2
@param column - index 3
@param offset - index 4")
(bind-lib libclang clang_getRangeStart [CXSourceLocation,CXSourceRange]*
  "@param range - index 0")
(bind-lib libclang clang_getRangeEnd [CXSourceLocation,CXSourceRange]*
  "@param range - index 0")
(bind-type CXSourceRangeList <i32,CXSourceRange*>
  "@member count - index 0
@member ranges - index 1")
(bind-lib libclang clang_getSkippedRanges [CXSourceRangeList*,CXTranslationUnit,CXFile]*
  "@param tu - index 0
@param file - index 1")
(bind-lib libclang clang_getAllSkippedRanges [CXSourceRangeList*,CXTranslationUnit]*
  "@param tu - index 0")
(bind-lib libclang clang_disposeSourceRangeList [void,CXSourceRangeList*]*
  "@param ranges - index 0")
(bind-alias CXDiagnosticSeverity enum)
(bind-val CXDiagnostic_Ignored enum 0)
(bind-val CXDiagnostic_Note enum 1)
(bind-val CXDiagnostic_Warning enum 2)
(bind-val CXDiagnostic_Error enum 3)
(bind-val CXDiagnostic_Fatal enum 4)
(bind-alias CXDiagnostic i8)
(bind-alias CXDiagnosticSet i8)
(bind-lib libclang clang_getNumDiagnosticsInSet [i32,CXDiagnosticSet]*
  "@param Diags - index 0")
(bind-lib libclang clang_getDiagnosticInSet [CXDiagnostic,CXDiagnosticSet,i32]*
  "@param Diags - index 0
@param Index - index 1")
(bind-alias CXLoadDiag_Error enum)
(bind-val CXLoadDiag_None enum 0)
(bind-val CXLoadDiag_Unknown enum 1)
(bind-val CXLoadDiag_CannotLoad enum 2)
(bind-val CXLoadDiag_InvalidFile enum 3)
(bind-lib libclang clang_loadDiagnostics [CXDiagnosticSet,i8*,CXLoadDiag_Error*,CXString*]*
  "@param file - index 0
@param error - index 1
@param errorString - index 2")
(bind-lib libclang clang_disposeDiagnosticSet [void,CXDiagnosticSet]*
  "@param Diags - index 0")
(bind-lib libclang clang_getChildDiagnostics [CXDiagnosticSet,CXDiagnostic]*
  "@param D - index 0")
(bind-lib libclang clang_getNumDiagnostics [i32,CXTranslationUnit]*
  "@param Unit - index 0")
(bind-lib libclang clang_getDiagnostic [CXDiagnostic,CXTranslationUnit,i32]*
  "@param Unit - index 0
@param Index - index 1")
(bind-lib libclang clang_getDiagnosticSetFromTU [CXDiagnosticSet,CXTranslationUnit]*
  "@param Unit - index 0")
(bind-lib libclang clang_disposeDiagnostic [void,CXDiagnostic]*
  "@param Diagnostic - index 0")
(bind-alias CXDiagnosticDisplayOptions enum)
(bind-val CXDiagnostic_DisplaySourceLocation enum #x01)
(bind-val CXDiagnostic_DisplayColumn enum #x02)
(bind-val CXDiagnostic_DisplaySourceRanges enum #x04)
(bind-val CXDiagnostic_DisplayOption enum #x08)
(bind-val CXDiagnostic_DisplayCategoryId enum #x10)
(bind-val CXDiagnostic_DisplayCategoryName enum #x20)
(bind-lib libclang clang_formatDiagnostic [CXString,CXDiagnostic,i32]*
  "@param Diagnostic - index 0
@param Options - index 1")
(bind-lib libclang clang_defaultDiagnosticDisplayOptions [i32]*
  "")
(bind-lib libclang clang_getDiagnosticSeverity [CXDiagnosticSeverity,CXDiagnostic]*
  "@param  - index 0")
(bind-lib libclang clang_getDiagnosticLocation [CXSourceLocation,CXDiagnostic]*
  "@param  - index 0")
(bind-lib libclang clang_getDiagnosticSpelling [CXString,CXDiagnostic]*
  "@param  - index 0")
(bind-lib libclang clang_getDiagnosticOption [CXString,CXDiagnostic,CXString*]*
  "@param Diag - index 0
@param Disable - index 1")
(bind-lib libclang clang_getDiagnosticCategory [i32,CXDiagnostic]*
  "@param  - index 0")
(bind-lib libclang clang_getDiagnosticCategoryName [CXString,i32]*
  "@param Category - index 0")
(bind-lib libclang clang_getDiagnosticCategoryText [CXString,CXDiagnostic]*
  "@param  - index 0")
(bind-lib libclang clang_getDiagnosticNumRanges [i32,CXDiagnostic]*
  "@param  - index 0")
(bind-lib libclang clang_getDiagnosticRange [CXSourceRange,CXDiagnostic,i32]*
  "@param Diagnostic - index 0
@param Range - index 1")
(bind-lib libclang clang_getDiagnosticNumFixIts [i32,CXDiagnostic]*
  "@param Diagnostic - index 0")
(bind-lib libclang clang_getDiagnosticFixIt [CXString,CXDiagnostic,i32,CXSourceRange*]*
  "@param Diagnostic - index 0
@param FixIt - index 1
@param ReplacementRange - index 2")
(bind-lib libclang clang_getTranslationUnitSpelling [CXString,CXTranslationUnit]*
  "@param CTUnit - index 0")
(bind-lib libclang clang_createTranslationUnitFromSourceFile [CXTranslationUnit,CXIndex,i8*,i32,i8**,i32,CXUnsavedFile*]*
  "@param CIdx - index 0
@param source_filename - index 1
@param num_clang_command_line_args - index 2
@param clang_command_line_args - index 3
@param num_unsaved_files - index 4
@param unsaved_files - index 5")
(bind-lib libclang clang_createTranslationUnit [CXTranslationUnit,CXIndex,i8*]*
  "@param CIdx - index 0
@param ast_filename - index 1")
(bind-lib libclang clang_createTranslationUnit2 [CXErrorCode,CXIndex,i8*,CXTranslationUnit*]*
  "@param CIdx - index 0
@param ast_filename - index 1
@param out_TU - index 2")
(bind-alias CXTranslationUnit_Flags enum)
(bind-val CXTranslationUnit_None enum #x0)
(bind-val CXTranslationUnit_DetailedPreprocessingRecord enum #x01)
(bind-val CXTranslationUnit_Incomplete enum #x02)
(bind-val CXTranslationUnit_PrecompiledPreamble enum #x04)
(bind-val CXTranslationUnit_CacheCompletionResults enum #x08)
(bind-val CXTranslationUnit_ForSerialization enum #x10)
(bind-val CXTranslationUnit_CXXChainedPCH enum #x20)
(bind-val CXTranslationUnit_SkipFunctionBodies enum #x40)
(bind-val CXTranslationUnit_IncludeBriefCommentsInCodeCompletion enum #x80)
(bind-val CXTranslationUnit_CreatePreambleOnFirstParse enum #x100)
(bind-val CXTranslationUnit_KeepGoing enum #x200)
(bind-val CXTranslationUnit_SingleFileParse enum #x400)
(bind-lib libclang clang_defaultEditingTranslationUnitOptions [i32]*
  "")
(bind-lib libclang clang_parseTranslationUnit [CXTranslationUnit,CXIndex,i8*,i8**,i32,CXUnsavedFile*,i32,i32]*
  "@param CIdx - index 0
@param source_filename - index 1
@param command_line_args - index 2
@param num_command_line_args - index 3
@param unsaved_files - index 4
@param num_unsaved_files - index 5
@param options - index 6")
(bind-lib libclang clang_parseTranslationUnit2 [CXErrorCode,CXIndex,i8*,i8**,i32,CXUnsavedFile*,i32,i32,CXTranslationUnit*]*
  "@param CIdx - index 0
@param source_filename - index 1
@param command_line_args - index 2
@param num_command_line_args - index 3
@param unsaved_files - index 4
@param num_unsaved_files - index 5
@param options - index 6
@param out_TU - index 7")
(bind-lib libclang clang_parseTranslationUnit2FullArgv [CXErrorCode,CXIndex,i8*,i8**,i32,CXUnsavedFile*,i32,i32,CXTranslationUnit*]*
  "@param CIdx - index 0
@param source_filename - index 1
@param command_line_args - index 2
@param num_command_line_args - index 3
@param unsaved_files - index 4
@param num_unsaved_files - index 5
@param options - index 6
@param out_TU - index 7")
(bind-alias CXSaveTranslationUnit_Flags enum)
(bind-val CXSaveTranslationUnit_None enum #x0)
(bind-lib libclang clang_defaultSaveOptions [i32,CXTranslationUnit]*
  "@param TU - index 0")
(bind-alias CXSaveError enum)
(bind-val CXSaveError_None enum 0)
(bind-val CXSaveError_Unknown enum 1)
(bind-val CXSaveError_TranslationErrors enum 2)
(bind-val CXSaveError_InvalidTU enum 3)
(bind-lib libclang clang_saveTranslationUnit [i32,CXTranslationUnit,i8*,i32]*
  "@param TU - index 0
@param FileName - index 1
@param options - index 2")
(bind-lib libclang clang_suspendTranslationUnit [i32,CXTranslationUnit]*
  "@param  - index 0")
(bind-lib libclang clang_disposeTranslationUnit [void,CXTranslationUnit]*
  "@param  - index 0")
(bind-alias CXReparse_Flags enum)
(bind-val CXReparse_None enum #x0)
(bind-lib libclang clang_defaultReparseOptions [i32,CXTranslationUnit]*
  "@param TU - index 0")
(bind-lib libclang clang_reparseTranslationUnit [i32,CXTranslationUnit,i32,CXUnsavedFile*,i32]*
  "@param TU - index 0
@param num_unsaved_files - index 1
@param unsaved_files - index 2
@param options - index 3")
(bind-alias CXTUResourceUsageKind enum)
(bind-val CXTUResourceUsage_AST enum 1)
(bind-val CXTUResourceUsage_Identifiers enum 2)
(bind-val CXTUResourceUsage_Selectors enum 3)
(bind-val CXTUResourceUsage_GlobalCompletionResults enum 4)
(bind-val CXTUResourceUsage_SourceManagerContentCache enum 5)
(bind-val CXTUResourceUsage_AST_SideTables enum 6)
(bind-val CXTUResourceUsage_SourceManager_Membuffer_Malloc enum 7)
(bind-val CXTUResourceUsage_SourceManager_Membuffer_MMap enum 8)
(bind-val CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc enum 9)
(bind-val CXTUResourceUsage_ExternalASTSource_Membuffer_MMap enum 10)
(bind-val CXTUResourceUsage_Preprocessor enum 11)
(bind-val CXTUResourceUsage_PreprocessingRecord enum 12)
(bind-val CXTUResourceUsage_SourceManager_DataStructures enum 13)
(bind-val CXTUResourceUsage_Preprocessor_HeaderSearch enum 14)
(bind-val CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN enum CXTUResourceUsage_AST)
(bind-val CXTUResourceUsage_MEMORY_IN_BYTES_END enum CXTUResourceUsage_Preprocessor_HeaderSearch)
(bind-val CXTUResourceUsage_First enum CXTUResourceUsage_AST)
(bind-val CXTUResourceUsage_Last enum CXTUResourceUsage_Preprocessor_HeaderSearch)
(bind-lib libclang clang_getTUResourceUsageName [i8*,CXTUResourceUsageKind]*
  "@param kind - index 0")
(bind-type CXTUResourceUsageEntry <CXTUResourceUsageKind,i32>
  "@member kind - index 0
@member amount - index 1")
(bind-type CXTUResourceUsage <i8*,i32,CXTUResourceUsageEntry*>
  "@member data - index 0
@member numEntries - index 1
@member entries - index 2")
(bind-lib libclang clang_getCXTUResourceUsage [CXTUResourceUsage,CXTranslationUnit]*
  "@param TU - index 0")
(bind-lib libclang clang_disposeCXTUResourceUsage [void,CXTUResourceUsage]*
  "@param usage - index 0")
(bind-alias CXTargetInfo i8*) ;; for use as a void pointer
(bind-lib libclang clang_getTranslationUnitTargetInfo [CXTargetInfo,CXTranslationUnit]*
  "@param CTUnit - index 0")
(bind-lib libclang clang_TargetInfo_dispose [void,CXTargetInfo]*
  "@param Info - index 0")
(bind-lib libclang clang_TargetInfo_getTriple [CXString,CXTargetInfo]*
  "@param Info - index 0")
(bind-lib libclang clang_TargetInfo_getPointerWidth [i32,CXTargetInfo]*
  "@param Info - index 0")
(bind-alias CXCursorKind enum)
(bind-val CXCursor_UnexposedDecl enum 1)
(bind-val CXCursor_StructDecl enum 2)
(bind-val CXCursor_UnionDecl enum 3)
(bind-val CXCursor_ClassDecl enum 4)
(bind-val CXCursor_EnumDecl enum 5)
(bind-val CXCursor_FieldDecl enum 6)
(bind-val CXCursor_EnumConstantDecl enum 7)
(bind-val CXCursor_FunctionDecl enum 8)
(bind-val CXCursor_VarDecl enum 9)
(bind-val CXCursor_ParmDecl enum 10)
(bind-val CXCursor_ObjCInterfaceDecl enum 11)
(bind-val CXCursor_ObjCCategoryDecl enum 12)
(bind-val CXCursor_ObjCProtocolDecl enum 13)
(bind-val CXCursor_ObjCPropertyDecl enum 14)
(bind-val CXCursor_ObjCIvarDecl enum 15)
(bind-val CXCursor_ObjCInstanceMethodDecl enum 16)
(bind-val CXCursor_ObjCClassMethodDecl enum 17)
(bind-val CXCursor_ObjCImplementationDecl enum 18)
(bind-val CXCursor_ObjCCategoryImplDecl enum 19)
(bind-val CXCursor_TypedefDecl enum 20)
(bind-val CXCursor_CXXMethod enum 21)
(bind-val CXCursor_Namespace enum 22)
(bind-val CXCursor_LinkageSpec enum 23)
(bind-val CXCursor_Constructor enum 24)
(bind-val CXCursor_Destructor enum 25)
(bind-val CXCursor_ConversionFunction enum 26)
(bind-val CXCursor_TemplateTypeParameter enum 27)
(bind-val CXCursor_NonTypeTemplateParameter enum 28)
(bind-val CXCursor_TemplateTemplateParameter enum 29)
(bind-val CXCursor_FunctionTemplate enum 30)
(bind-val CXCursor_ClassTemplate enum 31)
(bind-val CXCursor_ClassTemplatePartialSpecialization enum 32)
(bind-val CXCursor_NamespaceAlias enum 33)
(bind-val CXCursor_UsingDirective enum 34)
(bind-val CXCursor_UsingDeclaration enum 35)
(bind-val CXCursor_TypeAliasDecl enum 36)
(bind-val CXCursor_ObjCSynthesizeDecl enum 37)
(bind-val CXCursor_ObjCDynamicDecl enum 38)
(bind-val CXCursor_CXXAccessSpecifier enum 39)
(bind-val CXCursor_FirstDecl enum CXCursor_UnexposedDecl)
(bind-val CXCursor_LastDecl enum CXCursor_CXXAccessSpecifier)
(bind-val CXCursor_FirstRef enum 40)
(bind-val CXCursor_ObjCSuperClassRef enum 40)
(bind-val CXCursor_ObjCProtocolRef enum 41)
(bind-val CXCursor_ObjCClassRef enum 42)
(bind-val CXCursor_TypeRef enum 43)
(bind-val CXCursor_CXXBaseSpecifier enum 44)
(bind-val CXCursor_TemplateRef enum 45)
(bind-val CXCursor_NamespaceRef enum 46)
(bind-val CXCursor_MemberRef enum 47)
(bind-val CXCursor_LabelRef enum 48)
(bind-val CXCursor_OverloadedDeclRef enum 49)
(bind-val CXCursor_VariableRef enum 50)
(bind-val CXCursor_LastRef enum CXCursor_VariableRef)
(bind-val CXCursor_FirstInvalid enum 70)
(bind-val CXCursor_InvalidFile enum 70)
(bind-val CXCursor_NoDeclFound enum 71)
(bind-val CXCursor_NotImplemented enum 72)
(bind-val CXCursor_InvalidCode enum 73)
(bind-val CXCursor_LastInvalid enum CXCursor_InvalidCode)
(bind-val CXCursor_FirstExpr enum 100)
(bind-val CXCursor_UnexposedExpr enum 100)
(bind-val CXCursor_DeclRefExpr enum 101)
(bind-val CXCursor_MemberRefExpr enum 102)
(bind-val CXCursor_CallExpr enum 103)
(bind-val CXCursor_ObjCMessageExpr enum 104)
(bind-val CXCursor_BlockExpr enum 105)
(bind-val CXCursor_IntegerLiteral enum 106)
(bind-val CXCursor_FloatingLiteral enum 107)
(bind-val CXCursor_ImaginaryLiteral enum 108)
(bind-val CXCursor_StringLiteral enum 109)
(bind-val CXCursor_CharacterLiteral enum 110)
(bind-val CXCursor_ParenExpr enum 111)
(bind-val CXCursor_UnaryOperator enum 112)
(bind-val CXCursor_ArraySubscriptExpr enum 113)
(bind-val CXCursor_BinaryOperator enum 114)
(bind-val CXCursor_CompoundAssignOperator enum 115)
(bind-val CXCursor_ConditionalOperator enum 116)
(bind-val CXCursor_CStyleCastExpr enum 117)
(bind-val CXCursor_CompoundLiteralExpr enum 118)
(bind-val CXCursor_InitListExpr enum 119)
(bind-val CXCursor_AddrLabelExpr enum 120)
(bind-val CXCursor_StmtExpr enum 121)
(bind-val CXCursor_GenericSelectionExpr enum 122)
(bind-val CXCursor_GNUNullExpr enum 123)
(bind-val CXCursor_CXXStaticCastExpr enum 124)
(bind-val CXCursor_CXXDynamicCastExpr enum 125)
(bind-val CXCursor_CXXReinterpretCastExpr enum 126)
(bind-val CXCursor_CXXConstCastExpr enum 127)
(bind-val CXCursor_CXXFunctionalCastExpr enum 128)
(bind-val CXCursor_CXXTypeidExpr enum 129)
(bind-val CXCursor_CXXBoolLiteralExpr enum 130)
(bind-val CXCursor_CXXNullPtrLiteralExpr enum 131)
(bind-val CXCursor_CXXThisExpr enum 132)
(bind-val CXCursor_CXXThrowExpr enum 133)
(bind-val CXCursor_CXXNewExpr enum 134)
(bind-val CXCursor_CXXDeleteExpr enum 135)
(bind-val CXCursor_UnaryExpr enum 136)
(bind-val CXCursor_ObjCStringLiteral enum 137)
(bind-val CXCursor_ObjCEncodeExpr enum 138)
(bind-val CXCursor_ObjCSelectorExpr enum 139)
(bind-val CXCursor_ObjCProtocolExpr enum 140)
(bind-val CXCursor_ObjCBridgedCastExpr enum 141)
(bind-val CXCursor_PackExpansionExpr enum 142)
(bind-val CXCursor_SizeOfPackExpr enum 143)
(bind-val CXCursor_LambdaExpr enum 144)
(bind-val CXCursor_ObjCBoolLiteralExpr enum 145)
(bind-val CXCursor_ObjCSelfExpr enum 146)
(bind-val CXCursor_OMPArraySectionExpr enum 147)
(bind-val CXCursor_ObjCAvailabilityCheckExpr enum 148)
(bind-val CXCursor_LastExpr enum CXCursor_ObjCAvailabilityCheckExpr)
(bind-val CXCursor_FirstStmt enum 200)
(bind-val CXCursor_UnexposedStmt enum 200)
(bind-val CXCursor_LabelStmt enum 201)
(bind-val CXCursor_CompoundStmt enum 202)
(bind-val CXCursor_CaseStmt enum 203)
(bind-val CXCursor_DefaultStmt enum 204)
(bind-val CXCursor_IfStmt enum 205)
(bind-val CXCursor_SwitchStmt enum 206)
(bind-val CXCursor_WhileStmt enum 207)
(bind-val CXCursor_DoStmt enum 208)
(bind-val CXCursor_ForStmt enum 209)
(bind-val CXCursor_GotoStmt enum 210)
(bind-val CXCursor_IndirectGotoStmt enum 211)
(bind-val CXCursor_ContinueStmt enum 212)
(bind-val CXCursor_BreakStmt enum 213)
(bind-val CXCursor_ReturnStmt enum 214)
(bind-val CXCursor_GCCAsmStmt enum 215)
(bind-val CXCursor_AsmStmt enum CXCursor_GCCAsmStmt)
(bind-val CXCursor_ObjCAtTryStmt enum 216)
(bind-val CXCursor_ObjCAtCatchStmt enum 217)
(bind-val CXCursor_ObjCAtFinallyStmt enum 218)
(bind-val CXCursor_ObjCAtThrowStmt enum 219)
(bind-val CXCursor_ObjCAtSynchronizedStmt enum 220)
(bind-val CXCursor_ObjCAutoreleasePoolStmt enum 221)
(bind-val CXCursor_ObjCForCollectionStmt enum 222)
(bind-val CXCursor_CXXCatchStmt enum 223)
(bind-val CXCursor_CXXTryStmt enum 224)
(bind-val CXCursor_CXXForRangeStmt enum 225)
(bind-val CXCursor_SEHTryStmt enum 226)
(bind-val CXCursor_SEHExceptStmt enum 227)
(bind-val CXCursor_SEHFinallyStmt enum 228)
(bind-val CXCursor_MSAsmStmt enum 229)
(bind-val CXCursor_NullStmt enum 230)
(bind-val CXCursor_DeclStmt enum 231)
(bind-val CXCursor_OMPParallelDirective enum 232)
(bind-val CXCursor_OMPSimdDirective enum 233)
(bind-val CXCursor_OMPForDirective enum 234)
(bind-val CXCursor_OMPSectionsDirective enum 235)
(bind-val CXCursor_OMPSectionDirective enum 236)
(bind-val CXCursor_OMPSingleDirective enum 237)
(bind-val CXCursor_OMPParallelForDirective enum 238)
(bind-val CXCursor_OMPParallelSectionsDirective enum 239)
(bind-val CXCursor_OMPTaskDirective enum 240)
(bind-val CXCursor_OMPMasterDirective enum 241)
(bind-val CXCursor_OMPCriticalDirective enum 242)
(bind-val CXCursor_OMPTaskyieldDirective enum 243)
(bind-val CXCursor_OMPBarrierDirective enum 244)
(bind-val CXCursor_OMPTaskwaitDirective enum 245)
(bind-val CXCursor_OMPFlushDirective enum 246)
(bind-val CXCursor_SEHLeaveStmt enum 247)
(bind-val CXCursor_OMPOrderedDirective enum 248)
(bind-val CXCursor_OMPAtomicDirective enum 249)
(bind-val CXCursor_OMPForSimdDirective enum 250)
(bind-val CXCursor_OMPParallelForSimdDirective enum 251)
(bind-val CXCursor_OMPTargetDirective enum 252)
(bind-val CXCursor_OMPTeamsDirective enum 253)
(bind-val CXCursor_OMPTaskgroupDirective enum 254)
(bind-val CXCursor_OMPCancellationPointDirective enum 255)
(bind-val CXCursor_OMPCancelDirective enum 256)
(bind-val CXCursor_OMPTargetDataDirective enum 257)
(bind-val CXCursor_OMPTaskLoopDirective enum 258)
(bind-val CXCursor_OMPTaskLoopSimdDirective enum 259)
(bind-val CXCursor_OMPDistributeDirective enum 260)
(bind-val CXCursor_OMPTargetEnterDataDirective enum 261)
(bind-val CXCursor_OMPTargetExitDataDirective enum 262)
(bind-val CXCursor_OMPTargetParallelDirective enum 263)
(bind-val CXCursor_OMPTargetParallelForDirective enum 264)
(bind-val CXCursor_OMPTargetUpdateDirective enum 265)
(bind-val CXCursor_OMPDistributeParallelForDirective enum 266)
(bind-val CXCursor_OMPDistributeParallelForSimdDirective enum 267)
(bind-val CXCursor_OMPDistributeSimdDirective enum 268)
(bind-val CXCursor_OMPTargetParallelForSimdDirective enum 269)
(bind-val CXCursor_OMPTargetSimdDirective enum 270)
(bind-val CXCursor_OMPTeamsDistributeDirective enum 271)
(bind-val CXCursor_OMPTeamsDistributeSimdDirective enum 272)
(bind-val CXCursor_OMPTeamsDistributeParallelForSimdDirective enum 273)
(bind-val CXCursor_OMPTeamsDistributeParallelForDirective enum 274)
(bind-val CXCursor_OMPTargetTeamsDirective enum 275)
(bind-val CXCursor_OMPTargetTeamsDistributeDirective enum 276)
(bind-val CXCursor_OMPTargetTeamsDistributeParallelForDirective enum 277)
(bind-val CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective enum 278)
(bind-val CXCursor_OMPTargetTeamsDistributeSimdDirective enum 279)
(bind-val CXCursor_LastStmt enum CXCursor_OMPTargetTeamsDistributeSimdDirective)
(bind-val CXCursor_TranslationUnit enum 300)
(bind-val CXCursor_FirstAttr enum 400)
(bind-val CXCursor_UnexposedAttr enum 400)
(bind-val CXCursor_IBActionAttr enum 401)
(bind-val CXCursor_IBOutletAttr enum 402)
(bind-val CXCursor_IBOutletCollectionAttr enum 403)
(bind-val CXCursor_CXXFinalAttr enum 404)
(bind-val CXCursor_CXXOverrideAttr enum 405)
(bind-val CXCursor_AnnotateAttr enum 406)
(bind-val CXCursor_AsmLabelAttr enum 407)
(bind-val CXCursor_PackedAttr enum 408)
(bind-val CXCursor_PureAttr enum 409)
(bind-val CXCursor_ConstAttr enum 410)
(bind-val CXCursor_NoDuplicateAttr enum 411)
(bind-val CXCursor_CUDAConstantAttr enum 412)
(bind-val CXCursor_CUDADeviceAttr enum 413)
(bind-val CXCursor_CUDAGlobalAttr enum 414)
(bind-val CXCursor_CUDAHostAttr enum 415)
(bind-val CXCursor_CUDASharedAttr enum 416)
(bind-val CXCursor_VisibilityAttr enum 417)
(bind-val CXCursor_DLLExport enum 418)
(bind-val CXCursor_DLLImport enum 419)
(bind-val CXCursor_LastAttr enum CXCursor_DLLImport)
(bind-val CXCursor_PreprocessingDirective enum 500)
(bind-val CXCursor_MacroDefinition enum 501)
(bind-val CXCursor_MacroExpansion enum 502)
(bind-val CXCursor_MacroInstantiation enum CXCursor_MacroExpansion)
(bind-val CXCursor_InclusionDirective enum 503)
(bind-val CXCursor_FirstPreprocessing enum CXCursor_PreprocessingDirective)
(bind-val CXCursor_LastPreprocessing enum CXCursor_InclusionDirective)
(bind-val CXCursor_ModuleImportDecl enum 600)
(bind-val CXCursor_TypeAliasTemplateDecl enum 601)
(bind-val CXCursor_StaticAssert enum 602)
(bind-val CXCursor_FriendDecl enum 603)
(bind-val CXCursor_FirstExtraDecl enum CXCursor_ModuleImportDecl)
(bind-val CXCursor_LastExtraDecl enum CXCursor_FriendDecl)
(bind-val CXCursor_OverloadCandidate enum 700)
(bind-type CXCursor <CXCursorKind,i32,i8*>
  "@member kind - index 0
@member xdata - index 1
@member data - index 2")
(bind-lib libclang clang_getNullCursor [CXCursor]*
  "")
(bind-lib libclang clang_getTranslationUnitCursor [CXCursor,CXTranslationUnit]*
  "@param  - index 0")
(bind-lib libclang clang_equalCursors [i32,CXCursor,CXCursor]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_Cursor_isNull [i32,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_hashCursor [i32,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_getCursorKind [CXCursorKind,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_isDeclaration [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isReference [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isExpression [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isStatement [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isAttribute [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_Cursor_hasAttrs [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_isInvalid [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isTranslationUnit [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isPreprocessing [i32,CXCursorKind]*
  "@param  - index 0")
(bind-lib libclang clang_isUnexposed [i32,CXCursorKind]*
  "@param  - index 0")
(bind-alias CXLinkageKind enum)
(bind-val CXLinkage_Invalid enum 0)
(bind-val CXLinkage_NoLinkage enum 1)
(bind-val CXLinkage_Internal enum 2)
(bind-val CXLinkage_UniqueExternal enum 3)
(bind-val CXLinkage_External enum 4)
(bind-lib libclang clang_getCursorLinkage [CXLinkageKind,CXCursor]*
  "@param cursor - index 0")
(bind-alias CXVisibilityKind enum)
(bind-val CXVisibility_Invalid enum 0)
(bind-val CXVisibility_Hidden enum 1)
(bind-val CXVisibility_Protected enum 2)
(bind-val CXVisibility_Default enum 3)
(bind-lib libclang clang_getCursorVisibility [CXVisibilityKind,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_getCursorAvailability [CXAvailabilityKind,CXCursor]*
  "@param cursor - index 0")
(bind-type CXPlatformAvailability <CXString,CXVersion,CXVersion,CXVersion,i32,CXString>
  "@member Platform - index 0
@member Introduced - index 1
@member Deprecated - index 2
@member Obsoleted - index 3
@member Unavailable - index 4
@member Message - index 5")
(bind-lib libclang clang_getCursorPlatformAvailability [i32,CXCursor,i32*,CXString*,i32*,CXString*,CXPlatformAvailability*,i32]*
  "@param cursor - index 0
@param always_deprecated - index 1
@param deprecated_message - index 2
@param always_unavailable - index 3
@param unavailable_message - index 4
@param availability - index 5
@param availability_size - index 6")
(bind-lib libclang clang_disposeCXPlatformAvailability [void,CXPlatformAvailability*]*
  "@param availability - index 0")
(bind-alias CXLanguageKind enum)
(bind-val CXLanguage_Invalid enum 0)
(bind-val CXLanguage_C enum 0)
(bind-val CXLanguage_ObjC enum 0)
(bind-val CXLanguage_CPlusPlus enum 0)
(bind-lib libclang clang_getCursorLanguage [CXLanguageKind,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_Cursor_getTranslationUnit [CXTranslationUnit,CXCursor]*
  "@param  - index 0")
(bind-alias CXCursorSet i8*) ;; for use as a void pointer
(bind-lib libclang clang_createCXCursorSet [CXCursorSet]*
  "")
(bind-lib libclang clang_disposeCXCursorSet [void,CXCursorSet]*
  "@param cset - index 0")
(bind-lib libclang clang_CXCursorSet_contains [i32,CXCursorSet,CXCursor]*
  "@param cset - index 0
@param cursor - index 1")
(bind-lib libclang clang_CXCursorSet_insert [i32,CXCursorSet,CXCursor]*
  "@param cset - index 0
@param cursor - index 1")
(bind-lib libclang clang_getCursorSemanticParent [CXCursor,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_getCursorLexicalParent [CXCursor,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_getOverriddenCursors [void,CXCursor,CXCursor**,i32*]*
  "@param cursor - index 0
@param overridden - index 1
@param num_overridden - index 2")
(bind-lib libclang clang_disposeOverriddenCursors [void,CXCursor*]*
  "@param overridden - index 0")
(bind-lib libclang clang_getIncludedFile [CXFile,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_getCursor [CXCursor,CXTranslationUnit,CXSourceLocation]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_getCursorLocation [CXSourceLocation,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_getCursorExtent [CXSourceRange,CXCursor]*
  "@param  - index 0")
(bind-alias CXTypeKind enum)
(bind-val CXType_Invalid enum 0)
(bind-val CXType_Unexposed enum 1)
(bind-val CXType_Void enum 2)
(bind-val CXType_Bool enum 3)
(bind-val CXType_Char_U enum 4)
(bind-val CXType_UChar enum 5)
(bind-val CXType_Char16 enum 6)
(bind-val CXType_Char32 enum 7)
(bind-val CXType_UShort enum 8)
(bind-val CXType_UInt enum 9)
(bind-val CXType_ULong enum 10)
(bind-val CXType_ULongLong enum 11)
(bind-val CXType_UInt128 enum 12)
(bind-val CXType_Char_S enum 13)
(bind-val CXType_SChar enum 14)
(bind-val CXType_WChar enum 15)
(bind-val CXType_Short enum 16)
(bind-val CXType_Int enum 17)
(bind-val CXType_Long enum 18)
(bind-val CXType_LongLong enum 19)
(bind-val CXType_Int128 enum 20)
(bind-val CXType_Float enum 21)
(bind-val CXType_Double enum 22)
(bind-val CXType_LongDouble enum 23)
(bind-val CXType_NullPtr enum 24)
(bind-val CXType_Overload enum 25)
(bind-val CXType_Dependent enum 26)
(bind-val CXType_ObjCId enum 27)
(bind-val CXType_ObjCClass enum 28)
(bind-val CXType_ObjCSel enum 29)
(bind-val CXType_Float128 enum 30)
(bind-val CXType_Half enum 31)
(bind-val CXType_FirstBuiltin enum CXType_Void)
(bind-val CXType_LastBuiltin enum CXType_Half)
(bind-val CXType_Complex enum 100)
(bind-val CXType_Pointer enum 101)
(bind-val CXType_BlockPointer enum 102)
(bind-val CXType_LValueReference enum 103)
(bind-val CXType_RValueReference enum 104)
(bind-val CXType_Record enum 105)
(bind-val CXType_Enum enum 106)
(bind-val CXType_Typedef enum 107)
(bind-val CXType_ObjCInterface enum 108)
(bind-val CXType_ObjCObjectPointer enum 109)
(bind-val CXType_FunctionNoProto enum 110)
(bind-val CXType_FunctionProto enum 111)
(bind-val CXType_ConstantArray enum 112)
(bind-val CXType_Vector enum 113)
(bind-val CXType_IncompleteArray enum 114)
(bind-val CXType_VariableArray enum 115)
(bind-val CXType_DependentSizedArray enum 116)
(bind-val CXType_MemberPointer enum 117)
(bind-val CXType_Auto enum 118)
(bind-val CXType_Elaborated enum 119)
(bind-val CXType_Pipe enum 120)
(bind-val CXType_OCLImage1dRO enum 121)
(bind-val CXType_OCLImage1dArrayRO enum 122)
(bind-val CXType_OCLImage1dBufferRO enum 123)
(bind-val CXType_OCLImage2dRO enum 124)
(bind-val CXType_OCLImage2dArrayRO enum 125)
(bind-val CXType_OCLImage2dDepthRO enum 126)
(bind-val CXType_OCLImage2dArrayDepthRO enum 127)
(bind-val CXType_OCLImage2dMSAARO enum 128)
(bind-val CXType_OCLImage2dArrayMSAARO enum 129)
(bind-val CXType_OCLImage2dMSAADepthRO enum 130)
(bind-val CXType_OCLImage2dArrayMSAADepthRO enum 131)
(bind-val CXType_OCLImage3dRO enum 132)
(bind-val CXType_OCLImage1dWO enum 133)
(bind-val CXType_OCLImage1dArrayWO enum 134)
(bind-val CXType_OCLImage1dBufferWO enum 135)
(bind-val CXType_OCLImage2dWO enum 136)
(bind-val CXType_OCLImage2dArrayWO enum 137)
(bind-val CXType_OCLImage2dDepthWO enum 138)
(bind-val CXType_OCLImage2dArrayDepthWO enum 139)
(bind-val CXType_OCLImage2dMSAAWO enum 140)
(bind-val CXType_OCLImage2dArrayMSAAWO enum 141)
(bind-val CXType_OCLImage2dMSAADepthWO enum 142)
(bind-val CXType_OCLImage2dArrayMSAADepthWO enum 143)
(bind-val CXType_OCLImage3dWO enum 144)
(bind-val CXType_OCLImage1dRW enum 145)
(bind-val CXType_OCLImage1dArrayRW enum 146)
(bind-val CXType_OCLImage1dBufferRW enum 147)
(bind-val CXType_OCLImage2dRW enum 148)
(bind-val CXType_OCLImage2dArrayRW enum 149)
(bind-val CXType_OCLImage2dDepthRW enum 150)
(bind-val CXType_OCLImage2dArrayDepthRW enum 151)
(bind-val CXType_OCLImage2dMSAARW enum 152)
(bind-val CXType_OCLImage2dArrayMSAARW enum 153)
(bind-val CXType_OCLImage2dMSAADepthRW enum 154)
(bind-val CXType_OCLImage2dArrayMSAADepthRW enum 155)
(bind-val CXType_OCLImage3dRW enum 156)
(bind-val CXType_OCLSampler enum 157)
(bind-val CXType_OCLEvent enum 158)
(bind-val CXType_OCLQueue enum 159)
(bind-val CXType_OCLReserveID enum 160)
(bind-alias CXCallingConv enum)
(bind-val CXCallingConv_Default enum 0)
(bind-val CXCallingConv_C enum 1)
(bind-val CXCallingConv_X86StdCall enum 2)
(bind-val CXCallingConv_X86FastCall enum 3)
(bind-val CXCallingConv_X86ThisCall enum 4)
(bind-val CXCallingConv_X86Pascal enum 5)
(bind-val CXCallingConv_AAPCS enum 6)
(bind-val CXCallingConv_AAPCS_VFP enum 7)
(bind-val CXCallingConv_X86RegCall enum 8)
(bind-val CXCallingConv_IntelOclBicc enum 9)
(bind-val CXCallingConv_Win64 enum 10)
(bind-val CXCallingConv_X86_64Win64 enum CXCallingConv_Win64)
(bind-val CXCallingConv_X86_64SysV enum 11)
(bind-val CXCallingConv_X86VectorCall enum 12)
(bind-val CXCallingConv_Swift enum 13)
(bind-val CXCallingConv_PreserveMost enum 14)
(bind-val CXCallingConv_PreserveAll enum 15)
(bind-val CXCallingConv_Invalid enum 100)
(bind-val CXCallingConv_Unexposed enum 200)
(bind-type CXType <CXTypeKind,i8*>
  "@member kind - index 0
@member data - index 1")
(bind-lib libclang clang_getCursorType [CXType,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getTypeSpelling [CXString,CXType]*
  "@param CT - index 0")
(bind-lib libclang clang_getTypedefDeclUnderlyingType [CXType,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getEnumDeclIntegerType [CXType,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getEnumConstantDeclValue [i64,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getEnumConstantDeclUnsignedValue [i64,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getFieldDeclBitWidth [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getNumArguments [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getArgument [CXCursor,CXCursor,i32]*
  "@param C - index 0
@param i - index 1")
(bind-alias CXTemplateArgumentKind enum)
(bind-val CXTemplateArgumentKind_Null enum 0)
(bind-val CXTemplateArgumentKind_Type enum 1)
(bind-val CXTemplateArgumentKind_Declaration enum 2)
(bind-val CXTemplateArgumentKind_NullPtr enum 3)
(bind-val CXTemplateArgumentKind_Integral enum 4)
(bind-val CXTemplateArgumentKind_Template enum 5)
(bind-val CXTemplateArgumentKind_TemplateExpansion enum 6)
(bind-val CXTemplateArgumentKind_Expression enum 7)
(bind-val CXTemplateArgumentKind_Pack enum 8)
(bind-val CXTemplateArgumentKind_Invalid enum 9)
(bind-lib libclang clang_Cursor_getNumTemplateArguments [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getTemplateArgumentKind [CXTemplateArgumentKind,CXCursor,i32]*
  "@param C - index 0
@param I - index 1")
(bind-lib libclang clang_Cursor_getTemplateArgumentType [CXType,CXCursor,i32]*
  "@param C - index 0
@param I - index 1")
(bind-lib libclang clang_Cursor_getTemplateArgumentValue [i64,CXCursor,i32]*
  "@param C - index 0
@param I - index 1")
(bind-lib libclang clang_Cursor_getTemplateArgumentUnsignedValue [i64,CXCursor,i32]*
  "@param C - index 0
@param I - index 1")
(bind-lib libclang clang_equalTypes [i32,CXType,CXType]*
  "@param A - index 0
@param B - index 1")
(bind-lib libclang clang_getCanonicalType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_isConstQualifiedType [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Cursor_isMacroFunctionLike [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_isMacroBuiltin [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_isFunctionInlined [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_isVolatileQualifiedType [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_isRestrictQualifiedType [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getAddressSpace [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getTypedefName [CXString,CXType]*
  "@param CT - index 0")
(bind-lib libclang clang_getPointeeType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getTypeDeclaration [CXCursor,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getDeclObjCTypeEncoding [CXString,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Type_getObjCEncoding [CXString,CXType]*
  "@param type - index 0")
(bind-lib libclang clang_getTypeKindSpelling [CXString,CXTypeKind]*
  "@param K - index 0")
(bind-lib libclang clang_getFunctionTypeCallingConv [CXCallingConv,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getResultType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getExceptionSpecificationType [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getNumArgTypes [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getArgType [CXType,CXType,i32]*
  "@param T - index 0
@param i - index 1")
(bind-lib libclang clang_isFunctionTypeVariadic [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getCursorResultType [CXType,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getCursorExceptionSpecificationType [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_isPODType [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getElementType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getNumElements [i64,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getArrayElementType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_getArraySize [i64,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Type_getNamedType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Type_isTransparentTagTypedef [i32,CXType]*
  "@param T - index 0")
(bind-alias CXTypeLayoutError enum)
(bind-val CXTypeLayoutError_Invalid enum -1)
(bind-val CXTypeLayoutError_Incomplete enum -2)
(bind-val CXTypeLayoutError_Dependent enum -3)
(bind-val CXTypeLayoutError_NotConstantSize enum -4)
(bind-val CXTypeLayoutError_InvalidFieldName enum -5)
(bind-lib libclang clang_Type_getAlignOf [i64,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Type_getClassType [CXType,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Type_getSizeOf [i64,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Type_getOffsetOf [i64,CXType,i8*]*
  "@param T - index 0
@param S - index 1")
(bind-lib libclang clang_Cursor_getOffsetOfField [i64,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_isAnonymous [i32,CXCursor]*
  "@param C - index 0")
(bind-alias CXRefQualifierKind enum)
(bind-val CXRefQualifier_None enum 0)
(bind-val CXRefQualifier_LValue enum 0)
(bind-val CXRefQualifier_RValue enum 0)
(bind-lib libclang clang_Type_getNumTemplateArguments [i32,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Type_getTemplateArgumentAsType [CXType,CXType,i32]*
  "@param T - index 0
@param i - index 1")
(bind-lib libclang clang_Type_getCXXRefQualifier [CXRefQualifierKind,CXType]*
  "@param T - index 0")
(bind-lib libclang clang_Cursor_isBitField [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_isVirtualBase [i32,CXCursor]*
  "@param  - index 0")
(bind-alias CX_CXXAccessSpecifier enum)
(bind-val CX_CXXInvalidAccessSpecifier enum 0)
(bind-val CX_CXXPublic enum 1)
(bind-val CX_CXXProtected enum 2)
(bind-val CX_CXXPrivate enum 3)
(bind-lib libclang clang_getCXXAccessSpecifier [CX_CXXAccessSpecifier,CXCursor]*
  "@param  - index 0")
(bind-alias CX_StorageClass enum)
(bind-val CX_SC_Invalid enum 0)
(bind-val CX_SC_None enum 1)
(bind-val CX_SC_Extern enum 2)
(bind-val CX_SC_Static enum 3)
(bind-val CX_SC_PrivateExtern enum 4)
(bind-val CX_SC_OpenCLWorkGroupLocal enum 5)
(bind-val CX_SC_Auto enum 6)
(bind-val CX_SC_Register enum 7)
(bind-lib libclang clang_Cursor_getStorageClass [CX_StorageClass,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_getNumOverloadedDecls [i32,CXCursor]*
  "@param cursor - index 0")
(bind-lib libclang clang_getOverloadedDecl [CXCursor,CXCursor,i32]*
  "@param cursor - index 0
@param index - index 1")
(bind-lib libclang clang_getIBOutletCollectionType [CXType,CXCursor]*
  "@param  - index 0")
(bind-alias CXChildVisitResult enum)
(bind-val CXChildVisit_Break enum 0)
(bind-val CXChildVisit_Continue enum 1)
(bind-val CXChildVisit_Recurse enum 2)
(bind-alias CXCursorVisitor [CXChildVisitResult,CXCursor,CXCursor,CXClientData]*
  "@param cursor - index 0
@param parent - index 1
@param client_data - index 2")
(bind-lib libclang clang_visitChildren [i32,CXCursor,CXCursorVisitor,CXClientData]*
  "@param parent - index 0
@param visitor - index 1
@param client_data - index 2")
(bind-lib libclang clang_getCursorUSR [CXString,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_constructUSR_ObjCClass [CXString,i8*]*
  "@param class_name - index 0")
(bind-lib libclang clang_constructUSR_ObjCCategory [CXString,i8*,i8*]*
  "@param class_name - index 0
@param category_name - index 1")
(bind-lib libclang clang_constructUSR_ObjCProtocol [CXString,i8*]*
  "@param protocol_name - index 0")
(bind-lib libclang clang_constructUSR_ObjCIvar [CXString,i8*,CXString]*
  "@param name - index 0
@param classUSR - index 1")
(bind-lib libclang clang_constructUSR_ObjCMethod [CXString,i8*,i32,CXString]*
  "@param name - index 0
@param isInstanceMethod - index 1
@param classUSR - index 2")
(bind-lib libclang clang_constructUSR_ObjCProperty [CXString,i8*,CXString]*
  "@param property - index 0
@param classUSR - index 1")
(bind-lib libclang clang_getCursorSpelling [CXString,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_Cursor_getSpellingNameRange [CXSourceRange,CXCursor,i32,i32]*
  "@param  - index 0
@param pieceIndex - index 1
@param options - index 2")
(bind-lib libclang clang_getCursorDisplayName [CXString,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_getCursorReferenced [CXCursor,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_getCursorDefinition [CXCursor,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_isCursorDefinition [i32,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_getCanonicalCursor [CXCursor,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_Cursor_getObjCSelectorIndex [i32,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_Cursor_isDynamicCall [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getReceiverType [CXType,CXCursor]*
  "@param C - index 0")
(bind-alias CXObjCPropertyAttrKind enum)
(bind-val CXObjCPropertyAttr_noattr CXObjCPropertyAttrKind #x00)
(bind-val CXObjCPropertyAttr_readonly CXObjCPropertyAttrKind #x01)
(bind-val CXObjCPropertyAttr_getter CXObjCPropertyAttrKind #x02)
(bind-val CXObjCPropertyAttr_assign CXObjCPropertyAttrKind #x04)
(bind-val CXObjCPropertyAttr_readwrite CXObjCPropertyAttrKind #x08)
(bind-val CXObjCPropertyAttr_retain CXObjCPropertyAttrKind #x10)
(bind-val CXObjCPropertyAttr_copy CXObjCPropertyAttrKind #x20)
(bind-val CXObjCPropertyAttr_nonatomic CXObjCPropertyAttrKind #x40)
(bind-val CXObjCPropertyAttr_setter CXObjCPropertyAttrKind #x80)
(bind-val CXObjCPropertyAttr_atomic CXObjCPropertyAttrKind #x100)
(bind-val CXObjCPropertyAttr_weak CXObjCPropertyAttrKind #x200)
(bind-val CXObjCPropertyAttr_strong CXObjCPropertyAttrKind #x400)
(bind-val CXObjCPropertyAttr_unsafe_unretained CXObjCPropertyAttrKind #x800)
(bind-val CXObjCPropertyAttr_class CXObjCPropertyAttrKind #x1000)
(bind-lib libclang clang_Cursor_getObjCPropertyAttributes [i32,CXCursor,i32]*
  "@param C - index 0
@param reserved - index 1")
(bind-alias CXObjCDeclQualifierKind enum)
(bind-val CXObjCDeclQualifier_None CXObjCDeclQualifierKind #x0)
(bind-val CXObjCDeclQualifier_In CXObjCDeclQualifierKind #x1)
(bind-val CXObjCDeclQualifier_Inout CXObjCDeclQualifierKind #x2)
(bind-val CXObjCDeclQualifier_Out CXObjCDeclQualifierKind #x4)
(bind-val CXObjCDeclQualifier_Bycopy CXObjCDeclQualifierKind #x8)
(bind-val CXObjCDeclQualifier_Byref CXObjCDeclQualifierKind #x10)
(bind-val CXObjCDeclQualifier_Oneway CXObjCDeclQualifierKind #x20)
(bind-lib libclang clang_Cursor_getObjCDeclQualifiers [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_isObjCOptional [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_isVariadic [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_isExternalSymbol [i32,CXCursor,CXString*,CXString*,i32*]*
  "@param C - index 0
@param language - index 1
@param definedIn - index 2
@param isGenerated - index 3")
(bind-lib libclang clang_Cursor_getCommentRange [CXSourceRange,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getRawCommentText [CXString,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getBriefCommentText [CXString,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_Cursor_getMangling [CXString,CXCursor]*
  "@param  - index 0")
(bind-lib libclang clang_Cursor_getCXXManglings [CXStringSet*,CXCursor]*
  "@param  - index 0")
(bind-alias CXModule i8)
(bind-lib libclang clang_Cursor_getModule [CXModule,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getModuleForFile [CXModule,CXTranslationUnit,CXFile]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_Module_getASTFile [CXFile,CXModule]*
  "@param Module - index 0")
(bind-lib libclang clang_Module_getParent [CXModule,CXModule]*
  "@param Module - index 0")
(bind-lib libclang clang_Module_getName [CXString,CXModule]*
  "@param Module - index 0")
(bind-lib libclang clang_Module_getFullName [CXString,CXModule]*
  "@param Module - index 0")
(bind-lib libclang clang_Module_isSystem [i32,CXModule]*
  "@param Module - index 0")
(bind-lib libclang clang_Module_getNumTopLevelHeaders [i32,CXTranslationUnit,CXModule]*
  "@param  - index 0
@param Module - index 1")
(bind-lib libclang clang_Module_getTopLevelHeader [CXFile,CXTranslationUnit,CXModule,i32]*
  "@param  - index 0
@param Module - index 1
@param Index - index 2")
(bind-lib libclang clang_CXXConstructor_isConvertingConstructor [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXConstructor_isCopyConstructor [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXConstructor_isDefaultConstructor [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXConstructor_isMoveConstructor [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXField_isMutable [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXMethod_isDefaulted [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXMethod_isPureVirtual [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXMethod_isStatic [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXMethod_isVirtual [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_EnumDecl_isScoped [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_CXXMethod_isConst [i32,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getTemplateCursorKind [CXCursorKind,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getSpecializedCursorTemplate [CXCursor,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_getCursorReferenceNameRange [CXSourceRange,CXCursor,i32,i32]*
  "@param C - index 0
@param NameFlags - index 1
@param PieceIndex - index 2")
(bind-alias CXNameRefFlags enum)
(bind-val CXNameRange_WantQualifier enum #x1)
(bind-val CXNameRange_WantTemplateArgs enum #x2)
(bind-val CXNameRange_WantSinglePiece enum #x4)
(bind-alias CXTokenKind enum)
(bind-val CXToken_Punctuation enum 0)
(bind-val CXToken_Keyword enum 1)
(bind-val CXToken_Identifier enum 2)
(bind-val CXToken_Literal enum 3)
(bind-val CXToken_Comment enum 4)
(bind-type CXToken <i32*,i8*>
  "@member int_data - index 0
@member ptr_data - index 1")
(bind-lib libclang clang_getTokenKind [CXTokenKind,CXToken]*
  "@param  - index 0")
(bind-lib libclang clang_getTokenSpelling [CXString,CXTranslationUnit,CXToken]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_getTokenLocation [CXSourceLocation,CXTranslationUnit,CXToken]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_getTokenExtent [CXSourceRange,CXTranslationUnit,CXToken]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_tokenize [void,CXTranslationUnit,CXSourceRange,CXToken**,i32*]*
  "@param TU - index 0
@param Range - index 1
@param Tokens - index 2
@param NumTokens - index 3")
(bind-lib libclang clang_annotateTokens [void,CXTranslationUnit,CXToken*,i32,CXCursor*]*
  "@param TU - index 0
@param Tokens - index 1
@param NumTokens - index 2
@param Cursors - index 3")
(bind-lib libclang clang_disposeTokens [void,CXTranslationUnit,CXToken*,i32]*
  "@param TU - index 0
@param Tokens - index 1
@param NumTokens - index 2")
(bind-lib libclang clang_getCursorKindSpelling [CXString,CXCursorKind]*
  "@param Kind - index 0")
(bind-lib libclang clang_getDefinitionSpellingAndExtent [void,CXCursor,i8**,i8**,i32*,i32*,i32*,i32*]*
  "@param  - index 0
@param startBuf - index 1
@param endBuf - index 2
@param startLine - index 3
@param startColumn - index 4
@param endLine - index 5
@param endColumn - index 6")
(bind-lib libclang clang_enableStackTraces [void]*
  "")
(bind-lib libclang clang_executeOnThread [void,i8,i8*,i32]*
  "@param fn - index 0
@param user_data - index 1
@param stack_size - index 2")
(bind-alias CXCompletionString i8)
(bind-type CXCompletionResult <CXCursorKind,CXCompletionString>
  "@member CursorKind - index 0
@member CompletionString - index 1")
(bind-alias CXCompletionChunkKind enum)
(bind-val CXCompletionChunk_Optional enum 0)
(bind-val CXCompletionChunk_TypedText enum 1)
(bind-val CXCompletionChunk_Text enum 2)
(bind-val CXCompletionChunk_Placeholder enum 3)
(bind-val CXCompletionChunk_Informative enum 4)
(bind-val CXCompletionChunk_CurrentParameter enum 5)
(bind-val CXCompletionChunk_LeftParen enum 6)
(bind-val CXCompletionChunk_RightParen enum 7)
(bind-val CXCompletionChunk_LeftBracket enum 8)
(bind-val CXCompletionChunk_RightBracket enum 9)
(bind-val CXCompletionChunk_LeftBrace enum 10)
(bind-val CXCompletionChunk_RightBrace enum 11)
(bind-val CXCompletionChunk_LeftAngle enum 12)
(bind-val CXCompletionChunk_RightAngle enum 13)
(bind-val CXCompletionChunk_Comma enum 14)
(bind-val CXCompletionChunk_ResultType enum 15)
(bind-val CXCompletionChunk_Colon enum 16)
(bind-val CXCompletionChunk_SemiColon enum 17)
(bind-val CXCompletionChunk_Equal enum 18)
(bind-val CXCompletionChunk_HorizontalSpace enum 19)
(bind-val CXCompletionChunk_VerticalSpace enum 20)
(bind-lib libclang clang_getCompletionChunkKind [CXCompletionChunkKind,CXCompletionString,i32]*
  "@param completion_string - index 0
@param chunk_number - index 1")
(bind-lib libclang clang_getCompletionChunkText [CXString,CXCompletionString,i32]*
  "@param completion_string - index 0
@param chunk_number - index 1")
(bind-lib libclang clang_getCompletionChunkCompletionString [CXCompletionString,CXCompletionString,i32]*
  "@param completion_string - index 0
@param chunk_number - index 1")
(bind-lib libclang clang_getNumCompletionChunks [i32,CXCompletionString]*
  "@param completion_string - index 0")
(bind-lib libclang clang_getCompletionPriority [i32,CXCompletionString]*
  "@param completion_string - index 0")
(bind-lib libclang clang_getCompletionAvailability [CXAvailabilityKind,CXCompletionString]*
  "@param completion_string - index 0")
(bind-lib libclang clang_getCompletionNumAnnotations [i32,CXCompletionString]*
  "@param completion_string - index 0")
(bind-lib libclang clang_getCompletionAnnotation [CXString,CXCompletionString,i32]*
  "@param completion_string - index 0
@param annotation_number - index 1")
(bind-lib libclang clang_getCompletionParent [CXString,CXCompletionString,CXCursorKind*]*
  "@param completion_string - index 0
@param kind - index 1")
(bind-lib libclang clang_getCompletionBriefComment [CXString,CXCompletionString]*
  "@param completion_string - index 0")
(bind-lib libclang clang_getCursorCompletionString [CXCompletionString,CXCursor]*
  "@param cursor - index 0")
(bind-type CXCodeCompleteResults <CXCompletionResult*,i32>
  "@member Results - index 0
@member NumResults - index 1")
(bind-alias CXCodeComplete_Flags enum)
(bind-val CXCodeComplete_IncludeMacros enum #x01)
(bind-val CXCodeComplete_IncludeCodePatterns enum #x02)
(bind-val CXCodeComplete_IncludeBriefComments enum #x04)
(bind-alias CXCompletionContext enum)
(bind-val CXCompletionContext_Unexposed enum 0)
(bind-val CXCompletionContext_AnyType enum 1)
(bind-val CXCompletionContext_AnyValue enum 1)
(bind-val CXCompletionContext_ObjCObjectValue enum 1)
(bind-val CXCompletionContext_ObjCSelectorValue enum 1)
(bind-val CXCompletionContext_CXXClassTypeValue enum 1)
(bind-val CXCompletionContext_DotMemberAccess enum 1)
(bind-val CXCompletionContext_ArrowMemberAccess enum 1)
(bind-val CXCompletionContext_ObjCPropertyAccess enum 1)
(bind-val CXCompletionContext_EnumTag enum 1)
(bind-val CXCompletionContext_UnionTag enum 1)
(bind-val CXCompletionContext_StructTag enum 1)
(bind-val CXCompletionContext_ClassTag enum 1)
(bind-val CXCompletionContext_Namespace enum 1)
(bind-val CXCompletionContext_NestedNameSpecifier enum 1)
(bind-val CXCompletionContext_ObjCInterface enum 1)
(bind-val CXCompletionContext_ObjCProtocol enum 1)
(bind-val CXCompletionContext_ObjCCategory enum 1)
(bind-val CXCompletionContext_ObjCInstanceMessage enum 1)
(bind-val CXCompletionContext_ObjCClassMessage enum 1)
(bind-val CXCompletionContext_ObjCSelectorName enum 1)
(bind-val CXCompletionContext_MacroName enum 1)
(bind-val CXCompletionContext_NaturalLanguage enum 1)
(bind-val CXCompletionContext_Unknown enum (- (<< 1 22) 1))
(bind-lib libclang clang_defaultCodeCompleteOptions [i32]*
  "")
(bind-lib libclang clang_codeCompleteAt [CXCodeCompleteResults*,CXTranslationUnit,i8*,i32,i32,CXUnsavedFile*,i32,i32]*
  "@param TU - index 0
@param complete_filename - index 1
@param complete_line - index 2
@param complete_column - index 3
@param unsaved_files - index 4
@param num_unsaved_files - index 5
@param options - index 6")
(bind-lib libclang clang_sortCodeCompletionResults [void,CXCompletionResult*,i32]*
  "@param Results - index 0
@param NumResults - index 1")
(bind-lib libclang clang_disposeCodeCompleteResults [void,CXCodeCompleteResults*]*
  "@param Results - index 0")
(bind-lib libclang clang_codeCompleteGetNumDiagnostics [i32,CXCodeCompleteResults*]*
  "@param Results - index 0")
(bind-lib libclang clang_codeCompleteGetDiagnostic [CXDiagnostic,CXCodeCompleteResults*,i32]*
  "@param Results - index 0
@param Index - index 1")
(bind-lib libclang clang_codeCompleteGetContexts [i64,CXCodeCompleteResults*]*
  "@param Results - index 0")
(bind-lib libclang clang_codeCompleteGetContainerKind [CXCursorKind,CXCodeCompleteResults*,i32*]*
  "@param Results - index 0
@param IsIncomplete - index 1")
(bind-lib libclang clang_codeCompleteGetContainerUSR [CXString,CXCodeCompleteResults*]*
  "@param Results - index 0")
(bind-lib libclang clang_codeCompleteGetObjCSelector [CXString,CXCodeCompleteResults*]*
  "@param Results - index 0")
(bind-lib libclang clang_getClangVersion [CXString]*
  "")
(bind-lib libclang clang_toggleCrashRecovery [void,i32]*
  "@param isEnabled - index 0")
(bind-alias CXInclusionVisitor [void,CXFile,CXSourceLocation*,i32,CXClientData]*
  "@param included_file - index 0
@param inclusion_stack - index 1
@param include_len - index 2
@param client_data - index 3")
(bind-lib libclang clang_getInclusions [void,CXTranslationUnit,CXInclusionVisitor,CXClientData]*
  "@param tu - index 0
@param visitor - index 1
@param client_data - index 2")
(bind-alias CXEvalResultKind enum)
(bind-val CXEval_Int CXEvalResultKind 1)
(bind-val CXEval_Float CXEvalResultKind 2)
(bind-val CXEval_ObjCStrLiteral CXEvalResultKind 3)
(bind-val CXEval_StrLiteral CXEvalResultKind 4)
(bind-val CXEval_CFStr CXEvalResultKind 5)
(bind-val CXEval_Other CXEvalResultKind 6)
(bind-val CXEval_UnExposed CXEvalResultKind 0)
(bind-alias CXEvalResult i8)
(bind-lib libclang clang_Cursor_Evaluate [CXEvalResult,CXCursor]*
  "@param C - index 0")
(bind-lib libclang clang_EvalResult_getKind [CXEvalResultKind,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_getAsInt [i32,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_getAsLongLong [i64,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_isUnsignedInt [i32,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_getAsUnsigned [i64,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_getAsDouble [double,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_getAsStr [i8*,CXEvalResult]*
  "@param E - index 0")
(bind-lib libclang clang_EvalResult_dispose [void,CXEvalResult]*
  "@param E - index 0")
(bind-alias CXRemapping i8)
(bind-lib libclang clang_getRemappings [CXRemapping,i8*]*
  "@param path - index 0")
(bind-lib libclang clang_getRemappingsFromFileList [CXRemapping,i8**,i32]*
  "@param filePaths - index 0
@param numFiles - index 1")
(bind-lib libclang clang_remap_getNumFiles [i32,CXRemapping]*
  "@param  - index 0")
(bind-lib libclang clang_remap_getFilenames [void,CXRemapping,i32,CXString*,CXString*]*
  "@param  - index 0
@param index - index 1
@param original - index 2
@param transformed - index 3")
(bind-lib libclang clang_remap_dispose [void,CXRemapping]*
  "@param  - index 0")
(bind-alias CXVisitorResult enum)
(bind-val CXVisit_Break enum 0)
(bind-val CXVisit_Continue enum 1)
(bind-type CXCursorAndRangeVisitor <i8*,CXVisitorResult>
  "@member context - index 0
@member visit - index 1")
(bind-alias CXResult enum)
(bind-val CXResult_Success CXResult 0)
(bind-val CXResult_Invalid CXResult 1)
(bind-val CXResult_VisitBreak CXResult 2)
(bind-lib libclang clang_findReferencesInFile [CXResult,CXCursor,CXFile,CXCursorAndRangeVisitor]*
  "@param cursor - index 0
@param file - index 1
@param visitor - index 2")
(bind-lib libclang clang_findIncludesInFile [CXResult,CXTranslationUnit,CXFile,CXCursorAndRangeVisitor]*
  "@param TU - index 0
@param file - index 1
@param visitor - index 2")
(bind-alias CXIdxClientFile i8)
(bind-alias CXIdxClientEntity i8)
(bind-alias CXIdxClientContainer i8)
(bind-alias CXIdxClientASTFile i8)
(bind-type CXIdxLoc <i8*,i32>
  "@member ptr_data - index 0
@member int_data - index 1")
(bind-type CXIdxIncludedFileInfo <CXIdxLoc,i8*,CXFile,i32,i32,i32>
  "@member hashLoc - index 0
@member filename - index 1
@member file - index 2
@member isImport - index 3
@member isAngled - index 4
@member isModuleImport - index 5")
(bind-type CXIdxImportedASTFileInfo <CXFile,CXModule,CXIdxLoc,i32>
  "@member file - index 0
@member module - index 1
@member loc - index 2
@member isImplicit - index 3")
(bind-alias CXIdxEntityKind enum)
(bind-val CXIdxEntity_Unexposed CXIdxEntityKind 0)
(bind-val CXIdxEntity_Typedef CXIdxEntityKind 1)
(bind-val CXIdxEntity_Function CXIdxEntityKind 2)
(bind-val CXIdxEntity_Variable CXIdxEntityKind 3)
(bind-val CXIdxEntity_Field CXIdxEntityKind 4)
(bind-val CXIdxEntity_EnumConstant CXIdxEntityKind 5)
(bind-val CXIdxEntity_ObjCClass CXIdxEntityKind 6)
(bind-val CXIdxEntity_ObjCProtocol CXIdxEntityKind 7)
(bind-val CXIdxEntity_ObjCCategory CXIdxEntityKind 8)
(bind-val CXIdxEntity_ObjCInstanceMethod CXIdxEntityKind 9)
(bind-val CXIdxEntity_ObjCClassMethod CXIdxEntityKind 10)
(bind-val CXIdxEntity_ObjCProperty CXIdxEntityKind 11)
(bind-val CXIdxEntity_ObjCIvar CXIdxEntityKind 12)
(bind-val CXIdxEntity_Enum CXIdxEntityKind 13)
(bind-val CXIdxEntity_Struct CXIdxEntityKind 14)
(bind-val CXIdxEntity_Union CXIdxEntityKind 15)
(bind-val CXIdxEntity_CXXClass CXIdxEntityKind 16)
(bind-val CXIdxEntity_CXXNamespace CXIdxEntityKind 17)
(bind-val CXIdxEntity_CXXNamespaceAlias CXIdxEntityKind 18)
(bind-val CXIdxEntity_CXXStaticVariable CXIdxEntityKind 19)
(bind-val CXIdxEntity_CXXStaticMethod CXIdxEntityKind 20)
(bind-val CXIdxEntity_CXXInstanceMethod CXIdxEntityKind 21)
(bind-val CXIdxEntity_CXXConstructor CXIdxEntityKind 22)
(bind-val CXIdxEntity_CXXDestructor CXIdxEntityKind 23)
(bind-val CXIdxEntity_CXXConversionFunction CXIdxEntityKind 24)
(bind-val CXIdxEntity_CXXTypeAlias CXIdxEntityKind 25)
(bind-val CXIdxEntity_CXXInterface CXIdxEntityKind 26)
(bind-alias CXIdxEntityLanguage enum)
(bind-val CXIdxEntityLang_None CXIdxEntityLanguage 0)
(bind-val CXIdxEntityLang_C CXIdxEntityLanguage 1)
(bind-val CXIdxEntityLang_ObjC CXIdxEntityLanguage 2)
(bind-val CXIdxEntityLang_CXX CXIdxEntityLanguage 3)
(bind-val CXIdxEntityLang_Swift CXIdxEntityLanguage 4)
(bind-alias CXIdxEntityCXXTemplateKind enum)
(bind-val CXIdxEntity_NonTemplate CXIdxEntityCXXTemplateKind 0)
(bind-val CXIdxEntity_Template CXIdxEntityCXXTemplateKind 1)
(bind-val CXIdxEntity_TemplatePartialSpecialization CXIdxEntityCXXTemplateKind 2)
(bind-val CXIdxEntity_TemplateSpecialization CXIdxEntityCXXTemplateKind 3)
(bind-alias CXIdxAttrKind enum)
(bind-val CXIdxAttr_Unexposed CXIdxAttrKind 0)
(bind-val CXIdxAttr_IBAction CXIdxAttrKind 1)
(bind-val CXIdxAttr_IBOutlet CXIdxAttrKind 2)
(bind-val CXIdxAttr_IBOutletCollection CXIdxAttrKind 3)
(bind-type CXIdxAttrInfo <CXIdxAttrKind,CXCursor,CXIdxLoc>
  "@member kind - index 0
@member cursor - index 1
@member loc - index 2")
(bind-type CXIdxEntityInfo <CXIdxEntityKind,CXIdxEntityCXXTemplateKind,CXIdxEntityLanguage,i8*,i8*,CXCursor,CXIdxAttrInfo**,i32>
  "@member kind - index 0
@member templateKind - index 1
@member lang - index 2
@member name - index 3
@member USR - index 4
@member cursor - index 5
@member attributes - index 6
@member numAttributes - index 7")
(bind-type CXIdxContainerInfo <CXCursor>
  "@member cursor - index 0")
(bind-type CXIdxIBOutletCollectionAttrInfo <CXIdxAttrInfo*,CXIdxEntityInfo*,CXCursor,CXIdxLoc>
  "@member attrInfo - index 0
@member objcClass - index 1
@member classCursor - index 2
@member classLoc - index 3")
(bind-alias CXIdxDeclInfoFlags enum)
(bind-val CXIdxDeclFlag_Skipped CXIdxDeclInfoFlags #x1)
(bind-type CXIdxDeclInfo <CXIdxEntityInfo*,CXCursor,CXIdxLoc,CXIdxContainerInfo*,CXIdxContainerInfo*,i32,i32,i32,CXIdxContainerInfo*,i32,CXIdxAttrInfo**,i32,i32>
  "@member entityInfo - index 0
@member cursor - index 1
@member loc - index 2
@member semanticContainer - index 3
@member lexicalContainer - index 4
@member isRedeclaration - index 5
@member isDefinition - index 6
@member isContainer - index 7
@member declAsContainer - index 8
@member isImplicit - index 9
@member attributes - index 10
@member numAttributes - index 11
@member flags - index 12")
(bind-alias CXIdxObjCContainerKind enum)
(bind-val CXIdxObjCContainer_ForwardRef CXIdxObjCContainerKind 0)
(bind-val CXIdxObjCContainer_Interface CXIdxObjCContainerKind 1)
(bind-val CXIdxObjCContainer_Implementation CXIdxObjCContainerKind 2)
(bind-type CXIdxObjCContainerDeclInfo <CXIdxDeclInfo*,CXIdxObjCContainerKind>
  "@member declInfo - index 0
@member kind - index 1")
(bind-type CXIdxBaseClassInfo <CXIdxEntityInfo*,CXCursor,CXIdxLoc>
  "@member base - index 0
@member cursor - index 1
@member loc - index 2")
(bind-type CXIdxObjCProtocolRefInfo <CXIdxEntityInfo*,CXCursor,CXIdxLoc>
  "@member protocol - index 0
@member cursor - index 1
@member loc - index 2")
(bind-type CXIdxObjCProtocolRefListInfo <CXIdxObjCProtocolRefInfo**,i32>
  "@member protocols - index 0
@member numProtocols - index 1")
(bind-type CXIdxObjCInterfaceDeclInfo <CXIdxObjCContainerDeclInfo*,CXIdxBaseClassInfo*,CXIdxObjCProtocolRefListInfo*>
  "@member containerInfo - index 0
@member superInfo - index 1
@member protocols - index 2")
(bind-type CXIdxObjCCategoryDeclInfo <CXIdxObjCContainerDeclInfo*,CXIdxEntityInfo*,CXCursor,CXIdxLoc,CXIdxObjCProtocolRefListInfo*>
  "@member containerInfo - index 0
@member objcClass - index 1
@member classCursor - index 2
@member classLoc - index 3
@member protocols - index 4")
(bind-type CXIdxObjCPropertyDeclInfo <CXIdxDeclInfo*,CXIdxEntityInfo*,CXIdxEntityInfo*>
  "@member declInfo - index 0
@member getter - index 1
@member setter - index 2")
(bind-type CXIdxCXXClassDeclInfo <CXIdxDeclInfo*,CXIdxBaseClassInfo**,i32>
  "@member declInfo - index 0
@member bases - index 1
@member numBases - index 2")
(bind-alias CXIdxEntityRefKind enum)
(bind-val CXIdxEntityRef_Direct CXIdxEntityRefKind 1)
(bind-val CXIdxEntityRef_Implicit CXIdxEntityRefKind 2)
(bind-type CXIdxEntityRefInfo <CXIdxEntityRefKind,CXCursor,CXIdxLoc,CXIdxEntityInfo*,CXIdxEntityInfo*,CXIdxContainerInfo*>
  "@member kind - index 0
@member cursor - index 1
@member loc - index 2
@member referencedEntity - index 3
@member parentEntity - index 4
@member container - index 5")
(bind-type IndexerCallbacks <i32,i8,CXIdxClientFile,CXIdxClientFile,CXIdxClientASTFile,CXIdxClientContainer,i8,i8>
  "@member abortQuery - index 0
@member diagnostic - index 1
@member enteredMainFile - index 2
@member ppIncludedFile - index 3
@member importedASTFile - index 4
@member startedTranslationUnit - index 5
@member indexDeclaration - index 6
@member indexEntityReference - index 7")
(bind-lib libclang clang_index_isEntityObjCContainerKind [i32,CXIdxEntityKind]*
  "@param  - index 0")
(bind-lib libclang clang_index_getObjCContainerDeclInfo [CXIdxObjCContainerDeclInfo*,CXIdxDeclInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getObjCInterfaceDeclInfo [CXIdxObjCInterfaceDeclInfo*,CXIdxDeclInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getObjCCategoryDeclInfo [CXIdxObjCCategoryDeclInfo*,CXIdxDeclInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getObjCProtocolRefListInfo [CXIdxObjCProtocolRefListInfo*,CXIdxDeclInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getObjCPropertyDeclInfo [CXIdxObjCPropertyDeclInfo*,CXIdxDeclInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getIBOutletCollectionAttrInfo [CXIdxIBOutletCollectionAttrInfo*,CXIdxAttrInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getCXXClassDeclInfo [CXIdxCXXClassDeclInfo*,CXIdxDeclInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_getClientContainer [CXIdxClientContainer,CXIdxContainerInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_setClientContainer [void,CXIdxContainerInfo*,CXIdxClientContainer]*
  "@param  - index 0
@param  - index 1")
(bind-lib libclang clang_index_getClientEntity [CXIdxClientEntity,CXIdxEntityInfo*]*
  "@param  - index 0")
(bind-lib libclang clang_index_setClientEntity [void,CXIdxEntityInfo*,CXIdxClientEntity]*
  "@param  - index 0
@param  - index 1")
(bind-alias CXIndexAction i8)
(bind-lib libclang clang_IndexAction_create [CXIndexAction,CXIndex]*
  "@param CIdx - index 0")
(bind-lib libclang clang_IndexAction_dispose [void,CXIndexAction]*
  "@param  - index 0")
(bind-alias CXIndexOptFlags enum)
(bind-val CXIndexOpt_None CXIndexOptFlags #x0)
(bind-val CXIndexOpt_SuppressRedundantRefs CXIndexOptFlags #x1)
(bind-val CXIndexOpt_IndexFunctionLocalSymbols CXIndexOptFlags #x2)
(bind-val CXIndexOpt_IndexImplicitTemplateInstantiations CXIndexOptFlags #x4)
(bind-val CXIndexOpt_SuppressWarnings CXIndexOptFlags #x8)
(bind-val CXIndexOpt_SkipParsedBodiesInSession CXIndexOptFlags #x10)
(bind-lib libclang clang_indexSourceFile [i32,CXIndexAction,CXClientData,IndexerCallbacks*,i32,i32,i8*,i8**,i32,CXUnsavedFile*,i32,CXTranslationUnit*,i32]*
  "@param  - index 0
@param client_data - index 1
@param index_callbacks - index 2
@param index_callbacks_size - index 3
@param index_options - index 4
@param source_filename - index 5
@param command_line_args - index 6
@param num_command_line_args - index 7
@param unsaved_files - index 8
@param num_unsaved_files - index 9
@param out_TU - index 10
@param TU_options - index 11")
(bind-lib libclang clang_indexSourceFileFullArgv [i32,CXIndexAction,CXClientData,IndexerCallbacks*,i32,i32,i8*,i8**,i32,CXUnsavedFile*,i32,CXTranslationUnit*,i32]*
  "@param  - index 0
@param client_data - index 1
@param index_callbacks - index 2
@param index_callbacks_size - index 3
@param index_options - index 4
@param source_filename - index 5
@param command_line_args - index 6
@param num_command_line_args - index 7
@param unsaved_files - index 8
@param num_unsaved_files - index 9
@param out_TU - index 10
@param TU_options - index 11")
(bind-lib libclang clang_indexTranslationUnit [i32,CXIndexAction,CXClientData,IndexerCallbacks*,i32,i32,CXTranslationUnit]*
  "@param  - index 0
@param client_data - index 1
@param index_callbacks - index 2
@param index_callbacks_size - index 3
@param index_options - index 4
@param  - index 5")
(bind-lib libclang clang_indexLoc_getFileLocation [void,CXIdxLoc,CXIdxClientFile*,CXFile*,i32*,i32*,i32*]*
  "@param loc - index 0
@param indexFile - index 1
@param file - index 2
@param line - index 3
@param column - index 4
@param offset - index 5")
(bind-lib libclang clang_indexLoc_getCXSourceLocation [CXSourceLocation,CXIdxLoc]*
  "@param loc - index 0")
(bind-alias CXFieldVisitor [CXVisitorResult,CXCursor,CXClientData]*
  "@param C - index 0
@param client_data - index 1")
(bind-lib libclang clang_Type_visitFields [i32,CXType,CXFieldVisitor,CXClientData]*
  "@param T - index 0
@param visitor - index 1
@param client_data - index 2")

(impc:aot:insert-footer "xtmlibclang")
(define *xtmlib-libclang-loaded* #t)
