;;; fitslib.xtm -- FITS library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libcfitsio.so.3, libwcs.so.4.13.4

;;; Commentary:

;;

;;; Code:

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/fits.xtm" 'quiet))
(sys:load-preload-check 'fits)
(define *xtmlib-fits-loaded* #t)

;; (impc:aot:suppress-aot-do
;;  (sys:load "libs/base/base.xtm"))
;; (impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmfits")

(bind-dylib fitslib
  (cond ((string=? (sys:platform) "OSX") "libcfitsio.dylib")
        ((string=? (sys:platform) "Linux") "libcfitsio.so.3")
        ((string=? (sys:platform) "Windows") "cfitsio.dll")))

(bind-dylib wcslib
  (cond ((string=? (sys:platform) "OSX") "libwcs.dylib")
        ((string=? (sys:platform) "Linux") "libwcs.so.4")
        ((string=? (sys:platform) "Windows") "libwcs.dll")))


;; should really add this struct (wcsprm) from wcslib
(bind-alias wcsprm i8)
(bind-alias fitsfile i8)
;; typedef struct {
;;    int  i;                      /* Image axis number.                       */
;;    int  m;                      /* Array axis number for index vectors.     */
;;    int  kind;                   /* Array type, 'c' (coord) or 'i' (index).  */
;;    char extnam[72];             /* EXTNAME of binary table extension.       */
;;    int  extver;                 /* EXTVER  of binary table extension.       */
;;    int  extlev;                 /* EXTLEV  of binary table extension.       */
;;    char ttype[72];              /* TTYPEn of column containing the array.   */
;;    long row;                    /* Table row number.                        */
;;    int  ndim;                   /* Expected array dimensionality.           */
;;    int  *dimlen;                /* Where to write the array axis lengths.   */
;;    double **arrayp;             /* Where to write the address of the array  */
;;                                 /* allocated to store the array.            */
;; } wtbarr;
(bind-type wtbarr <i32,i32,i32,|72,i8|,i32,i32,|72,i8|,i64,i32,i32*,double**>)


;; types
(bind-val TBIT         i32  1)
(bind-val TBYTE        i32 11)
(bind-val TLOGICAL     i32 14)
(bind-val TSTRING      i32 16)
(bind-val TSHORT       i32 21)
(bind-val TLONG        i32 41)
(bind-val TLONGLONG    i32 81)
(bind-val TFLOAT       i32 42)
(bind-val TDOUBLE      i32 82)
(bind-val TCOMPLEX     i32 83)
(bind-val TDBLCOMPLEX  i32 163)
(bind-val TINT         i32 31)
(bind-val TSBYTE       i32 12)
(bind-val TUINT        i32 30)
(bind-val TUSHORT      i32 20)
(bind-val TULONG       i32 40)

;; header unit types
(bind-val IMAGE_HDU  i32 0) ;  /* Primary Array or IMAGE HDU */
(bind-val ASCII_TBL  i32 1) ;  /* ASCII  table HDU */
(bind-val BINARY_TBL i32 2)  ;  /* Binary table HDU */
(bind-val ANY_HDU    i32 -1)  ;  /* matches any type of HDU */



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FITS FILE FUNCTIONS

;; fits_open_file
;; int ffopen(fitsfile **fptr, const char *filename, int iomode, int *status);
(bind-lib fitslib ffopen [i32,fitsfile**,i8*,i32,i32*]*)

;; fits_close_file
;; int ffclos(fitsfile *fptr, int *status);
(bind-lib fitslib ffclos [i32,fitsfile*,i32*]*)

;; fits_open_data
;; int ffdopn(fitsfile **fptr, const char *filename, int iomode, int *status);
(bind-lib fitslib ffdopn [i32,fitsfile**,i8*,i32,i32*]*)

;; fits_open_table
;; int fftopn(fitsfile **fptr, const char *filename, int iomode, int *status);
(bind-lib fitslib fftopn [i32,fitsfile**,i8*,i32,i32*]*)

;; fits_open_image
;; int ffiopn(fitsfile **fptr, const char *filename, int iomode, int *status);
(bind-lib fitslib ffiopn [i32,fitsfile**,i8*,i32,i32*]*)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GET HDU (file header) INFO

;; fits_get_img_size
;; int ffgisz(fitsfile *fptr, int nlen, long *naxes, int *status);
(bind-lib fitslib ffgisz [i32,fitsfile*,i32,i64*,i32*]*)

;; fits_get_img_type
;; int ffgidt(fitsfile *fptr, int *imgtype, int *status);
(bind-lib fitslib ffgidt [i32,fitsfile*,i32*,i32*]*)

;; fits_get_img_dim
;; int ffgidm(fitsfile *fptr, int *naxis,  int *status);
(bind-lib fitslib ffgidm [i32,fitsfile*,i32*,i32*]*)

;; fits_movabs_hdu
;; int ffmahd(fitsfile *fptr, int hdunum, int *exttype, int *status);
(bind-lib fitslib ffmahd [i32,fitsfile*,i32,i32*,i32*]*)

;; fits_get_num_hdus
;;int ffthdu(fitsfile *fptr, int *nhdu, int *status);
(bind-lib fitslib ffthdu [i32,fitsfile*,i32*,i32*]*)

;; fits_get_hdrspace
;; int ffghsp(fitsfile *fptr, int *nexist, int *nmore, int *status);
(bind-lib fitslib ffghsp [i32,fitsfile*,i32*,i32*]*)

;; fits_get_hdrpos
;; int ffghps(fitsfile *fptr, int *nexist, int *position, int *status);
(bind-lib fitslib ffghps [i32,fitsfile*,i32*,i32*,i32*]*)

;; fits_read_record
;; int ffgrec(fitsfile *fptr, int nrec,      char *card, int *status);
(bind-lib fitslib ffgrec [i32,fitsfile*,i32,i8*,i32*]*)

;; fits_read_card
;; int ffgcrd(fitsfile *fptr, const char *keyname, char *card, int *status);
(bind-lib fitslib ffgcrd [i32,fitsfile*,i8*,i8*,i32*]*)

;; fits_read_str
;; int ffgstr(fitsfile *fptr, const char *string, char *card, int *status);
(bind-lib fitslib ffgstr [i32,fitsfile*,i8*,i8*,i32*]*)

;; fits_read_keys_str     ffgkns
;; int ffgkns(fitsfile *fptr, const char *keyname, int nstart, int nmax, char *value[],
;;           int *nfound,  int *status);
(bind-lib fitslib ffgkns [i32,fitsfile*,i8*,i32,i32,i8*,i32*,i32*]*)

;; fits_read_keys_log     ffgknl
;; int ffgknl(fitsfile *fptr, const char *keyname, int nstart, int nmax, int *value,
;;           int *nfound, int *status);
(bind-lib fitslib ffgknl [i32,fitsfile*,i8*,i32,i32,i32*,i32*,i32*]*)

;; fits_read_keys_lng     ffgknj
;; int ffgknj(fitsfile *fptr, const char *keyname, int nstart, int nmax, long *value,
;;            int *nfound, int *status);
(bind-lib fitslib ffgknj [i32,fitsfile*,i8*,i32,i32,i64*,i32*,i32*]*)

;; fits_read_keys_lnglng  ffgknjj
;; int ffgknjj(fitsfile *fptr, const char *keyname, int nstart, int nmax, LONGLONG *value,
;;            int *nfound, int *status);
(bind-lib fitslib ffgknjj [i32,fitsfile*,i8*,i32,i32,i64*,i32*,i32*]*)

;; fits_read_keys_flt     ffgkne
;; int ffgkne(fitsfile *fptr, const char *keyname, int nstart, int nmax, float *value,
;;            int *nfound, int *status);
(bind-lib fitslib ffgkne [i32,fitsfile*,i8*,i32,i32,float*,i32*,i32*]*)

;; fits_read_keys_dbl     ffgknd
;; int ffgknd(fitsfile *fptr, const char *keyname, int nstart, int nmax, double *value,
;;            int *nfound, int *status);
(bind-lib fitslib ffgknd [i32,fitsfile*,i8*,i32,i32,double*,i32*,i32*]*)


;; fits_read_key          ffgky
;; int ffgky(fitsfile *fptr, int datatype, char *keyname, DTYPE* value,char* comment, int* status);
(bind-lib fitslib ffgky [i32,fitsfile*,i32,i8*,i8*,i8*,i32*]*)

;; fits_read_key_str      ffgkys
;; int ffgkys(fitsfile *fptr, const char *keyname, char *value, char *comm, int *status);
(bind-lib fitslib ffgkys [i32,fitsfile*,i8*,i8*,i8*,i32*]*)

;; fits_read_key_log      ffgkyl
;; int ffgkyl(fitsfile *fptr, const char *keyname, int *value, char *comm, int *status);
(bind-lib fitslib ffgkyl [i32,fitsfile*,i8*,i32*,i8*,i32*]*)

;; fits_read_key_lng      ffgkyj
;; int ffgkyj(fitsfile *fptr, const char *keyname, long *value, char *comm, int *status);
(bind-lib fitslib ffgkyj [i32,fitsfile*,i8*,i64*,i8*,i32*]*)

;; fits_read_key_lnglng   ffgkyjj
;; int ffgkyjj(fitsfile *fptr, const char *keyname, LONGLONG *value, char *comm, int *status);
(bind-lib fitslib ffgkyjj [i32,fitsfile*,i8*,i64*,i8*,i32*]*)

;; fits_read_key_flt      ffgkye
;; int ffgkye(fitsfile *fptr, const char *keyname, float *value, char *comm,int *status);
(bind-lib fitslib ffgkye [i32,fitsfile*,i8*,float*,i8*,i32*]*)

;; fits_read_key_dbl      ffgkyd
;; int ffgkyd(fitsfile *fptr, const char *keyname, double *value,char *comm,int *status);
(bind-lib fitslib ffgkyd [i32,fitsfile*,i8*,double*,i8*,i32*]*)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DATA ACCESS

;; fits_read_img
;; int ffgpv(fitsfile *fptr, int  datatype, LONGLONG firstelem, LONGLONG nelem,
;;           void *nulval, void *array, int *anynul, int  *status);
(bind-lib fitslib ffgpv [i32,fitsfile*,i32,i64,i64,i8*,i8*,i32*,i32*]*)

;; fits_read_pix
;;int ffgpxv(fitsfile *fptr, int  datatype, long *firstpix, LONGLONG nelem,
;;          void *nulval, void *array, int *anynul, int *status);
(bind-lib fitslib ffgpxv [i32,fitsfile*,i32,i64*,i64*,i8*,i8*,i32*,i32*]*)

;; fits_read_col    ffgcv
;; int ffgcv( fitsfile *fptr, int datatype, int colnum, LONGLONG firstrow,
;;            LONGLONG firstelem, LONGLONG nelem, void *nulval, void *array, int *anynul,
;;            int  *status);
(bind-lib fitslib ffgcv [i32,fitsfile*,i32,i32,i64,i64,i64,i8*,i8*,i32*,i32*]*)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; IMG COMPRESSION

;; fits_decompress_img
;; int fits_decomp_img (fitsfile *infptr, fitsfile *outfptr, int *status)
(bind-lib fitslib fits_decomp_img [i32,fitsfile*,fitsfile*,i32*]*)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; WORLD -> CELESTIAL WCS
;;


;; int fits_read_wcstab(fitsfile *fptr, int nwtb, wtbarr *wtb, int *status);
(bind-lib fitslib fits_read_wcstab [i32,fitsfile*,i32,i8*,i32*]*)

;; int fits_hdr2str / ffhdr2str
;;     (fitsfile *fptr, int nocomments, char **exclist, int nexc,
;;     char **header, int *nkeys, int *status)
(bind-lib fitslib ffhdr2str [i32,fitsfile*,i32,i8**,i32,i8**,i32*,i32*]*)

;; int fits_convert_hdr2str / ffcnvthdr2str
;;     (fitsfile *fptr, int nocomments, char **exclist, int nexc,
;;     char **header, int *nkeys, int *status)
(bind-lib fitslib ffcnvthdr2str [i32,fitsfile*,i32,i8**,i32,i8**,i32*,i32*]*)

;; wcslib functions
;; int wcspih	(char *header, int nkeyrec, int relax, int ctrl, int *nreject, int *nwcs, struct wcsprm **wcs)
(bind-lib wcslib wcspih [i32,i8*,i32,i32,i32,i32*,i32*,i8**]*)

(bind-lib wcslib wcsp2s [i32,i8*,i32,i32,double*,double*,double*,double*,double*,i32*]*)
(bind-lib wcslib wcsset [i32,i8*]*)
(bind-lib wcslib wcsfix [i32,i32*,i8*,i32*]*)
(bind-lib wcslib wcsprm_nwtb [i32,i8*]*)
(bind-lib wcslib wcsprm_wtb [i8*,i8*]*)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; DEPRECATED!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

;; ;; Get the values of all the standard FITS celestial coordinate system keywords from the header of a FITS image (i.e., the primary array or an image extension). These values may then be passed to the routines that perform the coordinate transformations.
;; ;; int fits_read_img_coord / ffgics
;; ;;     (fitsfile *fptr, > double *xrefval, double *yrefval,
;; ;;      double *xrefpix, double *yrefpix, double *xinc, double *yinc,
;; ;;      double *rot, char *coordtype, int *status)
;; (bind-lib fitslib ffgics [i32,fitsfile*,double*,double*,double*,double*,double*,double*,double*,i8*,i32*]*)


;; ;; Get the values of all the standard FITS celestial coordinate system keywords from the header of a FITS table where the X and Y (or RA and DEC coordinates are stored in 2 separate columns of the table. These values may then be passed to the routines that perform the coordinate transformations.
;; ;;   int fits_read_tbl_coord / ffgtcs
;; ;;       (fitsfile *fptr, int xcol, int ycol, > double *xrefval,
;; ;;        double *yrefval, double *xrefpix, double *yrefpix, double *xinc,
;; ;;        double *yinc, double *rot, char *coordtype, int *status)
;; (bind-lib fitslib ffgtcs [i32,fitsfile*,i32,i32,double*,double*,double*,double*,double*,double*,double*,i8*,i32*]*)

;; ;; Calculate the celestial coordinate corresponding to the input X and Y pixel location in the image.
;; ;;   int fits_pix_to_world / ffwldp
;; ;;       (double xpix, double ypix, double xrefval, double yrefval,
;; ;;        double xrefpix, double yrefpix, double xinc, double yinc,
;; ;;        double rot, char *coordtype, > double *xpos, double *ypos,
;; ;;        int *status)
;; (bind-lib fitslib ffwldp [i32,fitsfile*,double,double,double,double,double,double,double,double,double,i8*,double*,double*,i32*]*)

;; ;; Calculate the X and Y pixel location corresponding to the input celestial coordinate in the image.
;; ;;   int fits_world_to_pix / ffxypx
;; ;;       (double xpos, double ypos, double xrefval, double yrefval,
;; ;;        double xrefpix, double yrefpix, double xinc, double yinc,
;; ;;        double rot, char *coordtype, double *xpix, double *ypix,
;; ;;        int *status)
;; (bind-lib fitslib ffxypx [i32,fitsfile*,double,double,double,double,double,double,double,double,double,i8*,double*,double*,i32*]*)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ERROR reporting
;;

;; fits_report_error
;; void ffrprt(FILE *stream, int status);
;; e.g. ffrprt(stderr, status);
(bind-lib fitslib ffrprt [void,i8*,i32]*)

;; fits_get_errstatus
;; void ffgmsg(int status, char* errtext)
(bind-lib fitslib ffgerr [void,i32,i8*]*)

;; fits_read_errmsg
;; int fits_read_errmsg / ffgmsg (char *err_msg)
(bind-lib fitslib ffgmsg [void,i8*]*)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; EXTEMPORE HELPER WRAPPERS

(bind-func fits-open-file
  (lambda (path)
    (let ((files:|1,i8*|* (alloc))
    (err:i8* (alloc 40))
    (status:i32* (alloc)))
      (ffopen (bitcast files i8**) path 1 status)
      (ffgerr (pref status 0) err)
      (printf "file ptr:%p\n" (aref files 0))
      (if (<> (pref status 0) 0)
    (begin (printf "error loading fits file: %s\n" err)
     null)
    (aref files 0)))))

;; (bind-func fits-image-data
;;   (lambda (f:fitsfile*)
;;     (let ((nullval:float* (salloc))
;;    (anynull:i32* (salloc))
;;    (err:i8* (salloc 40))
;;    (data:float* (alloc (* size 4)))
;;    (datamax:float* (alloc))
;;    (datamin:float* (alloc))
;;    (i:i32 0)
;;    (status:i32* (salloc size)))
;;       (ffgpv f TFLOAT 1 size (bitcast nullval i8*) (bitcast data i8*) anynull status)
;;       ;; scale data by datamax
;;       (dotimes (i (* 177 177))
;;  (pset! data i (/ (pref data i) (pref datamax 0))))
;;       (ffgerr (pref status 0) err)
;;       (if (<> (pref status 0) 0)
;;    (begin (printf "error loading fits image data: %s\n" err)
;;     (bitcast null float*))
;;    data))))

(bind-func fits-image-x
  (lambda (f:fitsfile*)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (val:i32* (salloc))
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      (ffgky f TINT "NAXIS1" (bitcast val i8*) comment status)
      (if (<> (pref status 0) 0)
    (begin (printf "error reading x dimension: %s\n" err)
     (i64toi32 1))
    (pref val 0)))))

(bind-func fits-image-y
  (lambda (f:fitsfile*)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (val:i32* (salloc))
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      (ffgky f TINT "NAXIS2" (bitcast val i8*) comment status)
      (if (<> (pref status 0) 0)
    (begin (printf "error reading y dimension: %s\n" err)
     (i64toi32 1))
    (pref val 0)))))

(bind-func fits-image-z
  (lambda (f:fitsfile*)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (val:i32* (salloc))
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      (ffgky f TINT "NAXIS3" (bitcast val i8*) comment status)
      (if (<> (pref status 0) 0)
    (begin (printf "error reading z dimension: %s\n" err)
     (i64toi32 1))
    (pref val 0)))))

(bind-func fits-image-data-R32
  (lambda (f:fitsfile*)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (x:i64* (salloc))
    (y:i64* (salloc))
    (z:i64* (salloc))
    (datamax:double* (salloc))
    (datamin:double* (salloc))
    (nfound:i32* (salloc))
    (xx:i64* (salloc))
    (i:i64 0)
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      ;(printf "-------------------\n")
      (ffgky f TINT "NAXIS" (bitcast dims i8*) comment status)
      ;(printf "%s:\t\t%d\n" comment (pref dims 0) (pref status 0))
      (ffgky f TLONG "NAXIS1" (bitcast x i8*) comment status)
      ;(printf "%s:\t\t%lld\n" comment (pref x 0) (pref status 0))
      (ffgky f TLONG "NAXIS2" (bitcast y i8*) comment status)
      ;(printf "%s:\t\t%lld\n" comment (pref y 0) (pref status 0))
      (if (> (pref dims 0) 2)
    (begin (ffgky f TLONG "NAXIS3" (bitcast z i8*) comment status)
     (printf "%s:\t\t%lld\n" comment (pref z 0) (pref status 0))))
      (ffgky f TDOUBLE "DATAMAX" (bitcast datamax i8*) comment status)
      ;(printf "%s:\t%f\n" comment (pref datamax 0) (pref status 0))
      (ffgky f TDOUBLE "DATAMIN" (bitcast datamin i8*) comment status)
      ;(printf "%s:\t%f\n" comment (pref datamin 0) (pref status 0))
      ;(printf "\n")
      (let ((naxis (pref dims 0))
      (nullval:float* (salloc))
      (anynull:i32* (salloc))
      (dmax (dtof (pref datamax 0)))
      (size (* (pref x 0) (pref y 0) (if (> naxis 2) (pref z 0) 1)))
      (data:float* (halloc (* 4 size))))
  ;; grab data from file (converts internal format to TFLOAT)
  (ffgpv f TFLOAT 1 size (bitcast nullval i8*) (bitcast data i8*) anynull status)
  (dotimes (i size)
    (pset! data i (/ (pref data i) dmax)))
  (ffgerr (pref status 0) err)
  (printf "read %lld points  error:%s\n" size err)
  data))))


(bind-func fits-image-data-RGBA32
  (lambda (f:fitsfile* transparency:i8)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (x:i64* (salloc))
    (y:i64* (salloc))
    (z:i64* (salloc))
    (datamax:double* (salloc))
    (datamin:double* (salloc))
    (nfound:i32* (salloc))
    (xx:i64* (salloc))
    (i:i64 0)
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      ;(printf "-------------------\n")
      (ffgky f TINT "NAXIS" (bitcast dims i8*) comment status)
      ;(printf "%s:\t\t%d\n" comment (pref dims 0) (pref status 0))
      (ffgky f TLONG "NAXIS1" (bitcast x i8*) comment status)
      ;(printf "%s:\t\t%lld\n" comment (pref x 0) (pref status 0))
      (ffgky f TLONG "NAXIS2" (bitcast y i8*) comment status)
      ;(printf "%s:\t\t%lld\n" comment (pref y 0) (pref status 0))
      (if (> (pref dims 0) 2)
    (begin (ffgky f TLONG "NAXIS3" (bitcast z i8*) comment status)
     (printf "%s:\t\t%lld\n" comment (pref z 0) (pref status 0))))
      (ffgky f TDOUBLE "DATAMAX" (bitcast datamax i8*) comment status)
      ;(printf "%s:\t%f\n" comment (pref datamax 0) (pref status 0))
      (ffgky f TDOUBLE "DATAMIN" (bitcast datamin i8*) comment status)
      ;(printf "%s:\t%f\n" comment (pref datamin 0) (pref status 0))
      ;(printf "\n")
      (let ((naxis (pref dims 0))
      (nullval:float* (salloc))
      (anynull:i32* (salloc))
      (dmax (dtof (pref datamax 0)))
      (size (* (pref x 0) (pref y 0) (if (> naxis 2) (pref z 0) 1)))
      (data:float* (halloc (* 4 size)))
      (data2:i8* (halloc (* 4 size))))
  ;; grab data from file (converts internal format to TFLOAT)
  (ffgpv f TFLOAT 1 size (bitcast nullval i8*) (bitcast data i8*) anynull status)
  (dotimes (i size)
    (pset! data2 (* i 4) (ftoi8 (* 255.0 (/ (pref data i) dmax))))
    (pset! data2 (+ 1 (* i 4)) (ftoi8 (* 255.0 (/ (pref data i) dmax))))
    (pset! data2 (+ 2 (* i 4)) (ftoi8 (* 255.0 (/ (pref data i) dmax))))
    (pset! data2 (+ 3 (* i 4)) transparency))
  (ffgerr (pref status 0) err)
  (printf "read %lld points  error:%s\n" size err)
  (free data)
  data2))))


(bind-func fits-image-data-RGBA32-false
  (lambda (f:fitsfile* transparency:i8)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (x:i64* (salloc))
    (y:i64* (salloc))
    (z:i64* (salloc))
    (datamax:double* (salloc))
    (datamin:double* (salloc))
    (nfound:i32* (salloc))
    (xx:i64* (salloc))
    (i:i64 0)
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      (printf "-------------------\n")
      (ffgky f TINT "NAXIS" (bitcast dims i8*) comment status)
      (printf "%s:\t\t%d\n" comment (pref dims 0) (pref status 0))
      (ffgky f TLONG "NAXIS1" (bitcast x i8*) comment status)
      (printf "%s:\t\t%lld\n" comment (pref x 0) (pref status 0))
      (ffgky f TLONG "NAXIS2" (bitcast y i8*) comment status)
      (printf "%s:\t\t%lld\n" comment (pref y 0) (pref status 0))
      (if (> (pref dims 0) 2)
    (begin (ffgky f TLONG "NAXIS3" (bitcast z i8*) comment status)
     (printf "%s:\t\t%lld\n" comment (pref z 0) (pref status 0))))
      (ffgky f TDOUBLE "DATAMAX" (bitcast datamax i8*) comment status)
      (printf "%s:\t%f\n" comment (pref datamax 0) (pref status 0))
      (ffgky f TDOUBLE "DATAMIN" (bitcast datamin i8*) comment status)
      (printf "%s:\t%f\n" comment (pref datamin 0) (pref status 0))
      (printf "\n")
      (let ((naxis (pref dims 0))
      (nullval:float* (salloc))
      (anynull:i32* (salloc))
      (dmax (dtof (pref datamax 0)))
      (size (* (pref x 0) (pref y 0) (if (> naxis 2) (pref z 0) 1)))
      (data:float* (halloc (* 4 size)))
      (data2:i8* (halloc (* 4 size))))
  ;; grab data from file (converts internal format to TFLOAT)
  (printf "ok here\n")
  (ffgpv f TFLOAT 1 size (bitcast nullval i8*) (bitcast data i8*) anynull status)
  (printf "and here\n")
  (dotimes (i size)
    (let ((v (ftoi8 (* 255.0 (/ (pref data i) dmax))))
    (v2 (ftoi8 (* 255.0 (/ (* .2 (pref data i)) dmax)))))
      (cond ((< v 50)
       (pset! data2 (* i 4) v))
      ((< v 100)
       (pset! data2 (* i 4) v2)
       (pset! data2 (+ 1 (* i 4)) v))
      ((< v 200)
       (pset! data2 (+ 1 (* i 4)) v2)
       (pset! data2 (+ 2 (* i 4)) v))
      (else (pset! data2 (+ 2 (* i 4)) v)))
      (pset! data2 (+ 3 (* i 4)) transparency)))
  (ffgerr (pref status 0) err)
  (printf "read %lld points  error:%s\n" size err)
  (free data)
  data2))))


(bind-func fits-file-print
  (lambda (f:fitsfile*)
    (let ((status:i32* (salloc))
    (err:i8* (salloc 40))
    (dims:i32* (salloc))
    (x:i64* (salloc))
    (y:i64* (salloc))
    (z:i64* (salloc))
    (datamax:double* (salloc))
    (datamin:double* (salloc))
    (nfound:i32* (salloc))
    (xx:i64* (salloc))
    (comment:i8* (salloc 256))
    (hdu:i32* (salloc)))
      (pset! status 0 0)
      (printf "-------------------\n")
      (ffgky f TINT "NAXIS" (bitcast dims i8*) comment status)
      (printf "%s:\t\t%d\n" comment (pref dims 0))
      (ffgky f TLONG "NAXIS1" (bitcast x i8*) comment status)
      (printf "%s:\t\t%lld\n" comment (pref x 0))
      (ffgky f TLONG "NAXIS2" (bitcast y i8*) comment status)
      (printf "%s:\t\t%lld\n" comment (pref y 0))
      (if (> (pref dims 0) 2)
    (begin (ffgky f TLONG "NAXIS3" (bitcast z i8*) comment status)
     (printf "%s:\t\t%lld\n" comment (pref z 0))))
      (ffgky f TDOUBLE "DATAMAX" (bitcast datamax i8*) comment status)
      (printf "%s:\t%f\n" comment (pref datamax 0) (pref status 0))
      (ffgky f TDOUBLE "DATAMIN" (bitcast datamin i8*) comment status)
      (printf "%s:\t%f\n" comment (pref datamin 0) (pref status 0))
      (printf "\n")
      void)))


(impc:aot:insert-footer "xtmfits")
(define *xtmlib-fits-loaded* #t)
