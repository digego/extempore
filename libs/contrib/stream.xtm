(sys:load "libs/core/xthread.xtm")

(sys:load-preload-check 'stream)
(define *xtmlib-stream-loaded* #t)

;; read head, write head, length, data
(bind-type QBuffer <i64,i64,i64,!a>)

(bind-func copy:[QBuffer*,QBuffer*]*
  (lambda (buf)
    (let ((dat (tref buf 3))
    (dat2 (halloc (tref buf 2)))
    (i 0))
      (dotimes (i (tref buf 2))
  (pset! dat2 i (pref dat i)))
      (QBuffer (tref buf 0) (tref buf 1) (tref buf 2) dat2))))

(bind-func print:[void,QBuffer*]*
  (lambda (b)
    (printout "<QBuf:" (tref b 0) "," (tref b 1) "," (tref b 2) ",")
    (printf "%p" (tref b 3))
    (printout ">")))

(bind-func qbuf_push:[void,QBuffer*,!a]*
  (lambda (buf x)
    (if (>= (tref buf 1) (+ (tref buf 0) (tref buf 2)))
  (println "Writing over unread data!"))
    (pset! (tref buf 3)
     (% (tref buf 1) (tref buf 2))
     x)
    (tset! buf 1 (+ (tref buf 1) 1))
    void))

(bind-func qbuf_peek:[!a,QBuffer*,i64]*
  (lambda (buf idx)
    (if (>= (+ (tref buf 0) idx) (tref buf 1))
        (begin
    (printout "Peeking past write! p(" (+ (tref buf 0) idx) ") w(" (tref buf 1) ")")
    (println)))
    (pref (tref buf 3)
    (% (+ (tref buf 0) idx)
       (tref buf 2)))))

(bind-func qbuf_pop:[!a,QBuffer*]*
  (lambda (buf)
    (if (>= (tref buf 0) (tref buf 1))
  (begin
    (println "Trying to pop past write! p(" (tref buf 0) ") w(" (tref buf 1) ")")
    (println)))
    (tset! buf 0 (+ (tref buf 0) 1))
    (pref (tref buf 3)
    (% (- (tref buf 0) 1)
       (tref buf 2)))))

(bind-type DUPLICATE_RR <i1>)
(bind-type ROUNDROBIN_RR <i1>)
(bind-val DUP_RR DUPLICATE_RR*)
(bind-val RR_RR ROUNDROBIN_RR*)

(bind-func zero_check
  (lambda (x)
    (if (= 0:i64 x) 1 x)))

(bind-func splitjoin:[[[void]*,!a,!b]*,DUPLICATE_RR*,[[void]*,!a,!b]*,i64]*
  (lambda (style constructor multiplicity)
    (let ((pop:i64 (if (refcheck constructor pop) (constructor.pop) 0))
    (peek:i64 (if (refcheck constructor peek) (constructor.peek) 0))
    (lpush:i64 (if (refcheck constructor push) (constructor.push) 0))
    (push:i64 (* multiplicity lpush))
    (prepush (if (refcheck constructor prepush) (constructor.prepush) push))
    (prepeek (if (refcheck constructor prepeek) (constructor.prepeek) peek))
    (prepop (if (refcheck constructor prepop) (constructor.prepop) pop))
    (pre:i1 (if (> (+ prepush prepeek prepop) 0) #t #f))
    (cnt 1)
    (lwork #f))
      (lambda (input output)
  (let ((obufs (map (lambda (idx) (copy output)) (range 0 multiplicity)))
        (ibufs (map (lambda (idx) (copy input)) (range 0 multiplicity)))
        (i 0)
        (filter_s (map (lambda (i o) (constructor i o)) ibufs obufs))
        (make_lwork (lambda (rr)
                (lambda ()
                  (let ((ii 0))
              ;; duplicate input buffer to all ibufs
              (for-each (lambda (b)
                    (dotimes (ii (* rr pop)) ;; why is this pop and not peek!
                      (qbuf_push b (qbuf_peek input ii))))
                  ibufs)
              (dotimes (ii (* rr pop)) (qbuf_pop input)) ;; shouldn't this be prepop?
              ;; run filters multi-core
              (sync (for-each (lambda (func)
                    (spawn
                     (lambda ()
                       (doloop (iii rr) (func)))))
                  filter_s))
              ;; round robin merge all obufs to output
              (dotimes (ii (* rr lpush))
                (for-each (lambda (b)
                      (qbuf_push output (qbuf_pop b)))
                    obufs))
              void))))
        (prework (lambda ()
             ;; duplicate input buffer to all ibufs
             (for-each (lambda (b)
                   (dotimes (i prepeek)
                     (qbuf_push b (qbuf_peek input i))))
                 ibufs)
             (dotimes (i pop) (qbuf_pop input))
             ;; run filters multi-core
       (for-each (lambda (fil)
             (let ((w:[void]* (if pre (fil.prework) fil)))
               (w)))
           filter_s)
             ;; round robin merge all obufs to output
             (dotimes (i prepush)
               (for-each (lambda (b)
                     (qbuf_push output (qbuf_pop b)))
                   obufs))
             void)))
    (lambda ()
      ;; duplicate input buffer to all ibufs
      (for-each (lambda (ibuffer)
      (dotimes (i pop) ;; why is this pop and not peek!
        (qbuf_push ibuffer (qbuf_peek input i))))
          ibufs)
      (dotimes (i pop) (qbuf_pop input)) ;; remove pop'd items from input
      ;; run filters multi-core
      (sync (for-each (lambda (f)
                (spawn (lambda () (f))))
              filter_s))
      ;; round robin merge all obufs to output
      (dotimes (i lpush)
        (for-each (lambda (obuffer)
        (qbuf_push output (qbuf_pop obuffer)))
      obufs))
      void))))))

;; rate input output work prework inputs outputs
(bind-type FilterData <i64,!a,!b,[void]*,[void]*,[void]*,i1,i1>)

(bind-func filter_rate:[i64,FilterData*]*
  (lambda (f)
    (tref f 0)))

(bind-func filter_input:[!a,FilterData*]*
  (lambda (f)
    (tref f 1)))

(bind-func filter_output:[!a,FilterData*]*
  (lambda (f)
    (tref f 2)))

(bind-func filter_work:[[void]*,FilterData*]*
  (lambda (f)
    (tref f 3)))

(bind-func filter_lwork:[[void]*,FilterData*]*
  (lambda (f)
    (tref f 4)))

(bind-func filter_prework:[[void]*,FilterData*]*
  (lambda (f)
    (tref f 5)))

(bind-func filter_inputs:[i1,FilterData*]*
  (lambda (f)
    (tref f 6)))

(bind-func filter_outputs:[i1,FilterData*]*
  (lambda (f)
    (tref f 7)))

;; output only node

(bind-func pipeline_stage:[FilterData*,!a,i64]*
  (lambda (filt depth)
    (let ((rate 1)
    (datasize (* rate (filt.push) depth))
    (d (alloc datasize))
    (b (QBuffer 0 0 datasize d))
    (p:i1 (or (refcheck filt prepush)
        (refcheck filt prepeek)
        (refcheck filt prepop)))
    (work (filt b))
    (lwork:[void]* work) ;; because rate is always 1 we ignore lwork
    (prework:[void]* (if p (work.prework) work)))
      (FilterData rate b b work lwork prework #f #t))))

;; input only node
;; filter rate input
(bind-func pipeline_stage:[FilterData*,!a,i64,!b]*
  (lambda (filt rate input)
    (let ((r (/ rate (zero_check (filt.pop))))
    (p:i1 (or (refcheck filt prepush)
        (refcheck filt prepeek)
        (refcheck filt prepop)))
    (work (filt input))
    (makelwork:i1 (refcheck work make_lwork))
    (lwork:[void]*
     (if makelwork
         (let ((maker:[[void]*,i64]* (work.make_lwork)))
     (maker r))
         (lambda () (doloop (ii r) (work)))))
    (prework:[void]* (if p (work.prework) work)))
      (FilterData r input input work lwork prework #t #f))))

;; input->output node
(bind-func pipeline_stage:[FilterData*,!a,i64,i64,!b]*
  (lambda (filt rate depth input)
    (let ((r (/ rate (zero_check (filt.pop))))
    (p:i1 (or (refcheck filt prepush)
        (refcheck filt prepeek)
        (refcheck filt prepop)))
    (datasize (* rate (filt.push) depth))
    (d (alloc datasize))
    (b (QBuffer 0 0 datasize d))
    (work (filt input b))
    (makelwork:i1 (refcheck work make_lwork))
    (lwork:[void]*
     (if makelwork
         (let ((maker:[[void]*,i64]* (work.make_lwork)))
     (maker r))
         (lambda () (doloop (ii r) (work)))))
    (prework:[void]* (if p (work.prework) work)))
      (FilterData r input b work lwork prework #t #t))))

(bind-func pipeline:[[void]*,[[void]*,!a]*,[[void]*,!a,!b]*,[[void]*,!b,!c]*,[[void]*,!c,!d]*,[[void]*,!d,!e]*,[[void]*,!e]*]*
  (lambda (a b c d e f)
    (let ((depth 6) (i 0) (cnt 0)
    (f1 (pipeline_stage a depth))
    (f2 (pipeline_stage b (* (a.push) (filter_rate f1)) depth (filter_output f1)))
    (f3 (pipeline_stage c (* (b.push) (filter_rate f2)) depth (filter_output f2)))
    (f4 (pipeline_stage d (* (c.push) (filter_rate f3)) depth (filter_output f3)))
    (f5 (pipeline_stage e (* (d.push) (filter_rate f4)) depth (filter_output f4)))
    (f6 (pipeline_stage f (* (e.push) (filter_rate f5)) (filter_output f5))))
      ;; do prework!
      ((filter_prework f1))
      ((filter_prework f2))
      ((filter_prework f3))
      ((filter_prework f4))
      ((filter_prework f5))
      ((filter_prework f6))
      ;; prime pipeline!
      (dotimes (i (- (* 6 (filter_rate f1)) 1)) ((filter_work f1)))
      (dotimes (i (- (* 5 (filter_rate f2)) 1)) ((filter_work f2)))
      (dotimes (i (- (* 4 (filter_rate f3)) 1)) ((filter_work f3)))
      (dotimes (i (- (* 3 (filter_rate f4)) 1)) ((filter_work f4)))
      (dotimes (i (- (* 2 (filter_rate f5)) 1)) ((filter_work f5)))
      (dotimes (i (- (* 1 (filter_rate f6)) 1)) ((filter_work f6)))
      ;; now ready for real work!
      (lambda ()
  (set! cnt (+ cnt 1))
        (sync
         (spawn (filter_lwork f1))
         (spawn (filter_lwork f2))
         (spawn (filter_lwork f3))
         (spawn (filter_lwork f4))
         (spawn (filter_lwork f5))
         (spawn (filter_lwork f6)))
        void))))

(bind-func pipeline:[[void]*,[[void]*,!a]*,[[void]*,!a,!b]*,[[void]*,!b,!c]*,[[void]*,!c,!d]*,[[void]*,!d]*]*
  (lambda (a b c d e)
    (let ((depth 5) (i 0) (cnt 0)
    (f1 (pipeline_stage a depth))
    (f2 (pipeline_stage b (* (a.push) (filter_rate f1)) depth (filter_output f1)))
    (f3 (pipeline_stage c (* (b.push) (filter_rate f2)) depth (filter_output f2)))
    (f4 (pipeline_stage d (* (c.push) (filter_rate f3)) depth (filter_output f3)))
    (f5 (pipeline_stage f (* (e.push) (filter_rate f4)) (filter_output f4))))
      ;; do prework!
      ((filter_prework f1))
      ((filter_prework f2))
      ((filter_prework f3))
      ((filter_prework f4))
      ((filter_prework f5))
      ;; prime pipeline!
      (dotimes (i (- (* 5 (filter_rate f1)) 1)) ((filter_work f1)))
      (dotimes (i (- (* 4 (filter_rate f2)) 1)) ((filter_work f2)))
      (dotimes (i (- (* 3 (filter_rate f3)) 1)) ((filter_work f3)))
      (dotimes (i (- (* 2 (filter_rate f4)) 1)) ((filter_work f4)))
      (dotimes (i (- (* 1 (filter_rate f5)) 1)) ((filter_work f5)))
      ;; now ready for real work!
      (lambda ()
  (set! cnt (+ cnt 1))
        (sync
         (spawn (filter_lwork f1))
         (spawn (filter_lwork f2))
         (spawn (filter_lwork f3))
         (spawn (filter_lwork f4))
         (spawn (filter_lwork f5)))
        void))))

(define *xtmlib-stream-loaded* #t)
