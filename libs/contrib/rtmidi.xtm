;;; rtmidi.xtm -- MIDI support for Extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: librtmidic

;;; Commentary:

;; The rtmidi library is a cross-platform MIDI library by Gary P. Scavone.

;; these xtlang bindings are based on the new RtMidi v4, in particular the the
;; rtmidi_c.h C API. Extempore now builds the librtmidi shared library at build
;; time (along with portmidi, etc.)

;; Source and documentation for the rtmidi library is available at
;; https://github.com/thestk/rtmidi

;;; Code:
(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/rtmidi.xtm" 'quiet))
(sys:load-preload-check 'rtmidi)
(define *xtmlib-rtmidi-loaded* #t)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmrtmidi")

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib librtmidi
  (cond ((string=? (sys:platform) "OSX")
         "librtmidi.dylib")
        ((string=? (sys:platform) "Linux")
         "librtmidic.so")
        ((string=? (sys:platform) "Windows")
         "rtmidilib.dll")))

;; //! \brief Wraps an RtMidi object for C function return statuses.
;; struct RtMidiWrapper {
;;     //! The wrapped RtMidi object.
;;     void* ptr;
;;     void* data;

;;     //! True when the last function call was OK.
;;     bool  ok;

;;     //! If an error occured (ok != true), set to an error message.
;;     const char* msg;
;; };

;; //! \brief Typedef for a generic RtMidi pointer.
(bind-alias RtMidiPtr i8*)

;; //! \brief Typedef for a generic RtMidiIn pointer.
;; typedef struct RtMidiWrapper* RtMidiInPtr;
(bind-alias RtMidiInPtr i8*)

;; //! \brief Typedef for a generic RtMidiOut pointer.
;; typedef struct RtMidiWrapper* RtMidiOutPtr;
(bind-alias RtMidiOutPtr i8*)

;; //! \brief MIDI API specifier arguments.  See \ref RtMidi::Api.
;; enum RtMidiApi {
;;     RTMIDI_API_UNSPECIFIED,    /*!< Search for a working compiled API. */
;;     RTMIDI_API_MACOSX_CORE,    /*!< Macintosh OS-X CoreMIDI API. */
;;     RTMIDI_API_LINUX_ALSA,     /*!< The Advanced Linux Sound Architecture API. */
;;     RTMIDI_API_UNIX_JACK,      /*!< The Jack Low-Latency MIDI Server API. */
;;     RTMIDI_API_WINDOWS_MM,     /*!< The Microsoft Multimedia MIDI API. */
;;     RTMIDI_API_RTMIDI_DUMMY,   /*!< A compilable but non-functional API. */
;;     RTMIDI_API_NUM             /*!< Number of values in this enum. */
;; };
(bind-val RTMIDI_API_UNSPECIFIED i32 0) ;; try to auto-detect the platform
(bind-val RTMIDI_API_MACOSX_CORE i32 1)
(bind-val RTMIDI_API_LINUX_ALSA  i32 2)
(bind-val RTMIDI_API_UNIX_JACK   i32 3)
(bind-val RTMIDI_API_WINDOWS_MM  i32 4)
(bind-val RTMIDI_API_RTMIDI_DUMMY i32 5)
(bind-val RTMIDI_API_NUM i32 6)

;; //! \brief Defined RtMidiError types. See \ref RtMidiError::Type.
;; enum RtMidiErrorType {
;;   RTMIDI_ERROR_WARNING,           /*!< A non-critical error. */
;;   RTMIDI_ERROR_DEBUG_WARNING,     /*!< A non-critical error which might be useful for debugging. */
;;   RTMIDI_ERROR_UNSPECIFIED,       /*!< The default, unspecified error type. */
;;   RTMIDI_ERROR_NO_DEVICES_FOUND,  /*!< No devices found on system. */
;;   RTMIDI_ERROR_INVALID_DEVICE,    /*!< An invalid device ID was specified. */
;;   RTMIDI_ERROR_MEMORY_ERROR,      /*!< An error occured during memory allocation. */
;;   RTMIDI_ERROR_INVALID_PARAMETER, /*!< An invalid parameter was specified to a function. */
;;   RTMIDI_ERROR_INVALID_USE,       /*!< The function was called incorrectly. */
;;   RTMIDI_ERROR_DRIVER_ERROR,      /*!< A system driver error occured. */
;;   RTMIDI_ERROR_SYSTEM_ERROR,      /*!< A system error occured. */
;;   RTMIDI_ERROR_THREAD_ERROR       /*!< A thread error occured. */
;; };
(bind-val RTMIDI_ERROR_WARNING i32 0)
(bind-val RTMIDI_ERROR_DEBUG_WARNING i32 1)
(bind-val RTMIDI_ERROR_UNSPECIFIED i32  2)
(bind-val RTMIDI_ERROR_NO_DEVICES_FOUND i32  3)
(bind-val RTMIDI_ERROR_INVALID_DEVICE i32  4)
(bind-val RTMIDI_ERROR_MEMORY_ERROR i32  5)
(bind-val RTMIDI_ERROR_INVALID_PARAMETER i32  6)
(bind-val RTMIDI_ERROR_INVALID_USE i32  7)
(bind-val RTMIDI_ERROR_DRIVER_ERROR i32  8)
(bind-val RTMIDI_ERROR_SYSTEM_ERROR i32  9)
(bind-val RTMIDI_ERROR_THREAD_ERROR i32 10)

;; /*! \brief The type of a RtMidi callback function.
;;  *
;;  * \param timeStamp   The time at which the message has been received.
;;  * \param message     The midi message.
;;  * \param userData    Additional user data for the callback.
;;  *
;;  * See \ref RtMidiIn::RtMidiCallback.
;;  */
;; typedef void(* RtMidiCCallback) (double timeStamp, const unsigned char* message,
;;                                  size_t messageSize, void *userData);
(bind-alias RtMidiCCallback [void,double,i8*,i64,i8*]*)

;; /* RtMidi API */

;; /*! \brief Determine the available compiled MIDI APIs.
;;  *
;;  * If the given `apis` parameter is null, returns the number of available APIs.
;;  * Otherwise, fill the given apis array with the RtMidi::Api values.
;;  *
;;  * \param apis  An array or a null value.
;;  * \param apis_size  Number of elements pointed to by apis
;;  * \return number of items needed for apis array if apis==NULL, or
;;  *         number of items written to apis array otherwise.  A negative
;;  *         return value indicates an error.
;;  *
;;  * See \ref RtMidi::getCompiledApi().
;; */
;; RTMIDIAPI int rtmidi_get_compiled_api (enum RtMidiApi *apis, unsigned int apis_size);
(bind-lib librtmidi rtmidi_get_compiled_api [i32,i32*,i32]*)

;; //! \brief Return the name of a specified compiled MIDI API.
;; //! See \ref RtMidi::getApiName().
;; RTMIDIAPI const char *rtmidi_api_name(enum RtMidiApi api);
(bind-lib librtmidi rtmidi_api_name [i8*,i32]*)

;; //! \brief Return the display name of a specified compiled MIDI API.
;; //! See \ref RtMidi::getApiDisplayName().
;; RTMIDIAPI const char *rtmidi_api_display_name(enum RtMidiApi api);
(bind-lib librtmidi rtmidi_api_display_name [i8*,i32]*)

;; //! \brief Return the compiled MIDI API having the given name.
;; //! See \ref RtMidi::getCompiledApiByName().
;; RTMIDIAPI enum RtMidiApi rtmidi_compiled_api_by_name(const char *name);
(bind-lib librtmidi rtmidi_compiled_api_by_name [i32,i8*]*)

;; //! \internal Report an error.
;; RTMIDIAPI void rtmidi_error (enum RtMidiErrorType type, const char* errorString);
;; (bind-lib librtmidi rtmidi_error [void,i32,i8*]*)

;; /*! \brief Open a MIDI port.
;;  *
;;  * \param port      Must be greater than 0
;;  * \param portName  Name for the application port.
;;  *
;;  * See RtMidi::openPort().
;;  */
;; RTMIDIAPI void rtmidi_open_port (RtMidiPtr device, unsigned int portNumber, const char *portName);
(bind-lib librtmidi rtmidi_open_port [void,RtMidiPtr,i32,i8*]*)

;; /*! \brief Creates a virtual MIDI port to which other software applications can
;;  * connect.
;;  *
;;  * \param portName  Name for the application port.
;;  *
;;  * See RtMidi::openVirtualPort().
;;  */
;; RTMIDIAPI void rtmidi_open_virtual_port (RtMidiPtr device, const char *portName);
(bind-lib librtmidi rtmidi_open_virtual_port [void,RtMidiPtr,i8*]*)

;; /*! \brief Close a MIDI connection.
;;  * See RtMidi::closePort().
;;  */
;; RTMIDIAPI void rtmidi_close_port (RtMidiPtr device);
(bind-lib librtmidi rtmidi_close_port [void,RtMidiPtr]*)

;; /*! \brief Return the number of available MIDI ports.
;;  * See RtMidi::getPortCount().
;;  */
;; RTMIDIAPI unsigned int rtmidi_get_port_count (RtMidiPtr device);
(bind-lib librtmidi rtmidi_get_port_count [i32,RtMidiPtr]*)

;; /*! \brief Return a string identifier for the specified MIDI input port number.
;;  * See RtMidi::getPortName().
;;  */
;; RTMIDIAPI const char* rtmidi_get_port_name (RtMidiPtr device, unsigned int portNumber);
(bind-lib librtmidi rtmidi_get_port_name [i8*,RtMidiPtr,i32]*)

;; /* RtMidiIn API */

;; //! \brief Create a default RtMidiInPtr value, with no initialization.
;; RTMIDIAPI RtMidiInPtr rtmidi_in_create_default (void);
(bind-lib librtmidi rtmidi_in_create_default [RtMidiPtr]*)

;; /*! \brief Create a  RtMidiInPtr value, with given api, clientName and queueSizeLimit.
;;  *
;;  *  \param api            An optional API id can be specified.
;;  *  \param clientName     An optional client name can be specified. This
;;  *                        will be used to group the ports that are created
;;  *                        by the application.
;;  *  \param queueSizeLimit An optional size of the MIDI input queue can be
;;  *                        specified.
;;  *
;;  * See RtMidiIn::RtMidiIn().
;;  */
;; RTMIDIAPI RtMidiInPtr rtmidi_in_create (enum RtMidiApi api, const char *clientName, unsigned int queueSizeLimit);
(bind-lib librtmidi rtmidi_in_create [RtMidiInPtr,i32,i8*,i32]*)

;; //! \brief Free the given RtMidiInPtr.
;; RTMIDIAPI void rtmidi_in_free (RtMidiInPtr device);
(bind-lib librtmidi rtmidi_in_free [void,RtMidiInPtr]*)

;; //! \brief Returns the MIDI API specifier for the given instance of RtMidiIn.
;; //! See \ref RtMidiIn::getCurrentApi().
;; RTMIDIAPI enum RtMidiApi rtmidi_in_get_current_api (RtMidiPtr device);
(bind-lib librtmidi rtmidi_in_get_current_api [i32,RtMidiPtr]*)

;; //! \brief Set a callback function to be invoked for incoming MIDI messages.
;; //! See \ref RtMidiIn::setCallback().
;; RTMIDIAPI void rtmidi_in_set_callback (RtMidiInPtr device, RtMidiCCallback callback, void *userData);
(bind-lib librtmidi rtmidi_in_set_callback [void,RtMidiInPtr,RtMidiCCallback,i8*]*)

;; //! \brief Cancel use of the current callback function (if one exists).
;; //! See \ref RtMidiIn::cancelCallback().
;; RTMIDIAPI void rtmidi_in_cancel_callback (RtMidiInPtr device);
(bind-lib librtmidi rtmidi_in_cancel_callback [void,RtMidiInPtr]*)

;; //! \brief Specify whether certain MIDI message types should be queued or ignored during input.
;; //! See \ref RtMidiIn::ignoreTypes().
;; RTMIDIAPI void rtmidi_in_ignore_types (RtMidiInPtr device, bool midiSysex, bool midiTime, bool midiSense);
(bind-lib librtmidi rtmidi_in_ignore_types [void,RtMidiInPtr,i1,i1,i1]*)

;; /*! Fill the user-provided array with the data bytes for the next available
;;  * MIDI message in the input queue and return the event delta-time in seconds.
;;  *
;;  * \param message   Must point to a char* that is already allocated.
;;  *                  SYSEX messages maximum size being 1024, a statically
;;  *                  allocated array could
;;  *                  be sufficient.
;;  * \param size      Is used to return the size of the message obtained.
;;  *
;;  * See RtMidiIn::getMessage().
;;  */
;; RTMIDIAPI double rtmidi_in_get_message (RtMidiInPtr device, unsigned char *message, size_t *size);
(bind-lib librtmidi rtmidi_in_get_message [double,RtMidiInPtr,i8*,i64*]*)

;; /* RtMidiOut API */

;; //! \brief Create a default RtMidiInPtr value, with no initialization.
;; RTMIDIAPI RtMidiOutPtr rtmidi_out_create_default (void);
(bind-lib librtmidi rtmidi_out_create_default [RtMidiOutPtr]*)

;; /*! \brief Create a RtMidiOutPtr value, with given and clientName.
;;  *
;;  *  \param api            An optional API id can be specified.
;;  *  \param clientName     An optional client name can be specified. This
;;  *                        will be used to group the ports that are created
;;  *                        by the application.
;;  *
;;  * See RtMidiOut::RtMidiOut().
;;  */
;; RTMIDIAPI RtMidiOutPtr rtmidi_out_create (enum RtMidiApi api, const char *clientName);
(bind-lib librtmidi rtmidi_out_create [RtMidiOutPtr,i32,i8*]*)

;; //! \brief Free the given RtMidiOutPtr.
;; RTMIDIAPI void rtmidi_out_free (RtMidiOutPtr device);
(bind-lib librtmidi rtmidi_out_free [void,RtMidiOutPtr]*)

;; //! \brief Returns the MIDI API specifier for the given instance of RtMidiOut.
;; //! See \ref RtMidiOut::getCurrentApi().
;; RTMIDIAPI enum RtMidiApi rtmidi_out_get_current_api (RtMidiPtr device);
(bind-lib librtmidi rtmidi_out_get_current_api [i32,RtMidiOutPtr]*)

;; //! \brief Immediately send a single message out an open MIDI output port.
;; //! See \ref RtMidiOut::sendMessage().
;; RTMIDIAPI int rtmidi_out_send_message (RtMidiOutPtr device, const unsigned char *message, int length);
(bind-lib librtmidi rtmidi_out_send_message [i32,RtMidiOutPtr,i8*,i32]*)

;;;;;;;;;;;;;;;;;;;;
;; xtlang helpers ;;
;;;;;;;;;;;;;;;;;;;;

(impc:aot:do-and-emit
 (sys:load "libs/contrib/rtmidi-scm.xtm"))

;; these are always useful when dealing with MIDI
(bind-val MIDI_NOTE_OFF i8 8)
(bind-val MIDI_NOTE_ON i8 9)
(bind-val MIDI_AFTERTOUCH i8 10)
(bind-val MIDI_CONTROL_CHANGE i8 11)
(bind-val MIDI_CC i8 MIDI_CONTROL_CHANGE)
(bind-val MIDI_PROGRAM_CHANGE i8 12)
(bind-val MIDI_CHANNEL_PRESSURE i8 13)
(bind-val MIDI_PITCH_BEND i8 14)

(bind-func rtmidi_print_ports
  (lambda (dev:RtMidiPtr)
    (let ((num_ports (rtmidi_get_port_count dev)))
      (doloop (i num_ports)
        (printf "port %d: %s\n" i (rtmidi_get_port_name dev i)))
      void)))

(bind-func rtmidi_send
  (lambda (dev:RtMidiOutPtr type chan a b)
    (let ((msg:i8* (salloc 3)))
      (pfill! msg (+ (<< type 4) chan) a b)
      (rtmidi_out_send_message dev msg 3))))

(bind-func rtmidi_register_callback
  "Register a midi sink/source"
  (lambda (dev:RtMidiInPtr callback_name:i8* user_data:i8*)
    (let ((len (strlen callback_name))
          (callback_name_native:i8* (salloc (+ len 8))))
      (strncpy callback_name_native callback_name (+ 1 len))
      (strncpy (pref-ptr callback_name_native len) "_native" 8)
      (let ((fptr (llvm_get_function_ptr callback_name_native)))
        (if (null? fptr)
            (printf "Error: cannot find xtlang function %s\n" callback_name)
            (begin
              (rtmidi_in_set_callback dev (cast fptr RtMidiCCallback) user_data)
              (printf "\nregistered %s as MIDI callback function\n\n" callback_name)))))))

(bind-func rtmidi_default_callback:RtMidiCCallback
  "this is the 'default' callback - you should probably re-define it!"
  (let ((type:i8 0) (chan:i8 0) (a:i8 0) (b:i8 0))
    (lambda (time:double message:i8* message_size:i64 user_data:i8*)
      (set! type (>> (pref message 0) 4))
      (set! chan (& (pref message 0) 15))
      (set! a (pref message 1))
      (set! b (pref message 2))
      (printf "time = %f\ntype = %u\nchan = %u\na = %u\nb = %u\n---------------\n"
              time (i8toi32 type) (i8toi32 chan) (i8toi32 a) (i8toi32 b))
      void)))

(impc:aot:insert-footer "xtmrtmidi")
(define *xtmlib-rtmidi-loaded* #t)
