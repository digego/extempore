;;; cas -- Computer Algebra System

;; Author: Sorensen
;; Keywords: extempore giac
;; Required dylibs: libgiac

;;; Commentary:

;; Extempore wrapper for GPL giac (xcas)
;; https://www-fourier.ujf-grenoble.fr/~parisse/giac.html

;;; Code:

;; set up the current dylib name and path (for AOT compilation)

(sys:load "libs/core/adt.xtm")

(bind-dylib giac
  (cond ((string=? (sys:platform) "OSX")
         "libgiac.0.dylib")
        ((string=? (sys:platform) "Linux")
         "libgiac.so.0")
        ((string=? (sys:platform) "Windows")
         "Giac_on_Windows.dll")))
         ;; "libgiac.dll")))

(bind-lib giac caseval [i8*,i8*]*)

(define *icas-print-inline* #f)

(define cas-xtm-to-string
  (lambda (e)
    (cond ((atom? e) (atom->string e))
          ((list? e)
           (cond ((string=? "*" (atom->string (car e)))
                  (string-append "{"
                                 (string-join
                                  (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) "*") "}"))
                 ((string=? "+" (atom->string (car e)))
                  (string-append "{"
                                 (string-join
                                  (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) "+") "}"))
                 ((string=? "/" (atom->string (car e)))
                  (string-append "{"
                                 (string-join
                                  (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) "/") "}"))
                 ((string=? "-" (atom->string (car e)))
                  (string-append "{"
                                 (string-join
                                  (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) "-") "}"))
                 ((string=? "=" (atom->string (car e)))
                  (string-join
                   (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) "="))
                 ((string=? "set!" (atom->string (car e)))
                  (string-join
                   (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) ":="))
                 ((string=? "vector" (atom->string (car e)))
                  (string-append "["
                                 (string-join
                                  (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) ",") "]"))
                 ((string=? "exp" (atom->string (car e)))
                  (string-append "e^" (cas-xtm-to-string (cadr e))))
                 ((string=? "pow" (atom->string (car e)))
                  (string-append (cas-xtm-to-string (cadr e)) "^" (cas-xtm-to-string (caddr e))))
                 (else
                  (string-append (atom->string (car e))
                                 "{"
                                 (string-join
                                  (map (lambda (x) (cas-xtm-to-string x)) (cdr e)) ",")
                                 "}"))))
          (else e))))

(bind-macro (xtm2cas expr)
  (let ((casstr (cas-xtm-to-string expr)))
    (string->symbol casstr)))

(bind-func trim_brackets
  (lambda (s:String*)
    (substring s 1 (- (length s) 1))))

(bind-func find_sexprs
  (lambda (t:String*)
    (regex_matches "((\\()(?<struct>[^\\(\\)]|(\\()\\g<struct>*(\\)))*(\\)))" t)))

(bind-func find_sqr_exprs
  (lambda (t:String*)
    (regex_matches "((\\[)(?<struct>[^\\[\\]]|(\\[)\\g<struct>*(\\]))*(\\]))" t)))

(bind-val cas_cntterms i64 0)

(bind-func cas_expand_term
  (lambda (t:String*)
    ;; (println "t:" t)
    (set! cas_cntterms (+ cas_cntterms 1))
    (cond ((> cas_cntterms 50) t)
          ((regex_match "^\\(\\(.*\\)\\)$" t)
           (cas_expand_term (trim_brackets t)))
          ((and
            (regex_match "^\\(.*\\)$" t)
            (= 1 (length (find_sexprs t))))
           t)
          ((and
            (regex_match "^\\[.*\\]$" t)
            (= 1 (length (find_sqr_exprs t))))
           (let ((r (regex_split "," (substring t 1 (- (length t) 1)))))
             (if (null? r)
                 (cas_expand_term (substring t 1 (- (length t) 1)))
                 (cat (Str "(vector")
                      (concat (map (lambda (x) (cat (Str " ") (cas_expand_term x))) r))
                      (Str ")")))))
          ((regex_match "^[a-zA-Z]+\\(" t) ;;[^)]*\\)*$" t)
           (let ((matches (regex_matches "\\([^()]*\\)" t))
                 (newt (cas_expand_term (car matches)))
                 (s1 (replace t (car matches) newt))
                 (r1 (regex_replace "^([^(]*).*" s1 "$1"))
                 (r2 (regex_replace "^([^(]*)(\\(+[^)]*\\)+)(.*)" s1 "$2"))
                 (r3 (regex_replace "^([^(]*)(\\(+[^)]*\\)+)(.*)" s1 "$3")))
             ;; (println "s1:" s1 "r1:" r1 "r2:" r2 "r3:" r3)
             (cas_expand_term (cat (Str "(") r1 (Str " ")
                                   (cas_expand_term (trim_brackets r2))
                                   (Str ")") r3))))
          ((regex_match "[^(]/" t)
           (let ((r1 (regex_replace "^(.*)([^(])(/)(.*)$" t "$1$2"))
                 (r2 (regex_replace "^(.*)([^(])(/)(.*)$" t "$4"))
                 (r3 (cat (Str "(/ ")
                          (cas_expand_term (trim r1)) (Str " ")
                          (cas_expand_term (trim r2)) (Str ")"))))
             r3))
          ((regex_match "[^(]\\*" t)
           (let ((r1 (regex_replace "^(.*)([^(])(\\*)(.*)$" t "$1$2"))
                 (r2 (regex_replace "^(.*)([^(])(\\*)(.*)$" t "$4"))
                 (r3 (cat (Str "(* ")
                          (cas_expand_term (trim r1)) (Str " ")
                          (cas_expand_term (trim r2)) (Str ")"))))
             ;; (println "multi:" r1 r2 r3)
             r3))
          ((regex_match "e\\^" t)
           (let ((p (regex_split "e\\^" t)))
             (cat (Str "(exp ") (cas_expand_term (trim (nth p 1))) (Str ")"))))
          ((regex_match "\\^" t)
           (let ((p (regex_split "\\^" t)))
             (cat (Str "(pow ")
                  (cas_expand_term (trim (nth p 0))) (Str " ")
                  (cas_expand_term (trim (nth p 1))) (Str ")"))))
          ((regex_match "^[0-9]*$" t)
           (cat t (Str ".0:double")))
          (else t))))

(bind-func cas_parse_terms
  (lambda (ein:String*)
    ;; (println "Parse:" ein)
    (set! cas_cntterms 0)
    (let ((e (replace ein "ln" "log"))
          (m1 (find_sexprs e))
          (m2 (map (lambda (x:String*)
                     (if (regex_match "(\\+|\\-)" x)
                         (cas_parse_terms (trim_brackets x))
                         (list (cat (Str "(") (cas_expand_term (trim_brackets x)) (Str ")")))))
                   m1))
          (m3 (map (lambda (l)
                     (if (null? l) (Str "")
                         (if (= (length l) 1) (car l)
                             (cat
                              (Str "(plus")
                              (concat (map (lambda (x:String*)
                                             (cat
                                              (Str " ")
                                              (if (regex_match "^\\-" x)
                                                  (cas_expand_term
                                                   (cat (Str "(neg ")
                                                        (substring x 1 (length x))
                                                        (Str ")")))
                                                  (cas_expand_term (replace x "+" "")))))
                                           l))
                              (Str ")")))))
                   m2))
          (m4 (reverse (map (lambda (s1 s2)
                              (set! e (replace e s1 (replace_all s2 "+" "plus")))
                              e)
                            m1 m3)))
          (m8 (regex_matches "(^|\\+|\\-)([^+-]|\\(plus)+" (if (> (length m4) 0) (car m4) e)))
          (res (map (lambda (x:String*)
                      (if (regex_match "^\\-" x)
                          (let ((r1 (cas_expand_term (substring x 1 (length x))))
                                (r2 (cat (Str "(neg ") r1 (Str ")"))))
                            r2)
                          (if (regex_match "^\\+" x)
                              (cas_expand_term (substring x 1 (length x)))
                              (cas_expand_term x))))
                    m8)))
      ;;(println "out:" res "in:" ein "\n")
      res)))

(bind-func multi_replace_all
  (lambda (s:String* pairs)
    (let ((res (map (lambda (x:List{String*}*)
                      (set! s (replace_all (cstring s)
                                           (cstring (nth x 0))
                                           (cstring (nth x 1))))
                      1:i64)
                    pairs)))
      s)))

(bind-func cas2xtm
  (lambda (e:String*)
    (beginz
     (if (regex_match "^list\\[.*\\]$" e)
         (set! e (substring e 4 (length e))))
     (if (regex_match "^\\[.*\\]$" e)
         (let ((p (regex_split "," (substring e 1 (- (length e) 1)))))
           (cat (Str "(vector") (concat (map (lambda (x) (cat (Str " ") (cas2xtm x))) p)) (Str ")")))
         (let ((res1 (multi_replace_all (concat (cas_parse_terms e))
                                        (list
                                         (list (Str "plus") (Str "+"))
                                         (list (Str "neg") (Str "* -1.0:double"))
                                         (list (Str "pi") (Str "PI")))))
               (res (cat (Str "(+ 0.0:double ")
                         res1
                         (Str ")"))))
           res)))))


(bind-func cas2xtmi8
  (lambda (e)
    (cstring (cas2xtm e))))

(bind-func cas2xtm_scm
  (lambda (e)
    (let ((res (cas2xtm:[String*,String*]* (Str e))))
      (cstring res))))


(bind-func caspp
  (let ((cnt 0))
    (lambda (s:i8* pp:i1)
      (if pp (printout " in[" cnt "]: " (Symbol s) "\n"))
      (beginz
       (let ((res (caseval s)))
         (if pp (printout "out[" cnt "]: " (Symbol res) "\n"))
         (set! cnt (+ cnt 1))
         res)))))

(bind-func casppoff
  (lambda (s:i8*)
    (caspp s 0)))

(bind-func casppon
  (lambda (s:i8*)
    (caspp s 1)))

(define-macro (cas . args)
  (let* ((a (regex:replace-all (if (list? (car args))
                                   (cas-xtm-to-string (car args))
                                   (sexpr->string args))
                               "{" "\("))
         (b (regex:replace-all a "}" "\)")))
    `(cptr->string (casppon ,b))))

;; inlined cas for inlining 'pure' giac code into xtlang
(bind-macro (icas . args)
  (let* ((a (regex:replace-all (if (list? (car args))
                                   (cas-xtm-to-string (car args))
                                   (sexpr->string args))
                               "{" "\("))
         (b (regex:replace-all a "}" "\)"))
         (c b) ; (string-append "simplify(" b ")"))
         (d (string->sexpr (cptr->string (cas2xtm_scm (eval `(casppoff c)))))))
    (if *icas-print-inline* (println 'inlined 'cas: d))
    `(let ((res ,d)) res)))


(define (scmcas name e . args)
  (let* ((a (cas-xtm-to-string `(,name ,e ,@args)))
         (b (regex:replace-all a "}" "\)"))
         (c (regex:replace-all b "{" "\("))
         (xx (cptr->string (casppoff c)))
         (res1 (cptr->string (cas2xtm_scm xx)))
         (res2 (regex:replace-all res1 "([0-9]*)\\.0*\\:double" "$1"))
         (res3 (regex:replace-all res2 "\\:double" "0"))
         (res (string->sexpr res2)))
    ;; (println 'a: a 'r1 res1 'res: res)
    (if (equal? (car res) 'vector)
        (cons 'vector
              (map (lambda (x)
                     (if (= (length x) 3)
                         (caddr x)
                         (if (> (length x) 3)
                             (cons '+ (cddr x))
                             x)))
                   (cdr res)))
        (if (= (length res) 3)
            (caddr res)
            (if (> (length res) 3)
                (cons '+ (cddr res))
                res)))))


(define (xtmcas name e . args)
  (let* ((a (cas-xtm-to-string `(,name ,e ,@args)))
         (b (regex:replace-all a "}" "\)"))
         (c (regex:replace-all b "{" "\("))
         (res1 (cptr->string (cas2xtm_scm (cptr->string (casppoff c))))))
    (string->sexpr res1)))


(define-macro (simplify e)
  (list 'quote (scmcas 'simplify e)))

(bind-macro (simplify e) (xtmcas 'simplify e))

(define-macro (diff e . args)
  (list 'quote (apply scmcas 'diff e args)))

(bind-macro (diff e . args) (apply xtmcas 'diff e args))

(define-macro (integrate e . args)
  (list 'quote (apply scmcas 'integrate e args)))

(bind-macro (integrate e . args) (apply xtmcas 'integrate e args))

(define-macro (limit e . args)
  (list 'quote (apply scmcas 'limit e args)))

(bind-macro (limit e . args) (apply xtmcas 'limit e args))

(define-macro (factor e)
  (list 'quote (scmcas 'factor e)))

(bind-macro (factor e) (xtmcas 'factor e))

(define-macro (expand e)
  (list 'quote (apply scmcas 'expand e)))

(bind-macro (expand e) (xtmcas 'expand e))

(define-macro (curl es vs)
  (list 'quote (scmcas 'curl es vs)))

(bind-macro (curl es vs) (xtmcas 'curl es vs))

(define-macro (grad e vs)
  (list 'quote (scmcas 'grad e vs)))

(bind-macro (grad e vs) (xtmcas 'grad e vs))

(define-macro (divergence es vs)
  (list 'quote (scmcas 'divergence es vs)))

(bind-macro (divergence es vs) (xtmcas 'divergence es vs))

(define-macro (taylor e . args)
  (list 'quote (apply scmcas 'taylor e args)))

(bind-macro (taylor e . args) (apply xtmcas 'taylor e args))

(define-macro (desolve e . args)
  (list 'quote (apply scmcas 'desolve e args)))

(bind-macro (desolve e . args) (apply xtmcas 'desolve e args))

(define-macro (solve e . args)
  (list 'quote (apply scmcas 'solve e args)))

(bind-macro (solve e . args) (apply xtmcas 'solve e args))

(define-macro (series e . args)
  (list 'quote (apply scmcas 'series e args)))

(bind-macro (series e . args) (apply xtmcas 'series e args))

(define-macro (linsolve es vs)
  (list 'quote (scmcas 'linsolve es vs)))

(bind-macro (linsolve es vs) (xtmcas 'linsolve es vs))

(bind-macro (linsolve_d es vs) (xtmcas 'linsolve es vs))
