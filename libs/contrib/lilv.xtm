;;; lilv.xtm -- an LV2 Host Library

;; Author: Andrew Sorensen
;; Keywords: extempore, lv2
;; Required dylibs: liblilv

;;; Commentary:

;; You will need to make sure you have the
;; liblilv library installed.
;; Simple OpengGL image library (SOIL) installed
;; You can get source from here:
;; http://www.lonesock.net/soil.html
;; Make sure you make liblilv-0.so (or similar dylib) accessible

;;; Code:

;; lilv lib

;; set up the current dylib name and path (for AOT compilation)
(bind-dylib liblilv
  (cond ((string=? (sys:platform) "OSX")
         "liblilv-0.dylib")
        ((string=? (sys:platform) "Linux")
         "liblilv-0.so")
        ((string=? (sys:platform) "Windows")
         "liblilv.dll")))

(bind-alias LV2_Handle i8*)
(bind-type LV2_Feature <i8*,i8*>)
;; LV2 Descriptor -
;; 0 - URI: const char*
;; 1 - instantiate (native c function ptr)
;; 2 - connect_port (native c function ptr)
;; 3 - activate (native c function ptr)
;; 4 - run (native c function ptr)
;; 5 - deactivate (native c function ptr)
;; 6 - cleanup (native c function ptr)
;; 7 - extension_data (native c function ptr)
(bind-type LV2_Descriptor <i8*,[LV2_Handle,LV2_Descriptor*,double,i8*,LV2_Feature**]*,[void,LV2_Handle,i32,i8*]*,[void,LV2_Handle]*,[void,LV2_Handle,i32]*,[void,LV2_Handle]*,[void,LV2_Handle]*,[i8*,i8*]*>)

(bind-alias bool i1)
;; lilvworld is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvWorld i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvIter i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvNode i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvNodes i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvPluginClass i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvPluginClasses i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvPlugin i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvPlugins i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvPort i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvPorts i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvScalePoint i8)
;; this is really a struct!
;; but we treat it transparently
;; (i.e. it should ALWAYS be a pointer)
(bind-alias LilvScalePoints i8)

(bind-type LilvInstanceImpl <LV2_Descriptor*,LV2_Handle,i8*>)
(bind-alias LilvInstance LilvInstanceImpl)

;; NODE
(bind-lib liblilv lilv_uri_to_path [i8*,i8*]*)
(bind-lib liblilv lilv_new_uri [LilvNode*,LilvWorld*,i8*]*)
(bind-lib liblilv lilv_new_string [LilvNode*,LilvWorld*,i8*]*)
(bind-lib liblilv lilv_new_int [LilvNode*,LilvWorld*,i32]*)
(bind-lib liblilv lilv_new_float [LilvNode*,LilvWorld*,float]*)
(bind-lib liblilv lilv_new_bool [LilvNode*,LilvWorld*,bool]*)
(bind-lib liblilv lilv_node_free [void,LilvNode*]*)
(bind-lib liblilv lilv_node_duplicate [LilvNode*,LilvNode*]*)
(bind-lib liblilv lilv_node_equals [bool,LilvNode*,LilvNode*]*)
(bind-lib liblilv lilv_node_get_turtle_token [i8*,LilvNode*]*)
(bind-lib liblilv lilv_node_is_uri [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_as_uri [i8*,LilvNode*]*)
(bind-lib liblilv lilv_node_is_blank [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_as_blank [i8*,LilvNode*]*)
(bind-lib liblilv lilv_node_is_literal [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_is_string [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_as_string [i8*,LilvNode*]*)
(bind-lib liblilv lilv_node_is_float [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_as_float [float,LilvNode*]*)
(bind-lib liblilv lilv_node_is_int [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_as_int [i32,LilvNode*]*)
(bind-lib liblilv lilv_node_is_bool [bool,LilvNode*]*)
(bind-lib liblilv lilv_node_as_bool [i1,LilvNode*]*)
(bind-lib liblilv lilv_nodes_free [void,LilvNodes*]*)
(bind-lib liblilv lilv_nodes_size [i32,LilvNodes*]*)
(bind-lib liblilv lilv_nodes_begin [LilvIter*,LilvNodes*]*)
(bind-lib liblilv lilv_nodes_next [LilvIter*,LilvNodes*,LilvIter*]*)
(bind-lib liblilv lilv_nodes_is_end [bool,LilvNodes*,LilvIter*]*)
(bind-lib liblilv lilv_nodes_get [LilvNode*,LilvNodes*,LilvIter*]*)
(bind-lib liblilv lilv_nodes_contains [bool,LilvNodes*,LilvNode*]*)
;; WORLD
(bind-lib liblilv lilv_world_new [LilvWorld*]*)
(bind-lib liblilv lilv_world_set_option [void,LilvWorld*,i8*,LilvNode*]*)
(bind-lib liblilv lilv_world_free [void,LilvWorld*]*)
(bind-lib liblilv lilv_world_load_all [void,LilvWorld*]*)
(bind-lib liblilv lilv_world_load_bundle [void,LilvWorld*,LilvNode*]*)
(bind-lib liblilv lilv_world_get_plugin_class [LilvPluginClass*,LilvWorld*]*)
(bind-lib liblilv lilv_world_get_plugin_classes [LilvPluginClasses*,LilvWorld*]*)
(bind-lib liblilv lilv_world_get_all_plugins [LilvPlugins*,LilvWorld*]*)
(bind-lib liblilv lilv_world_find_nodes [LilvNodes*,LilvWorld*,LilvNode*,LilvNode*,LilvNode*]*)
;; PLUGIN
(bind-lib liblilv lilv_plugin_verify [bool,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_uri [LilvNode*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_library_uri [LilvNode*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_name [LilvNode*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_class [LilvPluginClass*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_value [LilvPlugin*,LilvNode*]*)
(bind-lib liblilv lilv_plugin_has_feature [bool,LilvPlugin*,LilvNode*]*)
(bind-lib liblilv lilv_plugin_get_supported_features [LilvNodes*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_required_features [LilvNodes*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_optional_features [LilvNodes*,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_num_ports [i32,LilvPlugin*]*)
(bind-lib liblilv lilv_plugin_get_port_ranges_float [void,LilvPlugin*,float*,float*,float*]*)
(bind-lib liblilv lilv_plugin_get_port_by_index [LilvPort*,LilvPlugin*,i32]*)
(bind-lib liblilv lilv_plugin_get_port_by_symbol [LilvPort*,LilvPlugin*,LilvNode*]*)
(bind-lib liblilv lilv_plugins_size [i32,LilvNodes*]*)
(bind-lib liblilv lilv_plugins_begin [LilvIter*,LilvPlugins*]*)
(bind-lib liblilv lilv_plugins_next [LilvIter*,LilvPlugins*,LilvIter*]*)
(bind-lib liblilv lilv_plugins_is_end [bool,LilvPlugins*,LilvIter*]*)
(bind-lib liblilv lilv_plugins_get [LilvPlugin*,LilvPlugins*,LilvIter*]*)
(bind-lib liblilv lilv_plugins_get_by_uri [LilvPlugin*,LilvPlugins*,LilvNode*]*)
;; PORT
(bind-lib liblilv lilv_port_get_value [LilvNodes*,LilvPlugin*,LilvPort*,LilvNode*]*)
(bind-lib liblilv lilv_port_get_properties [LilvNodes*,LilvPlugin*,LilvPort*]*)
(bind-lib liblilv lilv_port_has_property [bool,LilvPlugin*,LilvPort*,LilvNode*]*)
(bind-lib liblilv lilv_port_supports_event [bool,LilvPlugin*,LilvPort*,LilvNode*]*)
(bind-lib liblilv lilv_port_get_symbol [LilvNode*,LilvPlugin*,LilvPort*]*)
(bind-lib liblilv lilv_port_get_name [LilvNode*,LilvPlugin*,LilvPort*]*)
(bind-lib liblilv lilv_port_is_a [bool,LilvPlugin*,LilvPort*,LilvNode*]*)
(bind-lib liblilv lilv_port_get_range [void,LilvPlugin*,LilvPort*,LilvNode**,LilvNode**,LilvNode**]*)
(bind-lib liblilv lilv_port_get_scale_points [LilvScalePoints*,LilvPlugin*,LilvPort*]*)
;; SCALE POINT
(bind-lib liblilv lilv_scale_point_get_label [LilvNode*,LilvScalePoint*]*)
(bind-lib liblilv lilv_scale_point_get_value [LilvNode*,LilvScalePoint*]*)
(bind-lib liblilv lilv_scale_points_size [i32,LilvScalePoints*]*)
(bind-lib liblilv lilv_scale_points_free [void,LilvScalePoints*]*)
(bind-lib liblilv lilv_scale_points_begin [LilvIter*,LilvScalePoints*]*)
(bind-lib liblilv lilv_scale_points_next [LilvIter*,LilvScalePoints*,LilvIter*]*)
(bind-lib liblilv lilv_scale_points_is_end [bool,LilvScalePoints*,LilvIter*]*)
(bind-lib liblilv lilv_scale_points_get [LilvScalePoint*,LilvScalePoints*,LilvIter*]*)
;; PLUGIN CLASS
(bind-lib liblilv lilv_plugin_class_get_parent_uri [LilvNode*,LilvPluginClass*]*)
(bind-lib liblilv lilv_plugin_class_get_uri [LilvNode*,LilvPluginClass*]*)
(bind-lib liblilv lilv_plugin_class_get_label [LilvNode*,LilvPluginClass*]*)
(bind-lib liblilv lilv_plugin_class_get_children [LilvPluginClasses*,LilvPluginClass*]*)
;; PLUGIN INSTANCE
(bind-lib liblilv lilv_plugin_instantiate [LilvInstance*,LilvPlugin*,double,LV2_Feature**]*)
(bind-lib liblilv lilv_instance_free [void,LilvInstance*]*)


(bind-val lilv_world LilvWorld*)
(bind-val lilv_plugins LilvPlugins*)


(bind-func lilv_print_all_plugin_ports
  (lambda (plugin)
    (let ((ports (lilv_plugin_get_num_ports plugin))
          (port:LilvPort* null)
          (name:LilvNode* null)
          (i:i32 0))
      (printf "num of ports: %d\n" ports)
      (dotimes (i ports)
        (set! port (lilv_plugin_get_port_by_index plugin i))
        (set! name (lilv_port_get_name plugin port))
        (printf "port[%d]: %s\n" i (lilv_node_as_string name)))
      void)))

(bind-func lilv_print_all_lv2_plugins
  (lambda ()
    (let ((size:i32 (lilv_plugins_size lilv_plugins))
          (i:i32 0)
          (plugin:LilvPlugin* null)
          (name:LilvNode* null)
          (iterator:LilvIter* (lilv_plugins_begin lilv_plugins)))
      (printf "total number of plugins found: %d\n" size)
      (dotimes (i size)
        (set! plugin (lilv_plugins_get lilv_plugins iterator))
        (set! name (lilv_plugin_get_name plugin))
        (printf "lv2 plugin: %s\n" (lilv_node_as_string name))
        (set! iterator (lilv_plugins_next lilv_plugins iterator)))
      void)))



;; init and load lilv_world & lilv_plugins
(bind-func lilv_init_world
  (lambda ()
    (set! lilv_world (lilv_world_new))
    (lilv_world_load_all lilv_world)
    (set! lilv_plugins (lilv_world_get_all_plugins lilv_world))
    void))

(bind-func lilv_load_plugin
  (lambda (uri samplerate)
    (let ((uri_node (lilv_new_uri lilv_world uri))
          (plugin (lilv_plugins_get_by_uri lilv_plugins uri_node))
          (name (lilv_plugin_get_name plugin)))
      (printf "loading lv2plug: %s\n" (lilv_node_as_string name))
      (lilv_print_all_plugin_ports plugin)
      (lilv_plugin_instantiate plugin samplerate null))))

;; activate plugin
(bind-func lilv_activate
  (lambda (instance:LilvInstance*)
    (let ((descriptor (tref instance 0))
          (handle (tref instance 1))
          (activate_fptr (tref descriptor 3)))
      (fptrcall activate_fptr handle)
      void)))


(bind-func lilv_connect_to_port
  (lambda (instance:LilvInstance* port:i32 data:i8*)
    (let ((descriptor (tref instance 0))
          (handle (tref instance 1))
          (connect_fptr (tref descriptor 2)))
      (fptrcall connect_fptr handle port data)
      void)))
