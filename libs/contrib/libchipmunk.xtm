;; minimal bindings and test function
;; do not use (yet)

(if *impc:compiler:with-cache* (sys:load "libs/aot-cache/libchipmunk.xtm" 'quiet))
(sys:load-preload-check 'libchipmunk)

(impc:aot:suppress-aot-do
 (sys:load "libs/base/base.xtm"))
(impc:aot:insert-forms
 (sys:load "libs/base/base.xtm" 'quiet))

(impc:aot:insert-header "xtmlibchipmunk")

(bind-dylib libchipmunk
  (cond ((string=? (sys:platform) "OSX") "libchipmunk.dylib")
        ((string=? (sys:platform) "Linux") "libchipmunk.so")
        (log-error (sys:platform) 'is 'unsupported '(so far))))

;; typedef double cpFloat;

(bind-alias cpBool i8)
(bind-alias cpFloat double)
(bind-val CPFLOAT_MIN cpFloat 2.2250738585072014e-308)
(bind-val CPFLOAT_MAX cpFloat 1.79769e+308)
(bind-alias cpDataPointer i8*)

(bind-alias cpSpace i8) ;; keep these opaque
(bind-alias cpBody i8)
(bind-alias cpShape i8)
(bind-alias cpConstraint i8)

(sys:load "libs/contrib/libchipmunk/cpVect.xtm")
(sys:load "libs/contrib/libchipmunk/cpBB.xtm")
(sys:load "libs/contrib/libchipmunk/cpTransform.xtm")
(sys:load "libs/contrib/libchipmunk/cpArbiter.xtm")
(sys:load "libs/contrib/libchipmunk/cpBody.xtm")
(sys:load "libs/contrib/libchipmunk/cpShape.xtm")
(sys:load "libs/contrib/libchipmunk/cpPolyShape.xtm")
(sys:load "libs/contrib/libchipmunk/cpConstraint.xtm")
(sys:load "libs/contrib/libchipmunk/cpSpace.xtm")

(bind-lib libchipmunk cpMomentForCircle [cpFloat,cpFloat,cpFloat,cpFloat,cpVect])
(bind-lib libchipmunk cpAreaForCircle [cpFloat,cpFloat,cpFloat])
(bind-lib libchipmunk cpMomentForSegment [cpFloat,cpFloat,cpVect,cpVect,cpFloat])
(bind-lib libchipmunk cpAreaForSegment [cpFloat,cpVect,cpVect,cpFloat])
(bind-lib libchipmunk cpMomentForPoly [cpFloat,cpFloat,i32,cpVect*,cpVect,cpFloat])
(bind-lib libchipmunk cpAreaForPoly [cpFloat,i32,cpVect*,cpFloat])
(bind-lib libchipmunk cpCentroidForPoly [cpFloat,i32,cpVect*,cpFloat])
(bind-lib libchipmunk cpMomentForBox [cpFloat,cpFloat,cpFloat,cpFloat])
(bind-lib libchipmunk cpMomentForBox2 [cpFloat,cpFloat,cpBB])
(bind-lib libchipmunk cpConvexHull [i32,i32,cpVect*,cpVect*,i32*,cpFloat])
(bind-func cpClosestPointOnSegment
  (lambda (p:cpVect a:cpVect b:cpVect)
    (let ((delta (cpvsub a b)) (t (clamp (/ (cpvdot delta (cpvsub p b)) (cpvlengthsq delta)) 0. 1.)))
      (cpvadd b (cpvmult delta t)))))

;; (bind-func test
;;   (lambda ()
;;     (let (
;;         (space (cpSpaceNew))
;;         (ground (cpSegmentShapeNew (cpSpaceGetStaticBody space) (cpVect_val -20.0 5.0) (cpVect_val 20.0 -5.0) 0.0))
;;         (mass 1.0)
;;         (radius 5.0)
;;         (moment (cpMomentForCircle mass 0.0 radius (cpVect_val 0.0 0.0)))
;;         (ballBody (cpSpaceAddBody space (cpBodyNew mass moment)))
;;         (ballShape (cpSpaceAddShape space (cpCircleShapeNew ballBody radius (cpVect_val 0.0 0.0))))
;;         (timeStep (/ 1.0 60.0)))
;;       (cpSpaceSetGravity space (cpVect_val 0.0 -100.0))
;;       (cpShapeSetFriction ground 1.0)
;;       (cpSpaceAddShape space ground)
;;       (cpBodySetPosition ballBody (cpVect_val 0.0 15.0))
;;       (cpShapeSetFriction ballShape 0.7)
;;       (let ((i:i64 0))
;;         (dotimes (i 120)
;;           (let (
;;               (pos (cpBodyGetPosition ballBody))
;;               (vel (cpBodyGetVelocity ballBody)))
;;             (printf "Tick: %3d pos: " i)
;;             (print pos)
;;             (printf " vel: ")
;;             (println vel)
;;             (cpSpaceStep space timeStep)))))))

;; (test)

(impc:aot:insert-footer "xtmlibchipmunk")
