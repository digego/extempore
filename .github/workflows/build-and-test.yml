name: Build & run tests

on:
  - push
  - pull_request

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
          - ubuntu-20.04
          - macos-10.15 # catalina
          - macos-11.0  # big sur
          - windows-2016
          - windows-2019
        config:
          - Release
        include:
          - os: windows-2016
            cmake-generator: -G "Visual Studio 15 2017" -A x64
          - os: windows-2019
            cmake-generator: -G "Visual Studio 16 2019" -A x64

    steps:
      - if: contains(matrix.os, 'ubuntu')
        name: deps
        run: |
          sudo apt update
          sudo apt-get install libasound2-dev xorg-dev libglu1-mesa-dev

      - name: cache llvm
        id: llvm-cache
        uses: actions/cache@v2
        with:
          path: |
            ./llvm-3.8.0.install
          key: ${{ matrix.os }}-llvm.3.8.0-1 # bump this number if you want to trigger an LLVM build

      - name: download and unpack llvm, nixes
        if: steps.llvm-cache.outputs.cache-hit != 'true' && !contains(matrix.os, 'windows')
        run: |
          wget "https://releases.llvm.org/3.8.0/llvm-3.8.0.src.tar.xz"
          cmake -E tar xJf llvm-3.8.0.src.tar.xz

      - name: download and unpack llvm, windows
        if: contains(matrix.os, 'windows') && steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          Invoke-webrequest "https://releases.llvm.org/3.8.0/llvm-3.8.0.src.tar.xz" -outfile llvm-3.8.0.src.tar.xz
          cmake -E tar xJf llvm-3.8.0.src.tar.xz

      - uses: actions/checkout@v2
        with:
          path: extempore

      - name: patch llvm
        if: steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          cd llvm-3.8.0.src/
          patch -p0 -i ../extempore/extras/extempore-llvm-3.8.0.patch

      - name: configure llvm
        if: steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          mkdir llvm-3.8.0.build
          mkdir llvm-3.8.0.install
          cd llvm-3.8.0.build
          cmake -DLLVM_TARGETS_TO_BUILD=X86 -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_TERMINFO=OFF -DLLVM_ENABLE_ZLIB=OFF -DLLVM_INCLUDE_UTILS=OFF -DLLVM_BUILD_RUNTIME=OFF -DLLVM_INCLUDE_EXAMPLES=OFF -DLLVM_INCLUDE_TESTS=OFF -DLLVM_INCLUDE_GO_TESTS=OFF -DLLVM_INCLUDE_DOCS=OFF -DCMAKE_INSTALL_PREFIX=../llvm-3.8.0.install ../llvm-3.8.0.src/

      - name: build llvm
        if: steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          cd llvm-3.8.0.build
          # if you're doing this by hand you might need `-- -j2` instead of `-j2`
          cmake --build . --config Release -j2
          cmake --build . --config Release -j2 --target llvm-as

      - name: install llvm nix
        if: steps.llvm-cache.outputs.cache-hit != 'true' && !contains(matrix.os, 'windows')
        run: |
          cd llvm-3.8.0.build
          cmake --install .
          cp bin/llvm-as $GITHUB_WORKSPACE/llvm-3.8.0.install/bin/

      - name: install llvm windows
        if: contains(matrix.os, 'windows') && steps.llvm-cache.outputs.cache-hit != 'true'
        run: |
          cd llvm-3.8.0.build
          cmake --install . --prefix ../llvm-3.8.0.install
          cp .\Release\bin\llvm-as.exe ../llvm-3.8.0.install/bin/

      - name: configure, nix
        if: ${{ !contains(matrix.os, 'windows') }}
        run: cd extempore && mkdir build && cd build && env EXT_LLVM_DIR=$GITHUB_WORKSPACE/llvm-3.8.0.install cmake -DASSETS=ON cmake ${{ matrix.cmake-generator }} ..

      - name: configure, windows
        if: contains(matrix.os, 'windows')
        run: |
          $Env:EXT_LLVM_DIR = "$Env:GITHUB_WORKSPACE/llvm-3.8.0.install"
          cd extempore && mkdir build && cd build && cmake -DASSETS=ON ${{ matrix.cmake-generator }} ..

      - name: build, nix
        run: |
          cd extempore/build
          env EXT_LLVM_DIR=$GITHUB_WORKSPACE/llvm-3.8.0.install cmake --build . -j2 --config Release

      - name: build, windows
        run: |
          cd extempore/build
          $Env:EXT_LLVM_DIR="$Env:GITHUB_WORKSPACE/llvm-3.8.0.install/Release"
          cmake --build . -j2 --config Release

      #- name: aot-compile-stdlib
      #  run: cd extempore && cmake --build build --config ${{ matrix.config }}

      - name: test
        run: cd extempore && cd build && ctest --build-config ${{ matrix.config }} --label-regex libs-core
