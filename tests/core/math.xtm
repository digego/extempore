;;; math.xtm:tests -- test for the math library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;; Tests for libs/core/math.xtm

;;; Code:

(sys:load "libs/core/math.xtm")
(sys:load "libs/core/rational.xtm")

(xtmtest '(bind-func test_gcd
            (lambda ()
              (Rational_greatest_common_divisor 4 12)))

         (test_gcd) 4)

(xtmtest '(bind-func test_rat_reduce
            (lambda ()
              (println "3/6 =" (Rational_reduce 3/6))
              (println "-2/12 =" (Rational_reduce -2/12))))

         (test_rat_reduce))

(xtmtest '(bind-func test_overload_rational_addition
            (lambda ()
              (println (+ 1/3 2/3))))

         (test_overload_rational_addition))

(xtmtest '(bind-func test_overload_rational_subtraction
            (lambda ()
              (println (- 1/3 2/3))))

         (test_overload_rational_subtraction))

(xtmtest '(bind-func test_overload_rational_multiplication
            (lambda ()
              (println (* 1/3 2/3))))

         (test_overload_rational_multiplication))

(xtmtest '(bind-func test_overload_rational_division
            (lambda ()
              (println (/ 1/3 2/3))))

         (test_overload_rational_division))

(xtmtest '(bind-func test_rational_equal
            (lambda ()
              (= 3/4 6/8)))

         (test_rational_equal) 1)

(xtmtest '(bind-func test_rational_notequal
            (lambda ()
              (<> 3/4 6/8)))

         (test_rational_notequal) 0)

(xtmtest '(bind-func test_rational_lessthan
            (lambda ()
              (< 1/2 3/4)))

         (test_rational_lessthan) 1)

(xtmtest '(bind-func test_rational_greaterthan
            (lambda ()
              (> 1/2 3/4)))

         (test_rational_greaterthan) 0)

;; some more complicated tests

(xtmtest '(bind-func test_operator_overloading_1
            (lambda ()
              (= (* 4/3 1/2)
                 (/ 12/3 12/2))))

         (test_operator_overloading_1) 1)

;; Complexd number tests

(xtmtest '(bind-func test_complex_addition
            (lambda ()
              (println (+ (Cpxd 2. 0.4)
                          (Cpxd 5.4 6.)))))

         (test_complex_addition))

(xtmtest '(bind-func test_complex_multiplication_1
            (lambda ()
              (println (* 1+1i 0+1i))))

         (test_complex_multiplication_1))

(xtmtest '(bind-func test_complex_multiplication_2
            (lambda ()
              (println (* 1+1i 1.0))))

         (test_complex_multiplication_2))

(xtmtest
 '(bind-func test_clampi32
    (lambda ()
      (and (= (clamp 5:i32 0:i32 3:i32) 3)
           (= (clamp -4:i32 0:i32 3:i32) 0)
           (= (clamp 1:i32 0:i32 3:i32) 1))))
 (test_clampi32) 1)

(xtmtest
 '(bind-func test_clampi64
    (lambda ()
      (and (= (clamp 5 0 3) 3)
           (= (clamp -4 0 3) 0)
           (= (clamp 1 0 3) 1))))
 (test_clampi64) 1)

(xtmtest
 '(bind-func test_clampf
    (lambda ()
      (and (= (clamp 5. 0.4 3.3) 3.3)
           (= (clamp -4. 0.4 3.3) 0.4)
           (= (clamp 1. 0.4 3.3) 1.))))
 (test_clampf) 1)

(xtmtest
 '(bind-func test_clampd
    (lambda ()
      (and (= (clamp 5. 0.4 3.3) 3.3)
           (= (clamp -4. 0.4 3.3) 0.4)
           (= (clamp 1. 0.4 3.3) 1.))))
 (test_clampd) 1)

(xtmtest
 '(bind-func test_vcopy_unpack
    (lambda ()
      (let ((src:float* (salloc 4))
            (dest:float* (salloc 8)))
        (pfill! src 4. 5. 6. 7.)
        (vcopy_unpack src dest 4 2 2)
        (and (= (pref dest 0) 4.)
             (= (pref dest 1) 5.)
             (= (pref dest 4) 6.)
             (= (pref dest 5) 7.)))))
 (test_vcopy_unpack)
 1)

(xtmtest
 '(bind-func test_vcopy_pack
    (lambda ()
      (let ((src:float* (salloc 8))
            (dest:float* (salloc 4)))
        (pfill! src 0. 1. 2. 3. 4. 5. 6. 7.)
        (vcopy_pack src dest 4 2 2)
        (vsum dest 4))))
 (test_vcopy_pack)
 10.)

(xtmtest
 '(bind-func test_vcopy_pack1
    (lambda ()
      (let ((src:double* (salloc 8))
            (dest:double* (salloc 4)))
        (pfill! src 0. 1. 2. 3. 4. 5. 6. 7.)
        (vcopy_pack src dest 4 2 2)
        (vsum dest 4))))
 (test_vcopy_pack1)
 10.)

(xtmtest
 '(bind-func test_histogram_float
    (lambda ()
      (let ((buf:float* (salloc 8))
            (hist:HistBin* (salloc 4)))
        (pfill! buf 0. 1. 2. 3. 4. 5. 6. 7.)
        (set! hist (histogram hist buf 8 4))
        (doloop (i 4)
          (println (pref-ptr hist i)))
        (and (= (tref (pref hist 1) 0) 1.75)
             (= (tref (pref hist 1) 1) 2.0)))))
 (test_histogram_float)
 1)

(xtmtest
 '(bind-func test_rowmaj_idx_2D
    (lambda ()
      (letz ((m:i64* (zalloc 6)))
        (pfill! m 0 1 2 3 4 5)
        (and (= (pref m (rowmaj_idx_2D 0 0 3)) 0)
             (= (pref m (rowmaj_idx_2D 0 1 3)) 1)
             (= (pref m (rowmaj_idx_2D 0 2 3)) 2)
             (= (pref m (rowmaj_idx_2D 1 0 3)) 3)
             (= (pref m (rowmaj_idx_2D 1 1 3)) 4)
             (= (pref m (rowmaj_idx_2D 1 2 3)) 5)))))
 (test_rowmaj_idx_2D) 1)

(xtmtest
 '(bind-func test_colmaj_idx_2D
    (lambda ()
      (letz ((m:i64* (zalloc 6)))
        (pfill! m 0 3 1 4 2 5)
        (and (= (pref m (colmaj_idx_2D 0 0 2)) 0)
             (= (pref m (colmaj_idx_2D 0 1 2)) 1)
             (= (pref m (colmaj_idx_2D 0 2 2)) 2)
             (= (pref m (colmaj_idx_2D 1 0 2)) 3)
             (= (pref m (colmaj_idx_2D 1 1 2)) 4)
             (= (pref m (colmaj_idx_2D 1 2 2)) 5)))))
 (test_colmaj_idx_2D) 1)

;; diff e^x
(xtmtest
 '(bind-func test-diff1
   (lambda ()
     (let ((a (ndiff (lambda (x) (exp x)) 5.0))
           (b ((lambda (x:double) (exp x)) 5.0)))
       (println 'diff_a a 'diff_b b)
       (if (< (fabs (- a b)) .0001) 1 0))))
 (test-diff1) 1)

;; diff sin x
(xtmtest
 '(bind-func test-diff2
    (lambda ()
      (let ((a (ndiff (lambda (x) (sin x)) 5.0))
            (b ((lambda (x:double) (cos x)) 5.0)))
       (println 'diff_a a 'diff_b b)
        (if (< (fabs (- a b)) .0001) 1 0))))
 (test-diff2) 1)

;; diff x^2
(xtmtest
 '(bind-func test-diff3
    (lambda ()
      (let ((a (ndiff (lambda (x) (* x x)) 5.0))
            (b ((lambda (x:double) (* 2.0 x)) 5.0)))
        (println 'diff_a a 'diff_b b)
        (if (< (fabs (- a b)) .0001) 1 0))))
 (test-diff3) 1)

;; diff ln x
(xtmtest
 '(bind-func test-diff4
    (lambda ()
      (let ((a (ndiff (lambda (x) (log x)) 5.0))
            (b ((lambda (x:double) (/ 1.0 x)) 5.0)))
        (println 'diff_a a 'diff_b b)
        (if (< (fabs (- a b)) .0001) 1 0))))
 (test-diff4) 1)


;; integrate x^2 [4,5]
(xtmtest
 '(bind-func test-intgrate1
    (lambda ()
      (let ((a (nintegrate (lambda (x) (* x x)) 4.0 5.0))
            (b (- ((lambda (x:double) (* (/ 1.0 3.0) (* x x x))) 5.0)
                  ((lambda (x:double) (* (/ 1.0 3.0) (* x x x))) 4.0))))
        (println 'integrate_a a 'integrate_b b)
        (if (< (fabs (- a b)) .0001) 1 0))))
 (test-intgrate1) 1)

;; integrate
(xtmtest
 '(bind-func test-integrate2
    (lambda ()
      (let ((a (nintegrate (lambda (x) (sin x)) 0.0 2.0))
            (b (- ((lambda (x:double) (* -1.0 (cos x))) 2.0)
                  ((lambda (x:double) (* -1.0 (cos x))) 0.0))))
        (if (< (fabs (- a b)) .0001) 1 0))))
 (test-integrate2) 1)


(xtmtest-print-results)
