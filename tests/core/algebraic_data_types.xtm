;;
;; some ADT examples
;;

(sys:load "libs/base/adt.xtm")


(bind-data ADPoint{!a}
           (ADPoint2D !a !a)
           (ADPoint3D !a !a !a))

(bind-data ADShape{!a}
           (ADCircle ADPoint{!a}* !a)
           (ADRect ADPoint{!a}* !a !a))

(xtmtest
 '(bind-func algdt_test1
    (lambda ()
      (let ((p1 (ADPoint2D 11 12))
            (circle (ADCircle p1 5:i64))
            (rect (ADRect (ADPoint2D 0 0) 5 5)))
        (ADPoint2D$ p1 (x y)
                     (begin (printout 'x: x " " 'y: y "\n")
                            x)
                     0)
        (println (ADCircle$ circle (p r)
                             (ADPoint2D$ p (x y)
                                          (tuple x y)
                                          (tuple 0 0))
                             (tuple 0 0)))
        void)))
 (algdt_test1))

;; Either

(bind-data ADEither{!a,!b}
           (ADLeft !a)
           (ADRight !b))

(xtmtest-compile
 '(bind-func algdt_test2:[ADEither{i64,String*}*,i1]*
    (lambda (choice)
      (if choice
          (ADLeft 100)
          (ADRight '100')))))

(xtmtest
 '(bind-func algdt_test3
    (lambda ()
      (let ((res (algdt_test2 #f)))
        (ADRight$ res (x) (println x) (println "wrong"))
        void)))
 (algdt_test3))

;;
;; list monad
;;
(bind-data ADList{!a}
           (ADNil)
           (ADCons !a ADList{!a}*))

;; print & toString for lists

(bind-func toString_help:[String*,ADList{!a}*,String*]*
  (lambda (lst s)
    (ADCons$ lst (x xs)
              (ADNil$ xs ()
                       (toString_help xs (cat s (toString x)))
                       (toString_help xs (cat s (toString x) (Str ","))))
              (cat s (Str "]")))))

(bind-func print:[void,ADList{!a}*]*
  (lambda (lst)
    (printout (toString_help lst '['))
    void))

(bind-func toString:[String*,ADList{!a}*]*
  (lambda (lst)
    (toString_help lst '[')))

(bind-func append:[ADList{!a}*,ADList{!a}*,ADList{!a}*]*
  (lambda (as bs)
    (ADCons$ as (x xs) (ADCons x (append xs bs)) bs)))

;; also sometimes called flatten
(bind-func join:[ADList{!a}*,ADList{ADList{!a}*}*]*
  (lambda (M)
    (ADCons$ M (xs xss) (append xs (join xss)) (ADNil))))

(bind-func fmap:[ADList{!b}*,[!b,!a]*,ADList{!a}*]*
  (lambda (f F)
    (ADCons$ F (x xs) (ADCons (f x) (fmap f xs)) (ADNil))))

;; also known as bind in haskell
(bind-func flatmap:[ADList{!b}*,ADList{!a}*,[ADList{!b}*,!a]*]*
  (lambda (M f)
    ;; alternative 'direct' implementation
    ;; (ADCons$ M (x xs) (append (f x) (flatmap xs f)) (ADNil))))
    (join (fmap f M))))

;; also known as pure or return
(bind-func unit:[ADList{!a}*,!a]*
  (lambda (x)
    (ADCons x (ADNil))))

;; also known as <*> or ap
(bind-func apply:[ADList{!b}*,ADList{[!b,!a]*}*,ADList{!a}*]*
  (lambda (F1 F2)
    (ADCons$ F1 (f fs)
              (ADCons$ F2 (x xs)
                        (ADCons (f x) (apply fs xs))
                        (ADNil))
              (ADNil))))


(bind-func foldl:[!b,[!b,!b,!a]*,!b,ADList{!a}*]*
  (lambda (fn start lst)
    (ADCons$ lst (x xs)
              (foldl fn (fn start x) xs)
              start)))

(bind-func foldr:[!b,[!b,!b,!a]*,!b,ADList{!a}*]*
  (lambda (fn start lst)
    (ADCons$ lst (x xs)
              (fn x (foldr fn start xs))
              start)))

;; list range function (inclusive min & max)
;; (bind-func range:[ADList{!a}*,!a,!a]*
;;   (lambda (mn mx)
;;     (if (> mn mx)
;;         (ADNil)
;;         (ADCons mn (range (+ mn (convert 1)) mx)))))

;; tail recursive version of range
(bind-func adrange:[ADList{!a}*,!a,!a,!a]*
  (lambda (mn mx i)
    (let ((rng (lambda (m x lst)
                 (if (< x m)
                     lst
                     (rng m (- x i) (ADCons x lst))))))
      (rng mn mx (ADNil)))))

(bind-func adrange:[ADList{!a}*,!a,!a]*
  (lambda (mn mx)
    (adrange mn mx (convert 1))))

(bind-func adrange:[ADList{!a}*,!a]*
  (lambda (mx)
    (adrange (convert 0) mx (convert 1))))



;; (bind-func reverse:[ADList{!a}*,ADList{!a}*]*
;;   (lambda (lst)
;;     (ADCons$ lst (x xs)
;;            (append (reverse xs) (unit x))
;;            (ADNil))))

;; tail recursive version
(bind-func reverse:[ADList{!a}*,ADList{!a}*]*
  (lambda (lst)
    (let ((rev (lambda (old new)
                 (if (ADNil$ lst () #t #f)
                     rlst
                     (rev (ADCons$ old (x xs) xs (ADNil))
                          (ADCons$ old (x xs)
                                    (ADCons x new)
                                    (ADNil)))))))
      (rev lst (ADNil)))))


;;
;; test list
;;

;; list test 1
(xtmtest
 '(bind-func algdt_test4
    (lambda ()
      (let ((l1 (ADCons 1 (ADCons 2 (ADNil)))))
        (println 'l1 '= l1))))
 (algdt_test4))


;; list test 2
(xtmtest
 '(bind-func algdt_test5
    (lambda ()
      (let ((l1 (ADCons 1 (ADCons 2 (ADNil))))
            (l2 (fmap (lambda (x) (* x x)) l1)))
        (println 'l2 '= l2))))
 (algdt_test5))

;; list test 3
(xtmtest
 '(bind-func algdt_test6
    (lambda ()
      (let ((l1 (ADCons 1 (ADCons 2 (ADNil))))
            (l3 (fmap (lambda (x) (ADCons x (ADCons x (ADNil)))) l1)))
        (println 'l3 '= l3))))
 (algdt_test6))

;; (xtmtest-compile
;;  '(bind-func algdt_test7
;;     (lambda ()
;;       (let ((l1:ADList{i64}* (ADCons 20 (ADNil)))
;;             (l2:ADList{i64}* (ADCons 4 (ADNil)))
;;             (l3 (fmap (lambda (x:i64) (lambda (y:i64) (* x y))) l2)))
;;         (t: (apply l3 l1) ADList{i64}*)))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Pairs
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-data ADPair{!a} (ADPair !a !a))

;; tostring for pair
(bind-func toString:[String*,ADPair{!a}*]*
  (lambda (p)
    (ADPair$ p (a b)
              (cat (Str "(") (toString a) (Str ",") (toString b) (Str ")"))
              (Str "()"))))

(xtmtest-compile
 '(bind-func algdt_test8
    (lambda ()
      (dolet ((x (adrange 1 2))
              (y (adrange 1 4)))
             (unit (ADPair x y))))))

(xtmtest
 '(bind-func algdt_test8b
    (lambda ()
      (println (algdt_test8))))
 (algdt_test8b))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; maybe monad
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-data ADOption{!a}
           (ADSome !a)
           (ADNone))

(bind-func toString:[String*,ADOption{!a}*]*
  (lambda (F)
    (ADSome$ F (x)
              (toString x)
              '_')))

(bind-func print:[void,ADOption*]*
  (lambda (F)
    (printout (toString F))))

;; also known as map, lift
(bind-func fmap:[ADOption{!b}*,[!b,!a]*,ADOption{!a}*]*
  (lambda (f F)
    (ADSome$ F (x) (ADSome (f x)) (ADNone))))

(bind-func join:[ADOption{!a}*,ADOption{ADOption{!a}*}*]*
  (lambda (M)
    (ADSome$ M (x) x (ADNone))))

;; also known as bind
;; it's more convenient to have the function in last arg position
(bind-func flatmap:[ADOption{!b}*,ADOption{!a}*,[ADOption{!b}*,!a]*]*
  (lambda (M f)
    ;; (join (fmap f M)))) ;; alternate using join & fmap
    (ADSome$ M (x) (f x) (ADNone))))


;; also known as return or pure
(bind-func unit:[ADOption{!a}*,!a]*
  (lambda (x)
    (ADSome x)))

;; also known as <*> or ap
(bind-func apply:[ADOption{!b}*,ADOption{[!b,!a]*}*,ADOption{!a}*]*
  (lambda (F1 F2)
    (ADSome$ F1 (f)
              (ADSome$ F2 (x)
                        (ADSome (f x))
                        (ADNone))
              (ADNone))))

;;
;; tests
;;

;; using flatmap explicity
(bind-func div_test:[ADOption*,ADOption*,ADOption*]*
  (lambda (a b)
    (flatmap
     a (lambda (n) ;; numerator
         (flatmap
          b (lambda (d) ;; denominator
              (if (= d 0)
                  (ADNone)
                  (ADSome (/ n d)))))))))


;; do style version
(bind-func div_test:[ADOption*,ADOption*,ADOption*]*
  (lambda (a b)
    (dolet ((n a)  ;; numerator
            (d b)) ;; denominator
           (if (= d 0)
               (ADNone)
               (ADSome (/ n d))))))

(bind-func div_test:[ADOption{!a}*,!a,!a]*
  (lambda (x y)
    (div_test (ADSome x) (ADSome y))))


(xtmtest
 '(bind-func algdt_test9
    (lambda ()
      (println (div_test (ADSome 125) (ADSome 25))
               (div_test 50 10)
               (div_test 10 0)
               (div_test 15 3))))
 (algdt_test9))
