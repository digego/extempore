;;; game-of-life.xtm:tests/external -- GOL tests

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;

;;; Code:

(sys:load "libs/contrib/game-of-life.xtm")

(bind-val world World*)

(call-as-xtlang
 (set! world (world_create 5 5))
 (world_init world 0.0))

;; a helpful type for testing things

(bind-type CellValue <i64,i64,i8>)

;; uses hardcoded global "world" pointer
(bind-func cell_check_result
  (lambda (expected:CellValue*)
    (let ((res (= (cell_value world
                           (tref expected 0)
                           (tref expected 1))
                  (tref expected 2))))
      (if (not res)
          (println "wrong for x =" (tref expected 0) "y =" (tref expected 1)
                   "got" (cell_value world
                           (tref expected 0)
                           (tref expected 1))
                   "was expecting" (tref expected 2)))
      res)))

;; check that the indexing works

(bind-func test_world_indexing
  (lambda ()
    (world_init world 0.0)
    ;; set up a "checkerboard" pattern
    (world_set_to_checkerboard world)
    (every cell_check_result
           (list (CellValue 0 0 0)
                 (CellValue 0 1 1)
                 (CellValue 0 2 0)
                 (CellValue 0 3 1)
                 (CellValue 0 4 0)
                 (CellValue 1 0 1)
                 (CellValue 1 1 0)
                 (CellValue 1 2 1)
                 (CellValue 1 3 0)
                 (CellValue 1 4 1)
                 (CellValue 2 0 0)
                 (CellValue 2 1 1)
                 (CellValue 2 2 0)
                 (CellValue 2 3 1)
                 (CellValue 2 4 0)
                 (CellValue 3 0 1)
                 (CellValue 3 1 0)
                 (CellValue 3 2 1)
                 (CellValue 3 3 0)
                 (CellValue 3 4 1)
                 (CellValue 4 0 0)
                 (CellValue 4 1 1)
                 (CellValue 4 2 0)
                 (CellValue 4 3 1)
                 (CellValue 4 4 0)))))

(xtmtest-result (test_world_indexing) 1)

(bind-func test_world_copy
  (lambda ()
    ;; randomly initialise world
    (world_init world 0.5)
    (let ((w2 (world_copy world)))
      (and (world_equal world w2)
           (begin
             (world_init w2 0.5)
             (not (world_equal world w2)))))))

(xtmtest-result (test_world_copy) 1)

;; check that a basic 1x3 "blinker" works properly

(bind-func test_add_blinker
  (lambda ()
    (world_init world 0.0)
    (world_add_blinker world 2 2)
    ;; (world_ascii_print world)
    (every cell_check_result
           (list (CellValue 0 0 0)
                 (CellValue 0 1 0)
                 (CellValue 0 2 0)
                 (CellValue 0 3 0)
                 (CellValue 0 4 0)
                 (CellValue 1 0 0)
                 (CellValue 1 1 0)
                 (CellValue 1 2 0)
                 (CellValue 1 3 0)
                 (CellValue 1 4 0)
                 (CellValue 2 0 0)
                 (CellValue 2 1 1)
                 (CellValue 2 2 1)
                 (CellValue 2 3 1)
                 (CellValue 2 4 0)
                 (CellValue 3 0 0)
                 (CellValue 3 1 0)
                 (CellValue 3 2 0)
                 (CellValue 3 3 0)
                 (CellValue 3 4 0)
                 (CellValue 4 0 0)
                 (CellValue 4 1 0)
                 (CellValue 4 2 0)
                 (CellValue 4 3 0)
                 (CellValue 4 4 0)))))

(xtmtest-result (test_add_blinker) 1)

(bind-func test_blink_blinker
  (lambda ()
    (world_init world 0.0)
    (let ((gen (world_generation world)))
      (world_add_blinker world 2 2)
      (world_step world)
      (and
       (every cell_check_result
             (list (CellValue 0 0 0)
                   (CellValue 0 1 0)
                   (CellValue 0 2 0)
                   (CellValue 0 3 0)
                   (CellValue 0 4 0)
                   (CellValue 1 0 0)
                   (CellValue 1 1 0)
                   (CellValue 1 2 1)
                   (CellValue 1 3 0)
                   (CellValue 1 4 0)
                   (CellValue 2 0 0)
                   (CellValue 2 1 0)
                   (CellValue 2 2 1)
                   (CellValue 2 3 0)
                   (CellValue 2 4 0)
                   (CellValue 3 0 0)
                   (CellValue 3 1 0)
                   (CellValue 3 2 1)
                   (CellValue 3 3 0)
                   (CellValue 3 4 0)
                   (CellValue 4 0 0)
                   (CellValue 4 1 0)
                   (CellValue 4 2 0)
                   (CellValue 4 3 0)
                   (CellValue 4 4 0)))
       (= (world_generation world) (+ gen 1))))))

(xtmtest-result (test_blink_blinker) 1)

(bind-func test_double_blink_blinker
  (lambda ()
    (world_init world 0.0)
    (let ((gen (world_generation world)))
      (world_add_blinker world 2 2)
      (world_step world)
      (world_step world)
      (and
       (every cell_check_result
              (list (CellValue 0 0 0)
                    (CellValue 0 1 0)
                    (CellValue 0 2 0)
                    (CellValue 0 3 0)
                    (CellValue 0 4 0)
                    (CellValue 1 0 0)
                    (CellValue 1 1 0)
                    (CellValue 1 2 0)
                    (CellValue 1 3 0)
                    (CellValue 1 4 0)
                    (CellValue 2 0 0)
                    (CellValue 2 1 1)
                    (CellValue 2 2 1)
                    (CellValue 2 3 1)
                    (CellValue 2 4 0)
                    (CellValue 3 0 0)
                    (CellValue 3 1 0)
                    (CellValue 3 2 0)
                    (CellValue 3 3 0)
                    (CellValue 3 4 0)
                    (CellValue 4 0 0)
                    (CellValue 4 1 0)
                    (CellValue 4 2 0)
                    (CellValue 4 3 0)
                    (CellValue 4 4 0)))
       (= (world_generation world) (+ gen 2))))))

(xtmtest-result (test_double_blink_blinker) 1)

(bind-func test_world_periodic_bc
  (lambda ()
    (world_init world 0.0)
    (world_add_blinker world (random 5) (random 5))
    (let ((w2 (world_copy world)))
      ;; 2 steps for a blinker should return to original state
      (world_step world)
      (world_step world)
      (world_equal world w2))))

(xtmtest-result (test_world_periodic_bc) 1)

(bind-func test_world_foo
  (lambda ()
    (world_init world .3)
    (doloop (i 6)
      (world_ascii_print world)
      (world_step world))))

(xtmtest-result (test_world_foo) 1)
