;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Some more more advanced generics tests
;;

;; DEFINE a type class NUM
;; with FOUR functions (i.e. 4 elements)
;; note that although this class NUM has four functions of the same type
;; there is no need for them all to have the same type, the tuple can
;; include functions of different types.
(bind-type NUM <[!a,!a,!a]*,[!a,!a,!a]*,[!a,!a,!a]*,[!a,!a,!a]*>)

;; first function
(bind-func plus:[!a,NUM*,!a,!a]*
  (lambda (dict a b)
    (let ((f (tref dict 0)))
      (f a b))))

;; second function
(bind-func minus:[!a,NUM*,!a,!a]*
  (lambda (dict a b)
    (let ((f (tref dict 1)))
      (f a b))))

;; third function
(bind-func mul:[!a,NUM*,!a,!a]*
  (lambda (dict a b)
    (let ((f (tref dict 2)))
      (f a b))))

;; fourth function
(bind-func div:[!a,NUM*,!a,!a]*
  (lambda (dict a b)
    (let ((f (tref dict 3)))
      (f a b))))

;;;;
;; Now provide instances f64,f32,i64 and i32 of class NUM
;;;;

;; double INSTANCE of NUM
(bind-func num_f64_plus
  (lambda (a:double b:double)
    (+ a b)))

(bind-func num_f64_minus
  (lambda (a:double b:double)
    (- a b)))

(bind-func num_f64_mul
  (lambda (a:double b:double)
    (* a b)))

(bind-func num_f64_div
  (lambda (a:double b:double)
    (/ a b)))

;; (bind-val NUM_f64 NUM{[double,double,double]*}*)
;; (bind-val NUM_f64 NUM{[double,double,double]*}*)
(bind-val NUM_f64 NUM{double}*)

(xtmtest
 '(bind-func init_num_f64_dict
    (lambda ()
      (set! NUM_f64 (NUM_h num_f64_plus num_f64_minus num_f64_mul num_f64_div))))
 (init_num_f64_dict))
;; finished instance of NUM_double

;; i64 INSTANCE of NUM
(bind-func num_i64_plus
  (lambda (a:i64 b:i64)
    (+ a b)))

(bind-func num_i64_minus
  (lambda (a:i64 b:i64)
    (- a b)))

(bind-func num_i64_mul
  (lambda (a:i64 b:i64)
    (* a b)))

(bind-func num_i64_div
  (lambda (a:i64 b:i64)
    (/ a b)))

(bind-val NUM_i64 NUM{i64}*)

(xtmtest
 '(bind-func init_num_i64_dict
    (lambda ()
      (set! NUM_i64 (NUM_h num_i64_plus num_i64_minus num_i64_mul num_i64_div))))
 (init_num_i64_dict))
;; finished instance of NUM_i64

;; i32 INSTANCE of NUM
(bind-func num_i32_plus
  (lambda (a:i32 b:i32)
    (+ a b)))

(bind-func num_i32_minus
  (lambda (a:i32 b:i32)
    (- a b)))

(bind-func num_i32_mul
  (lambda (a:i32 b:i32)
    (* a b)))

(bind-func num_i32_div
  (lambda (a:i32 b:i32)
    (/ a b)))

(bind-val NUM_i32 NUM{i32}*)

(xtmtest
 '(bind-func init_num_i32_dict
    (lambda ()
      (set! NUM_i32 (NUM_h num_i32_plus num_i32_minus num_i32_mul num_i32_div))))
 (init_num_i32_dict))
;; finished instance of NUM_i32

;; f32 INSTANCE of NUM
(bind-func num_f32_plus
  (lambda (a:float b:float)
    (+ a b)))

(bind-func num_f32_minus
  (lambda (a:float b:float)
    (- a b)))

(bind-func num_f32_mul
  (lambda (a:float b:float)
    (* a b)))

(bind-func num_f32_div
  (lambda (a:float b:float)
    (/ a b)))

(bind-val NUM_f32 NUM{float}*)

(xtmtest
 '(bind-func init_num_f32_dict
    (lambda ()
      (set! NUM_f32 (NUM_h num_f32_plus num_f32_minus num_f32_mul num_f32_div))))
 (init_num_f32_dict))
;; finished instance of f32 NUM


;;;;
;; now test the two instances
;;;;

(xtmtest '(bind-func type_class_test
            (lambda ()
              (println (plus NUM_f32 3.0:f 2.0:f)
                       (minus NUM_f32 3.0:f 2.0:f)
                       (mul NUM_f64 3.0 2.0)
                       (div NUM_i64 12 3))
              (plus NUM_i32 3:i32 2:i32)))
         (type_class_test) 5)



;;;;;;;
;;

(sys:load "libs/core/adt.xtm")

(bind-type ShapeCircle <!a,!a,!a>)
(bind-type ShapeRectangle <!a,!a,!a,!a>)
(bind-type Shape <i64,ShapeCircle{!a}*,ShapeRectangle{!a}*>)


;; note that printout return i32
;; inconsistent with print and println :(
(bind-func print:[void,Shape*]*
  (lambda (s)
    (cond ((= (tref s 0) 1)
           (Circle s
            (lambda (x y z)
              (printout "<Circle " x "," y "," z ">")
              void)
            (lambda ()
              void)))
          ((= (tref s 0) 2)
           (Rectangle s
            (lambda (x y w h)
              (printout "<Rectangle " x "," y "," w "," h ">")
              void)
            (lambda () void)))
          ((= (tref s 0) 3)
           (Blob s
            (lambda ()
              (printout "<Blob>")
              void)
            (lambda () void)))
          (else
           (println "BAD shape")))))

;; constructor
(bind-func Circle:[Shape{!a}*,!a,!a,!a]*
  (lambda (x y z)
    (let ((c (ShapeCircle x y z)))
      (Shape 1 c null))))

;; deconstructor
(bind-func Circle:[!b,Shape{!a}*,[!b,!a,!a,!a]*,[!b]*]*
  (lambda (s success fail)
    (if (<> (tref s 0) 1)
        (fail)
        (let ((c:ShapeCircle* (tref s 1)))
          (success (tref c 0) (tref c 1) (tref c 2))))))

;; constructor
(bind-func Rectangle:[Shape{!a}*,!a,!a,!a,!a]*
  (lambda (x y w h)
    (let ((r (ShapeRectangle x y w h)))
      (Shape 2 null r))))

;; deconstructor
(bind-func Rectangle:[!b,Shape{!a}*,[!b,!a,!a,!a,!a]*,[!b]*]*
  (lambda (s success fail)
    (if (<> (tref s 0) 2)
        (fail)
        (let ((r:ShapeRectangle* (tref s 2)))
          (success (tref r 0) (tref r 1) (tref r 2) (tref r 3))
          (println "bugfixer!")))))

;; constructor
(bind-func Blob:[Shape*]*
  (lambda ()
    (Shape 3 null null)))

;; deconstructor
(bind-func Blob:[!b,Shape{!a}*,[!b]*,[!b]*]*
  (lambda (s success fail)
    (if (<> (tref s 0) 3)
        (fail)
        (success))))

(xtmtest
 '(bind-func make_shapes
   (lambda ()
     (let ((s1 (Circle 1.0 2.0 3.0))
           (s2 (Rectangle 1.0 2.0 3.0 4.0))
           (s3 (Blob))
           (lst (list s1 s2 s3)))
       (for-each (lambda (x) (println x)) lst)
       lst)))
 (make_shapes))




;; (bind-type ShapeCircle <!a,!a,!a>)
;; (bind-type ShapeRectangle <!a,!a,!a,!a>)
;; (bind-type Shape <i64,ShapeCircle{!a}*,ShapeRectangle{!a}*>)

;; (bind-func Circle:[Shape{!a}*,!a,!a,!a]*
;;   (lambda (x y z)
;;     (let ((c (ShapeCircle x y z))
;;           (s (Shape 1 c (cast null))))
;;       s)))

;; (bind-func Rectangle:[Shape{!a}*,!a,!a,!a,!a]*
;;   (lambda (x y w h)
;;     (let ((r (ShapeRectangle x y w h)))
;;       (Shape 2 (cast null) r))))

;; (xtmtest '(bind-func make_shapes
;;             (lambda ()
;;               (let ((s1 (Circle 1.0 2.0 3.0))
;;                     (s2 (Rectangle 1.0 2.0 3.0 4.0)))
;;                 (list s1 s2))))
;;          (make_shapes))
