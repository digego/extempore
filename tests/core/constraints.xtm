;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Tests for constrained generics
;;


;; test_1 overloaded to sqr all integer types (i8,i16,i32,i64)
;; and to sqr root all floating point types (float + double)
;; and to print address of all pointer types

(bind-func test_1:[!a,!a]* -> (lambda (ret x) (t:integer? x))
  (lambda (x)
    (* x x)))

(bind-func test_1:[!a,!a]* -> (lambda (ret x) (t:float? x))
  (lambda (x)
    (sqrt x)))

(bind-func test_1:[!a,!a]* -> (lambda (ret x) (t:pointer? x))
  (lambda (x)
    (println (cast x i8*))
    x))

(xtmtest
 '(bind-func constraint1
    (lambda ()
      (let ((a (test_1 2:i64))
            (b (test_1 9.0:double))
            (c (test_1 2:i16))
            (d (test_1 9.0:float))
            (e:double* (alloc 4))
            (f:float* (alloc 8)))
        (test_1 e)
        (test_1 f)
        (+ (convert a double) (convert b) (convert c) (convert d)))))
 (constraint1) ;; test
 14)     ;; result

;; some tests that SHOULD FAIL!

(println "--------------------------")
(println "The following two tests should both fail constraints tests!")

(xtmtest
 '(bind-func constraint2
    (lambda ()
      (test_1 (tuple 1.0:f 2.0:f 3.0:f))))
 (constraint2)
 'compile-should-fail)

(xtmtest
 '(bind-func constraint3
    (lambda ()
      (test_1 (array 1.0:f 2.0:f 3.0:f))))
 (constraint3)
 'compile-should-fail)

(println "--------------------------")



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; constraint test based on extant poly's
;;
;; the constraint should only be met if
;; a valid 'sqr' has been defined.

;; define two sqr polys (i32 and i64)
(bind-func sqr (lambda (x:i32) (* x x)))
(bind-func sqr (lambda (x:i64) (* x x)))

;; a generic sqr^2 that only accepts types
;; which have a valid sqr definition
(bind-func sqr2:[!a,!a]* -> (lambda (r x) (t:poly-exists? 'sqr `(,x ,x)))
  (lambda (x)
    (sqr (sqr x))))

(xtmtest
 '(bind-func constraint4
    (lambda ()
      (sqr2 2:i32)
      (sqr2 2:i64)))
 (constraint4)
 16)

(println "Constraint5 should fail!")

(xtmtest
 '(bind-func constraint5
    (lambda ()
      (sqr2 2:float)))
 (constraint5)
 'compile-should-fail)

(bind-func sqr (lambda (x:float) (* x x)))

(println "After adding sqr:[float,float]* Constraint6 passes!")

(xtmtest
 '(bind-func constraint6
    (lambda ()
      (sqr2 2:float)))
 (constraint6)
 16.0)

;; -----------------------
;;
;; print for certain tuple arity's
;;

(define my-tuple-chk
  (lambda (x)
    (if (t:notype? x) #t
        (and (t:tuple? x) (t:elts? x 3)))))

(bind-func printer:[void,!a]* -> (lambda (r x) (my-tuple-chk x))
  (lambda (x)
    (println "->" (tref x 0) (tref x 1) (tref x 2))))


(xtmtest
 '(bind-func constraint7
    (lambda ()
      (printer (tuple 1.0:double 2.0:f 3:i32))))
 (constraint7))

;;
;; check for Symbol or String
;;

(bind-func print-str-sym:[void,!a]* -> (lambda (r x) (or (t:named? 'String* x) (t:named? 'Symbol* x)))
  (lambda (x)
    (println "You must be a String or a Symbol! " x)))

(xtmtest
 '(bind-func constraint8
    (lambda ()
      (print-str-sym (String "HI"))))
 (constraint8))

(xtmtest
 '(bind-func constraint9
    (lambda ()
      (print-str-sym (Symbol "HI"))))
 (constraint9))

(println "This should fail! not a string* or a symbol*!")

(xtmtest
 '(bind-func constraint10
    (lambda ()
      (print-str-sym (tuple_ref 1.0:f))))
 (constraint10)
 'compile-should-fail)


;; zip array if arrays if arrays are values
(define zip_array_val_constraint
  (lambda (r a b)
    (if (and (t:array? a)
             (not (t:pointer? a)))
        (list 213
              (list (car a)
                    (* (cadr a) 2)
                    (caddr a))
              a
              b)
        #f)))

(bind-func zip_array_test:[!a,!b,!b]* -> zip_array_val_constraint
  (lambda (aprime bprime)
    (let ((a (ref aprime))
          (b (ref bprime))
          (r (salloc))
          (num (num-of-elts a))
          (i 0))
      (dotimes (i num)
        (aset! r (+ (* i 2) 0) (aref a i))
        (aset! r (+ (* i 2) 1) (aref b i)))
      (pref r 0))))


;; zip array if arrays are pointers
(define zip_array_ptr_constraint
  (lambda (r a b)
    (if (and (t:array? a)
             (t:pointer? a))
        (list 213
              (list (car a)
                    (* (cadr a) 2)
                    (caddr a))
              a b)
        #f)))

(bind-func zip_array_test:[!a,!b,!b]* -> zip_array_ptr_constraint
  (lambda (a b)
    (let ((r (alloc))
          (num (num-of-elts a))
          (i 0))
      (dotimes (i num)
        (aset! r (+ (* i 2) 0) (aref a i))
        (aset! r (+ (* i 2) 1) (aref b i)))
      r)))

(xtmtest
 '(bind-func constraint11
    (lambda ()
      (println (zip_array_test (array_ref 1:i64 2 3 4) (array_ref 0:i64 0 0 0)))
      (println (zip_array_test (array 1.0:f 2.0 3.0 4.0) (array 0.0:f 0.0 0.0 0.0)))
      void))
 (constraint11))
