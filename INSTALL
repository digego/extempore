Installation Instructions
=========================

Prerequisites
=============

Extempore has some library dependencies that
may not be installed on your system.

On OSX:
   - LLVM 3.0
   - pthread (if not using boost)
     OR boost (if not using pthread)
   - pcre (Perl Compatible Regular Expressions)
   - portaudio

On linux:
   - LLVM 3.0 (must be built from source)
   - pthread (if not using boost)
     OR boost (if not using pthread)
   - pcre
   - jack OR portaudio
   - mesa GL (opengl)

On Windows 7:
   - LLVM 3.0
   - pcre
   - boost
   - portaudio


Most of the libraries are pretty standard and will either (a) already
be installed on your system or (b) can usually be easily installed
as from binary packages.

However, LLVM *must* currently be installed from source. The reason
being that a small patch to LLParser.cpp (an LLVM source file) is 
required.

   You can get LLVM src from:
   http://www.llvm.org/

LLVM requires a small patch to the file LLParser.cpp and so must be
built from source. The patch file is availble in the extempore/extras
directory (llparser.patch).  To apply the patch just move into the
llvm/lib/AsmParser directory and then apply the llparser.patch file 
which in can be found in extempore/extras.



Unix Install Instructions
=========================

Patch LLVM (see above)

[~/llvm/lib/AsmParser]$ patch < ~/extempore/extras/llparser.patch 

LLVM must be version 3.0 and must be patched as above.  LLVM also
requires you to set a --prefix location (i.e. where everything will be
installed into). 

# a common build process for LLVM

$ cd ~/llvm/lib/AsmParser
$ patch < ~/extempore/extras/llparser.patch
$ cd ~/llvm
$ mkdir Build
$ ./configure --prefix=~/llvm/Build --enable-optimized
$ make -j4
$ make install


Once all of the libraries required for your platform are installed
you can compile extempore:

# firstly you must point extempore to your llvm Build directory
# by defining the shell variable EXT_LLVM_DIR

# for example
$ export EXT_LLVM_DIR=~/llvm/Build

Then you can build extempore using the all.bash shell script 

$ ./all.bash

Voila ... you should be done.

There are a couple of extra build arguments that you may need to use

1) If you wish to build against the boost library you
need to define EXT_BOOST.

2) If you want to build against the Jack audio library on Linux
you will need to define JACK_AUDIO

So to build against LLVM 3.0 with boost and jack support you would use the
build command:

   ./all.bash -DEXT_BOOST -DJACK_AUDIO




WINDOWS 
======= 

Windows support is new but functional. Boost is mandatory for
Extempore on Windows.  You will need to build PCRE, BOOST, PORTAUDIO 
and LLVM 3.0 for yourself.

The build process is straight forward once you have build the
aforementioned libraries.  The Extempore build script expects
the following to be true:

These are required for includes

a) a directory llvm-3.0 (a straight decompression of the llvm download)
b) a directory boost_1_47_0 (a straight decompression of the boost download)
c) a directory pcre-8.12 (a straight decomp ...)
d) a directory portaudio (a straight decomp ...)

You will need to patch LLVM (see above).

These are required for libs

a) a directory my_llvm_build - use cmake to create then build using msvc
b) a directory my_boost_build - use bjam (see below --build-dir=my_boost_build)
c) a directory my_pcre_build - use cmake to create then build using msvc
d) build portaudio using provided msvc project (portaudio/build/msvc/portaudio.sln)

The extempore directory expects to find itself in the same directory as
all of the directories mentioned above.  Of course you can change all
of this by manually editing extempore/msvc/extempore.vcxproj.

If you have now built everything successfully you should be able to 
build extempore from the command line by:

First set the shells vc/build environment vars:

> cd extempore\msvc
> ms_build_vars.bat

Then you can build extempore ...

> cd extempore
> all.bat

Voila ...


Unfortunately you will need a full version of Visual Studio to get the 64bit 
compiler (cl.exe).


EMACS NOTE: if you choose to use emacs on windows (recommended)
and run extempore in a *shell* or *eshell* then you should
set term=ansi as an option when starting extempore.



Some Windows Build Notes (for me so I don't forget)
=========================================================

(a) Use CMake to build PCRE (my_pcre_build)
(b) Use CMake to Build LLVM (choose 64bit option - my_llvm_build)
(c) Make sure that Debug build mode has _ITERATOR_DEBUG_LEVEL=2 set for both 
    CMAKE_CXX_FLAGS_DEBUG and CMAKE_C_FLAGS_DEBUG (click advanced checkbox in cmake gui) 
(d) Make sure portaudio msvc general project settings are set to static lib
(e) boost command line for bjam is:
:> bjam --build-dir=<dir> toodset=msvc link=static address-model=64 --build-type=complete stage
(f) extempore msvs project settings needs "PCRE_STATIC" to be defined if you want to build against pcre static libs
(g) exteepore msvs project needs EXT_BOOST to be defined
(h) pcreposix.lib needs to come before pcre.lib in link list


Running Extempore
==================

You don't need to do anyting special to run extempore:

   $ ./extempore

There are some optional command line options that you may want to use
you can get a list by running ./extempore --help

Once you've started extempore you can connect using either Telnet,
Emacs (using the included extras/extempore.el file), or vim (using
the included extras/extempore.vim).

If using Telnet the default extempore port to connect to is 7099.

If you want ot use Emacs (recommended) then you'll need to call
"M-x load-file" and then load extempore/extras/extempore.el after you've
started emacs. Then swith to a blank buffer (C-x b - new - return) 
and then (M-x scheme-mode) (M-x extempore-mode) and you're away.
(C-x C-x) to eval an expression.
  
To avoid loading extempore.el everytime you start emacs you'll
probably want to add the following to your ~/.emacs file:

   (autoload 'extempore-mode "/path/to/extempore.el" "" t)

extempore.el can be found in the extras directory.

If you want to use (g)Vim, see the instructions found in
"extras/extempore.vim".
